/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:02:16 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "comlts.ap7nicationerrors.settingLookAndFeel";
      stringArray0[1] = "comlts.ap7nicationerrors.settingLookAndFeel";
      stringArray0[2] = "comlts.ap7nicationerrors.settingLookAndFeel";
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.includes = stringArray0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      archiveScanner0.setBasedir("OE[j q'");
      stringArray0[5] = "comlts.ap7nicationerrors.settingLookAndFeel";
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(13L);
      Vector<Object> vector1 = new Vector<Object>();
      vector1.clear();
      archiveScanner0.filesNotIncluded = vector1;
      Object object0 = new Object();
      vector1.add(object0);
      System.setCurrentTimeMillis((-1292L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2758L);
      Vector<String> vector2 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "comlts.ap7nicationerrors.settingLookAndFeel", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "comlts.ap7nicationerrors.settingLookAndFeel";
      stringArray0[1] = "comlts.ap7nicationerrors.settingLookAndFeel";
      stringArray0[2] = "comlts.ap7nicationerrors.settingLookAndFeel";
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.includes = stringArray0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringArray0[5] = "comlts.ap7nicationerrors.settingLookAndFeel";
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(13L);
      Vector<Object> vector1 = new Vector<Object>();
      vector1.clear();
      archiveScanner0.filesNotIncluded = vector1;
      Object object0 = new Object();
      vector1.add(object0);
      System.setCurrentTimeMillis((-1297L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2747L);
      vector0.iterator();
      Vector<String> vector2 = new Vector<String>();
      System.setCurrentTimeMillis(1175L);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "comlts.ap7nicationerrors.settingLookAndFeel", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = ".ear";
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[5] = ".ear";
      archiveScanner0.includes = stringArray0;
      vector1.spliterator();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      MockFile mockFile0 = new MockFile((File) null, "IO error scanning directory ");
      archiveScanner0.basedir = (File) mockFile0;
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((byte)48);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, ".ear");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9281387959706908
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "source file is neither directory nor file.  File: ";
      stringArray0[1] = "IO errqr scanning directory ";
      stringArray0[2] = "source file is neither directory nor file.  File: ";
      archiveScanner0.excludes = stringArray0;
      stringArray0[3] = ">'wn9Bz>]I8M`1.jar.jar";
      stringArray0[4] = "source file is neither directory nor file.  File: ";
      Vector<String> vector0 = new Vector<String>();
      vector0.toArray(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setBasedir("zaKOpgAGRxFFoA^q\"G");
      vector0.setSize(1);
      stringArray0[5] = "";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)48;
      vector0.removeAll(archiveScanner0.dirsNotIncluded);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      byteArray0[0] = (byte)48;
      vector1.add((Object) "IO errqr scanning directory ");
      archiveScanner0.isExcluded("source file is neither directory nor file.  File: ");
      ImprovedFile improvedFile0 = new ImprovedFile("source file is neither directory nor file.  File: ");
      improvedFile0.createTempDir();
      ImprovedFile.createTempImprovedFile("Error trying to load entry ", "", improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "IO errqr scanning directory ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5366777855438347
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "source file is neither directory nor file.  File: ";
      stringArray0[1] = "IO error scanning directory ";
      stringArray0[2] = "source file is neither directory nor file.  File: ";
      archiveScanner0.excludes = stringArray0;
      stringArray0[3] = ">'wn9Bz>]I8M`1.jar.jar";
      stringArray0[4] = "source file is neither directory nor file.  File: ";
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray1 = DirectoryScanner.DEFAULT_EXCLUDES;
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.setSize(1);
      stringArray0[5] = "";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      vector0.removeAll(archiveScanner0.dirsNotIncluded);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      byteArray0[0] = (byte) (-25);
      DirectoryScanner.matchPatternStart("source file is neither directory nor file.  File: ", "IO error scanning directory ");
      vector1.add((Object) "_Bh.vBSH2/}*6VM#");
      ImprovedFile improvedFile0 = new ImprovedFile("source file is neither directory nor file.  File: ");
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.dirsIncluded = archiveScanner0.dirsNotIncluded;
      archiveScanner0.scandir(improvedFile0, "IO error scanning directory ", false);
      // Undeclared exception!
      try { 
        archiveScanner1.getExcludedDirectories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[24];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[0] = "<?n";
      stringArray0[2] = "<?n";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      Vector<String> vector1 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<?n");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate2);
      predicate3.or(predicate7);
      Predicate<Object> predicate9 = predicate0.negate();
      predicate9.and(predicate6);
      Predicate<Object> predicate10 = predicate6.and(predicate7);
      predicate7.or(predicate8);
      Predicate.isEqual((Object) "<?n");
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      predicate11.or(predicate9);
      predicate2.and(predicate4);
      Object object0 = new Object();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(0L);
      vector1.sort(comparator0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("<?n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5451449283249332
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "source file is neither directory nor file.  File: ";
      stringArray0[1] = "IO error scanning directory ";
      stringArray0[2] = "source file is neither directory nor file.  File: ";
      archiveScanner0.excludes = stringArray0;
      stringArray0[3] = ">'wn9Bz>]I8M`1.jar.jar";
      stringArray0[4] = "source file is neither directory nor file.  File: ";
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray1 = DirectoryScanner.DEFAULT_EXCLUDES;
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.setSize(1);
      stringArray0[5] = "";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[2];
      vector0.removeAll(archiveScanner0.dirsNotIncluded);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      byteArray0[0] = (byte) (-25);
      vector1.add((Object) "_Bh.vBSH2/}*6VM#");
      ImprovedFile improvedFile0 = new ImprovedFile("source file is neither directory nor file.  File: ");
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector2;
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.dirsIncluded = archiveScanner0.dirsNotIncluded;
      archiveScanner0.scandir(improvedFile0, "IO error scanning directory ", true);
      // Undeclared exception!
      try { 
        archiveScanner1.getExcludedDirectories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = ".ear";
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[5] = ".ear";
      archiveScanner0.includes = stringArray0;
      vector1.spliterator();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((byte)48);
      System.setCurrentTimeMillis(0L);
      vector0.add("!");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort(comparator0);
      archiveScanner0.processFile(":");
      System.setCurrentTimeMillis((-1291L));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ".ear";
      stringArray0[4] = ".ear";
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[5] = ".ear";
      archiveScanner0.includes = stringArray0;
      vector1.spliterator();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((byte)48);
      vector1.addAll((Collection<? extends String>) vector0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("=#z4FpG@1(UqWV6TY)Enb-VXc.bak1 (3Z;8mF\"j+)].jar.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "source file is neither directory nor file.  File: ";
      stringArray0[1] = "IO error scanning directory ";
      archiveScanner0.haveSlowResults = true;
      stringArray0[2] = "n+N}#:h!Bq;zi9.jar";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = "IO error scanning directory ";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "source file is neither directory nor file.  File: ";
      archiveScanner0.includes = stringArray0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1;
      integerArray0[2] = (Integer) 2;
      vector0.toArray(integerArray0);
      vector0.retainAll(archiveScanner0.dirsNotIncluded);
      vector0.add("source file is neither directory nor file.  File: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      System.setCurrentTimeMillis(1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ejVn5\"ZD`cEwxW}s9";
      stringArray0[1] = "ejVn5\"ZD`cEwxW}s9";
      stringArray0[2] = "n+N}#:h!!q;zi9.jar";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      stringArray0[5] = "ejVn5\"ZD`cEwxW}s9";
      Vector<Object> vector1 = new Vector<Object>();
      vector1.removeAllElements();
      vector1.add((Object) "ejVn5\"ZD`cEwxW}s9");
      vector1.spliterator();
      Object object0 = new Object();
      vector1.iterator();
      Vector<Object> vector2 = new Vector<Object>();
      Object object1 = new Object();
      vector1.listIterator();
      vector2.iterator();
      vector2.add(object1);
      Object object2 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort(comparator0);
      Integer integer0 = new Integer(1500);
      vector2.containsAll(vector1);
      vector2.add((Object) integer0);
      vector2.clear();
      Vector<Object> vector3 = new Vector<Object>();
      vector3.add((Object) vector2);
      vector0.add((Object) "ejVn5\"ZD`cEwxW}s9");
      archiveScanner0.processDirectory((File) null, "ejVn5\"ZD`cEwxW}s9", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "soumce filZis neithe directory norfile.W File: ";
      stringArray0[1] = "IO error scanning directory ";
      stringArray0[2] = "ze^s:@#'YSLTA>xdB!h";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = "&:";
      stringArray0[4] = "IO error scanning directory ";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector1;
      stringArray0[5] = "soumce filZis neithe directory norfile.W File: ";
      archiveScanner0.includes = stringArray0;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[2] = (Integer) 2;
      vector1.toArray(integerArray0);
      vector1.retainAll(archiveScanner0.dirsNotIncluded);
      vector1.add("l.jar.jar");
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) vector2, (Collection<String>) vector1);
      archiveScanner0.isIncluded("soumce filZis neithe directory norfile.W File: ");
      archiveScanner0.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "LIU#a@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "source file is neither directory nor file.  File: ";
      stringArray0[1] = "IO error scanning directory ";
      stringArray0[2] = "n+N}#:h!Bq;zi9.jar";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = "IO error scanning directory ";
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "source file is neither directory nor file.  File: ";
      archiveScanner0.includes = stringArray0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1;
      integerArray0[2] = (Integer) 2;
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector2;
      vector0.retainAll(archiveScanner0.dirsNotIncluded);
      FileSystemHandling.shouldAllThrowIOExceptions();
      vector0.add("~SD=31@r}E3|s ");
      archiveScanner0.excludes = stringArray0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      archiveScanner0.processArchive((File) null, "]nU2u#jS!fv-");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sou!ce file is neither directory nor file.  File: ";
      stringArray0[2] = "sou!ce file is neither directory nor file.  File: ";
      archiveScanner0.excludes = stringArray0;
      stringArray0[5] = "sou!ce file is neither directory nor file.  File: ";
      stringArray0[5] = "sou!ce file is neither directory nor file.  File: ";
      archiveScanner0.includes = stringArray0;
      Vector<String> vector1 = new Vector<String>();
      vector1.clear();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = (Locale)locale0.clone();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector1);
      locale1.getUnicodeLocaleKeys();
      vector1.retainAll(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      vector1.add("sou!ce file is neither directory nor file.  File: ");
      Vector<Object> vector2 = new Vector<Object>();
      vector2.removeAllElements();
      vector2.add((Object) vector1);
      Vector<String> vector3 = new Vector<String>();
      archiveScanner0.filesExcluded = vector3;
      vector2.spliterator();
      Object object0 = new Object();
      Object object1 = new Object();
      vector2.add(object1);
      Object object2 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      vector2.sort(comparator0);
      vector2.add((Object) "sou!ce file is neither directory nor file.  File: ");
      vector2.clear();
      vector2.iterator();
      archiveScanner0.processArchive((File) null, "sou!ce file is neither directory nor file.  File: ");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = ".ear";
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      stringArray0[5] = ".ear";
      archiveScanner0.includes = stringArray0;
      vector1.spliterator();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((byte)48);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, ".ear");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "";
      archiveScanner0.excludes = stringArray0;
      stringArray0[5] = "";
      stringArray0[5] = "";
      archiveScanner0.includes = stringArray0;
      Vector<String> vector0 = new Vector<String>();
      vector0.clear();
      Vector<String> vector1 = new Vector<String>();
      vector1.spliterator();
      System.setCurrentTimeMillis((byte)48);
      System.setCurrentTimeMillis((byte)48);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2602L));
      System.setCurrentTimeMillis((-2602L));
      System.setCurrentTimeMillis((-2602L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4118L));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "soumce filZis neithe directory norfile.W File: ";
      stringArray0[1] = "IO error scanning directory ";
      stringArray0[2] = "ze^s:@#'YSLTA>xdB!h";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = "&:";
      stringArray0[4] = "IO error scanning directory ";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector1;
      stringArray0[5] = "soumce filZis neithe directory norfile.W File: ";
      archiveScanner0.includes = stringArray0;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[2] = (Integer) 2;
      vector1.toArray(integerArray0);
      DirectoryScanner.matchPatternStart("&:", "soumce filZis neithe directory norfile.W File: ");
      vector1.add("l.jar.jar");
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) vector2, (Collection<String>) vector1);
      archiveScanner0.isIncluded("soumce filZis neithe directory norfile.W File: ");
      archiveScanner0.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "LIU#a@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "source file is neither directory nor file.  File: ";
      stringArray0[1] = "IO error scanning directory ";
      stringArray0[2] = "n+N}#:h!Bq;zi9.jar";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = "IO error scanning directory ";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "source file is neither directory nor file.  File: ";
      archiveScanner0.includes = stringArray0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1;
      integerArray0[2] = (Integer) 2;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector1;
      vector0.toArray(integerArray0);
      vector0.retainAll(archiveScanner0.dirsNotIncluded);
      vector0.add("~SD=31@r}E3|s ");
      archiveScanner0.excludes = stringArray0;
      Integer integer0 = new Integer(0);
      vector1.add((Object) integer0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(0L);
      vector0.sort(comparator0);
      archiveScanner0.processFile("Lxk(\"*\"\"~L`?;I");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = ":";
      stringArray0[4] = ".ear";
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[5] = ".ear";
      archiveScanner0.includes = stringArray0;
      vector1.spliterator();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((byte)48);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, ">'wn9RBz>]IM`1.jar.bak1 (3Z;8mF\"j+)].jar.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[24];
      stringArray0[0] = "<?n";
      stringArray0[2] = "<?n";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      Vector<String> vector0 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<?n");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      predicate5.and(predicate2);
      Predicate<Object> predicate8 = predicate3.or(predicate7);
      Predicate<Object> predicate9 = predicate0.negate();
      predicate9.and(predicate6);
      predicate8.or(predicate9);
      Predicate.isEqual((Object) predicate5);
      predicate7.or(predicate5);
      predicate8.or(predicate3);
      predicate0.and(predicate8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "souce filZis nithe ircory Brf\"l.W Filec ";
      stringArray0[1] = "souce filZis nithe ircory Brf\"l.W Filec ";
      stringArray0[2] = "!Bt96w=VE";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = "!Bt96w=VE";
      stringArray0[4] = "souce filZis nithe ircory Brf\"l.W Filec ";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "souce filZis nithe ircory Brf\"l.W Filec ";
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) "!Bt96w=VE");
      vector1.add((Object) "!Bt96w=VE");
      Object object0 = new Object();
      Integer integer0 = new Integer((-1041));
      vector1.containsAll(vector0);
      Integer integer1 = new Integer((-1041));
      vector1.add((Object) integer1);
      Integer integer2 = new Integer((-89091641));
      vector1.add((Object) "souce filZis nithe ircory Brf\"l.W Filec ");
      Integer integer3 = new Integer(0);
      Vector<Object> vector2 = new Vector<Object>();
      vector0.listIterator(0);
      vector2.add((Object) "#");
      vector2.add((Object) "#");
      vector2.add((Object) "souce filZis nithe ircory Brf\"l.W Filec ");
      Integer integer4 = new Integer(766);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("a_4&nK]<8^u!h++H2[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "soumce filZis neithe dirZctory nGrfile.W File: ";
      stringArray0[1] = "soumce filZis neithe dirZctory nGrfile.W File: ";
      stringArray0[2] = "ze^s:@#'YSLTA>xdB!h";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = "&:";
      stringArray0[4] = "soumce filZis neithe dirZctory nGrfile.W File: ";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "soumce filZis neithe dirZctory nGrfile.W File: ";
      Vector<Object> vector1 = new Vector<Object>();
      Integer integer0 = new Integer(2);
      vector1.add((Object) "ze^s:@#'YSLTA>xdB!h");
      vector1.add((Object) "ze^s:@#'YSLTA>xdB!h");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      vector0.removeIf(predicate3);
      Integer integer1 = new Integer((-1041));
      vector1.containsAll(vector0);
      vector1.add((Object) integer1);
      Integer integer2 = new Integer((-89091621));
      vector1.add((Object) "soumce filZis neithe dirZctory nGrfile.W File: ");
      Integer integer3 = new Integer(0);
      Vector<Object> vector2 = new Vector<Object>();
      vector0.listIterator(0);
      vector2.add((Object) "&:");
      vector2.add((Object) "soumce filZis neithe dirZctory nGrfile.W File: ");
      Integer integer4 = new Integer(766);
      vector2.add((Object) integer4);
      archiveScanner0.processDirectory((File) null, "8", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "soumce filZis neithe dirZctory nGrfile.W File: ";
      stringArray0[1] = "IOLerror scanning directory ";
      stringArray0[2] = "ze^s:@#'YSLTA>xdB!h";
      archiveScanner0.includes = stringArray0;
      stringArray0[3] = "&:";
      stringArray0[4] = "IOLerror scanning directory ";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "soumce filZis neithe dirZctory nGrfile.W File: ";
      Vector<Object> vector1 = new Vector<Object>();
      Integer integer0 = new Integer(2);
      vector1.add((Object) "ze^s:@#'YSLTA>xdB!h");
      vector1.add((Object) "ze^s:@#'YSLTA>xdB!h");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      vector0.removeIf(predicate3);
      Integer integer1 = new Integer((-1041));
      vector1.containsAll(vector0);
      vector1.add((Object) integer1);
      Integer integer2 = new Integer((-89091621));
      vector1.add((Object) "IOLerror scanning directory ");
      Integer integer3 = new Integer(0);
      Vector<Object> vector2 = new Vector<Object>();
      vector0.listIterator(0);
      vector2.add((Object) "&:");
      vector2.add((Object) "IOLerror scanning directory ");
      Integer integer4 = new Integer(766);
      vector2.add((Object) integer4);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[24];
      stringArray0[0] = "<?n";
      stringArray0[2] = "<?n";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      Vector<String> vector0 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<?n");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      predicate5.and(predicate2);
      Predicate<Object> predicate8 = predicate3.or(predicate7);
      Predicate<Object> predicate9 = predicate0.negate();
      predicate9.and(predicate6);
      predicate8.or(predicate9);
      Predicate.isEqual((Object) predicate5);
      predicate7.or(predicate5);
      predicate8.or(predicate3);
      predicate0.and(predicate8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) predicate6);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "<?n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar", ">'wn9RBz>]IM`1.jar");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)6;
      sequenceInputStream1.read(byteArray0);
      byte[] byteArray1 = new byte[9];
      sequenceInputStream0.markSupported();
      sequenceInputStream1.read(byteArray1);
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte)0;
      sequenceInputStream1.read(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      improvedFile0.copyFrom((InputStream) bufferedInputStream0);
      improvedFile0.toURI();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("2sP}y Iux%/=#z4FpG@/=#z4FpG@0=#z4FpG@");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("txTH#a&[H>,J*|#cH", "txTH#a&[H>,J*|#cH");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      ImprovedFile improvedFile2 = new ImprovedFile(">'wn9RBz>]IM`1.jar");
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile2, "txTH#a&[H>,J*|#cH", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar", ">'wn9RBz>]IM`1.jar");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)0;
      sequenceInputStream1.read(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      improvedFile0.copyFrom((InputStream) bufferedInputStream0);
      improvedFile0.toURI();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("2sP}y Iux%/=#z4FpG@/=#z4FpG@0=#z4FpG@");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("txTH#a&[H>,J*|#cH", "txTH#a&[H>,J*|#cH");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      ImprovedFile improvedFile2 = new ImprovedFile(">'wn9RBz>]IM`1.jar");
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile2, "txTH#a&[H>,J*|#cH", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "'LQ.jar");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, (byte[]) null);
      FileSystemHandling.createFolder(evoSuiteFile1);
      ImprovedFile improvedFile0 = new ImprovedFile("r#NDI/nqyM4=LM2", "txTH#a&[H>,J*|#cH");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x=7#L";
      stringArray0[1] = "txTH#a&[H>,J*|#cH";
      stringArray0[2] = "x=7#L";
      stringArray0[3] = "txTH#a&[H>,J*|#cH";
      stringArray0[4] = "x=7#L";
      archiveScanner0.includes = stringArray0;
      improvedFile0.createTempDir("'LQ", "x=7#L");
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ?>) function0);
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function.identity();
      unaryOperator4.apply(unaryOperator3);
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator5.andThen((Function<? super Object, ?>) function0);
      unaryOperator5.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator2.apply(unaryOperator1);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ?>) function0);
      ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Integer, ?>) function0);
      unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator4);
      Function.identity();
      unaryOperator5.apply(unaryOperator4);
      Function.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      unaryOperator6.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator2.apply(unaryOperator1);
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Object, ?>) function0);
      ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Integer, ?>) function0);
      unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator4);
      Function.identity();
      unaryOperator5.apply(unaryOperator4);
      Function.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      unaryOperator6.andThen((Function<? super Object, ?>) function0);
      unaryOperator6.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator2.apply(unaryOperator1);
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Object, ?>) function0);
      ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      sequenceInputStream0.available();
      sequenceInputStream0.mark(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sequenceInputStream1.mark(7);
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 7);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      sequenceInputStream0.mark(0);
      sequenceInputStream0.available();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, dataInputStream0);
      sequenceInputStream3.mark(0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      PipedInputStream pipedInputStream6 = new PipedInputStream();
      sequenceInputStream0.mark(0);
      pipedInputStream3.close();
      PipedInputStream pipedInputStream7 = new PipedInputStream();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      pipedInputStream7.skip(0);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(pipedInputStream3, pipedInputStream7);
      PipedInputStream pipedInputStream8 = new PipedInputStream();
      DirectoryScanner.matchPatternStart("O,In=n]u", ">'wn9RBz>]IM`1.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ?>) function0);
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function.identity();
      unaryOperator4.apply(unaryOperator3);
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator5.andThen((Function<? super Object, ?>) function0);
      unaryOperator5.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply(unaryOperator1);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ?>) function0);
      ImprovedFile improvedFile0 = new ImprovedFile("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      DirectoryScanner.match("=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar", "=#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar");
      try { 
        archiveScanner0.scanArchive(improvedFile0, "/Edit");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, =#z4FpG@0=#z4FpG@.bak.bak1 (3Z;8mF\"j+)].jar.jar
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator3);
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator5);
      Function.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator5);
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ?>) unaryOperator5);
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator3);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator8.apply(unaryOperator0);
      unaryOperator7.compose((Function<? super String, ?>) unaryOperator4);
      unaryOperator8.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator3.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator8.andThen((Function<? super Object, ?>) unaryOperator4);
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator4);
      UnaryOperator.identity();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "cip");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      Function.identity();
      unaryOperator6.apply(unaryOperator5);
      Function.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ?>) unaryOperator5);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator7.compose((Function<? super String, ?>) unaryOperator4);
      unaryOperator8.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator3.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator8.andThen((Function<? super Object, ?>) function0);
      ImprovedFile improvedFile0 = new ImprovedFile("$VALUES");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "$VALUES", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/$VALUES
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      sequenceInputStream1.skip(0L);
      sequenceInputStream0.available();
      sequenceInputStream0.mark(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sequenceInputStream1.mark((-1));
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 7);
      pipedOutputStream0.write(1889);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      sequenceInputStream0.mark(1825);
      sequenceInputStream0.available();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, dataInputStream0);
      sequenceInputStream3.mark(1825);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      PipedInputStream pipedInputStream6 = new PipedInputStream();
      sequenceInputStream0.mark(0);
      PipedInputStream pipedInputStream7 = new PipedInputStream();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(dataInputStream0, sequenceInputStream3);
      PipedInputStream pipedInputStream8 = new PipedInputStream();
      DirectoryScanner.matchPatternStart("O,In=n]u", "O,In=n]u");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "'LQ.jar");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "x=7#L");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      ImprovedFile improvedFile0 = new ImprovedFile("r#NDI/nqyM4=LM2", "txTH#a&[H>,J*|#cH");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("'LQ");
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(">'wn9RBz>]IM`1.jar", ">'wn9RBz>]IM`1.jar");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-56);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3844);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream2.available();
      improvedFile0.setReadable(false);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream3.read(byteArray0);
      improvedFile0.copyFrom((InputStream) sequenceInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
