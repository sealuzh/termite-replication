/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 06:43:30 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("#^Ki{");
      arrayList0.clear();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleNode0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "#^Ki{");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate3.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      predicate5.test(predicate3);
      Predicate<Object> predicate6 = predicate1.and(predicate2);
      predicate6.negate();
      arrayList0.add(">");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add("#^Ki{");
      simpleNode0.dump(">", stringWriter0);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 5;
      SimpleNode simpleNode0 = new SimpleNode(5);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3;
      SimpleNode simpleNode0 = new SimpleNode(3);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<String, Integer> function3 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super String, ? extends Integer>) function3);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Object object0 = new Object();
      Function<String, Object> function4 = unaryOperator1.compose((Function<? super String, ?>) function2);
      Function.identity();
      unaryOperator1.apply(object0);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super String, ?>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      arrayList0.clear();
      UnaryOperator.identity();
      arrayList0.add(">>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("f5>vSOGAQ#t(oh3/", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*rshft</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5849073991677757
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("\"-\"");
      arrayList0.clear();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.test(predicate0);
      predicate3.and(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<Object> predicate8 = predicate5.or(predicate0);
      predicate3.and(predicate8);
      predicate3.negate();
      predicate6.or(predicate5);
      predicate7.negate();
      predicate5.negate();
      UnaryOperator.identity();
      arrayList0.add(">=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      arrayList0.add(">>");
      simpleNode0.dump("<", stringWriter1);
      assertEquals("<NameList>\n  <identifier>*ge</identifier>\n  <identifier>*rshft</identifier>\n</NameList>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-42);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J&*&(");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      arrayList0.add("<=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*le</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      arrayList0.add("&&");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"^(c=OyH0vgF8xHElV");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add("fQBzrJQGyt T6-6%f>@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("Name", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*amp</identifier>\n  <identifier>fQBzrJQGyt T6-6%f>@</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4921990073040585
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.dump("l", stringWriter0);
      Node node0 = simpleNode1.jjtGetChild(0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode2;
      nodeArray0[3] = (Node) simpleNode1;
      nodeArray0[3] = (Node) simpleNode1;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode2;
      nodeArray0[6] = (Node) simpleNode1;
      simpleNode1.children = nodeArray0;
      nodeArray0[4] = (Node) simpleNode0;
      stringWriter0.write((-1983774050));
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      stringWriter1.append('0');
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.trimToSize();
      arrayList0.add("Modifiers");
      StringWriter stringWriter4 = new StringWriter();
      stringWriter1.flush();
      simpleNode1.jjtGetNumChildren();
      SimpleNode simpleNode3 = new SimpleNode(7);
      simpleNode1.jjtAddChild(node0, 7);
      assertEquals(8, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList0.add("EnumConstant");
      arrayList0.clear();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Object object0 = new Object();
      predicate2.test(object0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate2.negate();
      predicate1.negate();
      Object object1 = new Object();
      Predicate.isEqual(object0);
      predicate5.negate();
      predicate3.or(predicate4);
      predicate3.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate2);
      predicate6.negate();
      UnaryOperator.identity();
      arrayList1.add("&");
      StringWriter stringWriter0 = new StringWriter();
      arrayList1.add(".|$~vjMgtT||");
      simpleNode0.dump("!", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*amp</identifier>\n  <identifier>.|$~vjMgtT||</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Object object0 = new Object();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) dataInputStream0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test("%td");
      SimpleNode simpleNode1 = new SimpleNode(37);
      predicate0.test(simpleNode1);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate1.test((Object) null);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      arrayList0.removeIf(predicate3);
      ArrayList<String> arrayList1 = simpleNode1.identifiers;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      arrayList1.add(";");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode1.dump(";", stringWriter0);
      assertEquals("<NameList>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("^GlTe+,UXM", stringWriter0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtGetChild(0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("\"-\"");
      arrayList0.clear();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) fileSystemHandling0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Object object2 = new Object();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) "\"-\"");
      Predicate<Object> predicate8 = predicate2.and(predicate7);
      predicate1.test(arrayList0);
      Predicate<Object> predicate9 = predicate3.or(predicate7);
      Predicate<Object> predicate10 = predicate9.and(predicate5);
      predicate8.or(predicate10);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate9);
      predicate11.negate();
      arrayList0.removeIf(predicate1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      predicate10.negate();
      arrayList0.removeIf(predicate6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('7');
      simpleNode0.dump("r <=[#]{e5", stringWriter1);
      assertEquals("7<NameList>\n  <identifier>*lt</identifier>\n</NameList>\n", stringWriter1.toString());
      assertEquals("7<NameList>\n  <identifier>*lt</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      arrayList0.clone();
      UnaryOperator.identity();
      arrayList0.add("");
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      Function<String, String> function0 = unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, Integer> function1 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function2 = function0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super String, ?>) function2);
      arrayList0.replaceAll(unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator3);
      arrayList0.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList0.add(">=");
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<String, Integer> function3 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super String, ? extends Integer>) function3);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Object object0 = new Object();
      Function<String, Object> function4 = unaryOperator1.compose((Function<? super String, ?>) function2);
      Function.identity();
      unaryOperator1.apply(object0);
      unaryOperator1.apply(function0);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super String, ?>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      arrayList0.clear();
      UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add(">=");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add("{");
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*ge</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2018);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("\"-\"");
      arrayList0.clear();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      arrayList0.add("\"-\"");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.test(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate5.and(predicate4);
      predicate7.and(predicate9);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<Object> predicate10 = predicate6.or(predicate0);
      predicate3.and(predicate10);
      predicate3.negate();
      predicate7.or(predicate6);
      predicate8.negate();
      predicate6.negate();
      UnaryOperator.identity();
      arrayList0.add(">=");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add("vtVKZ([@[m):7~>w'1Gi");
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4967163040280096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*lt");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.parser = javaParser0;
      SimpleNode simpleNode1 = (SimpleNode)simpleNode0.parser.currNode;
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.dump("*lt", (Writer) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "", 0, 0);
      simpleNode0.dump("", stringWriter0);
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 570);
      simpleNode0.setIdentifier("B-G~kxZO!o7nN");
      stringWriter0.append('>');
      SimpleNode simpleNode2 = new SimpleNode(simpleNode0.parser, 1);
      simpleNode0.dump("", stringWriter1);
      simpleNode1.dump("", stringWriter0);
      simpleNode2.jjtGetNumChildren();
      simpleNode0.dump("", stringWriter1);
      simpleNode0.jjtGetParent();
      assertEquals(571, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.097532214532607
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.toString();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "EnumConstant");
      simpleNode0.setIdentifier("<");
      SystemInUtil.addInputLine("<zzC~:';oKzluGl3I*");
      SimpleNode simpleNode1 = new SimpleNode(3);
      simpleNode0.toString();
      simpleNode0.setIdentifier("}");
      SimpleNode simpleNode2 = new SimpleNode(10);
      stringWriter0.append('z');
      simpleNode0.dump(">>", stringWriter1);
      assertEquals("EnumConstantz<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n", stringWriter1.toString());
      assertEquals("EnumConstantz<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7734691240457252
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.parser = javaParser0;
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.setIdentifier("l");
      javaParser0.VariableInitializer();
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.dump("l", stringWriter0);
      SimpleNode simpleNode2 = (SimpleNode)simpleNode1.jjtGetChild(0);
      SimpleNode simpleNode3 = (SimpleNode)simpleNode1.jjtGetChild(0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode3;
      nodeArray0[1] = (Node) simpleNode3;
      nodeArray0[2] = (Node) simpleNode3;
      nodeArray0[3] = (Node) simpleNode1;
      simpleNode0.jjtSetParent(simpleNode3);
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode2;
      nodeArray0[6] = (Node) simpleNode1;
      simpleNode1.children = nodeArray0;
      simpleNode1.toString();
      Node[] nodeArray1 = new Node[4];
      nodeArray1[0] = (Node) simpleNode3;
      simpleNode3.jjtAddChild(nodeArray0[5], 2189);
      nodeArray1[1] = (Node) simpleNode2;
      nodeArray0[6] = (Node) simpleNode1;
      simpleNode1.children = nodeArray1;
      simpleNode1.toString("CompilationUnit");
      simpleNode3.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode2.toString("CompilationUnit");
      // Undeclared exception!
      simpleNode2.dump((String) null, stringWriter0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(":c");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      arrayList0.clear();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qCLVy9449l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JQ");
      arrayList0.add(">");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":c");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JQ");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("[Df5W", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("&&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaParser0.Modifiers();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      SimpleNode simpleNode1 = new SimpleNode((-4505));
      simpleNode0.jjtSetParent(simpleNode1);
      Node node0 = simpleNode0.jjtGetParent();
      assertEquals(0, node0.jjtGetNumChildren());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1214104753232883
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(16);
      StringWriter stringWriter0 = new StringWriter(16);
      SimpleNode simpleNode1 = new SimpleNode(16);
      simpleNode1.jjtAddChild(simpleNode0, 16);
      simpleNode1.dump("[hDUtBPk", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild((-1835));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1835
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5849073991677757
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(56);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("\"-\"");
      arrayList0.clear();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      arrayList0.add("\"-\"");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.test(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate1);
      predicate5.negate();
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate0.or(predicate4);
      predicate8.and(predicate7);
      predicate6.negate();
      predicate9.or(predicate5);
      predicate0.negate();
      predicate2.negate();
      UnaryOperator.identity();
      arrayList0.add("<<");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add(">=");
      simpleNode0.dump("\"&=\"", stringWriter0);
      assertEquals("<CastLookahead>\n  <identifier>\"-\"</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</CastLookahead>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6017766353206057
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'a';
      charArray0[2] = 'j';
      simpleNode0.dump("6]08mhzIlh'G", stringWriter0);
      charArray0[3] = '\'';
      charArray0[4] = '~';
      charArray0[5] = '%';
      stringWriter0.write(charArray0);
      stringWriter0.write((int) (byte)92);
      StringWriter stringWriter1 = new StringWriter((byte)92);
      stringWriter1.write((int) (byte)92);
      StringWriter stringWriter2 = new StringWriter(0);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter1.append('f');
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.trimToSize();
      arrayList0.add("||-JiBH\"jtF*I");
      StringWriter stringWriter5 = new StringWriter();
      simpleNode0.dump("<", stringWriter5);
      assertEquals("<CompilationUnit>\n  <identifier>||-JiBH\"jtF*I</identifier>\n</CompilationUnit>\n", stringWriter5.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-3642));
      Node[] nodeArray0 = new Node[8];
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 29);
      int int0 = 31;
      simpleNode0.jjtGetNumChildren();
      Node node1 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(29);
      char[] charArray0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1789569704));
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1103541282));
      // Undeclared exception!
      try { 
        simpleNode0.toString("o>m\"\"pJ%f9Ynjk#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1103541282
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      StringReader stringReader1 = new StringReader("4xW)1mj[Z,!");
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-2978));
      int int0 = 3524;
      simpleNode0.jjtAddChild((Node) null, 3524);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(28);
      int int1 = 25;
      StringWriter stringWriter0 = new StringWriter(25);
      String string0 = null;
      StringReader stringReader2 = new StringReader("1^>E5'C)>ZUW \"::[J");
      JavaParser javaParser1 = new JavaParser(stringReader0);
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1148);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      Node node0 = javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1841830815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1715, (byte)67);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-6274), 3322, (-112));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3639);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1075307805));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      StringReader stringReader0 = new StringReader("d$m@9]JV,@7&O");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d$m@9]JV,@7&O");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d$m@9]JV,@7&O");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(639);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("XT  QSQ ^^w~83O");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      arrayList0.retainAll(linkedList0);
      arrayList0.add(")G");
      arrayList0.clear();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")G");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      arrayList0.add((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")G");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      arrayList0.replaceAll(unaryOperator0);
      Function<String, String> function0 = unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) function0);
      arrayList0.replaceAll(unaryOperator2);
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add(">=");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('J');
      simpleNode0.dump(">=", stringWriter0);
      simpleNode0.dump("dE|S/_ALg3Cl'9C", stringWriter0);
      assertEquals("J<NameList>\n  <identifier>*ge</identifier>\n</NameList>\n<NameList>\n  <identifier>*ge</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{`wHHi, H?5LP~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, (-6254807));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-702));
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      SimpleNode simpleNode1 = new SimpleNode(57);
      nodeArray0[7] = (Node) simpleNode1;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtClose();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      assertFalse(simpleNode0.equals((Object)simpleNode1));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&<EQp-g");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1612, 1612);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-9));
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'a';
      charArray0[2] = 'j';
      charArray0[3] = '\'';
      charArray0[4] = '~';
      stringWriter0.write(charArray0);
      stringWriter0.write((int) (byte)96);
      StringWriter stringWriter1 = new StringWriter((byte)96);
      stringWriter1.write((int) (byte)96);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter('a');
      stringWriter1.append('f');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.trimToSize();
      arrayList0.add("||-JiBH\"jtF*I");
      StringWriter stringWriter4 = new StringWriter();
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (byte)96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.329472493497417
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d$m@9]JV,@7&O");
      StringReader stringReader1 = new StringReader("u-K/zx9)Bc");
      JavaParser javaParser0 = new JavaParser(stringReader1);
      javaParser0.AndExpression();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 68);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream(68);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream0.markSupported();
      byte byte0 = (byte)81;
      byte byte1 = (byte)37;
      byte byte2 = (byte) (-91);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)63;
      try { 
        bufferedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
