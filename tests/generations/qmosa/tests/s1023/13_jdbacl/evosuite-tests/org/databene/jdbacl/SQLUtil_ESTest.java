/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:08:43 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.FileDescriptor;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.HalfOuterJoinNode;
import org.apache.derby.impl.sql.compile.NodeFactoryImpl;
import org.apache.derby.impl.sql.compile.PredicateList;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics;
import org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;
import org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.expression.Parameter;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XSAM0.S";
      stringArray0[1] = "5<msq@Eqn*_y:5'M1";
      stringArray0[2] = "DROP_SEQUENCE";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "alter index";
      stringArray0[5] = "setDouble(String,double)";
      stringArray0[6] = ".";
      stringArray0[7] = "!0D}]p";
      stringArray0[8] = "alter indexb";
      SQLUtil.renderColumnNames(stringArray0);
      TableContainer tableContainer0 = new TableContainer(".");
      tableContainer0.getTable("alter indexb");
      tableContainer0.isIdentical((DBObject) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SXcn51VgU[[", (DBTable) null, 13, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isDDL("drop materialized view");
      SQLUtil.removeComments("");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "BXy;U/dD9(MO|vG", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLUtil.removeComments("kV-%@C*sjZt!B27As");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      Character character0 = new Character('p');
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      NodeFactoryImpl nodeFactoryImpl0 = new NodeFactoryImpl();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      String string0 = SQLUtil.renderValue(halfOuterJoinNode0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C$\"}Il}}");
      StringReader stringReader1 = new StringReader("dip \"nd");
      stringReader1.read();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.nval = 1.7976931348623157E308;
      streamTokenizer1.commentChar(39);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      SQLUtil.renderNumber(streamTokenizer1);
      String string0 = "\"$`9UN6806.w";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"$`9UN6806.w";
      stringArray0[1] = null;
      stringArray0[2] = "dip \"nd";
      stringArray0[3] = "C$\"}Il}}";
      stringArray0[4] = null;
      stringArray0[5] = "9223372036854775807";
      // Undeclared exception!
      try { 
        Charset.forName(stringArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(97);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.119865455111976
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T7kJ(#82XKlR:m");
      String string0 = SQLUtil.substituteMarkers("T7kJ(#82XKlR:m", "T7kJ(#82XKlR:m", "execbzb?47rfn,d^kj");
      assertEquals("'execbzb?47rfn,d^kj'", string0);
      
      SQLUtil.isDDL("execbzb?47rfn,d^kj");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T7kJ(#82XKlR:m", defaultDBTable0, 2426, "execbzb?47rfn,d^kj");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SttementCache");
      assertNull(boolean0);
      
      SQLUtil.isDML("T7kJ(#82XKlR:m");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.h2.util.TempFileDeleter";
      stringArray0[1] = "CHECK ";
      stringArray0[2] = "F>^RP";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CHECK ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "delete", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-JE?YnE", (Object[]) dBColumnArray0);
      PrintWriter printWriter1 = printWriter0.append('$');
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '$';
      mockPrintWriter0.close();
      printWriter1.print(charArray0);
      pipedOutputStream0.close();
      printWriter1.print(true);
      printWriter0.print(123);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter1);
      Random.setNextRandom(123);
      Boolean boolean1 = SQLUtil.mutatesStructure("execbzb?47rfn,d^kj");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "insertifpiet";
      stringArray0[2] = "insertifpiet";
      stringArray0[4] = "insertifpiet";
      DBDataType dBDataType0 = DBDataType.getInstance(90, "rename");
      Integer integer0 = new Integer((-54659072));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("e|OSgvndi7");
      tableContainer0.getTable("mh_HuQw");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SET UER>#c4_TIMEUT ?", (DBTable) null, dBDataType0, integer2, integer2);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) "mh_HuQw");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SET UER>#c4_TIMEUT ?", (DBTable) null, dBDataType0, integer1, (Integer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBColumn0.setDefaultValue("insertifpiet");
      Boolean boolean0 = new Boolean(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SET UER>#c4_TIMEUT ? RENAME(0,0) DEFAULT insertifpiet NULL", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4620975966507315
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      System.setCurrentTimeMillis(17979222801250304L);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = SQLUtil.isDML("callselect attname from pg_catalog.pg_attribute where attrelid = ? and attnum = ?");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "callselect attname from pg_catalog.pg_attribute where attrelid = ? and attnum = ?";
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy1 = new ThreadPoolExecutor.CallerRunsPolicy();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "callselect attname from pg_catalog.pg_attribute where attrelid = ? and attnum = ?", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"callselect attname from pg_catalog.pg_attribute where attrelid = ? and attnum = ?\" UNIQUE (, callselect attname from pg_catalog.pg_attribute where attrelid = ? and attnum = ?, )", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8130297396806005
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&hB[b5Pl";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&hB[b5Pl", true, stringArray0);
      Character character0 = Character.valueOf('i');
      Character.isBmpCodePoint(0);
      Character.isSurrogate('i');
      Character.isSurrogate('i');
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Commit called with current xid", 115);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Character.isSurrogate('j');
      dBPrimaryKeyConstraint0.equals(character0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.join((String) null, "PRIMARY KEY (&hB[b5Pl)", stringArray0, "j,vvA?g@20rTm+", "TANH(double)", stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.&hB[b5Pl", string0);
      
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (&hB[b5Pl)", string1);
      
      System.setCurrentTimeMillis(2155L);
      Object object0 = new Object();
      SQLUtil.substituteMarkers("~d{YESt'!E&}S;/x", "REPEAT", object0);
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT &hB[b5Pl ", string2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "&hB[b5Pl";
      objectArray0[1] = (Object) "PRIMARY KEY (&hB[b5Pl)";
      objectArray0[2] = (Object) "PRIMARY KEY (&hB[b5Pl)";
      objectArray0[3] = (Object) "j,vvA?g@20rTm+";
      objectArray0[4] = (Object) "&hB[b5Pl";
      objectArray0[5] = (Object) "~d{YESt'!E&}S;/x";
      objectArray0[6] = (Object) character0;
      String string3 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("&hB[b5Pl = '&hB[b5Pl'", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4651935718829296
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)85;
      String string0 = SQLUtil.removeComments("\n/*G^iret looka */");
      assertEquals("\n", string0);
      
      SQLUtil.parseColumnTypeAndSize("\n/*G^iret looka */");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " REFERENCES ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "\n";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" REFERENCES ", true, dBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" REFERENCES \" FOREIGN KEY (\n) REFERENCES null(\n)", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0268410171566857
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "insertifpiet";
      stringArray0[2] = "insertifpiet";
      stringArray0[4] = "insertifpiet";
      DBDataType dBDataType0 = DBDataType.getInstance(90, "rename");
      Integer integer0 = new Integer((-54659072));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("e|OSgvndi7");
      tableContainer0.getTable("mh_HuQw");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SET QUERY_TIMEOUT ?", (DBTable) null, dBDataType0, integer2, integer2);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "mh_HuQw");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter session", (DBTable) null, dBDataType0, integer1, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder1);
      assertEquals("mh_HuQwRENAME(3)", stringBuilder1.toString());
      
      Boolean boolean0 = new Boolean(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SET QUERY_TIMEOUT ? RENAME(0,0) NULL", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4701374856066742
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alFer mateOiClizU zi&w]($d";
      DBSchema dBSchema0 = new DBSchema("`z[MyDH!N(czF");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alFer mateOiClizU zi&w]($d", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.mutatesDataOrStructure("alFer mateOiClizU zi&w]($d");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Random.setNextRandom(42);
      SQLUtil.renderValue(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLUtil.isQuery("select");
      PredicateList predicateList0 = new PredicateList();
      BasicUUID basicUUID0 = new BasicUUID("select");
      basicUUID0.toHexString();
      BasicUUID basicUUID1 = new BasicUUID();
      basicUUID0.stringWorkhorse('.');
      byte[] byteArray0 = new byte[2];
      BasicUUID basicUUID2 = null;
      try {
        basicUUID2 = new BasicUUID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "/]!74zo653[OWkymOZ");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("c|-Nq$[c(HI3)(vxs4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"HI3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8742830984023096
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "callwhere", "call");
      Integer integer0 = RawTransaction.ABORT;
      dBCheckConstraint0.equals("BCmhu{%1t;,W4?h4");
      dBCheckConstraint0.setName("call");
      dBCheckConstraint0.setDoc("\"98ozB\"=rk3OO&1F");
      dBCheckConstraint0.setName(";#^eNHw0'5{S/K=O");
      dBCheckConstraint0.toString();
      Parameter parameter0 = new Parameter(1);
      parameter0.getPrecision();
      parameter0.getPrecision();
      dBCheckConstraint0.equals(parameter0);
      dBCheckConstraint0.isEquivalent(dBCheckConstraint0);
      dBCheckConstraint0.isEquivalent(dBCheckConstraint0);
      dBCheckConstraint0.setName("BCmhu{%1t;,W4?h4");
      dBCheckConstraint0.setName("BCmhu{%1t;,W4?h4");
      dBCheckConstraint0.isEquivalent(dBCheckConstraint0);
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("BCmhu{%1t;,W4?h4");
      dBCheckConstraint0.setDoc("\"98ozB\"=rk3OO&1F");
      dBCheckConstraint0.equals((Object) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec1);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2997242221770993
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized ziew]($dn");
      SQLUtil.isDDL("updaterenamereadonlyaccess");
      StringWriter stringWriter0 = new StringWriter();
      SQLUtil.mutatesDataOrStructure("updaterenamereadonlyaccess");
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.63362364351571
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("RETURNCODE", 308);
      boolean boolean0 = new Boolean(false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" WHERE ", false, "//", " WHERE ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      SQLUtil.isProcedureCall(" WHERE ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K^tS:`5+lv");
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      dBCheckConstraint0.equals(evoSuiteRemoteAddress0);
      Object object0 = new Object();
      defaultDBTable0.equals(object0);
      SQLUtil.normalize("\n/* direct lookup */", false);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'K^tS:`5+lv' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "M";
      Integer integer0 = new Integer(13);
      Integer.getInteger("y[NJr1!HxPqT20");
      Integer integer1 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable((String) null, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}k;kp", (DBTable) null, (byte)88, "rop inex");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBCatalog0.isIdentical(dBColumnArray0[0]);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.toString();
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBColumn[] dBColumnArray1 = new DBColumn[4];
      dBColumnArray1[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[3] = (DBColumn) defaultDBColumn0;
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setLoginTimeout(1032);
      pGConnectionPoolDataSource0.setTcpKeepAlive(true);
      pGConnectionPoolDataSource0.getLogWriter();
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";#^eNHw0'5{S/K=O", true, "renamereadonlyaccess", "callwhere");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setOwner(compositeDBObject0);
      dBCheckConstraint0.setName("exec");
      dBCheckConstraint0.equals("renamereadonlyaccess");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT exec ", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 77;
      StringBuilder stringBuilder0 = new StringBuilder(77);
      StringBuilder stringBuilder1 = new StringBuilder(77);
      StringBuilder stringBuilder2 = new StringBuilder(77);
      stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      StringReader stringReader0 = new StringReader("C$\"}Il}}");
      StringReader stringReader1 = new StringReader("dip \"nd");
      stringReader0.close();
      stringReader1.skip((byte)85);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.nextToken();
      String string0 = SQLUtil.renderNumber(streamTokenizer1);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(77);
      StringBuilder stringBuilder1 = new StringBuilder(77);
      stringBuilder1.reverse();
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      stringBuilder0.append((float) 77);
      StringBuilder stringBuilder3 = stringBuilder2.append("-webPort");
      stringBuilder3.codePoints();
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";#^eNHw0'5{S/K=O", false, "+:mpgT7%& k8$", "callwhere");
      dBCheckConstraint0.setName("exec");
      dBCheckConstraint0.equals("+:mpgT7%& k8$");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "selectrename";
      String string1 = "7GkgBjj\"9OP,KI";
      String string2 = " WHERE ";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" WHERE ", false, "selectrename", " WHERE ");
      dBCheckConstraint0.setName((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      SQLUtil.isDDL("7GkgBjj\"9OP,KI");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = new Boolean("alter materialized ziew]($d");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter materialized ziew]($d";
      stringArray0[1] = "alter materialized ziew]($d";
      stringArray0[2] = "alter materialized ziew]($d";
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byte byte0 = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)111;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append('o');
      int int0 = 229;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(229, (double) (byte)111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 229
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("renamealter tablereadonlyaccess", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      StringBuilder stringBuilder1 = new StringBuilder(301);
      String string0 = "0GHm\"GaNb'h";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "0GHm\"GaNb'h");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) dataDictionaryImpl0);
      dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.derby.impl.sql.catalog.DataDictionaryImpl cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9582149311117809
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " as ";
      stringArray0[1] = "D9Qd)\"[m~Z";
      stringArray0[2] = "Rkz(umElB";
      stringArray0[3] = "p`M^E<[6$l}";
      stringArray0[4] = "p`M^E<[6$l}";
      stringArray0[5] = "insertnt))mtn~b[_am_f";
      stringArray0[6] = "lo_open";
      stringArray0[7] = "org.apache.derby.iapi.services.context.SystemContext";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectl93e#o9zjyc~mk");
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("selectl93e#o9zjyc~mk", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource2.setSsl(false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.getLoginTimeout();
      PGConnectionPoolDataSource pGConnectionPoolDataSource4 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource5 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource2.setPortNumber(141);
      PGConnectionPoolDataSource pGConnectionPoolDataSource6 = new PGConnectionPoolDataSource();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("c|-Nq$[c(HI3)(vxs4", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";#^eNHw0'5{S/K=O", true, "renamereadonlyaccess", "callwhere");
      dBCheckConstraint0.setName("r5~%HSUg");
      dBCheckConstraint0.equals("r5~%HSUg");
      Character character0 = Character.valueOf('o');
      dBCheckConstraint0.equals(character0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT r5~%HSUg ", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(4641);
      DBDataType dBDataType0 = DBDataType.getInstance(90069, ")");
      Integer integer0 = new Integer(138);
      Integer.max(219, 90069);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = new Integer(138);
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer integer7 = RawTransaction.COMMIT;
      Integer.max((-379877331), 90069);
      Integer integer8 = Integer.getInteger("e|OSgvndi7", integer1);
      Integer.getInteger("e|OSgvndi7", integer5);
      Integer.getInteger(")", integer4);
      StringBuilder stringBuilder1 = new StringBuilder();
      Integer.max(138, 90069);
      Integer integer9 = RawTransaction.LOCK_ESCALATE;
      Integer integer10 = RawTransaction.ABORT;
      Parameter parameter0 = new Parameter(138);
      stringBuilder1.append((Object) parameter0);
      Integer integer11 = RawTransaction.ABORT;
      stringBuilder1.append(138);
      Integer.toUnsignedString(138);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer3, integer8);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(")(0,3)", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(")(0,3)", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      ErrorMessages errorMessages0 = new ErrorMessages();
      Thread thread0 = MockThread.currentThread();
      Thread[] threadArray0 = new Thread[3];
      threadArray0[0] = thread0;
      String string0 = null;
      String string1 = "";
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.655684538072062
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDDL("execbzb?47rfn,d^kj");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T7kJ(#82XKlR:m", defaultDBTable0, 2426, "execbzb?47rfn,d^kj");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SttementCache");
      assertNull(boolean0);
      
      SQLUtil.isDML("T7kJ(#82XKlR:m");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("MJE?YnE", (Object[]) dBColumnArray0);
      PrintWriter printWriter1 = printWriter0.append('$');
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '$';
      printWriter1.print(4);
      mockPrintWriter0.close();
      mockPrintWriter0.print(charArray0);
      pipedOutputStream0.close();
      PrintWriter printWriter2 = mockPrintWriter0.format("SttementCache", (Object[]) dBColumnArray0);
      mockPrintWriter0.print(false);
      printWriter1.print(123);
      printWriter2.println((-3853.344819104));
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter2);
      Boolean boolean1 = SQLUtil.mutatesStructure("\"aQ7P5Kyx+x)");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "c|-Nq$[c(HI3)(vxs4";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("c|-Nq$[c(HI3)(vxs4", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "alter materialized ziew]($d";
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(4644);
      DBDataType dBDataType0 = DBDataType.getInstance(90069, ")");
      Integer integer0 = new Integer(138);
      Integer.max(203, 90069);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = new Integer(138);
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger("RA`',zH~x", integer6);
      int int0 = new Integer(90069);
      Integer integer7 = Integer.getInteger("e|OSgvndi7", integer1);
      Integer.getInteger("e|OSgvndi7", integer5);
      Integer.getInteger(")", integer4);
      StringBuilder stringBuilder1 = new StringBuilder();
      Integer.max(138, 90069);
      Integer integer8 = RawTransaction.LOCK_ESCALATE;
      Integer integer9 = RawTransaction.SAVEPOINT_ROLLBACK;
      Parameter parameter0 = new Parameter(138);
      stringBuilder1.append((Object) parameter0);
      Integer integer10 = RawTransaction.ABORT;
      stringBuilder1.append(138);
      Integer.toUnsignedString(138);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer3, integer7);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(")(0,0)", stringBuilder0.toString());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "ML>5e9j>Z`WQvcc";
      stringArray0[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, ML>5e9j>Z`WQvcc, )", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]($Dn";
      stringArray0[1] = "]($Dn";
      stringArray0[2] = "]($Dn";
      stringArray0[4] = "]($Dn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]($Dn");
      stringArray0[1] = "]($Dn";
      SQLUtil.renderColumnListWithTableName("kV-%@Cz*s;ZI!B$27As", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "kV-%@Cz*s;ZI!B$27As";
      stringArray1[1] = "]($Dn";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("]($Dn", stringArray0, "kV-%@Cz*s;ZI!B$27As", "]($Dn", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(2613);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ONCE";
      stringArray0[1] = "ONCE";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "ONCE";
      stringArray1[1] = "ONCE";
      String string0 = SQLUtil.innerJoin("ONCE", stringArray0, "select into[{$n?zf?", "select into[{$n?zf?", stringArray1);
      assertEquals("select into[{$n?zf? as select into[{$n?zf? on ONCE.ONCE = select into[{$n?zf?.ONCE and ONCE.ONCE = select into[{$n?zf?.ONCE", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop index";
      stringArray0[2] = " WHERE ";
      stringArray0[3] = "drop index";
      stringArray0[4] = "drop index";
      stringArray0[5] = "drop index";
      stringArray0[6] = "NCLOB";
      stringArray0[7] = "~cn:J MD1xYRvT";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NCLOB", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (drop index, drop index,  WHERE , drop index, drop index, drop index, NCLOB, ~cn:J MD1xYRvT)", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3327503268502556
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.mutatesStructure("execbzb?47rfn,d^kj");
      SQLUtil.isDDL("execbzb?47rfn,d^kj");
      SQLUtil.mutatesDataOrStructure("execbzb?47rfn,d^kj");
      SQLUtil.isDDL("execbzb?47rfn,d^kj");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "M";
      stringArray0[2] = "alter index";
      stringArray0[3] = "alter session$hs|7.si|fya[.";
      stringArray0[4] = "M";
      stringArray0[5] = "M";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter session$hs|7.si|fya[.", true, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("M", stringBuilder0);
      stringBuilder1.append((CharSequence) stringBuilder0);
      SQLUtil.addRequiredCondition("alter session$hs|7.si|fya[.", stringBuilder1);
      StringBuilder stringBuilder2 = stringBuilder1.append((-623L));
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(97);
      StringBuilder stringBuilder1 = new StringBuilder(97);
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.reverse();
      StringBuilder stringBuilder4 = stringBuilder2.reverse();
      StringBuilder stringBuilder5 = stringBuilder4.append("-webPort");
      stringBuilder4.codePoints();
      stringBuilder5.append((String) null);
      stringBuilder3.codePoints();
      SQLUtil.addOptionalCondition("u", stringBuilder3);
      assertEquals("u", stringBuilder3.toString());
      assertEquals("u", stringBuilder1.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("DES/CBC/NoPadding", 522);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      SQLUtil.normalize("getString(String)", true);
      System.setCurrentTimeMillis(4329L);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean.valueOf("M");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dDn";
      stringArray0[1] = "drop tablem";
      stringArray0[2] = "dDn";
      stringArray0[1] = "}bD9E,DL9?";
      stringArray0[4] = "dDn";
      stringArray0[5] = "drop tablem";
      stringArray0[6] = "drop tablem";
      stringArray0[7] = "o9jiquxA+wAZ";
      stringArray0[8] = "dDn";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("dDn", true, defaultDBTable0, stringArray0);
      DBNonUniqueIndex dBNonUniqueIndex1 = new DBNonUniqueIndex("drop tablem", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex1);
      DBDataType dBDataType0 = DBDataType.getInstance(1545, "/org/h2/res/_messages_");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`FY4sp*<o0D2F&bBM", defaultDBTable0, dBDataType0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread();
      SelectNode selectNode0 = new SelectNode();
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.stringWorkhorse('9');
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      PredicateList predicateList0 = new PredicateList();
      SelectNode selectNode1 = new SelectNode();
      SelectNode selectNode2 = new SelectNode();
      SelectNode selectNode3 = new SelectNode();
      // Undeclared exception!
      try { 
        selectNode3.getDependencyManager();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)97;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter sessionifpiet", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringReader stringReader0 = new StringReader("C$\"}Il}}");
      StringReader stringReader1 = new StringReader("dip \"nd");
      stringReader0.close();
      stringReader1.skip((byte)97);
      StringBuilder stringBuilder0 = new StringBuilder("C$\"}Il}}");
      stringBuilder0.reverse();
      BasicUUID basicUUID0 = new BasicUUID((byte)97, (byte)97, (byte)97);
      basicUUID0.toString();
      String string0 = SQLUtil.normalize("C$\"}Il}}", false);
      assertEquals("C $ \"}Il}}\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.298464654860792
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("fiLTDQwZba'~T-");
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MockThread mockThread0 = new MockThread("execalteu tablereadonlyaccess");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "N-LwJ_h\n", 19L);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler1 = mockThread1.getUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler1);
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler2 = mockThread0.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler2);
      MockThread mockThread2 = new MockThread(mockThread1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("alter session");
      Random.setNextRandom(3034);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0647549344121345
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Schema", 403);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = new Boolean("alter materiali#d ziew?($d");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter materiali#d ziew?($d";
      stringArray0[1] = "alter materiali#d ziew?($d";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materiali#d ziew?($d");
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("alter materiali#d ziew?($d = 'alter materiali#d ziew?($d' AND alter materiali#d ziew?($d = 'alter materiali#d ziew?($d'", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("l*Y7u&Ic/9HTa2~K_s", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (alter materiali#d ziew?($d, alter materiali#d ziew?($d) REFERENCES alter materiali#d ziew?($d(alter materiali#d ziew?($d, alter materiali#d ziew?($d)", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "M";
      Integer integer0 = new Integer((-28));
      Integer.getInteger("y[NJr1!HxPqT20");
      Integer integer1 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable((String) null, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}k;kp", (DBTable) null, (byte)88, "rop inex");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBCatalog0.isIdentical(dBColumnArray0[0]);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumn(dBColumnArray0[1]);
      DBColumn[] dBColumnArray1 = new DBColumn[4];
      dBColumnArray1[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[3] = (DBColumn) defaultDBColumn0;
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      ErrorMessages errorMessages0 = new ErrorMessages();
      Thread thread0 = MockThread.currentThread();
      Thread[] threadArray0 = new Thread[1];
      threadArray0[0] = thread0;
      MockThread.enumerate(threadArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLoginTimeout();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setPortNumber((byte)85);
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("}W T^ag$", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8207043021146565
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesStructure("\n/*Gdiret looka */");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "nlNv|!>Y~";
      stringArray0[1] = "derby.__rt.storage.log";
      stringArray0[2] = "getStatement";
      stringArray0[3] = "uS3B$X`Xn?F(hc4o&A";
      stringArray0[4] = "drip \"nde";
      stringArray0[5] = "on9AEU^";
      stringArray0[6] = "CONSTRAINT ";
      StringReader stringReader0 = new StringReader("CONSTRAINT ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C$\"}Il}}");
      StringReader stringReader1 = new StringReader("dip \"nd");
      StringReader stringReader2 = new StringReader("''");
      stringReader2.read();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar(39);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.nextToken();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "''";
      stringArray0[1] = "dip \"nd";
      stringArray0[2] = null;
      stringArray0[4] = "dip \"nd";
      stringArray0[5] = "C$\"}Il}}";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)85;
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      byteArray0[3] = (byte)0;
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      int int0 = 32;
      pGConnectionPoolDataSource0.setPortNumber(32);
      pGConnectionPoolDataSource0.setDefaultAutoCommit(true);
      pGConnectionPoolDataSource0.getLogWriter();
      SQLUtil.normalize("getDate(String,Calendar)", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("getDate (String, Calendar)", "insertfor empty collections, a componenttype needs to be specified.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"insertfor empty collections, a componenttype needs to be specified.\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexc<xi95ylq");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c<xi95";
      stringArray0[1] = "alter indexc<xi95ylq";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter indexc<xi95ylq", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexc<xi95ylq", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.ownerDotComponent(dBTable0);
      assertEquals("alter indexc<xi95ylq", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(97);
      StringBuilder stringBuilder1 = new StringBuilder(97);
      StringBuilder stringBuilder2 = new StringBuilder(97);
      StringBuilder stringBuilder3 = stringBuilder1.reverse();
      StringBuilder stringBuilder4 = stringBuilder2.reverse();
      StringBuilder stringBuilder5 = stringBuilder4.append("-webPort");
      stringBuilder5.chars();
      stringBuilder3.append((long) 97);
      SQLUtil.addOptionalCondition("", stringBuilder3);
      assertEquals("97 or ", stringBuilder3.toString());
      assertEquals("97 or ", stringBuilder1.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      StringBuilder stringBuilder1 = new StringBuilder(301);
      stringBuilder1.append((float) 301);
      StringBuilder stringBuilder2 = new StringBuilder(301);
      StringBuilder stringBuilder3 = new StringBuilder();
      StringBuilder stringBuilder4 = stringBuilder0.reverse();
      stringBuilder4.append('7');
      stringBuilder1.chars();
      SQLUtil.addRequiredCondition("$xTi'io*R=9", stringBuilder4);
      assertEquals("7 and $xTi'io*R=9", stringBuilder4.toString());
      assertEquals("7 and $xTi'io*R=9", stringBuilder0.toString());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      MockThread mockThread0 = new MockThread();
      MockThread.dumpStack();
      mockThread0.getContextClassLoader();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[5] = (Thread) mockThread0;
      mockThread0.getStackTrace();
      MockThread.enumerate(threadArray0);
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread1 = new MockThread(mockThread0);
      boolean boolean0 = SQLUtil.isDML("deletet7kj(#82xklr:m");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Derbk";
      stringArray0[1] = "Derbk";
      MockThread mockThread0 = new MockThread((Runnable) null);
      MockThread mockThread1 = new MockThread("Derbk");
      MockThread.getAllStackTraces();
      Thread[] threadArray0 = new Thread[8];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[5] = (Thread) mockThread1;
      threadArray0[6] = (Thread) mockThread1;
      threadArray0[7] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockThread.reset();
      MockThread.reset();
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread mockThread2 = new MockThread(threadArray0[4]);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertalt@u xablereodonlyaccess");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.449134002482347
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.mutatesStructure("drop materialized viee");
      VersionNumber.valueOf("}4/2g");
      SQLUtil.isDDL("drop materialized viee");
      String[] stringArray0 = new String[14];
      stringArray0[0] = "}4/2g";
      stringArray0[1] = "drop materialized viee";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.write(1751);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'h';
      charArray0[2] = 'F';
      charArray0[3] = '3';
      stringWriter0.write(charArray0);
      StringWriter stringWriter3 = new StringWriter(1751);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter2);
      StringWriter stringWriter4 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter4, true);
      mockPrintWriter0.println();
      mockPrintWriter0.print(4348);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viee");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("\n4348create table drop materialized viee (\n)", stringWriter4.toString());
      
      SQLUtil.mutatesDataOrStructure("}4/2g");
      boolean boolean0 = SQLUtil.isDML("}4/2g");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4251906907358505
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLUtil.mutatesStructure("drop materialized viee");
      VersionNumber.valueOf("}4/2g");
      SQLUtil.isDDL("drop materialized viee");
      String[] stringArray0 = new String[14];
      stringArray0[0] = "}4/2g";
      stringArray0[1] = "drop materialized viee";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.flush();
      char[] charArray0 = new char[1];
      stringWriter2.close();
      stringWriter0.write(1751);
      stringWriter2.write(charArray0);
      StringWriter stringWriter3 = new StringWriter(1751);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1);
      StringWriter stringWriter4 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      mockPrintWriter0.println();
      mockPrintWriter0.print(1751);
      bufferedWriter0.newLine();
      stringWriter1.write("index not found ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("seet");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("\nindex not found 1751\ncreate table seet (\n", stringWriter1.toString());
      
      SQLUtil.mutatesDataOrStructure("drop materialized viee");
      boolean boolean0 = SQLUtil.isDML("8!Qzq\"b=I");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";#^eNHw0'5{S/K=O", false, "re9ameeadonlyaccess", "callwhere");
      Integer integer0 = RawTransaction.ABORT;
      Integer.divideUnsigned(1529, (-1287));
      dBCheckConstraint0.equals(integer0);
      dBCheckConstraint0.setDoc("re9ameeadonlyaccess");
      dBCheckConstraint0.setName(";#^eNHw0'5{S/K=O");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.equals("re9ameeadonlyaccess");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileWriter mockFileWriter0 = new MockFileWriter("CONSTRAINT ;#^eNHw0'5{S/K=OCHECK callwhere");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      mockPrintWriter0.print((-1));
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long(1L);
      StringReader stringReader1 = new StringReader("alter index");
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      stringReader1.read(charArray0);
      stringReader1.read();
      Thread[] threadArray0 = new Thread[6];
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "");
      threadArray0[0] = (Thread) mockThread1;
      MockThread mockThread2 = new MockThread((Runnable) null, "L.Q3AS");
      threadArray0[1] = (Thread) mockThread2;
      MockThread mockThread3 = new MockThread(mockThread2);
      threadArray0[2] = (Thread) mockThread3;
      FileMonitor fileMonitor0 = new FileMonitor();
      Thread thread0 = fileMonitor0.getDaemonThread(threadArray0[0], "alter index", true);
      threadArray0[3] = thread0;
      Thread thread1 = MockThread.currentThread();
      threadArray0[4] = thread1;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread2 = MockThread.currentThread();
      MockThread mockThread4 = new MockThread(threadGroup0, thread2);
      threadArray0[5] = (Thread) mockThread4;
      MockThread.enumerate(threadArray0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread5 = new MockThread(threadArray0[1], "implType");
      MockThread mockThread6 = new MockThread(mockThread5);
      SQLUtil.mutatesDataOrStructure("CHECK ");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DfkYN]%z4#G(\"";
      stringArray0[1] = "p`^e<[6$l} join p`^e";
      stringArray0[2] = "5K/WY";
      stringArray0[3] = "&*DnX~FcA[;)W(h9-X";
      stringArray0[4] = "mW2uP%?4Fb";
      stringArray0[5] = "a#u[*'";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long(1L);
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'v';
      charArray0[2] = 'k';
      charArray0[3] = '0';
      charArray0[4] = '_';
      charArray0[5] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      stringReader1.read(charBuffer0);
      charArray0[6] = 'X';
      charArray0[7] = '+';
      stringReader1.read(charArray0);
      stringReader0.read(charArray0);
      stringReader1.read();
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "org.databene.jdbacl.SQLUtil";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("I.N6Xb.Zi|", (String[]) null, "I.N6Xb.Zi|", "org.databene.jdbacl.SQLUtil", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4`";
      stringArray0[1] = "4`";
      stringArray0[2] = "G=/nd'ber+jTTzOCq?";
      stringArray0[3] = "G=/nd'ber+jTTzOCq?";
      stringArray0[4] = "G=/nd'ber+jTTzOCq?";
      stringArray0[5] = "create materialized view";
      stringArray0[6] = "4`";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "create unique index`0gw0fb";
      // Undeclared exception!
      try { 
        SQLUtil.join("4`", "G=/nd'ber+jTTzOCq?", stringArray0, "create materialized view", "create unique index`0gw0fb", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "NCLOB";
      stringArray0[2] = "NCLOB";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      stringArray0[5] = "NCLOB";
      stringArray0[6] = "NCLOB";
      stringArray0[7] = "NCLOB";
      stringArray0[8] = "NCLOB";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "@=0bBi#a";
      stringArray1[1] = "NCLOB";
      stringArray1[2] = "Y`vTxtpu6+:@`5";
      stringArray1[3] = " e?";
      stringArray1[4] = "update";
      stringArray1[5] = "NCLOB";
      stringArray1[6] = "update";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("NCLOB", stringArray0, "update", "@=0bBi#a", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "alteq tabletruncate");
      MockThread mockThread1 = new MockThread("alteq tabletruncate");
      ThreadGroup threadGroup1 = (ThreadGroup)mockThread1.getUncaughtExceptionHandler();
      MockThread mockThread2 = new MockThread(mockThread0);
      MockThread mockThread3 = new MockThread("alteq tabletruncate");
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread3;
      MockThread.getAllStackTraces();
      threadArray0[4] = (Thread) mockThread0;
      MockThread mockThread4 = new MockThread(threadGroup1, mockThread0);
      MockThread.enumerate(threadArray0);
      MockThread.reset();
      MockThread.reset();
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread mockThread5 = new MockThread(mockThread3);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "/!K74zo653[OW5ym#OZ";
      SQLUtil.normalize("/!K74zo653[OW5ym#OZ", true);
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GSF");
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[3] = (byte)0;
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      DBSchema dBSchema0 = new DBSchema("GSF");
      dBSchema0.getSequences(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("GSF", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)104;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("`FY4sp*<o0D2F&bBM", false, defaultDBTable0, (String[]) null);
      dBNonUniqueIndex0.setDoc("BOOL_AND");
      dBNonUniqueIndex0.equals("`FY4sp*<o0D2F&bBM");
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DBDataType dBDataType0 = DBDataType.getInstance(34, ":{bmY>bh:=p");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablem", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execcan''t infer the sql type to use for an instance of {0}. use setobject() with an explicit types value to specify the type to use.";
      stringArray0[1] = "execcan''t infer the sql type to use for an instance of {0}. use setobject() with an explicit types value to specify the type to use.";
      stringArray0[2] = "execcan''t infer the sql type to use for an instance of {0}. use setobject() with an explicit types value to specify the type to use.";
      System.setCurrentTimeMillis((-669L));
      SQLUtil.normalize("execcan''t infer the sql type to use for an instance of {0}. use setobject() with an explicit types value to specify the type to use.", true);
      System.setCurrentTimeMillis((-669L));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-83);
      byteArray0[0] = (byte) (-83);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(L. '}sY]^&RnPO");
      defaultDBTable0.getComponents();
      SQLUtil.typeAndName(defaultDBTable0);
      Integer integer0 = RawTransaction.COMMIT;
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTableDescriptor((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ")S?&gMtr");
      Boolean boolean0 = new Boolean("-MI}");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-MI}";
      stringArray0[1] = "-MI}";
      stringArray0[2] = ")S?&gMtr";
      stringArray0[3] = "KiK$";
      stringArray0[4] = "-MI}";
      stringArray0[5] = "-MI}";
      stringArray0[6] = "-MI}";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "inner");
      // Undeclared exception!
      try { 
        SQLUtil.join("-MI}", "-MI}", (String[]) null, "KiK$", "-MI}", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = SQLUtil.renderValue("QgvI_F8TEk\"(ie|0ln");
      assertEquals("'QgvI_F8TEk\"(ie|0ln'", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder(0);
      StringBuilder stringBuilder2 = new StringBuilder(0);
      stringBuilder2.reverse();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromVTI fromVTI0 = new FromVTI();
      BasicUUID basicUUID0 = null;
      try {
        basicUUID0 = new BasicUUID((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "amR%a_n7");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";#^eNHw0'5{S/K=O", false, "renamereadonlyaccess", "callwhere");
      stringBuilder0.codePoints();
      dBCheckConstraint0.setName("r5~%HSUg");
      dBCheckConstraint0.equals("r5~%HSUg");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6066699893655365
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1529);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";#^eNHw0'5{S/K=O", false, "renamereadonlyaccess", "callwhere");
      dBCheckConstraint0.setName("exec");
      dBCheckConstraint0.equals("renamereadonlyaccess");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK callwhere", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter materialized ziew]($d";
      DBSchema dBSchema0 = new DBSchema("`z[MyDH!N(czF");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized ziew]($d", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBForeignKeyConstraint0.equals("`z[MyDH!N(czF");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "DNfNY", true, "DNfNY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'DNfNY' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(77);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "alter tabletruncate");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1, "alter tabletruncate");
      mockThread2.getUncaughtExceptionHandler();
      MockThread mockThread3 = new MockThread(mockThread2);
      MockThread mockThread4 = new MockThread("alter tabletruncate");
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) mockThread0;
      MockThread mockThread5 = new MockThread((ThreadGroup) null, mockThread0, "H\u0006Ax");
      threadArray0[2] = (Thread) mockThread4;
      MockThread mockThread6 = new MockThread((ThreadGroup) null, threadArray0[1]);
      threadArray0[3] = (Thread) mockThread6;
      MockThread.getAllStackTraces();
      threadArray0[4] = (Thread) mockThread2;
      threadArray0[5] = (Thread) mockThread4;
      MockThread.enumerate(threadArray0);
      MockThread.reset();
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread mockThread7 = new MockThread(threadArray0[1]);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabletruncate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ")S?&gMtr");
      Boolean boolean0 = new Boolean(")S?&gMtr");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ")S?&gMtr");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("<(YemM;~R-Opod,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: <(YemM;~R-Opod,
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTables();
      dBCatalog0.getSequences();
      dBCatalog0.toString();
      dBCatalog0.getSequences();
      dBCatalog0.toString();
      dBCatalog0.getComponents();
      dBCatalog0.getSchema("/!K74zo653[OW5ym#OZ");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("c|-Nq$[c(HI3)(vxs4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"HI3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)85;
      StringReader stringReader0 = new StringReader("C$\"}Il}}");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.1;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.42938410163885
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[3];
      VersionNumber.valueOf("org.apache.derby.impl.sql.execute.IndexRow");
      Random.setNextRandom((-542));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(77);
      StringBuilder stringBuilder1 = new StringBuilder(77);
      StringBuilder stringBuilder2 = new StringBuilder(77);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "alter tabletruncate");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1, "alter tabletruncate");
      mockThread2.getUncaughtExceptionHandler();
      MockThread mockThread3 = new MockThread(mockThread2);
      MockThread mockThread4 = new MockThread("alter tabletruncate");
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) mockThread0;
      MockThread mockThread5 = new MockThread((ThreadGroup) null, mockThread0, "HAx");
      threadArray0[1] = (Thread) mockThread5;
      threadArray0[2] = (Thread) mockThread4;
      MockThread mockThread6 = new MockThread((ThreadGroup) null, threadArray0[1]);
      threadArray0[3] = (Thread) mockThread6;
      MockThread.getAllStackTraces();
      threadArray0[4] = (Thread) mockThread2;
      threadArray0[5] = (Thread) mockThread4;
      MockThread.enumerate(threadArray0);
      MockThread.getDefaultUncaughtExceptionHandler();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = stringArray0[1];
      stringArray0[4] = "insertifpiet";
      stringArray0[1] = "insertifpiet";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("}[gqC", (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      System.setCurrentTimeMillis((-669L));
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLUtil.normalize("kV-%@C*sjZt!B27As", true);
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.stringWorkhorse(')');
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getAutoGeneratedKeysColumnNames();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kV-%@C*sjZt!B27As");
      Long long0 = new Long(1L);
      StringReader stringReader1 = new StringReader("kV-%@C*sjZt!B27As");
      stringReader0.read();
      StringReader stringReader2 = new StringReader("kV-%@C*sjZt!B27As");
      stringReader2.read();
      stringReader0.markSupported();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      stringReader1.skip(27L);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(1);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.wordChars((-233692247), 1);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar(107);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.pushBack();
      streamTokenizer2.wordChars(107, 1);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 97;
      String string0 = "rename";
      SQLUtil.mutatesStructure("rename");
      int int1 = (-2661);
      BasicUUID basicUUID0 = new BasicUUID("rename");
      int int2 = 41;
      ResultSetStatistics resultSetStatistics0 = null;
      RealDeleteVTIResultSetStatistics realDeleteVTIResultSetStatistics0 = new RealDeleteVTIResultSetStatistics((-2661), (-2661), (ResultSetStatistics) null);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.remainingCapacity();
      delayQueue0.poll();
      int int3 = (-133738129);
      Parameter parameter0 = new Parameter((-133738129));
      // Undeclared exception!
      try { 
        realDeleteVTIResultSetStatistics0.getResultSetTimingsDescriptor(parameter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.h2.expression.Parameter cannot be cast to org.apache.derby.catalog.UUID
         //
         verifyException("org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Derbk";
      stringArray0[2] = "Derbk";
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)115;
      SQLUtil.isQuery("Derbk");
      stringArray0[3] = "-MI}";
      SelectNode selectNode0 = new SelectNode();
      SelectNode selectNode1 = new SelectNode();
      SelectNode selectNode2 = new SelectNode();
      // Undeclared exception!
      try { 
        selectNode2.getDependencyManager();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLUtil.normalize("kV-%@Cz*s;Zt!B27As", true);
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLUtil.normalize("k-'%@]*s$Zt!B27As", false);
      RealWindowResultSetStatistics realWindowResultSetStatistics0 = new RealWindowResultSetStatistics(31, (-2), (-373), (-373), 500L, 379, 10, (-1985), 0L, 873.101032920052, (ResultSetStatistics) null);
      RealOnceResultSetStatistics realOnceResultSetStatistics0 = new RealOnceResultSetStatistics((-28856934), 379, 2073, 31, 379, 500L, (-373), 326, 2073, (-2), (-1985), 10, realWindowResultSetStatistics0);
      RealHashJoinStatistics realHashJoinStatistics0 = new RealHashJoinStatistics(529, 1000000, (-1067), 379, (-1985), (-649L), (-2), 379, 1843, 1000000, 31, 10L, false, (-3045.0), (-1.0), (String) null, realWindowResultSetStatistics0, realOnceResultSetStatistics0);
      assertEquals("Hash Join", realHashJoinStatistics0.getNodeName());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.normalize("k-'%@]*s$Zt!B27As", false);
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.stringWorkhorse('B');
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)60;
      BasicUUID basicUUID1 = null;
      try {
        basicUUID1 = new BasicUUID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "M";
      DBSchema dBSchema0 = new DBSchema("42Z01.U");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M", dBSchema0);
      DBDataType dBDataType0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("x", defaultDBTable0, (DBDataType) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("43X53.U", defaultDBTable0, 819, "drop table");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("insert", "CHECK ", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("CHECK ", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("L3iZz1%K/$3^Hg", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L3iZz1%K/$3^Hg";
      stringArray0[1] = "update";
      stringArray0[2] = "update";
      stringArray0[3] = "select intoalteu tablereadonlyaccess";
      stringArray0[4] = "CHECK ";
      stringArray0[5] = "update";
      stringArray0[6] = "CHECK ";
      stringArray0[7] = "CHECK ";
      stringArray0[8] = "CHECK ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("update", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("L3iZz1%K/$3^Hg", "inner");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "update");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTables();
      dBCatalog0.getSequences();
      MockThread mockThread0 = new MockThread("IYC_EU5wSh8Z|C");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, ">7+=#o*._@4U[?A}", 1L);
      mockThread0.getContextClassLoader();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      MockThread mockThread2 = new MockThread(mockThread1, "DATE");
      mockThread2.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler1 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler1);
      MockThread mockThread3 = new MockThread(mockThread1);
      String string0 = SQLUtil.renderValue(thread_UncaughtExceptionHandler1);
      //  // Unstable assertion: assertEquals("java.lang.ThreadGroup[name=Test_Execution_Group,maxpri=10]", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      Character character0 = new Character('F');
      Character.isSurrogate('V');
      Character.compare('F', 'F');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'F'", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.159098580890948
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long(1L);
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'v';
      charArray0[2] = 'k';
      charArray0[3] = '0';
      charArray0[4] = '_';
      charArray0[5] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      stringReader1.read(charBuffer0);
      charArray0[6] = 'X';
      charArray0[7] = '+';
      stringReader1.read(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'o';
      stringReader1.read(charArray1);
      stringReader1.read();
      ErrorMessages errorMessages0 = new ErrorMessages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND  = '' AND null = null AND  = '' AND  = '' AND  = '' AND  = '' AND  = '' AND  = ''", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uji.1*");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean.valueOf("g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long(1L);
      StringReader stringReader1 = new StringReader("alter index");
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      stringReader1.skip(2578L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.commentChar(1);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-77893317), (-77893317));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-3678));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer2.pushBack();
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer0.wordChars((-3678), 1);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "|72q2<&vyM/Gk";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "|72q2<&vyM/Gk");
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(45);
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      stringBuilder0.append((CharSequence) "|72q2<&vyM/Gk");
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-584), (-584));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -584
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-95);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("create unique index");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create unique index", "oGiNg/EKwDJ", versionNumber0);
      VersionNumber.valueOf("create unique index");
      defaultDatabase0.getCatalog("create unique index");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLUtil.mutatesStructure("exebzb?47rfn");
      BasicUUID basicUUID0 = new BasicUUID("exebzb?47rfn");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.remainingCapacity();
      Delayed delayed0 = delayQueue0.poll();
      assertNull(delayed0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(77);
      StringBuilder stringBuilder1 = new StringBuilder(77);
      StringBuilder stringBuilder2 = new StringBuilder(77);
      stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      StringBuilder stringBuilder4 = stringBuilder3.append("-webPort");
      stringBuilder4.codePoints();
      RealScalarAggregateStatistics realScalarAggregateStatistics0 = new RealScalarAggregateStatistics(1887, (-517329621), 103, 7L, (-1874L), 7L, 1160L, 1780, false, 258, 17, 1856, (ResultSetStatistics) null);
      RealHashJoinStatistics realHashJoinStatistics0 = new RealHashJoinStatistics(1856, 77, (-1292), 17, (-2003L), 77, (-1874L), (-517329621), 13, (-223732561), 1905, 17, false, 976.0315036, (-517329621), "'COMMENT'", realScalarAggregateStatistics0, realScalarAggregateStatistics0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-webPort";
      stringArray0[1] = "'COMMENT'";
      stringArray0[2] = "Hash Join ResultSet";
      stringArray0[3] = "'COMMENT'";
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "executeselect * from", "Hash Join ResultSet", stringArray0);
      assertEquals("executeselect * from as Hash Join ResultSet on null.-webPort = Hash Join ResultSet.-webPort and null.'COMMENT' = Hash Join ResultSet.'COMMENT' and null.Hash Join ResultSet = Hash Join ResultSet.Hash Join ResultSet and null.'COMMENT' = Hash Join ResultSet.'COMMENT'", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "D9Qd)\"[m~Z";
      stringArray0[2] = "Rkz(umElB";
      stringArray0[3] = "p`M^E<[6$l}";
      stringArray0[4] = "\"KgT1[^@g'*!h_|)W5M)";
      stringArray0[5] = "";
      stringArray0[6] = "lo_open";
      stringArray0[7] = "org.apache.derby.iapi.services.context.SystemContext";
      stringArray0[8] = "lo_open";
      String string0 = SQLUtil.join("lo_open", " as ", stringArray0, "alter materialized view]($dn", "", stringArray0);
      assertEquals("lo_open join alter materialized view]($dn as  on  as . = . and  as .D9Qd)\"[m~Z = .D9Qd)\"[m~Z and  as .Rkz(umElB = .Rkz(umElB and  as .p`M^E<[6$l} = .p`M^E<[6$l} and  as .\"KgT1[^@g'*!h_|)W5M) = .\"KgT1[^@g'*!h_|)W5M) and  as . = . and  as .lo_open = .lo_open and  as .org.apache.derby.iapi.services.context.SystemContext = .org.apache.derby.iapi.services.context.SystemContext and  as .lo_open = .lo_open", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "6ek-nYh:Lm";
      stringArray0[1] = "6ek-nYh:Lm";
      stringArray0[2] = "6ek-nYh:Lm";
      stringArray0[3] = "r.b/";
      stringArray0[4] = "6ek-nYh:Lm";
      stringArray0[5] = "6dda3h";
      stringArray0[6] = "6ek-nYh:Lm";
      stringArray0[7] = "6ek-nYh:Lm";
      stringArray0[8] = "6ek-nYh:Lm";
      String string0 = SQLUtil.leftJoin("6ek-nYh:Lm", stringArray0, "k}Sm|(3S&I;aSJ$&", " as ", stringArray0);
      assertEquals("left join k}Sm|(3S&I;aSJ$& as  as  on 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm and 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm and 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm and 6ek-nYh:Lm.r.b/ =  as .r.b/ and 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm and 6ek-nYh:Lm.6dda3h =  as .6dda3h and 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm and 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm and 6ek-nYh:Lm.6ek-nYh:Lm =  as .6ek-nYh:Lm", string0);
  }
}
