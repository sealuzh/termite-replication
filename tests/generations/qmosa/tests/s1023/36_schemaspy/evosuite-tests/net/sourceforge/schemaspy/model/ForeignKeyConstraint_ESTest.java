/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:24:08 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import java.util.logging.Level;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Creating ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UFV,[O%I.$^");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UFV,[O%I.$^", 2507, 0);
      foreignKeyConstraint0.getDeleteRule();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 103, 24);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      foreignKeyConstraint0.getChildColumns();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, (String) null, 24, 103);
      foreignKeyConstraint0.getName();
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b^zn:6QmPo");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, (-25), 0);
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9c\"N^Sj\"sZF)l(Q2N9");
      Config config0 = Config.getInstance();
      Config config1 = new Config();
      FileSystemHandling.shouldAllThrowIOExceptions();
      config0.isRankDirBugEnabled();
      config0.getCharset();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      config0.getGraphvizDir();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IzfX");
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean2 == boolean1);
      assertEquals((-25), foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.02285770806073
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "?;q-XTI$n", (byte)3, (byte)3);
      Config config0 = new Config();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string1);
      
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertEquals("R", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1621616414409783
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 0);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string0);
      
      foreignKeyConstraint0.getDeleteRuleDescription();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "J", 0, 1261);
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string2);
      
      foreignKeyConstraint1.getDeleteRuleName();
      assertEquals(1261, foreignKeyConstraint1.getDeleteRule());
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      
      foreignKeyConstraint0.getChildColumns();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8666282711299567
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 100, 1);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.isRestrictDelete();
      System.setCurrentTimeMillis(1);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      System.setCurrentTimeMillis(100);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 2);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean0);
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",jI|*");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EXECUTE");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EXECUTE");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "EXECUTE", (-43), (-43));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Config config0 = Config.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      config0.setHost("UTF-8");
      config0.setCss("UTF-8");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      config0.getCharset();
      Config config1 = Config.getInstance();
      config1.setPassword("UTF-8");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      Config config2 = Config.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      config1.getCharset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      config1.setHasRoutines(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("UTF-8", "UTF-8");
      config2.isNumRowsEnabled();
      MockFile mockFile1 = new MockFile("UTF-8", "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-43), int0);
      assertEquals((-43), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList2 = new LinkedList<TableColumn>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "1$XC-qrvwoOQP", 60, 60);
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(60, int0);
      assertEquals(60, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 119, 1982);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config0.getDbType();
      config1.setCss("UTF-8");
      config0.setHost("?D7,:W!+U7P3++i");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("l{4SLNp");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("Hge<V1,G");
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("#{Trwe3");
      config4.setCatalog("#{Trwe3");
      Config config5 = Config.getInstance();
      config5.setMaxDetailedTabled((-2283));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      config3.setSingleSignOn(true);
      config5.getCharset();
      hashMap0.replace("2nt8M|YP<%*", "BKdLe('HLk<N?Ao", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      config5.isRailsEnabled();
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config6.getCharset();
      config3.getLogLevel();
      config2.getFontSize();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals(1982, foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals(119, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.37318479840714
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 2);
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string1);
      
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList2 = new LinkedList<TableColumn>();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ". -_");
      linkedList1.removeIf(predicate0);
      linkedList2.add(tableColumn1);
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList2);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      assertTrue(list0.contains(tableColumn0));
      
      foreignKeyConstraint0.getChildTable();
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Null on delete", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Integer[] integerArray0 = new Integer[25];
      Integer integer0 = new Integer((-1395));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integerArray0[2];
      linkedList0.add((TableColumn) null);
      Integer integer4 = new Integer((int) integerArray0[2]);
      Integer.compare((int) integerArray0[1], (int) integerArray0[1]);
      Integer integer5 = new Integer((int) integerArray0[2]);
      Integer integer6 = new Integer(0);
      integerArray0[4] = integer5;
      Integer integer7 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integerArray0[4];
      Integer.toUnsignedString((int) integerArray0[4]);
      Integer.divideUnsigned((int) integerArray0[4], (int) integerArray0[0]);
      integerArray0[6] = integerArray0[5];
      Integer integer8 = new Integer((int) integerArray0[5]);
      integerArray0[7] = integerArray0[2];
      Integer.toUnsignedLong(0);
      Integer.getInteger((String) null, (int) integerArray0[2]);
      Integer.compareUnsigned(2, (int) integerArray0[5]);
      Integer.toUnsignedString((int) integerArray0[6]);
      Integer integer9 = new Integer((int) integerArray0[3]);
      Object object0 = new Object();
      Integer.sum((int) integerArray0[7], 1);
      Integer.toUnsignedLong((int) integerArray0[2]);
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 121, 1982);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.isNumRowsEnabled();
      config0.getDbType();
      config0.setHtmlGenerationEnabled(false);
      config1.setCss("UTF-8");
      config0.setHost("UTF-8");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("ora");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("Hge<V1,G");
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("#{pxTrw");
      config4.setCatalog("#{pxTrw");
      Config config5 = Config.getInstance();
      config5.setMaxDetailedTabled((-2283));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      config3.setSingleSignOn(true);
      config1.getCharset();
      foreignKeyConstraint0.isImplied();
      config5.setDbSpecificOptions(hashMap0);
      config5.isRailsEnabled();
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config6.getCharset();
      config3.getLogLevel();
      int int0 = config2.getFontSize();
      assertEquals(11, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 119, 1982);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config0.getDbType();
      config1.setCss("UTF-8");
      config0.setHost("?D7,:W!+U7P3++i");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("l{4SLNp");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("Hge<V1,G");
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("#{Trwe3");
      config4.setCatalog("#{Trwe3");
      Config config5 = Config.getInstance();
      config5.setMaxDetailedTabled((-2283));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      config3.setSingleSignOn(true);
      hashMap0.replace("", "BKdLe('HLk<N?Ao", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      config5.isRailsEnabled();
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config6.getCharset();
      config3.getLogLevel();
      config2.getFontSize();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      assertEquals(1982, foreignKeyConstraint0.getDeleteRule());
      assertTrue(boolean0);
      assertEquals(119, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 3400, 2033);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      foreignKeyConstraint0.isNullOnDelete();
      config1.setCss("UTF-8");
      config0.setHost("UTF-8");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("UTF-8");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("UTF-8");
      config3.getPort();
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("UTF-8");
      config4.setCatalog("UTF-8");
      config3.setImpliedConstraintsEnabled(false);
      Config config5 = Config.getInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "v*Y<!Q,'w2T%M+7{");
      config3.setSingleSignOn(true);
      config1.setHasRoutines(true);
      config5.getCharset();
      config3.setDb("UTF-8");
      config3.setHost("UTF-8");
      hashMap0.replace("UTF-8", "v*Y<!Q,'w2T%M+7{", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      config2.isRailsEnabled();
      config2.setHasOrphans(true);
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config4.getCharset();
      Level level0 = config3.getLogLevel();
      assertEquals("WARNING", level0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 3400, 2033);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.isNumRowsEnabled();
      config0.getSchemas();
      config1.setCss("UTF-8");
      config0.setHost("UTF-8");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("UTF-8");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("UTF-8");
      config3.getPort();
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("UTF-8");
      config4.setCatalog("UTF-8");
      config3.setImpliedConstraintsEnabled(true);
      Config config5 = Config.getInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "v*Y<!Q,'w2T%M+7{");
      config3.setSingleSignOn(true);
      config1.setHasRoutines(true);
      config3.getCss();
      config5.getCharset();
      config3.setDb("UTF-8");
      config3.setHost("UTF-8");
      foreignKeyConstraint0.isCascadeOnDelete();
      config2.isRailsEnabled();
      config2.setHasOrphans(true);
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config4.getCharset();
      Config config7 = new Config();
      assertFalse(config7.hasRoutines());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M^zn&:6QmPo");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "M^zn&:6QmPo", (-1), (-1));
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      Config config0 = new Config();
      Config config1 = new Config();
      config1.getCss();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      config1.setHost("UTF-8");
      config1.setCss("UTF-8");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      config1.getCharset();
      Config config2 = Config.getInstance();
      config2.setPassword("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Config config3 = new Config();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      config1.getCharset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Config.getInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("UTF-8", "UTF-8");
      MockFile mockFile1 = new MockFile("UTF-8", "uezBflb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c2UTuB6wf");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UFV,[O%I.$^");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ")P{nj", 2507, 4591);
      foreignKeyConstraint0.getName();
      assertEquals(4591, foreignKeyConstraint0.getDeleteRule());
      assertEquals(2507, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.270135320709897
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b^zn:6QmPo");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-1), (-1));
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean0);
      
      Config config0 = new Config();
      Config config1 = new Config();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-1), int0);
      
      foreignKeyConstraint0.getName();
      assertEquals((-1), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 121, 1982);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Restrict delete", 121, 0);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.getDbSpecificOptions();
      config1.isNumRowsEnabled();
      config1.setCss("UTF-8");
      config0.setHost("UTF-8");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("UTF-8");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("UTF-8");
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("UTF-8");
      config4.setCatalog("UTF-8");
      config3.setImpliedConstraintsEnabled(true);
      Config config5 = Config.getInstance();
      config5.setMaxDetailedTabled((-2283));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "");
      config4.getRenderer();
      config3.setSingleSignOn(false);
      config5.getCharset();
      config3.setDb("UTF-8");
      config3.setHost("UTF-8");
      hashMap0.replace("", "v*Y<!Q,'w2T%M+7{", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config4.getCharset();
      config3.getLogLevel();
      int int1 = config2.getFontSize();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "&*/n|Z$-BkSokfJ", 2, 2);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "LANGUAGE", 129, 16);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals((-70), int0);
      
      ForeignKeyConstraint foreignKeyConstraint2 = new ForeignKeyConstraint((Table) null, "&*/n|Z$-BkSokfJ", 2499, 129);
      assertEquals(129, foreignKeyConstraint2.getDeleteRule());
      assertEquals(2499, foreignKeyConstraint2.getUpdateRule());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 121, 1982);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.isNumRowsEnabled();
      config1.setCss("UTF-8");
      config0.setHost("UTF-8");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("UTF-8");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("UTF-8");
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("bc P_q[5<O _");
      config4.setCatalog("bc P_q[5<O _");
      Config config5 = Config.getInstance();
      config5.setMaxDetailedTabled((-2283));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "");
      config3.setSingleSignOn(true);
      config5.getCharset();
      config3.setDb("UTF-8");
      config3.setHost("UTF-8");
      config2.isImpliedConstraintsEnabled();
      hashMap0.replace("", "v*Y<!Q,'w2T%M+7{", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      config5.isRailsEnabled();
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config6.getCharset();
      config3.getLogLevel();
      config2.getFontSize();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(1982, int0);
      assertEquals(121, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v*Y<!DQ,'w2TPt%M+7{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v*Y<!DQ,'w2TPt%M+7{");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!DQ,'w2TPt%M+7{", (-3349), (-3349));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v*Y<!DQ,'w2TPt%M+7{");
      Config config0 = new Config();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      config0.setHost("UTF-8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      config0.setCss("UTF-8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      Config config1 = new Config();
      config0.getPassword();
      config1.setPassword((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      config1.setGraphvizDir("UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      MockFile mockFile0 = new MockFile("UTF-8", "UTF-8");
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      MockFile mockFile1 = new MockFile("UTF-8", "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      MockFile mockFile2 = new MockFile("UTF-8", "UTF-8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-8");
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5021142749799519
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      foreignKeyConstraint0.getDeleteRuleAlias();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer.compare(1360, 0);
      Integer integer2 = new Integer((-778));
      Integer integer3 = new Integer((-778));
      Integer integer4 = new Integer(1251);
      Integer.toUnsignedString(0);
      Integer.divideUnsigned((-778), 1);
      Integer integer5 = new Integer(1480);
      Integer.toUnsignedString(1360);
      Integer.getInteger(" C'7", 1251);
      Integer.compareUnsigned(737, 737);
      Integer.toUnsignedString(419);
      Integer integer6 = new Integer(2);
      Object object0 = new Object();
      Integer.sum(3, 4);
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer7 = new Integer(2);
      ForeignKeyConstraint foreignKeyConstraint1 = null;
      try {
        foreignKeyConstraint1 = new ForeignKeyConstraint((TableColumn) null, (TableColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1, 1);
      foreignKeyConstraint0.getDeleteRuleDescription();
      Config config0 = new Config();
      config0.getCss();
      config0.isRankDirBugEnabled();
      config0.getCharset();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Config config1 = new Config();
      assertNull(config1.getConnectionPropertiesFile());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UF[V,[O%I%.$-^");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UF[V,[O%I%.$-^", 103, 2);
      System.setCurrentTimeMillis(103);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")PK{nj");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "; InnoDB free: ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Config config0 = new Config();
      assertNull(config0.getConnectionPropertiesFile());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Table table0 = null;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 2);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 2539, (-388));
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Integer[] integerArray0 = new Integer[25];
      Integer integer0 = new Integer((-1395));
      integerArray0[0] = integer0;
      int int0 = Integer.remainderUnsigned((-1395), (-3357));
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer.toUnsignedString((int) integerArray0[1]);
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integerArray0[0];
      Integer integer5 = new Integer((int) integerArray0[2]);
      Integer integer6 = new Integer((int) integerArray0[2]);
      Integer integer7 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer6;
      Integer integer8 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integerArray0[4];
      Integer.divideUnsigned((int) integerArray0[0], (int) integerArray0[0]);
      Integer.toUnsignedString((int) integerArray0[4]);
      Integer.divideUnsigned((int) integerArray0[4], (int) integerArray0[0]);
      integerArray0[6] = integerArray0[5];
      Integer integer9 = new Integer((int) integerArray0[5]);
      integerArray0[7] = integerArray0[2];
      Integer.toUnsignedLong((int) integerArray0[3]);
      Integer integer10 = new Integer((int) integerArray0[3]);
      Integer.compareUnsigned(2, (int) integerArray0[5]);
      Integer integer11 = new Integer((-1));
      Integer.toUnsignedString((int) integerArray0[6]);
      Integer integer12 = new Integer((int) integerArray0[3]);
      Integer.sum((int) integerArray0[7], 1);
      Object object0 = new Object();
      Integer.toUnsignedLong((int) integerArray0[2]);
      Object object1 = new Object();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      Integer integer13 = new Integer((int) integerArray0[6]);
      assertFalse(integer13.equals((Object)int0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Integer[] integerArray0 = new Integer[25];
      Integer integer0 = new Integer((-1395));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer.getInteger((String) null, (int) integerArray0[1]);
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integerArray0[0];
      Integer integer4 = new Integer((int) integerArray0[2]);
      Integer.compare((int) integerArray0[1], (int) integerArray0[1]);
      Integer integer5 = new Integer((int) integerArray0[2]);
      Integer integer6 = new Integer(0);
      integerArray0[4] = integer5;
      Integer integer7 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integerArray0[4];
      Integer.toUnsignedString((int) integerArray0[4]);
      Integer.divideUnsigned((int) integerArray0[4], (int) integerArray0[0]);
      integerArray0[6] = integerArray0[5];
      Integer integer8 = new Integer((int) integerArray0[5]);
      integerArray0[7] = integerArray0[2];
      Integer.toUnsignedLong(0);
      Integer integer9 = new Integer((int) integerArray0[3]);
      Integer.compareUnsigned(2, (int) integerArray0[5]);
      Integer integer10 = new Integer((-1));
      Integer.toUnsignedString((int) integerArray0[6]);
      Integer integer11 = new Integer((int) integerArray0[3]);
      Object object0 = new Object();
      Integer.sum((int) integerArray0[7], 1);
      Object object1 = new Object();
      Integer.toUnsignedLong((int) integerArray0[2]);
      Object object2 = new Object();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      Integer integer12 = new Integer((int) integerArray0[6]);
      assertTrue(integer12.equals((Object)integer9));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("2hI8>Ylce!TM6D");
      tableColumn0.unlinkChildren();
      tableColumn0.setType("2hI8>Ylce!TM6D");
      tableColumn0.unlinkChildren();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn1.setType("2hI8>Ylce!TM6D");
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn2.setIsAutoUpdated(false);
      tableColumn0.removeChild(tableColumn2);
      tableColumn0.setComments("2hI8>Ylce!TM6D");
      tableColumn0.setShortType("@)CQ+*");
      tableColumn0.removeParent(tableColumn1);
      tableColumn0.removeParent(tableColumn1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)46;
      tableColumn1.setIsAutoUpdated(false);
      tableColumn0.setType("2hI8>Ylce!TM6D");
      tableColumn1.unlinkChildren();
      tableColumn1.setIsAutoUpdated(false);
      tableColumn1.unlinkParents();
      tableColumn1.setIsAutoUpdated(true);
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta3).getComments();
      doReturn((String) null).when(tableColumnMeta3).getDefaultValue();
      doReturn(0).when(tableColumnMeta3).getDigits();
      doReturn((String) null).when(tableColumnMeta3).getId();
      doReturn((String) null).when(tableColumnMeta3).getName();
      doReturn(0).when(tableColumnMeta3).getSize();
      doReturn((String) null).when(tableColumnMeta3).getType();
      doReturn(false).when(tableColumnMeta3).isAutoUpdated();
      doReturn(false).when(tableColumnMeta3).isNullable();
      tableColumn1.setComments((String) null);
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta3);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v*Y<!Q,'w2T%M+7{", 121, 1982);
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.isNumRowsEnabled();
      config1.setCss("UTF-8");
      config0.setHost("UTF-8");
      config1.setHost("v*Y<!Q,'w2T%M+7{");
      config1.setCss("UTF-8");
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config3.getParam("UTF-8");
      Config config4 = Config.getInstance();
      config4.setGraphvizDir("bc P_q[5<O _");
      config4.setCatalog("bc P_q[5<O _");
      Config config5 = Config.getInstance();
      config5.setMaxDetailedTabled((-2283));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "");
      config3.setSingleSignOn(true);
      config5.getCharset();
      config3.setDb("UTF-8");
      config3.setHost("UTF-8");
      config2.isImpliedConstraintsEnabled();
      hashMap0.replace("", "v*Y<!Q,'w2T%M+7{", "UTF-8");
      config5.setDbSpecificOptions(hashMap0);
      config5.isRailsEnabled();
      Config config6 = Config.getInstance();
      config6.getRenderer();
      config6.getCharset();
      config3.getLogLevel();
      config2.getFontSize();
      foreignKeyConstraint0.getParentTable();
      assertEquals(121, foreignKeyConstraint0.getUpdateRule());
      assertEquals(1982, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer[] integerArray0 = new Integer[25];
      Integer integer0 = new Integer((-1395));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integerArray0[2];
      Integer integer4 = new Integer((int) integerArray0[2]);
      Integer.compare((int) integerArray0[1], (int) integerArray0[1]);
      Integer integer5 = new Integer((int) integerArray0[2]);
      Integer integer6 = new Integer(0);
      integerArray0[4] = integer5;
      Integer integer7 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integerArray0[4];
      Integer.toUnsignedString((int) integerArray0[4]);
      Integer.divideUnsigned((int) integerArray0[4], (int) integerArray0[0]);
      integerArray0[6] = integerArray0[2];
      Integer integer8 = new Integer((int) integerArray0[5]);
      integerArray0[7] = integerArray0[2];
      Integer.toUnsignedString((-1376));
      Integer.getInteger("4294965901", (int) integerArray0[2]);
      Integer.compareUnsigned(2, (int) integerArray0[5]);
      Integer.toUnsignedString((int) integerArray0[6]);
      Integer integer9 = new Integer((int) integerArray0[3]);
      Object object0 = new Object();
      Integer.sum((int) integerArray0[7], 1);
      Integer.getInteger("0L@Mx7AGUIgjO^");
      Object object1 = new Object();
      Integer integer10 = new Integer(964);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, (TableColumn) null, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("");
      tableColumn0.unlinkChildren();
      tableColumn0.setType("");
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn1.setComments("BaYit/.TgOYDX2UQ>+");
      tableColumn0.setType("L");
      tableColumn0.setType("");
      tableColumn0.removeParent(tableColumn1);
      tableColumn1.setType("/+kuSeONUQIO");
      tableColumn1.unlinkParents();
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn2, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
