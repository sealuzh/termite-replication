/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 09:03:12 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.WindowEvent;
import java.util.Collection;
import java.util.Properties;
import java.util.concurrent.LinkedBlockingDeque;
import javax.swing.JColorChooser;
import javax.swing.JToolBar;
import javax.swing.plaf.metal.MetalLabelUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnector;
import plugins.collaboration.socket.ClientCommunication;
import plugins.collaboration.socket.SocketConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      JColorChooser jColorChooser0 = new JColorChooser();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Y=Z\"qBV2XYD]");
      Color color0 = Color.BLUE;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Y=Z\"qBV2XYD]");
      float[] floatArray0 = new float[4];
      jColorChooser0.getVerifyInputWhenFocusTarget();
      floatArray0[0] = 1298.974F;
      floatArray0[1] = (-1156.988F);
      floatArray0[3] = (-2274.0F);
      try { 
        Controller.showCommonJColorChooserDialog(jColorChooser0, "Y=Z\"qBV2XYD]", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      controller_Closer0.windowLostFocus((WindowEvent) null);
      // Undeclared exception!
      try { 
        controller_Closer0.windowClosing((WindowEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$Closer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      LinkedBlockingDeque<DatabaseConnector> linkedBlockingDeque0 = new LinkedBlockingDeque<DatabaseConnector>();
      Collection collection0 = Controller.getPropertyChangeListeners();
      assertNotNull(collection0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
      SocketConnectionHook socketConnectionHook1 = new SocketConnectionHook();
      socketConnectionHook1.getEmptyActionPair();
      SocketConnectionHook socketConnectionHook2 = new SocketConnectionHook();
      socketConnectionHook2.getClientCommunication();
      socketConnectionHook0.getClientCommunication();
      Thread[] threadArray0 = new Thread[7];
      threadArray0[0] = (Thread) null;
      threadArray0[1] = (Thread) null;
      threadArray0[2] = (Thread) null;
      Thread thread0 = MockThread.currentThread();
      threadArray0[3] = thread0;
      threadArray0[4] = (Thread) null;
      threadArray0[5] = (Thread) null;
      threadArray0[6] = (Thread) null;
      MockThread.enumerate(threadArray0);
      socketConnectionHook1.setClientCommunication((ClientCommunication) null);
      SocketConnectionHook socketConnectionHook3 = new SocketConnectionHook();
      socketConnectionHook3.getEmptyActionPair();
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Controller.getCommonJColorChooser();
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jToolBar_Separator0, 0, (-3865L), 0, 0, 131, (-389), false, 0, 43, 0);
      System.setCurrentTimeMillis(0);
      mouseWheelEvent0.translatePoint(43, 0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      jToolBar_Separator0.removeHierarchyBoundsListener(hierarchyBoundsListener2);
      MouseWheelEvent mouseWheelEvent1 = new MouseWheelEvent(jToolBar_Separator0, (-389), 64L, 344, 131, (-1495), 5, true, 14, 0, (-2057));
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(mouseWheelEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JToolBar$Separator cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }
}
