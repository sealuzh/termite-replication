/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 09:17:09 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEvent;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.FileNotFoundException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicDesktopIconUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xalan.templates.ElemAttributeSet;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.PSVIDOMImplementationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.openstreetmap.gui.jmapviewer.interfaces.TileCache;
import plugins.collaboration.database.DatabaseConnectionHook;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2559471702290117
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setFocusable(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getWeekdayForeground();
      Locale locale0 = new Locale("p_.hh0_5", "p_.hh0_5", "14");
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      Boolean boolean0 = new Boolean(false);
      jDayChooser0.setMaxDayCharacters(0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(364);
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      TileCache tileCache0 = null;
      JMapViewer jMapViewer0 = new JMapViewer((TileCache) null, 0);
      MapDialog mapDialog0 = new MapDialog();
      FileMode fileMode0 = new FileMode();
      fileMode0.getDefaultModeController();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3855938383078583
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setFocusable(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.maxDayCharacters = (-1234);
      jDayChooser0.setSundayForeground(systemColor0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Date date1 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.getWeekdayForeground();
      Locale locale0 = new Locale("p_.hh0_5", "p_.hh0_5", "14");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.setMaxSelectableDate(date0);
      assertNotSame(date0, date1);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1756997117790573
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy((String) null, (VetoableChangeListener) null);
      jDayChooser0.addVetoableChangeListener((VetoableChangeListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 35, (-619L), 35, 35, '0', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getDaysInMonth();
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      jDayChooser0.getUIClassID();
      HsqlProperties hsqlProperties1 = new HsqlProperties((String) null, fileUtil0, true);
      jDayChooser0.keyPressed(menuKeyEvent0);
      MapDialog mapDialog0 = new MapDialog();
      MapDialog mapDialog1 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.toggleSearchBar((AWTEvent) menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.107066228866034
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH;
      jDayChooser0.setMaxDayCharacters(2);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(43);
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      jDayChooser0.init();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      SystemColor systemColor1 = SystemColor.desktop;
      MapDialog mapDialog0 = new MapDialog();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3252219768210214
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("{T><p[1R\"", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy(".1", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setSundayForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getMaxSelectableDate();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser1.getWeekdayForeground();
      Locale locale0 = new Locale(".1", "p_.hh0_5", "p_.hh0_5");
      jDayChooser1.setLocale(locale0);
      jDayChooser1.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser1.setMaxSelectableDate(date0);
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.119118578775435
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0.0, 0.0, 0.0, 2028.0);
      JSpinner jSpinner0 = new JSpinner(spinnerNumberModel0);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jDayChooser0.setDay(36);
      jDayChooser0.setMonth(36);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI2 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI3 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI3.new MetalComboBoxLayoutManager();
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      Color.getColor("onend", 1697);
      namedProfileCache0.request("onend");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMonth(832);
      Color color0 = Color.orange;
      assertEquals(1, color0.getTransparency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.096676908145428
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.focusLost((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1647413942639915
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("11", "x", "gE1><n9\bs*m9D  x1");
      jDayChooser0.getSelectedDay();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Font font0 = new Font("resources_execute_scripts_without_file_restriction.tooltip", 39, (-4568));
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.setYear((-1418));
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("3");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2402706067587856
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 37, 228, 15, 37);
      mockGregorianCalendar0.set(228, 1526, 105, 228, 2016);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.init();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      SystemColor systemColor1 = SystemColor.desktop;
      jDayChooser0.setSundayForeground(systemColor1);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getWeekdayForeground();
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null, "West");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.274428544284149
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 11);
      jDayChooser0.getTreeLock();
      focusEvent0.setSource("org.apache.batik.ext.awt.geom.PathLength");
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(38);
      Color color0 = Color.orange;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Color color1 = labelView0.getForeground();
      Color.getColor("day", 110);
      jDayChooser0.setWeekdayForeground(color1);
      MockDate mockDate0 = new MockDate(3311L);
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setMaxSelectableDate(date0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.346263632978899
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Font font0 = new Font("Prefix in exclude-result-prefixes is not valid: {0}", 137, 46);
      Font font1 = Font.getFont("x", font0);
      jDayChooser0.setFont(font1);
      Locale locale0 = Locale.KOREAN;
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(0, color1.getGreen());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(100);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 48, 46, (-1), (-764), ':');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-138));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1976586683100168
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(8197);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8197, 8197, 8197, 8197, 'D');
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3303289227862956
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setFocusable(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setSundayForeground(systemColor0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Date date1 = jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      Locale locale0 = new Locale("p_.hh0_5", "p_.hh0_5", "14");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.setMaxSelectableDate(date0);
      assertNotSame(date0, date1);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.160947366049311
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters(8714);
      jDayChooser0.drawDays();
      int int0 = 1388;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1388, (String) null);
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      actionEvent0.paramString();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE;
      actionEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2655217365316687
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(true);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      MetalComboBoxUI.createUI(jDayChooser0);
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("13", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("x&g;pi#4=[", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("28", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("28", vetoableChangeListenerProxy2);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy3);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.updateUI();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1902, 37, 228, 1902, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(477, (-1), 1902, 1902, 1902);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar((-1), (-1892), 9, 0, 48);
      mockGregorianCalendar2.set(1526, 0, 37, (-1), (-1431655763));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.init();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      SystemColor systemColor1 = SystemColor.desktop;
      MapDialog mapDialog0 = new MapDialog();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getExpandedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("(&H[^Nd", (Icon) null);
      // Undeclared exception!
      try { 
        mapDialog0.addAccelerator(jRadioButtonMenuItem0, "T~BV_d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.hooks.MindMapHookAdapter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.170076619162811
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 37, 228, 15, 37);
      mockGregorianCalendar0.set(228, 1526, 105, 228, 2016);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.init();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxSelectableDate();
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getDaysInMonth();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener1);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      AWTEventMulticaster.remove(inputMethodListener3, inputMethodListener3);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      jDayChooser0.getListeners(class0);
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("T Or^#=B3ac#;");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.134580704577775
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDay(7);
      Color.getColor(", id ");
      jDayChooser0.setFocus();
      DocumentImpl documentImpl0 = new DocumentImpl();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(documentImpl0);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(documentImpl0);
      SVGGraphics2D sVGGraphics2D2 = new SVGGraphics2D(sVGGraphics2D1);
      sVGGraphics2D2.getFont();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton1.paint(sVGGraphics2D2);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener1);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove(inputMethodListener3, inputMethodListener2);
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.add(inputMethodListener3, inputMethodListener4);
      AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      InputMethodListener inputMethodListener6 = AWTEventMulticaster.remove(inputMethodListener5, inputMethodListener2);
      AWTEventMulticaster.remove(inputMethodListener3, inputMethodListener3);
      InputMethodListener inputMethodListener7 = AWTEventMulticaster.add(inputMethodListener4, inputMethodListener2);
      InputMethodListener inputMethodListener8 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener7);
      AWTEventMulticaster.add(inputMethodListener3, inputMethodListener6);
      AWTEventMulticaster.add(inputMethodListener8, (InputMethodListener) null);
      InputMethodListener inputMethodListener9 = AWTEventMulticaster.add(inputMethodListener8, inputMethodListener6);
      AWTEventMulticaster.add(inputMethodListener9, inputMethodListener4);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel();
      spinnerNumberModel0.getValue();
      jDayChooser0.getListeners(class0);
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("ISO-8859-1");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.256049986245462
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      JList<MockCalendar> jList0 = new JList<MockCalendar>();
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      jDayChooser0.repaint();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("Windows", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.oldYear = 20;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jYearChooser0.setDayChooser(jDayChooser0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jDayChooser1.drawWeeks();
      JDayChooser jDayChooser2 = jYearChooser0.dayChooser;
      jDayChooser2.getMaxDayCharacters();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      ElemAttributeSet elemAttributeSet0 = new ElemAttributeSet();
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("day", "org.apache.crimson.parser.Parser2$NullHandler");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2654936356808375
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getDay();
      int int0 = 46;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 46, 0L, 46, 49, 'F');
      keyEvent0.setKeyCode(44);
      keyEvent0.paramString();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.isRequestFocusEnabled();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(920);
      float float0 = 1098.653F;
      float float1 = (-307.017F);
      int int1 = 238;
      long long0 = (-516L);
      int int2 = 364;
      int int3 = 30;
      int int4 = (-101);
      boolean boolean0 = false;
      jDayChooser1.isPaintingTile();
      ActionEvent actionEvent0 = new ActionEvent("k&", 364, "day", (-1991));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.163571434582447
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(47, 47, 47, 47);
      JSpinner jSpinner0 = new JSpinner(spinnerNumberModel0);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jDayChooser0.weekPanel = (JPanel) jSpinner_NumberEditor0;
      jDayChooser0.setDay(36);
      jDayChooser0.setMonth((-265));
      jDayChooser0.setEnabled(false);
      HsqlProperties hsqlProperties0 = new HsqlProperties("");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(1);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      SpinnerNumberModel spinnerNumberModel1 = new SpinnerNumberModel();
      spinnerNumberModel1.getValue();
      jDayChooser0.getListeners(class0);
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1977896534372507
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      SystemColor systemColor0 = SystemColor.desktop;
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1926.78F;
      floatArray0[2] = (float) 0;
      systemColor0.getRGBColorComponents(floatArray0);
      SystemColor systemColor1 = SystemColor.textInactiveText;
      systemColor1.getColorSpace();
      Color.getColor("28", 0);
      namedProfileCache0.request("28");
      jDayChooser0.setMonth(100);
      Color color0 = Color.orange;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.setForeground(systemColor1);
      jDayChooser0.setEnabled(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = new Dimension();
      jDayChooser0.getDayPanel();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      BasicDesktopIconUI basicDesktopIconUI0 = new BasicDesktopIconUI();
      // Undeclared exception!
      try { 
        basicDesktopIconUI0.getMinimumSize(jDayChooser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicDesktopIconUI", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0919603828909605
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("{T><p[1R\"", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy(".1", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy(".1", vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Center");
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      ActionEvent actionEvent0 = new ActionEvent(metalComboBoxUI1, (-425), "o'[y;0E2NR", 0);
      jDayChooser0.addListeners(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 37, 228, 15, 37);
      JTextField jTextField0 = new JTextField("day");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tile ");
      Character character0 = Character.valueOf('H');
      Character.isAlphabetic(11);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 228);
      Character.compare('H', 'M');
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      KeyStroke.getKeyStroke('H');
      jDayChooser0.getConditionForKeyStroke(keyStroke0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI1.new MetalComboBoxLayoutManager();
      metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      JTextArea jTextArea0 = new JTextArea();
      Dimension dimension0 = jTextArea0.getPreferredSize();
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("{T><p[1R\"", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("1tjSCjL':S/Z]EF;-9", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("{T><p[1R\"", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener1);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      AWTEventMulticaster.remove(inputMethodListener3, inputMethodListener3);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener3);
      AWTEventMulticaster.add(inputMethodListener2, inputMethodListener4);
      AWTEventMulticaster.add(inputMethodListener2, inputMethodListener3);
      AWTEventMulticaster.add(inputMethodListener3, inputMethodListener4);
      AWTEventMulticaster.add(inputMethodListener3, inputMethodListener3);
      AWTEventMulticaster.add(inputMethodListener2, inputMethodListener4);
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("oq");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = new Boolean(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("Rg*", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("_(jXfFUAcg9", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy("V", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy6 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy7 = new VetoableChangeListenerProxy("paleturquoise", vetoableChangeListenerProxy6);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      JButton jButton0 = new JButton(" @P");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 4985, "wn8", (-765));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" @P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.096711151984391
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("W", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("11", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("11", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("Windows", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy("12", vetoableChangeListenerProxy4);
      VetoableChangeListenerProxy vetoableChangeListenerProxy6 = new VetoableChangeListenerProxy("0", vetoableChangeListenerProxy1);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1656232229640757
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      Boolean boolean0 = new Boolean("day");
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      jDayChooser0.setDay(397);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl1 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI2 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI3 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI3.new MetalComboBoxLayoutManager();
      SystemColor systemColor0 = SystemColor.desktop;
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      SystemColor systemColor1 = SystemColor.textInactiveText;
      systemColor1.getColorSpace();
      Color.getColor("28", 397);
      namedProfileCache0.request("day");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMonth(933);
      assertEquals(31, jDayChooser0.getDay());
      
      Color color0 = Color.orange;
      jDayChooser1.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2063613534191644
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getTreeLock();
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.setFocus();
      jDayChooser0.updateUI();
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 3, (String) null, (-2540));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.129569339259775
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("{T><p[1R\"", vetoableChangeListener0);
      MetalComboBoxUI metalComboBoxUI2 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI3 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI4 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager1 = metalComboBoxUI4.new MetalComboBoxLayoutManager();
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      namedProfileCache0.request("{T><p[1R\"");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(14);
      Color color0 = Color.orange;
      assertEquals(1, color0.getTransparency());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.firePropertyChange("`{9?", (byte)0, (byte)0);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1241565116561474
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getHierarchyBoundsListeners();
      jDayChooser1.getDaysInMonth();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.updateUI();
      jDayChooser1.setWeekOfYearVisible(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle(styleContext_NamedStyle0);
      StyleContext styleContext2 = new StyleContext();
      StringContent stringContent0 = new StringContent(18);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext2);
      defaultStyledDocument0.getStyle("day");
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext2.new NamedStyle("day", (Style) null);
      StyleContext.NamedStyle styleContext_NamedStyle3 = styleContext2.new NamedStyle();
      styleContext_NamedStyle3.copyAttributes();
      Font font0 = styleContext2.getFont((AttributeSet) styleContext_NamedStyle2);
      jDayChooser2.setFont(font0);
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2404039483744196
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser0.isWeekOfYearVisible();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 49, 49, (-2734), (-759), '!', 2);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      try { 
        jDayChooser0.getMousePosition(false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.05861803958271
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      try { 
        fileUtil0.openInputStreamElement("day");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.164858013699787
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.setDay(0);
      Color color0 = jDayChooser0.getSundayForeground();
      Color.getColor("c%,nsH$yl~(fp");
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      ActionEvent actionEvent0 = new ActionEvent(color0, 0, "day", 0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Color cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "plugins.map.FreeMindMapController");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.124806616475451
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH;
      jDayChooser0.setMaxDayCharacters(13);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(43);
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      JMapViewer jMapViewer0 = new JMapViewer((TileCache) null, 0);
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      databaseConnectionHook1.getMindMapController();
      FreeMindMapController freeMindMapController0 = null;
      try {
        freeMindMapController0 = new FreeMindMapController(jMapViewer0, (MindMapController) null, (JDialog) null, mapDialog0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.FreeMindMapController", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1070155606793213
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH;
      jDayChooser0.setMaxDayCharacters(2);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(43);
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      JMapViewer jMapViewer0 = new JMapViewer((TileCache) null, 0);
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      databaseConnectionHook1.getMindMapController();
      FreeMindMapController freeMindMapController0 = null;
      try {
        freeMindMapController0 = new FreeMindMapController(jMapViewer0, (MindMapController) null, (JDialog) null, mapDialog0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.FreeMindMapController", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1348698575597207
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      Boolean boolean0 = new Boolean("day");
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI1.new MetalComboBoxLayoutManager();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager1 = metalComboBoxUI1.new MetalComboBoxLayoutManager();
      JTextField jTextField0 = new JTextField("day");
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager1.preferredLayoutSize(jTextField0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser2 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser2.today;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      stringArray0[1] = "rWp ''W;,Eg4$_Po]#";
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser2.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.143341122543841
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH;
      jDayChooser1.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser1.getMaxDayCharacters());
      
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(13);
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 726);
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      databaseConnectionHook1.getMindMapController();
      JMapViewer jMapViewer1 = new JMapViewer(memoryTileCache0, 1);
      int int1 = jDayChooser0.getDay();
      assertEquals(14, int1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.209172472317054
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingForPrint();
      Boolean boolean0 = new Boolean("day");
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl1 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager1 = metalComboBoxUI1.new MetalComboBoxLayoutManager();
      JTextField jTextField0 = new JTextField("day");
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager2 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      metalComboBoxUI_MetalComboBoxLayoutManager2.preferredLayoutSize(jTextField0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 19, (-2232L), 882, 882, '0', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove(inputMethodListener2, inputMethodListener2);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel();
      spinnerNumberModel0.getValue();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getListeners(class0);
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1239924775325862
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis((-4439L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JTextField jTextField0 = new JTextField("day");
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("12", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("freemind.controller.actions.generated.instance.TransferableContent", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("N", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("3", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("N", vetoableChangeListenerProxy3);
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy("1%#so&`Dcl_.7Ndh", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy6 = new VetoableChangeListenerProxy("N", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy7 = new VetoableChangeListenerProxy("n", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy8 = new VetoableChangeListenerProxy("N", vetoableChangeListenerProxy5);
      VetoableChangeListenerProxy vetoableChangeListenerProxy9 = new VetoableChangeListenerProxy("Windows", vetoableChangeListenerProxy3);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1202276824104573
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters(28);
      jDayChooser0.getContainerListeners();
      jDayChooser0.drawDays();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.setDay(36);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1348683408984384
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyStroke.getKeyStroke((String) null);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("N", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("N", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy3);
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy4);
      VetoableChangeListenerProxy vetoableChangeListenerProxy6 = new VetoableChangeListenerProxy("accessories.plugins.time.JDayChooser$DecoratorButton", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy7 = new VetoableChangeListenerProxy("26", vetoableChangeListenerProxy3);
      VetoableChangeListenerProxy vetoableChangeListenerProxy8 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy7);
      VetoableChangeListenerProxy vetoableChangeListenerProxy9 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy10 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy9);
      VetoableChangeListenerProxy vetoableChangeListenerProxy11 = new VetoableChangeListenerProxy("N", vetoableChangeListenerProxy9);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy7);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2309136062164603
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("x&g;pi#4=[", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("x&g;pi#4=[", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy2);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.isPaintingForPrint();
      int int0 = 0;
      jDayChooser0.setDay(0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      // Undeclared exception!
      try { 
        metalComboBoxUI0.getPreferredSize((JComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.metal.MetalComboBoxUI", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Color.getColor("org.xmlpull.mxp1.MXParserFactory");
      DocumentImpl documentImpl0 = new DocumentImpl();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      MapDialog mapDialog0 = null;
      Coordinate coordinate0 = null;
      BrowseMode browseMode0 = new BrowseMode();
      // Undeclared exception!
      try { 
        browseMode0.getDefaultModeController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.browsemode.BrowseMode", e);
      }
  }
}
