/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 00:38:44 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.FileNotFoundException;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.time.DateTimeException;
import java.time.ZoneOffset;
import java.time.chrono.Chronology;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import javax.help.BackAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.basic.BasicPopupMenuSeparatorUI;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemTemplateElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7902488130485366
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 36, (-2310L), 36, 36, '\"', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      Object object0 = new Object();
      BackAction backAction0 = new BackAction(object0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) backAction0, (MouseListener) backAction0);
      jDayChooser0.addMouseListener(mouseListener0);
      Locale locale0 = JComponent.getDefaultLocale();
      Locale.getISOLanguages();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      Locale.forLanguageTag(",0[kV<'5t<;Lbe`Q");
      locale0.getDisplayVariant();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(false);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertSame(date0, date1);
      
      jDayChooser0.setMaxDayCharacters(27);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6789477095792162
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("91QQvK,k1$%", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("huia`lG", vetoableChangeListenerProxy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("lQXG2JD", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("setDisplayToFitMapMarkers", vetoableChangeListenerProxy2);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFocus();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.calendar = null;
      // Undeclared exception!
      try { 
        jDayChooser3.drawDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.799517964535027
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      jDayChooser0.repaint();
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jList0);
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("i6{NZ>(%]GH]", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("accessories.plugins.time.JDayChooser", vetoableChangeListenerProxy0);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate((Date) null);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange((Date) null, date1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("T6'2}i3ZAYW/v->|", vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      Timestamp timestamp0 = new Timestamp(0);
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 0, "VX#/w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.76639130174906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy(" @@gpYd^DE<8+]>>", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy(">-7~CH DY Gv_Rz~", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("accessories.plugins.time.JDayChooser", vetoableChangeListenerProxy0);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      Date date1 = jDayChooser0.minSelectableDate;
      Date date2 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date2, date1);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2264, 3372L, 2264, 6, 'U');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy(">-7~CH DY Gv_Rz~", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("accessories.plugins.time.JDayChooser", vetoableChangeListenerProxy0);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.drawDays();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-708L), (-613), 39, '?');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.setMaxSelectableDate(date0);
      assertEquals(15, jDayChooser1.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7666238054495484
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.updateUI();
      jDayChooser0.isPaintingForPrint();
      Color color0 = Color.WHITE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 9800, 9800, 27, 27, '`');
      jDayChooser0.keyPressed(keyEvent0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-2013));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, (-2013), (-1786), 't');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = new Timestamp((-374L));
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.BASELINE_SHIFT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2871), 471, 25, (-1988), 355);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getParagraphElement(324);
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.752045603240397
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFocus();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(0);
      jDayChooser2.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager1 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager1.preferredLayoutSize(jDayChooser0);
      Color color0 = Color.magenta;
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      BasicPopupMenuSeparatorUI basicPopupMenuSeparatorUI0 = new BasicPopupMenuSeparatorUI();
      basicPopupMenuSeparatorUI0.getMinimumSize(jDayChooser_DecoratorButton0);
      BufferedImage bufferedImage0 = imageHandlerBase64Encoder0.buildBufferedImage(dimension0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      jDayChooser_DecoratorButton0.paint(graphics2D0);
      assertEquals(203, dimension0.width);
      
      jDayChooser1.isDayBordersVisible();
      Color color1 = jDayChooser1.getWeekdayForeground();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(90, color1.getGreen());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.getTreeLock();
      jDayChooser0.updateUI();
      jDayChooser0.isPaintingForPrint();
      Color color0 = Color.WHITE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 9800, 9800, 27, 27, '`');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.isPaintingForPrint();
      Color color0 = Color.WHITE;
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(27);
      jDayChooser1.drawDays();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Color color1 = jTable0.getGridColor();
      jDayChooser1.setForeground(color1);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 27);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawDays();
      assertEquals(27, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "13");
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getBaselineResizeBehavior();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.init();
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getComponentListeners();
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, (String) null, 2128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7938941070724335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getLocale();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      jDayChooser0.repaint();
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 39);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL;
      ActionEvent actionEvent0 = new ActionEvent(jList0, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, "freemind.extensions.NodeHookAdapter", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      KeyEvent keyEvent0 = new KeyEvent(jList0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (-874L), (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB, 26, '2');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton((-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist -125
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser0.setDay(3257);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      Timestamp timestamp0 = new Timestamp(4L);
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      JLabel jLabel0 = new JLabel("18");
      KeyEvent keyEvent0 = new KeyEvent(jLabel0, 3881, (-4569L), (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, '%');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8645700957677156
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      jDayChooser0.repaint();
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      assertEquals(203, dimension0.width);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jList0, 140, 1492, 203, 21, '[');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JTextPane jTextPane0 = new JTextPane();
      Color color0 = jTextPane0.getSelectedTextColor();
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7216895901039444
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.firePropertyChange("day", (short)8816, (short)8816);
      jDayChooser1.setYear(2448);
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      Color color0 = jDayChooser1.decorationBackgroundColor;
      Color.getColor("day");
      JScrollPane jScrollPane0 = new JScrollPane(jDayChooser0);
      JScrollBar jScrollBar0 = jScrollPane0.createHorizontalScrollBar();
      jScrollBar0.getMinimumSize();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("XW$kfJnm8u^}Z", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy2);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser1.setDayBordersVisible(false);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setFocus();
      jDayChooser0.setMaxDayCharacters(17);
      jDayChooser2.drawDays();
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.746209545491266
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.getTreeLock();
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("accessories.plugins.time.JDayChooser", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("Deregistration of note undo handler.", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.setFocus();
      jDayChooser0.initialized = false;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMaxDayCharacters(1);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("u`vZ9UtI^^Uws=*xMb", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("u`vZ9UtI^^Uws=*xMb", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("u`vZ9UtI^^Uws=*xMb", vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy2);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      Locale locale0 = Locale.CHINESE;
      jDayChooser1.setLocale(locale0);
      jDayChooser2.getUI();
      assertEquals(14, jDayChooser2.getDay());
      
      jDayChooser2.setDay(49);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 49, (-1L), 49, 49, 'r');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7617125929967696
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL;
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      jDayChooser1.setBorder(softBevelBorder0);
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.getTreeLock();
      jDayChooser0.updateUI();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager1 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      Color color0 = Color.magenta;
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      BasicPopupMenuSeparatorUI basicPopupMenuSeparatorUI0 = new BasicPopupMenuSeparatorUI();
      basicPopupMenuSeparatorUI0.getMinimumSize(jDayChooser0);
      jDayChooser0.isDayBordersVisible();
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color1.getBlue());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = Color.WHITE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      jDayChooser0.setDay(20);
      assertEquals(20, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.getTreeLock();
      jDayChooser0.updateUI();
      jDayChooser0.isPaintingForPrint();
      Color color0 = Color.WHITE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth(3469);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("mWjW2'EoG");
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem1;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 140, 0L, 629, 210, '@', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.660726144843012
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isPaintingForPrint();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      assertTrue(jDayChooser2.isDayBordersVisible());
      
      jDayChooser2.setDayBordersVisible(false);
      jDayChooser1.setMonth((byte) (-92));
      Color color0 = Color.orange;
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis(340L);
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)18;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy(" @@gpYd^DE<8+]>>", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("0=4X&)<TsVt<", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("Dialog Plain 11", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("Dialog Plain 11", vetoableChangeListenerProxy2);
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Date date2 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("T6'2}i3ZAYW/v->|", vetoableChangeListenerProxy2);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      Timestamp timestamp0 = new Timestamp((byte)18);
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      ActionEvent actionEvent0 = new ActionEvent(" @@gpYd^DE<8+]>>", (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, (String) null);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemTemplateElement elemTemplateElement0 = new ElemTemplateElement();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemTemplateElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(275);
      Color color0 = Color.orange;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      int int0 = 0;
      jDayChooser0.addListeners(0);
      jDayChooser0.setMonth(0);
      try { 
        jDayChooser0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(28, "day", 28, 0, 0, 320, (-483), 100, 320, (-2459), 10000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -483
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7885725698735073
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL;
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, 1L, 557, 9, 'f');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date0 = jDayChooser0.minSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.adjustWidthToMaximumValue();
      Color color0 = jYearChooser0.darkGreen;
      Color.getColor("", color0);
      jDayChooser0.setWeekdayForeground(color0);
      System.setCurrentTimeMillis((-9223372036854775808L));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1431655763));
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(false);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL;
      int int0 = 1797;
      int int1 = (-3196);
      int int2 = (-1253);
      int int3 = 223;
      int int4 = 27;
      int int5 = (-177);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(40, (-2658), 42);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 40 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("*FddtEmRT!_qeR", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("*FddtEmRT!_qeR", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy2);
      Timestamp timestamp0 = new Timestamp(3257);
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.BASELINE_SHIFT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(18434, (int) gVTAttributedCharacterIterator_TextAttribute1.ORIENTATION_AUTO, 18434, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO, 99);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (int) gVTAttributedCharacterIterator_TextAttribute1.ARABIC_NONE, "GJlw(?`D?g>>");
      mockGregorianCalendar0.set(946, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (int) gVTAttributedCharacterIterator_TextAttribute1.ORIENTATION_ANGLE);
      jDayChooser0.setMonth(120);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.firePropertyChange("`{9?", (byte)0, (byte)0);
      jDayChooser0.getAncestorListeners();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.firePropertyChange("`{9?", (byte)0, (byte)0);
      jDayChooser0.getAncestorListeners();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingForPrint();
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setDay(3257);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3257, 's', 3257, 3257, 's');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("*0^(6,#ePeU=Sk8Xm4e", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy(":SP", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy(":SP", vetoableChangeListenerProxy0);
      String string0 = "Dialog Plain 11";
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy(":SP", vetoableChangeListenerProxy2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("20", vetoableChangeListenerProxy2);
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Date date2 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date2);
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy2);
      Timestamp timestamp0 = new Timestamp((byte)16);
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      // Undeclared exception!
      try { 
        Chronology.of("accessories.plugins.time.JDayChooser$1");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unknown chronology: accessories.plugins.time.JDayChooser$1
         //
         verifyException("java.time.chrono.AbstractChronology", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      try { 
        fileUtil0.openInputStreamElement("day");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InputMap inputMap0 = new InputMap();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, color0.getGreen());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7519181095520198
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager1 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager1.preferredLayoutSize(jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("Deregistration of note undo handler.", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("Deregistration of note undo handler.", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      jDayChooser1.setDayBordersVisible(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setFocus();
      JDayChooser jDayChooser3 = new JDayChooser();
      JDayChooser jDayChooser4 = new JDayChooser();
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      jDayChooser3.setLocale(locale0);
      jDayChooser2.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser2.getMaxDayCharacters());
      
      jDayChooser4.drawDays();
      assertEquals(14, jDayChooser4.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6266116706270757
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters(8714);
      jDayChooser0.drawDays();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("Gm?XZ'4-|\\,i69", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("Xr-fh|bfF1XwS", vetoableChangeListenerProxy1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("MuI;?nd{m-'", vetoableChangeListenerProxy0);
      jDayChooser0.repaint((long) (-1310), 27, 28, (-1578), (-1310));
      VetoableChangeListenerProxy vetoableChangeListenerProxy5 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy5);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setFocus();
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1310));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser1.drawDays();
      jDayChooser4.getDaysInMonth();
      JDayChooser jDayChooser5 = new JDayChooser();
      jDayChooser5.setDay(14);
      assertEquals(14, jDayChooser5.getDay());
      assertFalse(jDayChooser5.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6789477095792162
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isPaintingForPrint();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-24);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("91QQvK,k1$%", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("huia`lG", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("lQXG2JD", vetoableChangeListenerProxy1);
      jDayChooser0.repaint(0L, (int) (byte) (-24), (int) (byte) (-24), (-1310), (int) (byte) (-24));
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("setDisplayToFitMapMarkers", vetoableChangeListenerProxy2);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFocus();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.drawDays();
      jDayChooser1.getDaysInMonth();
      jDayChooser3.setDay(14);
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "11");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingForPrint();
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setDay(0);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, '[', 0, 0, '[');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = new Timestamp((-374L));
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      Class<DefaultEditorKit.PasteAction> class0 = DefaultEditorKit.PasteAction.class;
      jDayChooser0.getListeners(class0);
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu((String) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.getDay();
      jDayChooser0.getDecorationBackgroundColor();
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.firePropertyChange("", (short)205, (short)205);
      jDayChooser1.setFocusTraversalPolicyProvider(true);
      Color color0 = jDayChooser1.decorationBackgroundColor;
      Color.getColor("Ignoring attempt to add an existent listener.");
      jDayChooser0.setDecorationBackgroundColor(color0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.isWeekOfYearVisible();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      BasicPopupMenuSeparatorUI basicPopupMenuSeparatorUI0 = new BasicPopupMenuSeparatorUI();
      Stack<Calendar> stack0 = new Stack<Calendar>();
      DefaultComboBoxModel<Calendar> defaultComboBoxModel0 = new DefaultComboBoxModel<Calendar>(stack0);
      JComboBox<Calendar> jComboBox0 = new JComboBox<Calendar>(defaultComboBoxModel0);
      basicPopupMenuSeparatorUI0.getMinimumSize(jComboBox0);
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      Dimension dimension0 = basicSplitPaneUI0.getPreferredSize(jComboBox0);
      // Undeclared exception!
      try { 
        imageHandlerBase64Encoder0.buildBufferedImage(dimension0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = new Timestamp((-374L));
      timestamp0.toLocalDateTime();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.BASELINE_SHIFT;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute2 = GVTAttributedCharacterIterator.TextAttribute.BASELINE_SHIFT;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute3 = GVTAttributedCharacterIterator.TextAttribute.X;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute4 = GVTAttributedCharacterIterator.TextAttribute.VERTICAL_ORIENTATION;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      ActionEvent actionEvent0 = new ActionEvent(integer1, 26, "?v'Om!6aI?*7lL@|Y_");
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.getLocale();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      jList0.setVerifyInputWhenFocusTarget(false);
      jList0.getSelectionBackground();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7338489388415077
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.getTreeLock();
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("accessories.plugins.time.JDayChooser", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("Deregistration of note undo handler.", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      Timestamp timestamp0 = new Timestamp(140);
      timestamp0.toLocalDateTime();
      jDayChooser1.setWeekOfYearVisible(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL;
      ActionEvent actionEvent0 = new ActionEvent(metalComboBoxUI_MetalComboBoxLayoutManager0, (-554), "TWnho[Y!~wV)6oR$", (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING);
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setFocus();
      JDayChooser jDayChooser3 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser3.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser1.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL);
      jDayChooser1.drawDays();
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser2.setDay(228);
      assertEquals(28, jDayChooser2.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.641992437260311
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jMonthChooser0.setUI(basicPanelUI0);
      jMonthChooser0.getToolkit();
      jMonthChooser0.getAutoscrolls();
      jMonthChooser0.setFocusTraversalKeysEnabled(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }
}
