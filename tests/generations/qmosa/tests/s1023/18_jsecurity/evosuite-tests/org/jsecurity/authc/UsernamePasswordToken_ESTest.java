/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:39:43 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.584760226011736
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(",`e7e,M6yqL", "", true);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(true);
      InetAddress inetAddress0 = MockInetAddress.getByName(",`e7e,M6yqL");
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPassword();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-18);
      InetAddress inetAddress1 = MockInetAddress.getByAddress(byteArray0);
      usernamePasswordToken0.setInetAddress(inetAddress1);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("];!LGS+", "", false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "AGOi7I)ydxO^jRS");
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "", false, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, false, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "#8qNUl@C&QQ(P~v3fYc", false);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("n[<*IE$Q<VNFs/}r8G|", "`Uw94ug", true);
      usernamePasswordToken0.isRememberMe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("XYhZhUbp:<Ahjj", "rMB#9gn}Tl\"", true);
      usernamePasswordToken0.getPrincipal();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[4] = 'H';
      charArray0[4] = ' ';
      charArray0[5] = 'H';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("g}dr`@1Bs\",?^kUb@tc", "g}dr`@1Bs\",?^kUb@tc");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      char[] charArray0 = new char[9];
      charArray0[1] = ':';
      charArray0[2] = '|';
      charArray0[3] = 'm';
      charArray0[4] = '|';
      charArray0[5] = 'K';
      charArray0[6] = '}';
      charArray0[7] = '|';
      charArray0[8] = 'T';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = ':';
      charArray0[2] = '|';
      charArray0[3] = 'm';
      charArray0[4] = '|';
      charArray0[5] = 'K';
      charArray0[6] = '}';
      charArray0[7] = '|';
      charArray0[8] = 'T';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("YV'gx=iULQf?", charArray0, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = '#';
      charArray0[2] = 'p';
      charArray0[3] = 'i';
      charArray0[4] = '4';
      charArray0[5] = ':';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" (", "[MNW8xLJ$%N<Bx{wil");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken -  (, rememberMe=false", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[2] = '>';
      charArray0[3] = 'E';
      charArray0[4] = ']';
      charArray0[5] = 's';
      charArray0[6] = ']';
      charArray0[7] = 'E';
      charArray0[8] = '{';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Uw^//Fk\"4@", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(")", (String) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = '\'';
      charArray0[3] = ']';
      charArray0[4] = 'n';
      charArray0[5] = 'Q';
      charArray0[6] = '4';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("mZQQ.A+V:", "mZQQ.A+V:");
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername("IHaT.F;Q*T");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*W;Gp=C.J?t\"%-lL@T", "AGOi7I)ydxO^jRS", false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = ' ';
      charArray0[5] = 'H';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[1] = '\u001C';
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = 'Z';
      charArray0[4] = '6';
      charArray0[5] = 'F';
      charArray0[6] = '7';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("FDF9Dqn<fSPGqN2HCxl", (char[]) null, true);
      usernamePasswordToken0.getCredentials();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "Xv8>_EFtIa k'fTF4ll");
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '/';
      charArray0[2] = '.';
      charArray0[3] = 'B';
      charArray0[4] = '{';
      charArray0[5] = 'q';
      charArray0[6] = 'X';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Fa|C]3=dOeO1f;W", charArray0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[4];
      charArray0[2] = 'C';
      charArray0[1] = 'f';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%gmMk:&fj|&0@Rs$", charArray0, false);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress1.isMulticastAddress());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("XYhZhUbp:<Ahjj", "rMB#h9Yn}Tl\"", true);
      usernamePasswordToken0.getCredentials();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }
}
