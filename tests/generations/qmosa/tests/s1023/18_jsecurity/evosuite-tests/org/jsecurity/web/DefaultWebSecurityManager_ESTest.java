/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:59:29 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.cache.CacheManager;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("classpath:org/jsecurity/cache/ehcache/ehcache.xml");
      simpleAccountRealm1.init();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("jQe)0ity");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("^u;/i*kRd!h6kq");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm3, ">.");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection1.byType(class0);
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer(collection0);
      Collection<Realm> collection1 = modularRealmAuthorizer0.getRealms();
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(collection1);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultSecurityManager0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      delegatingSubject0.getSession(true);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection1.asSet();
      servletResponseWrapper0.getResponse();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper0, servletResponseWrapper1);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.stream();
      linkedList3.removeAll(linkedList2);
      linkedList3.offerFirst(".g");
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList3, locale_FilteringMode0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("Mx[Tj_9ATOVzP@H9KH");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermission wildcardPermission0 = new WildcardPermission("H|LMt[F2\">Dvtx7oh3", false);
      WildcardPermission wildcardPermission1 = new WildcardPermission("H|LMt[F2\">Dvtx7oh3");
      wildcardPermission0.implies(wildcardPermission1);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(wildcardPermission0, "org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      simplePrincipalCollection0.asSet();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[2] = (byte)76;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)48;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, false, inetAddress0, (Session) null, defaultWebSecurityManager0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper1, servletResponseWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6469712236612866
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" Cache: Could not rebuild disk store. Initial cause was ", " Cache: Could not rebuild disk store. Initial cause was ", true, inetAddress0);
      MockThrowable mockThrowable0 = new MockThrowable("jsecurity");
      mockThrowable0.printStackTrace();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(allSuccessfulModularAuthenticationStrategy0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList3, locale_FilteringMode0);
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      defaultWebSecurityManager0.setCacheManager(hashtableCacheManager0);
      defaultWebSecurityManager0.setCacheManager(hashtableCacheManager0);
      System.setCurrentTimeMillis(1048576L);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("X.#N:b@6.J ;,Cq3'");
      defaultWebSecurityManager0.setCacheManager(hashtableCacheManager0);
      defaultWebSecurityManager0.setCacheManager((CacheManager) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("}mUV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [}mUV].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8756296699050448
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      Integer integer0 = new Integer((byte) (-43));
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(integer0, "a5]a$&`&iKFI");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount(simplePrincipalCollection1, simplePrincipalCollection2);
      simpleAccount0.getRoles();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      System.setCurrentTimeMillis(3081L);
      defaultWebSecurityManager0.newSessionManagerInstance();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      doReturn((Map) null).when(servletRequest0).getParameterMap();
      doReturn((String) null).when(servletRequest0).getRemoteAddr();
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper2.getInputStream();
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper6);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper6);
      servletRequestWrapper8.getParameterMap();
      servletRequestWrapper7.getServerName();
      servletRequestWrapper1.getRemoteAddr();
      servletRequestWrapper8.setRequest(servletRequestWrapper6);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper9.getContentLength();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequest servletRequest1 = servletRequestWrapper13.getRequest();
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequest1);
      ServletRequestWrapper servletRequestWrapper15 = new ServletRequestWrapper(servletRequestWrapper4);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper16 = new ServletRequestWrapper(servletRequestWrapper7);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper0.getOutputStream();
      ServletRequestWrapper servletRequestWrapper17 = new ServletRequestWrapper(servletRequestWrapper15);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      Subject subject0 = null;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper2, servletResponseWrapper2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.FRANCE;
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      Locale locale3 = Locale.FRANCE;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList8, (Collection<String>) set0, locale_FilteringMode0);
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0204142811723194
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getContentLength();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper2.flushBuffer();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper2, servletResponseWrapper4);
      assertFalse(boolean0);
      
      servletResponseWrapper1.isCommitted();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      byte[] byteArray0 = new byte[4];
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      byteArray0[0] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((byte)41);
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((byte)41);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-26);
      byteArray0[3] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("jQe)0ity");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm("jQe)0ity");
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getContentLength();
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper7);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper11);
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper12);
      servletRequestWrapper2.getServerName();
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequestWrapper3);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) null, true, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertTrue(subject0.isAuthenticated());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getContentLength();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper4, servletResponseWrapper2);
      System.setCurrentTimeMillis(556L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8207751622034678
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      doReturn((Map) null).when(servletRequest0).getParameterMap();
      doReturn((String) null).when(servletRequest0).getRemoteAddr();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn((String) null).when(servletRequest0).getScheme();
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper0.getInputStream();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper4.getParameterMap();
      servletRequestWrapper3.getScheme();
      servletRequestWrapper5.getServerName();
      servletRequestWrapper3.getRemoteAddr();
      servletRequestWrapper4.setRequest(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper4.getContentLength();
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper6);
      byte[] byteArray0 = new byte[4];
      servletRequestWrapper3.getRequest();
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, false, inetAddress0, (Session) null, defaultWebSecurityManager0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper6, servletResponseWrapper1);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper8, servletResponseWrapper0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
      assertFalse(subject0.isAuthenticated());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)41;
      byteArray0[6] = (byte)41;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(linkedList3);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      defaultWebSecurityManager0.getSessionMode();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.131533228867872
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      defaultWebSecurityManager0.setCacheManager((CacheManager) null);
      defaultWebSecurityManager0.setCacheManager((CacheManager) null);
      defaultWebSecurityManager0.setSessionMode("http");
      System.setCurrentTimeMillis(1048576L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.156958459902444
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieSecure(true);
      defaultWebSecurityManager0.setSessionIdCookieName("DPb.");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper0 = null;
      try {
        servletResponseWrapper0 = new ServletResponseWrapper((ServletResponse) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      byte[] byteArray0 = new byte[4];
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-43);
      Integer integer0 = new Integer((byte) (-43));
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(integer0, "a5]a$&`&iKFI");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount(simplePrincipalCollection1, simplePrincipalCollection2);
      simpleAccount0.getRoles();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      defaultWebSecurityManager0.checkRoles(simplePrincipalCollection0, list0);
      byteArray0[3] = (byte)96;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookiePath("^kx-L8_TNhait,~@");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'G';
      charArray0[2] = '9';
      simpleAccountRealm0.afterAuthorizationCacheSet();
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = 'G';
      charArray0[6] = ',';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0, false);
      assertNull(usernamePasswordToken0.getUsername());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("classpath:org/jsecurity/cache/ehcache/ehcache.xml");
      simpleAccountRealm1.init();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("jQe)0ity");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("mCk|j2KHT$e");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      linkedList0.add((Realm) simpleAccountRealm13);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("classpath:org/jsecurity/cache/ehcache/ehcache.xml");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [classpath:org/jsecurity/cache/ehcache/ehcache.xml].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0018442867649786
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("http");
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm("yQZ.MJ");
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm("E=uMs`s`]");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("E=uMs`s`]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletResponse0).getBufferSize();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      servletResponseWrapper2.getLocale();
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper5);
      servletResponseWrapper10.setBufferSize((-1050));
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper2);
      servletResponseWrapper14.getBufferSize();
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper6);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      servletResponseWrapper8.setBufferSize(953);
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper11);
      servletResponseWrapper2.setContentLength(843);
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponseWrapper17);
      ServletResponseWrapper servletResponseWrapper19 = new ServletResponseWrapper(servletResponseWrapper8);
      ServletResponseWrapper servletResponseWrapper20 = new ServletResponseWrapper(servletResponseWrapper14);
      ServletResponseWrapper servletResponseWrapper21 = new ServletResponseWrapper(servletResponseWrapper15);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper15);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = ',';
      charArray0[2] = '9';
      charArray0[3] = 'G';
      charArray0[4] = 'D';
      charArray0[5] = 'N';
      System.setCurrentTimeMillis(319L);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(1);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getContentLength();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper2);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper4);
      assertFalse(servletRequestWrapper6.equals((Object)servletRequestWrapper1));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      simpleAccountRealm0.init();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("jQe)0ity");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm("jQe)0ity");
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm("jQe)0ity");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm12);
      boolean boolean0 = defaultWebSecurityManager0.isHttpSessionMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.677224510844138
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("jsecuritw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [jsecuritw].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKey(byteArray0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("($");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      simpleAccountRealm2.afterAuthorizationCacheSet();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("v&mVd~:nx%);!vlPrw", "");
      simpleAccountRealm2.supports(usernamePasswordToken0);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      Class<AuthenticationToken> class0 = AuthenticationToken.class;
      simpleAccountRealm4.setAuthenticationTokenClass(class0);
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm("odbg$fw<");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm5);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1177));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }
}
