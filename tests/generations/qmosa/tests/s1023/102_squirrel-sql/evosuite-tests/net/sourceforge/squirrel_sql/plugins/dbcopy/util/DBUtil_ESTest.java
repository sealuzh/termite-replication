/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 23:31:30 GMT 2020
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.geom.AffineTransform;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JSpinner;
import javax.swing.JViewport;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.IndexInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.scheduling.concurrent.CustomizableThreadFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      ImageIcon imageIcon0 = new ImageIcon();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource1.setInheritsPopupMenu(true);
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(";R", ";R", "udy%ns)tANd_00J=0");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      System.setCurrentTimeMillis((-361L));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2017, 2017, (-4959), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getName();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("5wSh8Z|Ceal(,i4*d", icon0);
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATATYPE;
      DatabaseObjectType.createNewDatabaseObjectType("$nWX");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("$nWX", "[", "$nWX", "8Rs~erjW[G'Y)", (-2), "upa9", 7, 64, (-2), 7, "upa9", "org.apache.log4j.PropertyConfigurator, utc_date", 22, 1962, "org.apache.log4j.PropertyConfigurator, utc_date");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType.createNewDatabaseObjectType("8Rs~erjW[G'Y)", icon0);
      Icon icon1 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("[", icon1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 2003, 2003, (-4979), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "+TJMSc#,'", "Skipping FKK (", "Violation of unique index: ", 0, "Skipping FKK (", (-1931), 0, 1165, (-1931), "HXkUB_K", "{@", 23502, 3, (String) null);
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("{@", "3{dCim,6guKSU0{K+", "Skipping FKK (", "Skipping FKK (", 0, "qX J-T;}A:!+c1i`B", 1165, 0, (-1931), 0, " /bFHrjXPj K0JTt7B", "Skipping FKK (", 78, 0, "T\".h-?(7E[a<");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      schemaInfo0.fireSchemaInfoUpdate();
      TableInfo tableInfo0 = null;
      try {
        tableInfo0 = new TableInfo("Skipping FKK (", "{@", "{0pAw.E[-wA.~>A~u", "L7mdMW", "Skipping FKK (", (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("axn", "@(7p", "axn", "$nWX", 1400, "$nWX", (-4), (-4), (-1019), (-1019), "8Rs~erjW[G'Y)", "HSQLDB doesn't upport column omments", (-4), (-1019), "|aPU)(k}#'DIWP");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PROCEDURE;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      ImageIcon imageIcon0 = (ImageIcon)databaseObjectType0.getIcon();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("8Rs~erjW[G'Y)", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("|aPU)(k}#'DIWP");
      DatabaseObjectType.createNewDatabaseObjectType("$nWX");
      DatabaseObjectType.createNewDatabaseObjectType("(D +Cz");
      DatabaseObjectType.createNewDatabaseObjectType("8Rs~erjW[G'Y)");
      DatabaseObjectType.createNewDatabaseObjectType("I", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      imageIcon0.setDescription("|aPU)(k}#'DIWP");
      DatabaseObjectType.createNewDatabaseObjectType("@(7p");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.PROCEDURE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "8Rs~erjW[G'Y)", "$nWX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ITableInfo iTableInfo0 = null;
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      UnaryOperator.identity();
      ISQLConnection iSQLConnection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "+TJMSc#,'", "Skipping FKK (", "Violation of unique index: ", 0, "Skipping FKK (", (-1931), 0, 1165, (-1931), "HXkUB_K", "{@", 23502, 3, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("Skipping FKK (");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("HXkUB_K", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("{@", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "g&BKm:OSkpH(}&?ZF";
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "g&BKm:OSkpH(}&?ZF", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((ITableInfo) null);
      UnaryOperator.identity();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory();
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "Q;");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      customizableThreadFactory0.setDaemon(false);
      mockThread0.setContextClassLoader(classLoader0);
      Thread thread0 = customizableThreadFactory0.newThread(mockThread0);
      MockThread mockThread1 = new MockThread((ThreadGroup) null, thread0);
      mockThread0.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      ISQLConnection iSQLConnection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.list();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl1.getSquirrelHomeDir();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(fileWrapper0, " CASCADE");
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      ImageIcon imageIcon0 = new ImageIcon();
      imageIcon0.getIconHeight();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType(" CASCADE", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("{`l^>omd");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", (String) null, " CASCADE", 1231, "org.jfree.data.jdbc.JDBCPieDataset", Integer.MIN_VALUE, 1302, 2006, 2003, (String) null, (String) null, 1231, (-786), "F[Rebzqhi@,#8al");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("org.jfree.data.jdbc.JDBCPieDataset", tableColumnInfo0.getTypeName());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getDatabaseAliasesFile_before_version_2_3();
      applicationFiles0.getQuickStartGuideFile();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getUserSettingsDirectory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBUtil.typesAreEquivalent((-7), 3318);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      UnaryOperator.identity();
      LinkedBlockingQueue<ForeignKeyInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<ForeignKeyInfo>();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      linkedBlockingQueue0.add(foreignKeyInfo0);
      linkedBlockingQueue0.toArray();
      linkedBlockingQueue0.stream();
      linkedBlockingQueue0.iterator();
      arrayList0.removeAll(linkedBlockingQueue0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-16));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("@7lO", "#e,GiBeu{+zK00in)", "@7lO", "@7lO", (-4485), "HSQLDB doesn't support column comments", (-4485), 1746, 118, 2656, "uzX<Z#gX*&2X!g", "uzX<Z#gX*&2X!g", (-5), 49, "select count(*) from ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("HSQLDB doesn't support column comments", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType(" NOT NULL");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.PROCEDURE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(true);
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      vector0.add((IDatabaseObjectInfo) tableColumnInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      MockThread mockThread0 = new MockThread();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4, customizableThreadFactory0);
      scheduledThreadPoolExecutor0.getQueue();
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>(4);
      vector0.add((IDatabaseObjectInfo) null);
      vector0.parallelStream();
      DBUtil.convertObjectToTableList(vector0);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      Box box0 = Box.createHorizontalBox();
      ActionMap actionMap0 = box0.getActionMap();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.setActionMap(actionMap0);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.firePropertyChange("", (byte)12, (byte)12);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource3 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource3.setInheritsPopupMenu(true);
      defaultListCellRenderer_UIResource3.getDisabledIcon();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("F\"o?i[Uiv;", (String) null, "BEX^{");
      DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      box0.getAlignmentY();
      box0.getActionMap();
      UnaryOperator.identity();
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "115y*+5Vs}JC{)48*~`", "Skipping FKK (");
      unaryOperator0.apply((ITableInfo) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 1824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Encountered unexpected excep'ion while attempting to determine if catalogs are used in table definitions", "Encountered unexpected excep'ion while attempting to determine if catalogs are used in table definitions", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squ_rrel_sql.fw.resources.LibraryResources", 1111, "'0AND TBLE_ONER = '", 152, 1111, 1573, 1664, "Encountered unexpected excep'ion while attempting to determine if catalogs are used in table definitions", "ALTER SEQUENCE $sequenceName$ $startWith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$", 1276, 152, " /bFHrjXPj K0JTt7B");
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      MockThread mockThread0 = new MockThread("Encountered unexpected excep'ion while attempting to determine if catalogs are used in table definitions");
      mockThread0.run();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread.currentThread();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("net.sourceforge.squ_rrel_sql.fw.resources.LibraryResources");
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1, "ALTER SEQUENCE $sequenceName$ $startWith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$");
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread2);
      MockThread mockThread4 = new MockThread("Unexpected exception while attempting to determine if a table (");
      mockThread3.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatementValues());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, (-2989));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, (-1253));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.clone();
      arrayList0.listIterator();
      arrayList0.add((ITableInfo) null);
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      vector0.add((ITableInfo) null);
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function<Object, TableInfo> function0 = (Function<Object, TableInfo>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super ForeignKeyInfo, ? extends ITableInfo>) function0);
      vector0.replaceAll(unaryOperator0);
      DBUtil.convertTableToObjectList(vector0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("7p", "se2pv^:h>UTK", "^io{^uAFW##g ", "org.apache.log4j.PropertyConfigurator", 6, "m|j%,A", 6, 672, 6, 32511, "7p", "DatabaseObjectType.column", 6, 6, "SELECT data_type FROM information_schema.columns where column_name = ? ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.PROCEDURE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(false);
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      TableColumnInfo tableColumnInfo1 = (TableColumnInfo)DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo1);
      assertEquals("org.apache.log4j.PropertyConfigurator", tableColumnInfo1.getColumnName());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("HXkUB_K", "HXkUB_K", "HXkUB_K", "HXkUB_K", 23502, "{@", 0, (-2290), 23502, (-2290), "_g>", "r=uYd28OHYj4l$&vU\"", 59, 59, "_g>");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("_g>");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("java.util.Calendar", (Icon) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame("WeG8u", true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      DatabaseObjectType.createNewDatabaseObjectType("HXkUB_K", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("{@", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("+'(LNTZkdF{;`@O{SZ}", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.log4j.PropertyConfigurator");
      String string0 = "&ZqP-IRL";
      String string1 = "g@PPuj\\)7>1Z~";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("&ZqP-IRL", "", "`I-p#W:!bfju2", "g@PPuj)7>1Z~", 2004, "&ZqP-IRL", 1302, 846, (-515), (-1467), "?", "DatabaseObjectType.catalog", 3265, (-515), "US'jV");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("getDriverName");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("o7PxIx", "net.sourceforge.squirrel_sql.client.session.schemainfo.FilterMatcher", "net.sourceforge.squirrel_sql.client.session.schemainfo.FilterMatcher", "o7PxIx", (-4), "o7PxIx", (-4), 1942, 123, (-2080374781), "1", (String) null, (-109), (-1024), "{0pAw.E[-wA.~>A~u");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1942);
      MockThread mockThread0 = new MockThread("net.sourceforge.squirrel_sql.client.session.schemainfo.FilterMatcher");
      MockThread mockThread1 = new MockThread(mockThread0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) (-3625), timeUnit0);
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>(1942);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, (-2546L), 374L, timeUnit1);
      DBUtil dBUtil0 = new DBUtil();
      boolean boolean1 = vector0.removeElement("1");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("gW", "gW", "3m", "I,?5{lX<]0YK:{~", 2004, (String) null, (-1359), (-1931), 1165, 2004, (String) null, "I,?5{lX<]0YK:{~", (-2105376123), 1585, "Skipping FKK (");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.COLUMN;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null, (Icon) null);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("3m", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("3m", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType(" tableName=", (Icon) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.COLUMN;
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      UnaryOperator.identity();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBUtil.typesAreEquivalent(2, 2006);
      System.setCurrentTimeMillis((-3650L));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      UnaryOperator.identity();
      LinkedBlockingQueue<ForeignKeyInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<ForeignKeyInfo>();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      linkedBlockingQueue0.add(foreignKeyInfo0);
      linkedBlockingQueue0.toArray();
      linkedBlockingQueue0.stream();
      linkedBlockingQueue0.iterator();
      UnaryOperator.identity();
      arrayList0.removeAll(linkedBlockingQueue0);
      UnaryOperator.identity();
      arrayList0.iterator();
      Function.identity();
      UnaryOperator.identity();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("-.xl.", "Isl5x8~NqG}", "Isl5x8~NqG}");
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      byte[] byteArray1 = new byte[2];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PROCEDURE;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      Icon icon0 = databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("8Rs~erjW[G'Y)", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("$nWX");
      DatabaseObjectType.createNewDatabaseObjectType("(D +Cz");
      DatabaseObjectType.createNewDatabaseObjectType(" seems to already have it defined.", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("8Rs~erjW[G'Y)");
      DatabaseObjectType.createNewDatabaseObjectType("7K`NBC`6(\r+8CV]*4I", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("I", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("@(7p");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.PROCEDURE;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.list();
      JViewport jViewport0 = new JViewport();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread.interrupted();
      MockThread mockThread2 = new MockThread((ThreadGroup) null, "Key not found: ");
      mockThread2.run();
      mockThread2.run();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockThread2.getContextClassLoader();
      mockThread2.setContextClassLoader(classLoader0);
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread mockThread4 = new MockThread(mockThread1, "Q'\"06V*@\"Lf ii");
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      mockThread4.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)94;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "b^qI", 59, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (byte)18, (-2004318069), 2004, (-2004318069), "dbcopytest", "dbcopytest", (byte) (-24), 2147483645, "org.apache.log4j.PropertyConfigurator");
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      dBCopyPlugin1.getSourceSession();
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      DBUtil.convertObjectToTableList(vector0);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[4];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) tableColumnInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) tableColumnInfo0;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) tableColumnInfo0;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) tableColumnInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[2];
      DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      MockThread mockThread0 = new MockThread("WM>zH%xbs9-r7i#");
      mockThread0.run();
      MockThread.dumpStack();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "WM>zH%xbs9-r7i#", (-2004318069));
      MockThread mockThread2 = new MockThread(mockThread0);
      MockThread.interrupted();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockThread1.setContextClassLoader(classLoader0);
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread2);
      mockThread1.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatement());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      DBUtil.typesAreEquivalent(Integer.MIN_VALUE, (-248));
      System.setCurrentTimeMillis((-1688L));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      JViewport jViewport0 = new JViewport();
      Insets insets0 = new Insets(0, 0, 0, 2382);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      insets0.left = 36;
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.list();
      JViewport jViewport0 = new JViewport();
      Insets insets0 = new Insets(0, 0, 0, 2382);
      defaultTreeCellRenderer0.getInsets(insets0);
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Qru", "Qru", ">9b", "w*sg`x6ZYZ9q0IHY", 0, "w*sg`x6ZYZ9q0IHY", (-456), 0, 0, 0, "Qru", (String) null, 0, 0, ">");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("26", (String) null, " NOT NULL", (String) null, 16, "26", 0, 7219, 0, 0, (String) null, "a)U=bX}[)fXndq(", 0, 1863, (String) null);
      tableColumnInfoArray0[2] = tableColumnInfo1;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("w*sg`x6ZYZ9q0IHY, w*sg`x6ZYZ9q0IHY, null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(vector0);
      DBUtil.convertTableToObjectList(list0);
      DBUtil.convertTableToObjectList(list0);
      DBUtil.getLastStatementValues();
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertNull(dBCopyPreferenceBean0.getClientName());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((ITableInfo) null);
      UnaryOperator.identity();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      DBUtil.convertTableToObjectList(vector0);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("{0pAw.E[-wA.~>A~u");
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread0 = new MockThread("{0pAw.E[-wA.~>A~u");
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread mockThread1 = new MockThread(mockThread0, "3{dCim,6guKSU0{K+");
      mockThread0.setContextClassLoader(classLoader1);
      DBUtil dBUtil0 = new DBUtil();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("DBUtil.info.executeupdate", "DBUtil.error.nocolumns", "9mY;/m]\"nZ?;AA>V");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "m|j%,A";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("O?,", "m|j%,A", "net.sourceforge.squirrel_sql.fw.dialects.FirebirdDialectExt$FirebirdDialectHelper", "", 6, "net.sourceforge.squirrel_sql.fw.dialects.FirebirdDialectExt$FirebirdDialectHelper", 1727, 672, 1727, 1007, "m|j%,A", "rlda%&9mlmI7&H", 909, 909, "axn");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      dBCopyPlugin1.getDestSession();
      DBUtil.fixCase((ISession) null, "");
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((ITableInfo) null);
      UnaryOperator<ITableInfo> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply((ITableInfo) null);
      UnaryOperator.identity();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "d!&avW/vz!2$v", "8Rs~erjW[G'Y)", "Qru");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      DBUtil.getColumnList(tableColumnInfoArray0);
      Connection connection0 = null;
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias(uidIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = null;
      try {
        sQLConnection0 = new SQLConnection((Connection) null, sQLDriverPropertyCollection0, sQLDriver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLConnection == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLConnection", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.list();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("select uuid()", "&|(RG", "ALTER SEQUENCE $sequenceName$ $startWith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$", "Encountered unexpected excep'ion while attempting to determine if catalogs are used in table definitions", 1276, "&|(RG", (-1579), 1111, (-1579), 1111, " /bFHrjXPj K0JTt7B", "UC\"/fR*M6^+9", 1664, 1276, "ZWe2;s,pFd0v");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      MockThread mockThread0 = new MockThread("ZWe2;s,pFd0v");
      mockThread0.run();
      MockThread mockThread1 = new MockThread(" that matched ");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      mockThread1.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread.currentThread();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory(" /bFHrjXPj K0JTt7B");
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread2 = new MockThread(mockThread0);
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread2, "org.apache.log4j.PropertyConfigurator, utc_date");
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread3);
      MockThread mockThread5 = new MockThread("Encountered unexpected excep'ion while attempting to determine if catalogs are used in table definitions");
      mockThread0.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatementValues());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JViewport jViewport0 = new JViewport();
      Insets insets0 = new Insets(0, 0, 0, 2382);
      defaultTreeCellRenderer0.getInsets(insets0);
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      metalSplitPaneUI0.getInsets(jSpinner_DefaultEditor0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "log4j.loggerFactory", "getutcdate");
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "log4j.loggerFactory");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      FileWrapper fileWrapper0 = fileWrapperFactoryImpl0.createTempFile("1Af=`aaa(`L", (String) null);
      fileWrapper0.toURI();
      FileWrapperImpl fileWrapperImpl1 = fileWrapperFactoryImpl0.createTempFile("F\"o?i[Uiv;", "? :A{NNOs38", (FileWrapper) fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl1);
      fileWrapper0.getCanonicalFile();
      fileWrapperImpl1.setReadOnly();
      fileWrapperImpl1.setReadOnly();
      fileWrapperFactoryImpl0.create(fileWrapperImpl1);
      fileWrapperFactoryImpl0.createTempFile("F\"o?i[Uiv;", "c", (FileWrapper) fileWrapperImpl0);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.unload();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      defaultTreeCellRenderer0.addAncestorListener(ancestorListener0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusListener focusListener0 = AWTEventMulticaster.add((FocusListener) metalComboBoxEditor_UIResource0, (FocusListener) metalComboBoxEditor_UIResource0);
      defaultTreeCellRenderer0.addFocusListener(focusListener0);
      defaultTreeCellRenderer0.getVerticalAlignment();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      Box.createVerticalBox();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("{@", "{@", "{@", "{@", (-3542), "u", 1627, 23502, (-2100799218), (-2247), "{@", "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ", Integer.MAX_VALUE, 1003, "u");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(".");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("!T5G!`'-xG", icon0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("{@", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("C'1OyFC");
      customizableThreadFactory0.getThreadGroup();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      MockThread mockThread1 = new MockThread("C'1OyFC");
      mockThread0.getStackTrace();
      MockThread mockThread2 = new MockThread((ThreadGroup) null, (Runnable) null);
      MockThread mockThread3 = new MockThread((ThreadGroup) null, mockThread1, "Qru", 0L);
      MockThread mockThread4 = new MockThread(mockThread2);
      MockThread.interrupted();
      customizableThreadFactory0.getThreadGroup();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader.getSystemClassLoader();
      MockThread mockThread5 = new MockThread((ThreadGroup) null, mockThread1, "|aPU)(k}#'DIWP");
      MockThread mockThread6 = new MockThread((ThreadGroup) null, mockThread3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockThread4.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, (TableColumnInfo) null, "utc_date", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "";
      DBUtil.setLastStatement("select count(*) from ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getPluginUserSettingsFolder();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.createFolder(evoSuiteFile0);
      dBCopyPlugin0.getDestSession();
      DBUtil.setLastStatementValues("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.list();
      JViewport jViewport0 = new JViewport();
      Insets insets0 = new Insets(0, 0, 0, 2382);
      defaultTreeCellRenderer0.getInsets(insets0);
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      boolean boolean0 = DBUtil.typesAreEquivalent(864, 0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      DBUtil.typesAreEquivalent(2, (-7));
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBUtil.typesAreEquivalent((-4580), (-4580));
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      //  // Unstable assertion: assertEquals("-5383a70f:175b9947419:-7f1a", uidIdentifier0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = DBUtil.typesAreEquivalent(0, 0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener3, hierarchyBoundsListener2);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      LinkedBlockingQueue<ForeignKeyInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<ForeignKeyInfo>();
      linkedBlockingQueue0.toArray();
      linkedBlockingQueue0.stream();
      linkedBlockingQueue0.iterator();
      UnaryOperator.identity();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.removeAll(linkedBlockingQueue0);
      UnaryOperator.identity();
      arrayList0.iterator();
      Function.identity();
      UnaryOperator.identity();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      box0.getAlignmentY();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      IndexInfo.IndexType indexInfo_IndexType0 = IndexInfo.IndexType.CLUSTERED;
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.putClientProperty((Object) null, (Object) null);
      ImageIcon imageIcon0 = new ImageIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      ImageIcon imageIcon0 = new ImageIcon();
      imageIcon0.getImageObserver();
      imageIcon0.getIconHeight();
      DatabaseObjectType.createNewDatabaseObjectType("(i38a0I!h{f9PJp", (Icon) imageIcon0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "{*!8u", ";BHua}M[68{LbQQs");
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, (String) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "TZp&P1Ujxm", "f?v-LQ(R-MIi,G*", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 298);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "f6&Iuy", "$nWX", ") REFERENCES ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      fileWrapperFactoryImpl0.createTempFile("1Af=`aaa(`L", "");
      FileWrapperImpl fileWrapperImpl1 = fileWrapperFactoryImpl0.createTempFile("F\"o?i[Uiv;", "~", (FileWrapper) fileWrapperImpl0);
      fileWrapperFactoryImpl0.create("~", "F\"o?i[Uiv;");
      fileWrapperImpl1.getCanonicalFile();
      fileWrapperImpl1.setReadOnly();
      fileWrapperImpl1.setReadOnly();
      fileWrapperFactoryImpl0.create(fileWrapperImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "tKrE6:)t0", "tKrE6:)t0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      defaultTreeCellRenderer0.addAncestorListener(ancestorListener0);
      defaultTreeCellRenderer0.getVerticalAlignment();
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      Box.createVerticalBox();
      Box box0 = Box.createVerticalBox();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      box0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      ActionMap actionMap0 = box0.getActionMap();
      defaultListCellRenderer_UIResource0.setActionMap(actionMap0);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource1.setInheritsPopupMenu(true);
      defaultListCellRenderer_UIResource1.putClientProperty(defaultListCellRenderer_UIResource0, (Object) null);
      MockThread mockThread0 = new MockThread("]n=)E>l3-");
      MockThread mockThread1 = new MockThread(mockThread0, "]n=)E>l3-");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      mockThread0.setContextClassLoader(classLoader1);
      DBUtil dBUtil0 = new DBUtil();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.client.Version", "dot.trigger", "M,W3Fv6&J*)s_^", "dot.trigger", (-3417), "select ", (-3267), (-3), (-3), 3092, "dot.trigger", "select ", 5134, (-3417), "org.apache.log4j.PropertyConfigurator");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType((-3), tableColumnInfo0, (ISession) null);
      assertEquals((-3), int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("C'1OyFC");
      customizableThreadFactory0.getThreadGroup();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      Thread thread1 = customizableThreadFactory0.createThread(thread0);
      mockThread0.getStackTrace();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread mockThread2 = new MockThread((ThreadGroup) null, thread1, "Qru", 0L);
      MockThread mockThread3 = new MockThread(mockThread1);
      MockThread.interrupted();
      customizableThreadFactory0.getThreadGroup();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader.getSystemClassLoader();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("C'1OyFC", "fkm<jI^3wOh", "select * from ( ", "(", (-1379), "DROP MATERIALIZED VIEW $tableName$ $cascade$", (-1379), 2343, 625, (-1379), "fkm<jI^3wOh", "org.apache.log4j.PropertyConfigurator", 2003, 2343, ",\n\tPRIMARY KEY ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(2343, tableColumnInfo0, (ISession) null);
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      System.setCurrentTimeMillis(2343);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Insets insets0 = new Insets((byte)2, (-56), 576, 4542);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Insets insets1 = new Insets(4542, (-56), 576, 576);
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      Box box0 = Box.createHorizontalBox();
      ActionMap actionMap0 = box0.getActionMap();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.setActionMap(actionMap0);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource2.firePropertyChange("; 2&)+ra", (byte) (-102), (byte)2);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource3 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource3.setInheritsPopupMenu(true);
      defaultListCellRenderer_UIResource0.getDisabledIcon();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("&3$KYysQPc_cb", "; 2&)+ra", "<##\"vQJZ\"yj&AP|t");
      DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      unaryOperator0.apply((ITableInfo) null);
      unaryOperator0.apply((ITableInfo) null);
      UnaryOperator.identity();
      MockThread mockThread0 = new MockThread("' ");
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory();
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "B{-o28Lh5", (-2L));
      MockThread mockThread2 = new MockThread("DBUtil.error.missingtable");
      mockThread2.run();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockThread2.setContextClassLoader(classLoader0);
      DBUtil dBUtil0 = new DBUtil();
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL((SessionInfoProvider) null, "T%|2", (ITableInfo) null, (-1387));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "[Assertion failed] - this String argument must have length; it must not be null or empty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "Ml,tmTOx9l{#00}a", "org.apache.log4j.PropertyConfigurator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      defaultTreeCellRenderer0.addAncestorListener(ancestorListener0);
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "GVF]4|2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Insets insets0 = new Insets((byte)2, (-56), 576, 4542);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Insets insets1 = new Insets(4542, (-56), 576, 576);
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "Z!'", "Aa@1+l%M`", "btree");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "org.jfree.data.category.SlidingCategoryDataset", "org.apache.log4j.helpers.PatternParser$CategoryPatternConverter", " is not assignable to ", (-441));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, " /bFHrjXPj K0JTt7B", " /bFHrjXPj K0JTt7B", "=HD\"] .V'||", (-2970), "=HD\"] .V'||", 2002, (-4), 2002, 2002, "utc_date", " /bFHrjXPj K0JTt7B", 752, 2599, (String) null);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      MockThread mockThread0 = new MockThread("Null 'extract' argument.");
      mockThread0.getContextClassLoader();
      Thread thread0 = MockThread.currentThread();
      CustomizableThreadFactory customizableThreadFactory0 = new CustomizableThreadFactory("org.hibernate.dialect.Cache71Dialect$1");
      customizableThreadFactory0.getThreadGroup();
      MockThread mockThread1 = new MockThread(thread0, "-(q)'GF>i~");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      mockThread0.setContextClassLoader(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      LinkedBlockingQueue<ForeignKeyInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<ForeignKeyInfo>();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      linkedBlockingQueue0.add(foreignKeyInfo0);
      Function.identity();
      linkedBlockingQueue0.toArray();
      linkedBlockingQueue0.stream();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingQueue0.poll(24L, timeUnit0);
      linkedBlockingQueue0.iterator();
      arrayList0.removeAll(linkedBlockingQueue0);
      UnaryOperator.identity();
      arrayList0.iterator();
      Function.identity();
      UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      ForeignKeyInfo foreignKeyInfo1 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("\n\n", "=[", "=[", foreignKeyInfo1, (SessionInfoProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "+TJMSc#,'", "Skipping FK (", "Violation of unique index: ", 0, "Skipping FK (", (-1931), 0, 1165, (-1931), "HXkUB_K", "{@", 23502, 3, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATATYPE;
      DatabaseObjectType.createNewDatabaseObjectType("Skipping FK (");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("HXkUB_K", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("{@", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.list();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("/m+t%p>vY]", (String) null, "CBF#_}T+2=kl", (ISession) null, false, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setVerifyInputWhenFocusTarget(true);
      defaultTreeCellRenderer0.list();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      defaultTreeCellRenderer1.list((PrintWriter) mockPrintWriter0);
      defaultTreeCellRenderer1.getDefaultOpenIcon();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("Yr%@(c?%qB%>30u@As", "/m+t%p>vY]", "Yr%@(c?%qB%>30u@As", (ISession) null, false, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "could not read XML from Clob");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
