/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:45:08 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.net.BIFReader;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.trees.DecisionStump;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.PoissonEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0197550480433604
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)108;
      byteArray0[1] = (byte)14;
      MockFile mockFile0 = new MockFile("hj", "_:Qc(3$#:[uZmafi5]");
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.toString();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      BallNode ballNode0 = new BallNode(8);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile1 = new MockFile("@data");
      MockFile mockFile2 = new MockFile("KeJ");
      mockFile2.toURL();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate("] not fixed on the");
      naiveBayesMultinomialText0.buildClassifier(instances1);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6444911805560927
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)108;
      byteArray0[1] = (byte)14;
      MockFile mockFile0 = new MockFile("hj", "_:Qc(3$#:[uZmafi5]");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.listIterator();
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      instances0.stream();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      MockFile mockFile1 = new MockFile("-.+Q3_nt`\"b#+J");
      mockFile0.deleteOnExit();
      File file0 = mockFile1.getCanonicalFile();
      MockFile mockFile2 = new MockFile("-lnorm <num>", "@relation");
      MockFile mockFile3 = new MockFile("hj", " ");
      mockFile3.toURL();
      MockFile mockFile4 = new MockFile("-.+Q3_nt`\"b#+J", " ");
      mockFile3.renameTo(file0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte)14;
      intArray0[2] = (-2);
      intArray0[3] = (int) (byte)14;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1096));
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      assertArrayEquals(new double[] {0.5454545454545454, 0.4545454545454546}, doubleArray0, 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1084644497821365
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      byte[] byteArray0 = new byte[1];
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      byteArray0[0] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getMinWordFrequency();
      BIFReader bIFReader0 = new BIFReader();
      Instances instances0 = bIFReader0.m_Instances;
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("[<#=[Pllg/R");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*W`]c;)4l~");
      naiveBayesMultinomialText0.setDebug(false);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(12, stringArray0.length);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.177349036001029
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(2.153791014920252);
      naiveBayesMultinomialText0.setLNorm(2.153791014920252);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      testInstances0.setNumString(7);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(2075);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      testInstances0.setNumClasses((-4568));
      instances0.add((Instance) sparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      NullStemmer nullStemmer0 = new NullStemmer();
      MockFile mockFile0 = new MockFile("-stopwords");
      mockFile0.getCanonicalPath();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockFile0.toURL();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.153791014920252, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4867672116813746
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLNorm((-1821.50649528));
      stringArray0[0] = "weka.classifiers.functions.LinearRegression";
      naiveBayesMultinomialText0.m_normalize = true;
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NullStemmer nullStemmer0 = new NullStemmer();
      MockFile mockFile0 = new MockFile("");
      mockFile0.getCanonicalPath();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockFile0.toURL();
      naiveBayesMultinomialText0.LNormTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals((-1821.50649528), naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4172260317695073
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.setLNorm((-305.8960738906));
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1757.03851589;
      doubleArray0[3] = (-251.9463371);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-251.9463371), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8088073935147335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm((-1.2884335417433554));
      TestInstances testInstances0 = new TestInstances();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      Capabilities capabilities0 = sGDText1.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      sGDText1.toString();
      Instances instances0 = testInstances1.generate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1.2884335417433554), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3609003682052845
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setLNorm((-0.2645580097904091));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.generate("The independent probability of a class\n");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(2.0);
      int[] intArray0 = new int[4];
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      MockFile mockFile0 = new MockFile("Fo}:G.,9qEv6;Q", "lj");
      MockFile mockFile1 = new MockFile("The file containing the stopwords (if this is a directory then the default ones are used).");
      mockFile0.toURL();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Fo}:G.,9qEv6;Q", arrayList0, 15);
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7163855183158951
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-1751));
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BayesNet.partitionOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      testInstances1.setNumString(44);
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.pruneDictionary();
      boolean boolean0 = false;
      naiveBayesMultinomialText0.setUseWordFrequencies(boolean0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t11.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\nThe\t20.085536923187668\t7.38905609893065\t\nthe\t20.085536923187668\t20.085536923187668\t\nlazy\t2.718281828459045\t7.38905609893065\t\njumps\t20.085536923187668\t54.598150033144236\t\nbrown\t54.598150033144236\t20.085536923187668\t\ndog\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, int0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1539879983368198
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff/.arff");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "o/<\"J`4,");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLNorm((-1821.50649528));
      naiveBayesMultinomialText0.m_normalize = true;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      naiveBayesMultinomialText0.setNorm((-1821.50649528));
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      testInstances0.setNumString(7);
      Instances instances0 = testInstances0.generate();
      instances0.listIterator();
      testInstances0.toString();
      instances0.getRandomNumberGenerator((-1));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      MockFile mockFile0 = new MockFile("");
      mockFile0.deleteOnExit();
      byte[] byteArray0 = new byte[2];
      mockFile0.getCanonicalFile();
      MockFile mockFile1 = new MockFile(".arff", ".arff");
      mockFile1.toURL();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "@data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1929102251089434
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(2040109465);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-1751));
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances1 = new TestInstances();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.toString();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(2040109465, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useStopListTipText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.setNorm(3.0);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.toString();
      int int0 = (-582);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-582));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.343606971730205
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLNorm(2.0);
      naiveBayesMultinomialText0.setLNorm((-293.1104671938658));
      stringArray0[0] = "";
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators("");
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NullStemmer nullStemmer0 = new NullStemmer();
      nullStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals((-293.1104671938658), naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9868916459747457
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setNorm(13.0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getOptions();
      assertEquals(13.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = (-1.0E100);
      naiveBayesMultinomialText0.m_leplace = (-1.0E100);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getMinWordFrequency();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-796));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3742207798740282
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)108;
      byteArray0[0] = (byte)108;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(2253.6546);
      naiveBayesMultinomialText0.setPeriodicPruning((byte)108);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.461579032342674
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff/.arff");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "o/<\"J`4,");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseStopList(false);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      testInstances0.setNumString(7);
      Instances instances0 = testInstances0.generate();
      instances0.listIterator();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.useStopListTipText();
      naiveBayesMultinomialText2.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.periodicPruningTipText();
      naiveBayesMultinomialText2.stopwordsTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = "The file containing the stopwords (if this is a directory then the default ones are used).";
      MockFile mockFile0 = new MockFile(":=", "lj");
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 15.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 15.0;
      doubleArray1[6] = 15.0;
      SparseInstance sparseInstance0 = new SparseInstance(15.0, doubleArray1);
      BIFReader bIFReader0 = new BIFReader();
      BIFReader bIFReader1 = new BIFReader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      CoverTree coverTree0 = new CoverTree();
      int int0 = 10;
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.176081702081792
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-1601);
      naiveBayesMultinomialText0.setPeriodicPruning((-1601));
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(2073);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.getOptions();
      Instances instances1 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      NullStemmer nullStemmer0 = new NullStemmer();
      nullStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.toString();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals((-1601), int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      MockFile mockFile0 = new MockFile("&8Z~~FpcklbC", "&8Z~~FpcklbC");
      mockFile0.toURL();
      naiveBayesMultinomialText0.getDebug();
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile("&8Z~~FpcklbC");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      mockFile0.deleteOnExit();
      mockFile1.getCanonicalPath();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)18;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFile1.toURL();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.555069360717915
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominalValues(0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BayesNet.partitionOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances2 = new TestInstances();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities1 = votedPerceptron0.getCapabilities();
      testInstances0.setNumString((-1));
      TestInstances.forCapabilities(capabilities1);
      testInstances1.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getPeriodicPruning();
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5323204850794725
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("#A[V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)18;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("*;xS!", "lj");
      mockFile0.toURL();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "lj");
      MockFile mockFile1 = new MockFile("lj");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile2 = new MockFile("gaYG/`%']\"xGE%?C");
      mockFile1.setReadOnly();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      mockFile1.deleteOnExit();
      mockFile0.getCanonicalPath();
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile3 = new MockFile((String) null, "gaYG/`%']\"xGE%?C");
      mockFile1.toURL();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.496201326433936
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setLNorm((-305.8960738906));
      int int0 = 1;
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.522253334009138
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLNorm((-1821.50649528));
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      File file1 = MockFile.createTempFile("indicates", "RgR8NKaia", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1367);
      intArray0[1] = (-1367);
      intArray0[2] = (-1367);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(265.053208028905, intArray0, 2237);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStemmer();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.392304243276106
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("lj");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("lj", "lj");
      mockFile0.toURL();
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile("*;xS!");
      mockFile1.toURL();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "lj");
      MockFile mockFile2 = new MockFile("lj");
      mockFile1.getCanonicalPath();
      mockFile0.mkdir();
      mockFile2.createNewFile();
      MockFile mockFile3 = new MockFile("*;xS!");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "*;xS!");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile3.deleteOnExit();
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, (byte[]) null);
      MockFile mockFile4 = new MockFile("*;xS!", "lj");
      mockFile3.toURL();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      MockFile mockFile5 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      File file0 = MockFile.createTempFile("0D3,0fMYD{Us7xoSYv", "", (File) mockFile5);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3526910109712573
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setLNorm((-305.8960738906));
      int int0 = (-33);
      naiveBayesMultinomialText0.setPeriodicPruning((-33));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BIFReader bIFReader0 = new BIFReader();
      BIFReader bIFReader1 = new BIFReader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      CoverTree coverTree0 = new CoverTree();
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.toURL();
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.656798059250529
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      iteratedLovinsStemmer0.globalInfo();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[2] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-*-2zmt}lI");
      naiveBayesMultinomialText0.getLowercaseTokens();
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      naiveBayesMultinomialText0.getLowercaseTokens();
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(boolean0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9670209072034839
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 0.0;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.toString();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities1 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      CoverTree coverTree0 = new CoverTree();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      SparseInstance sparseInstance0 = new SparseInstance(497.45547388346, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      CoverTree coverTree1 = new CoverTree();
      SparseInstance sparseInstance2 = null;
      try {
        sparseInstance2 = new SparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.352721876121416
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setLNorm((-0.2645580097904091));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.generate("The independent probability of a class\n");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BIFReader bIFReader0 = new BIFReader();
      BIFReader bIFReader1 = new BIFReader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(21);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm((-305.8960738906));
      int int0 = 1;
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 268;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-99.0), intArray0, (-2857));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2023.31809316739, doubleArray0);
      BIFReader bIFReader0 = new BIFReader();
      BIFReader bIFReader1 = new BIFReader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2561);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      CoverTree coverTree1 = new CoverTree();
      SparseInstance sparseInstance2 = new SparseInstance(2561);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(31);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QyiVM!$2");
      System.setCurrentTimeMillis((-2026L));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Whether to convert all tokens to lowercase";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MultiScheme selection using";
      stringArray0[4] = "&30X";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BIFReader bIFReader0 = new BIFReader();
      BIFReader bIFReader1 = new BIFReader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      CoverTree coverTree1 = new CoverTree();
      SparseInstance sparseInstance2 = null;
      try {
        sparseInstance2 = new SparseInstance((-3152));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }
}
