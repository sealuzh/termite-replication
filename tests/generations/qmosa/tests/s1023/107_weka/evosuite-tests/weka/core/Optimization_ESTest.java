/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:49:34 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.Currency;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-1), (-1));
      MockFile mockFile0 = new MockFile("C&hh/L2D;N");
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile(mockFile0, "@tWHDV>z82nV~Zo");
      mockFile0.setWritable(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setExecutable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      char[] charArray0 = new char[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.setWritable(false, true);
      mockPrintStream0.print(charArray0);
      mockFile1.setReadable(true, false);
      MockFile mockFile2 = new MockFile("\nLine search iteration: ", "@tWHDV>z82nV~Zo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockFile2.mkdir();
      mockFile2.deleteOnExit();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) '\'';
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 0.5;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {39.0, (-1.0), 0.5}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(29, 29);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setInternationalCurrencySymbol("#");
      decimalFormatSymbols0.setMonetaryDecimalSeparator('<');
      decimalFormatSymbols0.setPerMill('B');
      DecimalFormat decimalFormat0 = new DecimalFormat("Skpping: ", decimalFormatSymbols0);
      decimalFormat0.setPositivePrefix("\"");
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setNaN("Skpping: ");
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols0.getCurrency();
      DecimalFormatSymbols.getInstance();
      decimalFormat0.setCurrency((Currency) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\"");
      decimalFormat0.setMaximumIntegerDigits(29);
      FieldPosition fieldPosition0 = new FieldPosition(3649);
      fieldPosition0.setBeginIndex(2653);
      fieldPosition0.setEndIndex(3649);
      DecimalFormatSymbols decimalFormatSymbols2 = new DecimalFormatSymbols();
      decimalFormat0.format((-3511.22), stringBuffer0, fieldPosition0);
      decimalFormat0.applyPattern("\"");
      ParsePosition parsePosition0 = new ParsePosition(2653);
      decimalFormat0.parse("Skpping: ", parsePosition0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3649;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(29, 29);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setCurrencySymbol("#");
      decimalFormatSymbols0.setExponentSeparator("");
      decimalFormatSymbols0.setPatternSeparator('*');
      decimalFormatSymbols0.setMonetaryDecimalSeparator('<');
      decimalFormatSymbols0.setInternationalCurrencySymbol("#");
      Locale locale0 = Locale.UK;
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols(locale0);
      decimalFormatSymbols0.setZeroDigit('`');
      locale0.toLanguageTag();
      DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setMonetaryDecimalSeparator('<');
      locale0.toLanguageTag();
      DecimalFormatSymbols decimalFormatSymbols2 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormatSymbols decimalFormatSymbols3 = new DecimalFormatSymbols(locale0);
      decimalFormatSymbols3.setMonetaryDecimalSeparator('*');
      decimalFormatSymbols2.setPerMill('*');
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      decimalFormatSymbols2.setZeroDigit('`');
      DecimalFormatSymbols decimalFormatSymbols4 = new DecimalFormatSymbols();
      decimalFormatSymbols3.setDecimalSeparator('<');
      decimalFormatSymbols3.getCurrency();
      DecimalFormatSymbols.getInstance();
      decimalFormatSymbols4.setPercent('<');
      decimalFormatSymbols4.setPerMill('<');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "en-GB");
      DecimalFormatSymbols decimalFormatSymbols5 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, (double[]) null, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(27, 27);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setCurrencySymbol("B");
      decimalFormatSymbols0.setMonetaryDecimalSeparator('H');
      decimalFormatSymbols0.setExponentSeparator("");
      decimalFormatSymbols0.setPatternSeparator('*');
      decimalFormatSymbols0.setMonetaryDecimalSeparator('<');
      decimalFormatSymbols0.setInternationalCurrencySymbol("B");
      decimalFormatSymbols0.setPercent('*');
      Locale locale0 = Locale.JAPAN;
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols(locale0);
      decimalFormatSymbols0.setZeroDigit('`');
      locale0.toLanguageTag();
      DecimalFormatSymbols decimalFormatSymbols2 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setMonetaryDecimalSeparator('<');
      decimalFormatSymbols0.setPerMill('*');
      decimalFormatSymbols0.setZeroDigit('*');
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      DecimalFormatSymbols decimalFormatSymbols3 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setDecimalSeparator('<');
      decimalFormatSymbols0.getCurrency();
      DecimalFormatSymbols decimalFormatSymbols4 = new DecimalFormatSymbols(locale0);
      decimalFormatSymbols4.setExponentSeparator("ja-JP");
      decimalFormatSymbols4.setPercent('!');
      decimalFormatSymbols4.setPerMill('<');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\"");
      DecimalFormatSymbols decimalFormatSymbols5 = new DecimalFormatSymbols();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[12][5];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-1), (-1));
      MockFile mockFile0 = new MockFile("C&hh/L2D;N");
      MockFile mockFile1 = new MockFile(mockFile0, "@tWHD/V>z82nV~Zo");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setExecutable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile1.setReadOnly();
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[3] = '/';
      charArray0[5] = '\'';
      mockPrintStream0.println('/');
      charArray0[8] = '/';
      mockPrintStream0.print(charArray0);
      mockPrintStream0.print('\\');
      mockFile1.setReadable(false, true);
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-1461.0717);
      doubleArray1[1] = (-1461.0717);
      doubleArray1[3] = 0.5;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(29, 29);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setInternationalCurrencySymbol("SppinQgg ");
      decimalFormatSymbols0.setMonetaryDecimalSeparator('B');
      decimalFormatSymbols0.setPerMill('B');
      DecimalFormat decimalFormat0 = new DecimalFormat("SppinQgg ", decimalFormatSymbols0);
      decimalFormat0.setPositivePrefix("SppinQgg ");
      decimalFormat0.setNegativeSuffix("SppinQgg ");
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      decimalFormatSymbols1.setDecimalSeparator('d');
      decimalFormatSymbols0.setNaN("SppinQgg ");
      DecimalFormat decimalFormat1 = new DecimalFormat("SppinQgg ", decimalFormatSymbols1);
      Currency currency0 = decimalFormatSymbols1.getCurrency();
      DecimalFormatSymbols decimalFormatSymbols2 = new DecimalFormatSymbols();
      decimalFormat0.setCurrency(currency0);
      decimalFormat1.setMaximumIntegerDigits(29);
      FieldPosition fieldPosition0 = new FieldPosition(3649);
      fieldPosition0.setBeginIndex(2653);
      decimalFormatSymbols0.setMonetaryDecimalSeparator('B');
      fieldPosition0.setBeginIndex(152);
      fieldPosition0.setEndIndex(3649);
      DecimalFormatSymbols decimalFormatSymbols3 = new DecimalFormatSymbols();
      ParsePosition parsePosition0 = new ParsePosition(2653);
      parsePosition0.setIndex(2728);
      decimalFormat0.parse("SppinQgg ", parsePosition0);
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(29, 29);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setMinusSign('u');
      decimalFormatSymbols0.setCurrencySymbol("#");
      decimalFormatSymbols0.setExponentSeparator("");
      decimalFormatSymbols0.setPatternSeparator('*');
      decimalFormatSymbols0.setInternationalCurrencySymbol("#");
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(29);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(418);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2237));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2389));
      integerArray0[5] = integer5;
      linkedList0.toArray(integerArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray2, true, booleanArray0);
      Random.setNextRandom(200);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1461.0717);
      doubleArray1[2] = (-388.0563504356153);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1461.0717);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-388.0563504356153);
      doubleArray4[2] = (-1461.0717);
      doubleArray4[3] = (-1461.0717);
      doubleArray4[4] = (-388.0563504356153);
      doubleArray4[5] = (-388.0563504356153);
      doubleArray4[6] = (-1461.0717);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1461.0717);
      doubleArray5[1] = (-388.0563504356153);
      doubleArray5[2] = (-388.0563504356153);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1461.0717);
      doubleArray6[1] = (-388.0563504356153);
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = (-388.0563504356153);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-1461.0717);
      doubleArray7[1] = 4409.7864351383605;
      doubleArray7[2] = 1.0E-6;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 0.3;
      doubleArray7[5] = (-388.0563504356153);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (-1461.0717);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = (-1461.0717);
      doubleArray9[1] = (-1461.0717);
      doubleArray9[2] = 4409.7864351383605;
      doubleArray0[8] = doubleArray9;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1, 1);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray9, true, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5349951492336453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(641);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.elementAt(0);
      optimization_DynamicIntArray0.addElement(39);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.addElement(606);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(606);
      optimization_DynamicIntArray0.addElement(0);
      assertEquals(3, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2293495789482387
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 0;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(2960);
      optimization_DynamicIntArray0.addElement(0);
      int int1 = 25;
      optimization_DynamicIntArray0.copy();
      int int2 = 0;
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeElementAt(0);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(2822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(3649);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      int int0 = (-429);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt((-1048));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
