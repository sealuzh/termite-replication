/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:50:23 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5163309666903704
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] unable to find a version of package ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      Function.identity();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      discretize0.setDesiredWeightOfInstancesPerInterval(1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("XC");
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      discretize0.batchFinished();
      discretize0.binsTipText();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      discretize0.batchFinished();
      Filter.runFilter(discretize0, (String[]) null);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.110875716245864
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      attribute0.equalsMsg(pipedInputStream0);
      UnaryOperator.identity();
      Function.identity();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      discretize0.setDesiredWeightOfInstancesPerInterval(846.065399);
      StringTokenizer stringTokenizer0 = new StringTokenizer("@relation", "date");
      discretize0.setDesiredWeightOfInstancesPerInterval(1760.0);
      StringTokenizer stringTokenizer1 = new StringTokenizer("@relation");
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1567);
      discretize0.input(binarySparseInstance0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "XC";
      Filter.runFilter(discretize0, stringArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3432);
      discretize0.input(binarySparseInstance0);
      assertEquals(1760.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.218078810020119
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] unable to find a version of package ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      Function.identity();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      discretize0.setDesiredWeightOfInstancesPerInterval(1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("XC");
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      discretize0.batchFinished();
      discretize0.binsTipText();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(2915.8303, doubleArray0);
      discretize0.input(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0113826939202277
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] unable to find a version of package ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("L", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties1);
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      discretize0.batchFinished();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      discretize0.getBinRangesString(0);
      StringReader stringReader0 = new StringReader("@end");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4561937708618893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      function0.andThen((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      UnaryOperator.identity();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator4);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Function.identity();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      unaryOperator0.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      discretize0.batchFinished();
      Discretize discretize1 = new Discretize();
      Filter.runFilter(discretize1, (String[]) null);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      Discretize discretize2 = new Discretize();
      boolean boolean0 = discretize0.input(binarySparseInstance0);
      assertTrue(boolean0);
      
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5148713328512753
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      UnaryOperator.identity();
      Function.identity();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object1 = new Object();
      discretize0.setDesiredWeightOfInstancesPerInterval(846.065399);
      StringTokenizer stringTokenizer0 = new StringTokenizer("integer");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'XC' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1012191448201563
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      attribute0.equalsMsg(pipedInputStream0);
      UnaryOperator.identity();
      Function.identity();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      discretize0.setDesiredWeightOfInstancesPerInterval(2);
      StringTokenizer stringTokenizer0 = new StringTokenizer("real", "string");
      Object object1 = new Object();
      discretize0.setDesiredWeightOfInstancesPerInterval(1760.0);
      StringTokenizer stringTokenizer1 = new StringTokenizer("@relation");
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1567);
      discretize0.input(binarySparseInstance0);
      Object object2 = new Object();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      boolean boolean0 = discretize0.input(binarySparseInstance1);
      assertEquals(1760.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.308293844984404
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Locale.LanguageRange, Locale.LanguageRange> function2 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function1);
      unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object1 = new Object();
      discretize0.setDesiredWeightOfInstancesPerInterval(0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("@attribute");
      int int0 = 2037;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4934992030192618
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      Attribute attribute0 = new Attribute(",");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator0.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator1);
      unaryOperator1.andThen((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Function.identity();
      discretize0.setAttributeIndices("%");
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2124401222196948
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      function0.andThen((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.setDesiredWeightOfInstancesPerInterval(846.065399);
      StringTokenizer stringTokenizer0 = new StringTokenizer("integer");
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      discretize0.input(binarySparseInstance0);
      discretize0.binsTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1792
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("second");
      discretize0.m_DiscretizeCols = null;
      discretize0.setFindNumBins(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-738.65029607);
      // Undeclared exception!
      try { 
        discretize0.getInvertSelection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0089203183970885
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] unable to find a version of package ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=~xCios)Al~");
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("A nominal attribute (");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 19);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "@end");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~}\"uAGMSDjN(");
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      unaryOperator0.apply((Locale.LanguageRange) null);
      Function<Locale.LanguageRange, Locale.LanguageRange> function1 = unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function2 = unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Function.identity();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2121918364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2121918364
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.444212968000798
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("XC");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      function0.andThen((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator4);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Function.identity();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      unaryOperator0.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      discretize0.batchFinished();
      Filter.runFilter(discretize0, (String[]) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.listOptions();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "p~xCios)Al~");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "iwAmGpC");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      discretize0.m_MakeBinary = true;
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9388031515582456
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] unable to find a version of package ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.filters.unsupervised.attribute.Discretize");
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1781274094291887
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(",");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, Locale.LanguageRange> function0 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      function0.apply((Locale.LanguageRange) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function0);
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator4);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Function.identity();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator3);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(77);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("FUR`Ks-s");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2839.1;
      doubleArray0[1] = 2839.1;
      Attribute attribute0 = new Attribute("FUR`Ks-s");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = attribute0.copy("Eq%X9zokU");
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", arrayList0, 1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at FUR`Ks-s
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-4.57826535);
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = 1.7976931348623157E308;
      doubleArray3[2] = (-4.57826535);
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = 1115.8898362684;
      doubleArray3[5] = (-4.57826535);
      doubleArray3[6] = (-4.57826535);
      doubleArray3[7] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 148.6717293;
      doubleArray4[1] = 1209.7446;
      doubleArray4[2] = 1115.8898362684;
      doubleArray4[3] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1115.8898362684;
      doubleArray5[1] = (-4.57826535);
      doubleArray5[2] = (-4.57826535);
      doubleArray5[3] = 1115.8898362684;
      doubleArray5[4] = 1115.8898362684;
      doubleArray5[5] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 1115.8898362684;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 148.6717293;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 1.7976931348623157E308;
      doubleArray7[1] = 1209.7446;
      doubleArray7[2] = 1.0;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      double[] doubleArray8 = discretize0.getCutPoints(3);
      assertEquals(4, doubleArray8.length);
      assertNotNull(doubleArray8);
      
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("A nominal attribute (");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("q", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends Locale.LanguageRange>) function0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      arrayList0.add(attribute0);
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator2);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ".arff");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9030336986584344
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("A nominal attribute (");
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("#2=a?Ecu[", linkedList0, (-2034458190));
      arrayList0.add(attribute1);
      Filter.makeCopy(discretize0);
      Instances instances0 = new Instances("XC", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2034458190);
      doubleArray0[4] = (double) 3;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "date");
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9166731665848316
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] unable to find a version of package ");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("XC", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object1 = new Object();
      protectedProperties6.keys();
      Object object2 = new Object();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1811));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.883065208551139
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_DefaultCols = "4e?";
      discretize0.m_MakeBinary = true;
      byte[] byteArray0 = new byte[7];
      discretize0.setFindNumBins(true);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)94;
      Filter.makeCopy(discretize0);
      byteArray0[3] = (byte) (-49);
      discretize0.setInvertSelection(true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[4] = (byte)76;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)7;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize1 = new Discretize();
      discretize0.getCapabilities();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.16651488770458
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("fmZQY.A+V:(x");
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 2839.1;
      discretize0.m_FindNumBins = true;
      doubleArray0[1] = 747.3081629112396;
      String[] stringArray0 = discretize0.getOptions();
      doubleArray0[2] = 0.0;
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize("m8\"UVN=[\"U<U-+x");
      discretize1.m_NumBins = (-2064888120);
      discretize1.getOptions();
      assertEquals((-2064888120), discretize1.getBins());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2839.1;
      doubleArray0[1] = 2008.7682850737;
      doubleArray0[2] = 0.0;
      Discretize discretize0 = new Discretize("m8\"UVN=[\"U<U-+x");
      Filter.makeCopy(discretize0);
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.709006195206491
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      stringArray0[1] = "Inserted";
      stringArray0[3] = "KG4(-l";
      stringArray0[4] = "ghUD_Fp6";
      Discretize discretize0 = new Discretize("");
      discretize0.setBins(8);
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      assertEquals(8, discretize0.getBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemInUtil.addInputLine("ef\"p'B.:/4");
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.setUseEqualFrequency(true);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.setUseBinNumbers(true);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize("/Jp");
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-";
      stringArray0[1] = "( I";
      Range range0 = discretize0.m_DiscretizeCols;
      stringArray0[2] = "h0mmT[Y1 \u0005^-,U";
      stringArray0[3] = "*#XA";
      stringArray0[4] = "0wHePH";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_MakeBinary = true;
      Discretize discretize1 = new Discretize("r");
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-605.1779722);
      doubleArray1[1] = (-605.1779722);
      doubleArray1[2] = (-987.06313848);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1024.58;
      doubleArray2[1] = (-605.1779722);
      doubleArray2[2] = (-987.06313848);
      doubleArray2[3] = (-987.06313848);
      doubleArray2[4] = (-605.1779722);
      doubleArray2[5] = 1493.9;
      doubleArray2[6] = (-987.06313848);
      doubleArray2[7] = 1024.58;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-605.1779722);
      doubleArray3[1] = (-605.1779722);
      doubleArray3[2] = (-605.1779722);
      doubleArray3[3] = (-605.1779722);
      doubleArray3[4] = (-987.06313848);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1024.58;
      doubleArray4[1] = (-987.06313848);
      doubleArray4[2] = 1024.58;
      doubleArray4[3] = (-987.06313848);
      doubleArray4[4] = (-1243.0);
      doubleArray2[4] = (-987.06313848);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-987.06313848);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-1243.0);
      doubleArray6[1] = (-987.06313848);
      doubleArray6[2] = 1493.9;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-605.1779722);
      doubleArray7[1] = 1024.58;
      doubleArray7[2] = (-987.06313848);
      doubleArray7[3] = 1024.58;
      doubleArray7[4] = (-605.1779722);
      doubleArray7[5] = (-987.06313848);
      doubleArray7[6] = 1024.58;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      discretize1.m_CutPoints = doubleArray0;
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      stringArray0[1] = "Inserted";
      stringArray0[2] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      stringArray0[3] = "KG4(-l";
      stringArray0[4] = "ghUD_Fp6";
      Discretize discretize0 = new Discretize("");
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(4, stringArray1.length);
      
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getUseBinNumbers();
      discretize0.globalInfo();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-M";
      stringArray0[1] = "M{>8JExgq";
      stringArray0[2] = "@#J9dDfGTB5[mw$v";
      stringArray0[3] = "Se: attribute selection mode. If false,only sdlected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.";
      stringArray0[4] = "-M";
      stringArray0[5] = "Illegal options: ";
      stringArray0[6] = "@XFt%2k$3;ebpLalH";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " can't be instantiated.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FURS`Ks-s");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Discretize discretize0 = new Discretize("FURS`Ks-s");
      double[][] doubleArray0 = new double[20][6];
      double[] doubleArray1 = new double[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SystemInUtil.addInputLine((String) null);
      doubleArray1[4] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[8] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5137815842823215
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " can't be instantiated.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FURS`Ks-s");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FURS`Ks-s");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Discretize discretize0 = new Discretize("FURS`Ks-s");
      double[][] doubleArray0 = new double[20][6];
      double[] doubleArray1 = new double[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SystemInUtil.addInputLine((String) null);
      doubleArray1[4] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[8] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(15);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertEquals(10, discretize0.getBins());
      assertNotNull(string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = null;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "1,1,1,1,1,1,1");
      String string0 = "iwAmGpC";
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "=~xCios)Al~");
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 100;
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 100;
      doubleArray1[1] = (double) 100;
      doubleArray1[2] = (double) 100;
      doubleArray1[3] = (double) 100;
      doubleArray1[4] = (double) 100;
      doubleArray1[5] = (-1237.0);
      doubleArray1[6] = (double) 100;
      doubleArray1[7] = (double) 100;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      Discretize discretize1 = new Discretize(" [options]");
      discretize1.getCutPoints(100);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize("FtkRaNf7:");
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      discretize0.getUseEqualFrequency();
      discretize0.getBinRangesString(1);
      int int0 = (-836);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("weka.filters.unsupervised.attribute.Discretize");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      Filter filter1 = Filter.makeCopy(multiFilter4);
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      String[] stringArray0 = new String[6];
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(filter1, stringArray0);
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.makeCopy(filter1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      MultiFilter multiFilter8 = new MultiFilter();
      Filter filter2 = Filter.makeCopy(filter1);
      Filter.makeCopy(filter2);
      MultiFilter multiFilter9 = new MultiFilter();
      multiFilter9.isStreamableFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      Filter.runFilter(multiFilter7, stringArray0);
      Discretize discretize0 = new Discretize("}{R$ffu1<qg/b.S");
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5137815842823215
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("FUR`Ks-s");
      double[][] doubleArray0 = new double[21][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2839.1;
      doubleArray1[1] = 2839.1;
      doubleArray1[2] = 0.0;
      SystemInUtil.addInputLine("FUR`Ks-s");
      doubleArray1[4] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[8] = doubleArray2;
      SystemInUtil.addInputLine((String) null);
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getBinRangesString(15);
      StringReader stringReader0 = new StringReader("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)");
      System.setCurrentTimeMillis(15);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[0];
      Filter.runFilter(multiFilter2, stringArray0);
      Filter.runFilter(multiFilter1, stringArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      Filter.makeCopy(multiFilter3);
      MultiFilter multiFilter6 = new MultiFilter();
      multiFilter5.isStreamableFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(15);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = (Properties)properties0.clone();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      properties2.put(properties1, protectedProperties5);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      Properties properties5 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      Properties properties6 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties1);
      Object object0 = new Object();
      Object object1 = new Object();
      protectedProperties9.keys();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object2 = new Object();
      protectedProperties13.remove((Object) "DT", object1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("Enumerating attributes (leaving out class):");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DT";
      stringArray0[1] = "Enumerating attributes (leaving out class):";
      stringArray0[2] = "Enumerating attributes (leaving out class):";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      Filter filter1 = Filter.makeCopy(multiFilter4);
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      String[] stringArray0 = new String[6];
      multiFilter4.isStreamableFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(filter1, stringArray0);
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.makeCopy(filter1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      MultiFilter multiFilter8 = new MultiFilter();
      Filter filter2 = Filter.makeCopy(filter1);
      Filter.makeCopy(filter2);
      MultiFilter multiFilter9 = new MultiFilter();
      multiFilter9.isStreamableFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      Filter.makeCopy(multiFilter7);
      Discretize discretize0 = new Discretize("If set to true, equal-frequency binning will be used instead of equal-width binning.");
      int[] intArray0 = new int[1];
      intArray0[0] = 69;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 0);
      System.setCurrentTimeMillis(69);
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties9);
      Properties properties3 = new Properties(protectedProperties3);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties3);
      Properties properties4 = new Properties(protectedProperties14);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties2);
      Integer integer0 = new Integer(2406);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize(">=oLSZWEk8&");
      int[] intArray0 = new int[1];
      intArray0[0] = 2406;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, 2406);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties5);
      Properties properties3 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties7);
      Object object0 = new Object();
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 93);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      protectedProperties18.putIfAbsent(object1, bufferedInputStream0);
      Object object2 = new Object();
      Object object3 = new Object();
      protectedProperties10.remove((Object) protectedProperties9, (Object) properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("zi_@H iC%)f>2`S.ce");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zi_@H iC%)f>2`S.ce";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(15);
      Discretize discretize0 = new Discretize("C/cQ5f^7X");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("fmZQY.A+V:(x");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2839.1;
      doubleArray0[1] = 747.3081629112396;
      doubleArray0[2] = (-1948.617);
      discretize0.setUseBinNumbers(false);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2468);
      intArray0[1] = (-2468);
      intArray0[2] = (-2468);
      intArray0[3] = (-2468);
      intArray0[4] = (-2468);
      intArray0[5] = (-2468);
      SystemInUtil.addInputLine("6-C'q-K;j\"9[@rY");
      Discretize discretize1 = new Discretize("%lvx}\"ytM!kCK92z");
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(632.2846000463223, intArray0, (-2338));
      binarySparseInstance0.setValueSparse(77, 77);
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = 632.2846000463223;
      doubleArray0[2] = 752.32725;
      doubleArray0[3] = (double) (-2338);
      doubleArray0[3] = (double) 77;
      doubleArray0[5] = (double) 77;
      doubleArray0[6] = (double) 77;
      doubleArray0[7] = (double) 77;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2338), doubleArray0);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      binarySparseInstance1.insertAttributeAt(2);
      int[] intArray1 = new int[1];
      intArray1[0] = 77;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(245.68871, intArray1, 77);
      String string0 = discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize("Se: attribute selection mode. If false,only sdlected (numeric) attributes in the range will be discretized if true,only non-selectd attributes will be discretized.");
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[0];
      Filter.runFilter(multiFilter2, stringArray0);
      Filter.runFilter(multiFilter1, stringArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      Filter.makeCopy(multiFilter3);
      MultiFilter multiFilter6 = new MultiFilter();
      multiFilter5.isStreamableFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1431);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      protectedProperties5.remove((Object) protectedProperties3, (Object) protectedProperties6);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      Properties properties3 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties16);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties9);
      Object object0 = new Object();
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object2 = new Object();
      protectedProperties5.keys();
      Object object3 = new Object();
      protectedProperties10.remove((Object) protectedProperties9, (Object) properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("zi_@H iC%)f>2`S.ce");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(632.2846000463223, intArray0, (-2338));
      binarySparseInstance0.setValueSparse(77, 77);
      SystemInUtil.addInputLine("BG^Y7JkIJcqPH5yAVHm");
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = 632.2846000463223;
      doubleArray0[2] = 752.32725;
      doubleArray0[3] = (double) (-2338);
      doubleArray0[3] = (double) 77;
      doubleArray0[5] = (double) (-2338);
      doubleArray0[6] = (double) 77;
      doubleArray0[7] = (double) 77;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2338), doubleArray0);
      binarySparseInstance1.insertAttributeAt(2);
      binarySparseInstance1.setWeight(2.0);
      BinarySparseInstance binarySparseInstance2 = (BinarySparseInstance)binarySparseInstance1.copy();
      binarySparseInstance2.deleteAttributeAt(1397);
      System.setCurrentTimeMillis((-493L));
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      Discretize discretize0 = new Discretize("g;pVt8g'");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(632.2846000463223, intArray0, (-2321));
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      
      binarySparseInstance0.toString((-2321));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(77);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize1 = new Discretize("zi_@H iC%)f>2`S.ce");
      discretize1.setInvertSelection(true);
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize1, stringArray0);
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.724454707919629
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)48;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("_");
      discretize0.setBins((byte)2);
      discretize0.setOptions((String[]) null);
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(632.2846000463223, intArray0, (-2321));
      binarySparseInstance0.setValueSparse(77, 77);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = 632.2846000463223;
      binarySparseInstance0.toString((-2321));
      doubleArray0[4] = (-0.5914577204964483);
      doubleArray0[3] = (double) 77;
      doubleArray0[1] = (double) 77;
      doubleArray0[5] = (double) 77;
      doubleArray0[6] = (double) 77;
      doubleArray0[7] = (double) 77;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2321), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(77);
      binarySparseInstance1.insertAttributeAt(2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(77, doubleArray0);
      Discretize discretize1 = new Discretize("0");
      Filter.makeCopy(discretize1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0";
      binarySparseInstance0.isMissing((-38));
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      String string0 = discretize1.invertSelectionTipText();
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "xV8oMLE.pp\"";
      stringArray0[2] = "g2T+0Yyv9$\u0005";
      stringArray0[3] = "$";
      stringArray0[4] = "\tInvert matching sense of column indexes.";
      stringArray0[5] = "Can't ignore class when changing the number of attributes!";
      stringArray0[6] = ".^T";
      Discretize.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-416));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties7);
      Object object0 = new Object();
      Object object1 = new Object();
      protectedProperties18.keys();
      Object object2 = new Object();
      protectedProperties9.remove((Object) properties1, (Object) properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("zi_@H iC%)f>2`S.ce");
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zi_@H iC%)f>2`S.ce";
      Filter.runFilter(discretize0, stringArray0);
      boolean boolean0 = discretize0.getInvertSelection();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(632.2846000463223, intArray0, (-2321));
      binarySparseInstance0.setValueSparse(77, 77);
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = 632.2846000463223;
      binarySparseInstance0.toString((-2321));
      doubleArray0[4] = 0.0;
      doubleArray0[3] = (double) 77;
      doubleArray0[1] = (double) 77;
      doubleArray0[5] = (double) 77;
      doubleArray0[6] = (double) 77;
      doubleArray0[7] = (double) 77;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2321), doubleArray0);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      binarySparseInstance1.insertAttributeAt(2);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(77, doubleArray0);
      Discretize discretize1 = new Discretize("weka/core/Capabilities.props");
      discretize1.setFindNumBins(false);
      // Undeclared exception!
      try { 
        discretize1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Locale locale0 = Locale.CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.clone();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.replaceAll(unaryOperator1);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      linkedList5.replaceAll(unaryOperator1);
      UnaryOperator<Locale.LanguageRange> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator2);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator4 = UnaryOperator.identity();
      linkedList3.replaceAll(unaryOperator4);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList10 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize("N");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      Properties properties3 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties2);
      Properties properties4 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties7);
      Object object0 = new Object();
      Object object1 = new Object();
      protectedProperties18.keys();
      Object object2 = new Object();
      protectedProperties9.remove((Object) properties2, (Object) properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(632.2846000463223, intArray0, (-2468));
      binarySparseInstance0.setValueSparse(77, 77);
      Discretize discretize0 = new Discretize("Enumerating attributes (leaving out class):");
      discretize0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.736148159160286
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1orJA";
      stringArray0[1] = "6<<i -";
      stringArray0[2] = "1orJA";
      stringArray0[3] = "1orJA";
      stringArray0[4] = "1orJA";
      stringArray0[5] = "1orJA";
      stringArray0[6] = "6<<i -";
      Filter.runFilter(discretize0, stringArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      Discretize discretize1 = new Discretize();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      multiFilter3.isStreamableFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      Discretize discretize2 = new Discretize();
      discretize2.setOptions(stringArray0);
      assertEquals(10, discretize2.getBins());
      assertFalse(discretize2.getFindNumBins());
      assertFalse(discretize2.getMakeBinary());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize2.getUseBinNumbers());
      assertFalse(discretize2.getUseEqualFrequency());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.908238329122374
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      protectedProperties5.remove((Object) protectedProperties3, (Object) protectedProperties6);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      Properties properties3 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties16);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties7);
      Object object0 = new Object();
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object2 = new Object();
      protectedProperties19.keys();
      Object object3 = new Object();
      protectedProperties10.remove((Object) protectedProperties9, (Object) properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("zi_@H iC%)f>2`S.ce");
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zi_@H iC%)f>2`S.ce";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties5);
      Properties properties6 = new Properties(properties3);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties9);
      Properties properties7 = new Properties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties7);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties2);
      protectedProperties1.values();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties3);
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties5);
      Properties properties9 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(properties1);
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.makeCopy(multiFilter5);
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]udt+} V2|";
      stringArray0[1] = "6D|pY3)";
      Discretize discretize0 = new Discretize("B%(");
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-27.749079);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1053.0178;
      doubleArray1[5] = (-1411.1989388708);
      doubleArray1[6] = 2019.0;
      doubleArray1[7] = 6.7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-27.749079);
      doubleArray2[1] = 1053.0178;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1053.0178;
      doubleArray2[4] = (-27.749079);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-27.749079);
      doubleArray3[2] = (-1411.1989388708);
      doubleArray3[3] = 1053.0178;
      doubleArray3[4] = 2019.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1053.0178;
      doubleArray4[2] = 2019.0;
      doubleArray4[3] = 0.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray4[8] = 6.7;
      double[] doubleArray5 = new double[2];
      doubleArray1[5] = 1.7976931348623157E308;
      doubleArray5[1] = (-3732.12);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-1411.1989388708);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = (-3732.12);
      doubleArray6[6] = 2019.0;
      doubleArray6[7] = (-3732.12);
      doubleArray6[8] = 6.7;
      doubleArray0[1] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 2019.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 6.7;
      doubleArray8[1] = 6.7;
      doubleArray8[2] = (-1411.1989388708);
      doubleArray8[3] = 6.7;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = 2019.0;
      doubleArray9[1] = (-1.7976931348623157E308);
      doubleArray9[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Locale locale0 = Locale.CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("All");
      linkedList1.add(locale_LanguageRange0);
      linkedList1.listIterator();
      linkedList1.clone();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList2.removeFirstOccurrence(unaryOperator1);
      linkedList3.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.replaceAll(unaryOperator0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList2.replaceAll(unaryOperator1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      linkedList6.replaceAll(unaryOperator1);
      linkedList2.add(locale_LanguageRange0);
      LinkedList<String> linkedList10 = new LinkedList<String>();
      Discretize discretize0 = new Discretize("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[2];
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.makeCopies(multiFilter2, 1396);
      Discretize discretize0 = new Discretize();
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray1.length);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SystemInUtil.addInputLine("'B1of2'");
      SystemInUtil.addInputLine("http.proxyPort");
      Discretize discretize0 = new Discretize("~@{l wdT#V!WzO^__[u");
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize("weka.filters.unsupervised.attribute.Discretize");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.filters.unsupervised.attribute.Discretize", arrayList0, 2254);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      int int0 = 2;
      int int1 = 77;
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null, 2, 77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "DOw}3'KBi";
      stringArray0[1] = "Cc0w'\"[c-mza:'~sR";
      stringArray0[2] = "oJr\"EC&T j";
      stringArray0[3] = "";
      stringArray0[4] = "iwAmGpC";
      stringArray0[5] = "\ncomparing with ";
      stringArray0[6] = "}[z$'@FAc(CjDxp";
      stringArray0[7] = "!Ch=f";
      stringArray0[8] = "-R <col1,col2-col4,...>";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties1.clone();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties(protectedProperties0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties9);
      Properties properties3 = new Properties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties16);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties7);
      Object object0 = new Object();
      Object object1 = new Object();
      protectedProperties19.keys();
      Object object2 = new Object();
      protectedProperties10.remove((Object) protectedProperties9, (Object) properties0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("zi_@H iC%)f>2`S.ce");
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zi_@H iC%)f>2`S.ce";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter5);
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      String[] stringArray0 = new String[6];
      Filter.runFilter(multiFilter2, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      Filter.makeCopy(filter0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      MultiFilter multiFilter9 = new MultiFilter();
      Filter filter1 = Filter.makeCopy(filter0);
      Filter.makeCopy(filter1);
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter10.isStreamableFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6<<i -";
      stringArray0[0] = "1orJA";
      Filter.runFilter(multiFilter3, stringArray0);
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      Filter.makeCopy(multiFilter4);
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      multiFilter9.isStreamableFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
