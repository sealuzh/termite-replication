/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:33:21 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.TreeSet;
import java.util.function.Predicate;
import javax.swing.JApplet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.Cobweb;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Evaluation.handleCostOption("", 32);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getStopwords();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n", arrayList0, 497);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.027865173045423
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.turnChecksOn();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      instances0.stringFreeStructure();
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-2);
      intArray0[4] = 1;
      intArray0[5] = 0;
      evaluation0.falseNegativeRate(115);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1304778859169557
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier0.toString();
      testInstances1.setClassIndex((-280106567));
      costSensitiveClassifier1.costMatrixSourceTipText();
      LinkedList<IBk> linkedList0 = new LinkedList<IBk>();
      evaluation0.areaUnderPRC(104);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((byte) (-117));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4490319293522416
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-886));
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      evaluation1.numFalsePositives(1);
      evaluation0.m_MaxTarget = Double.NaN;
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier1.getOnDemandDirectory();
      costSensitiveClassifier1.setOnDemandDirectory(file0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toSummaryString("numRunsTipText", true);
      evaluation2.precision(4662);
      evaluation0.falseNegativeRate((-1031907734));
      evaluation2.falseNegativeRate(1);
      evaluation0.recall((-886));
      evaluation2.toSummaryString(false);
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      evaluation1.equals(evaluation0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = kStar0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.m_SumPriorSqrErr;
      double double2 = evaluation0.m_SumSqrErr;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.confusionMatrix();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9851618115346552
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate(1515);
      testInstances1.setNumRelationalNominal(10022);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8501349548823622
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      evaluation0.m_TotalCoverage = (double) 2;
      evaluation0.weightedFMeasure();
      evaluation0.areaUnderPRC((-136));
      evaluation0.matthewsCorrelationCoefficient(1);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.050298819086739
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8/z1U*f");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.getStopwords();
      evaluation0.errorRate();
      Integer integer0 = new Integer(115);
      evaluation0.falsePositiveRate(1);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(195225786);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 195225786
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      instances0.listIterator();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1245), charArray0, (byte)5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.652219461249711
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      naiveBayes0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities1 = principalComponents0.getCapabilities();
      capabilities1.dependencies();
      capabilities0.and(capabilities1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFSchemeEntropy();
      evaluation1.priorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2);
      evaluation1.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.99346346053144
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      evaluation0.numFalsePositives(255);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString("@data", false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader1.setSource(file0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.precision(2);
      evaluation2.falseNegativeRate(2119);
      evaluation1.recall(32);
      evaluation1.toSummaryString(false);
      evaluation0.unweightedMicroFmeasure();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 656.67984;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 255;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 32;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 656.67984;
      int[] intArray0 = new int[7];
      intArray0[0] = 2119;
      intArray0[1] = 1;
      intArray0[2] = 32;
      intArray0[3] = 2;
      intArray0[4] = 255;
      intArray0[5] = 68;
      intArray0[6] = 32;
      SparseInstance sparseInstance0 = new SparseInstance(656.67984, doubleArray1, intArray0, (-89));
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3236021929867317
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      testInstances0.setNumRelationalNumeric(2182);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_NumClasses = (int) (byte) (-24);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.setPriors(instances0);
      evaluation1.errorRate();
      evaluation0.falseNegativeRate(70);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-24);
      doubleArray0[1] = Double.NaN;
      evaluation1.setPriors(instances0);
      doubleArray0[2] = (double) (byte) (-57);
      doubleArray0[3] = (double) (byte) (-24);
      doubleArray0[4] = (double) (byte) (-57);
      doubleArray0[5] = Double.NaN;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-24.0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4033948079084486
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      int int0 = (-4113);
      evaluation0.m_SumPredicted = Double.NaN;
      evaluation0.areaUnderROC((-4113));
      double double0 = 2319.210189;
      double[] doubleArray0 = new double[5];
      double double1 = (-2873.3);
      DenseInstance denseInstance0 = new DenseInstance((byte)9, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4323736506036715
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      testInstances0.setNumRelationalNominal(14);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.areaUnderPRC(1);
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient(1728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      linearRegression0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForIntervalEstimator(gaussianProcesses0, sparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4025971388561382
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNumeric(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      evaluation1.SFMeanPriorEntropy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(655, (int[]) null, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.665293776336228
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.areaUnderROC((-195225789));
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.kappa();
      evaluation0.weightedTrueNegativeRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.falseNegativeRate(12);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-351.133);
      textDirectoryLoader0.getDataSet();
      doubleArray0[7] = (double) 70;
      doubleArray0[8] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      evaluation0.getDiscardPredictions();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7892161576106984
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      evaluation0.m_TotalCoverage = (double) 2;
      evaluation0.weightedFMeasure();
      evaluation0.areaUnderPRC((-136));
      Evaluation.makeOptionString(logitBoost0, true);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0, (-3459));
      evaluation0.setPriors(instances0);
      evaluation0.weightedTrueNegativeRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      SparseInstance sparseInstance0 = new SparseInstance(99);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = costSensitiveClassifier0.getCostMatrixSource();
      gaussianProcesses0.setFilterType(selectedTag0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.093579437966579
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootRelativeSquaredError();
      evaluation0.weightedAreaUnderPRC();
      TestInstances testInstances1 = new TestInstances();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.SFSchemeEntropy();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedAreaUnderROC();
      System.setCurrentTimeMillis(267L);
      evaluation1.pctUnclassified();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1105300498329425
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      naiveBayesMultinomialText0.getStopwords();
      evaluation0.errorRate();
      evaluation0.falseNegativeRate(79);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0615098824653293
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      testInstances0.setNumRelationalNominal(14);
      evaluation0.SFMeanPriorEntropy();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 14;
      intArray0[2] = 2180;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 0);
      evaluation0.getHeader();
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'J';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = '}';
      charArray0[5] = 'F';
      charArray0[6] = '}';
      charArray0[7] = '~';
      evaluation0.num2ShortID(357913932, charArray0, 2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(linearRegression0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier0.toString();
      testInstances0.setClassIndex((byte) (-24));
      PriorityQueue<M5Rules> priorityQueue0 = new PriorityQueue<M5Rules>();
      instances0.containsAll(priorityQueue0);
      costSensitiveClassifier1.getCostMatrix();
      try { 
        evaluation0.toClassDetailsString("CostSensitiveClassifier using reweighted training instances\n\nweka.classifiers.rules.ZeroR \n\nClassifier Model\nweka.classifiers.rules.ZeroR@0000000064\n\nCost Matrix\n 0\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.110170465577005
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNumeric(655);
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominal(1624);
      evaluation1.SFMeanPriorEntropy();
      int[] intArray0 = new int[9];
      intArray0[0] = (-100);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = 62;
      intArray0[5] = 62;
      intArray0[6] = (-1);
      evaluation1.areaUnderPRC((-1));
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Attribute attribute0 = new Attribute("unprunedTipText", (-11));
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.getCapabilities();
      attribute0.equalsMsg(m5Rules0);
      Attribute.typeToString(0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      System.setCurrentTimeMillis((-431L));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(";cjKc_/Y;Y");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-r\n");
      String string0 = ";cjKc_/Y;Y";
      try { 
        Evaluation.handleCostOption(";cjKc_/Y;Y", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-r\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("string");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "   * only checks the data against its capabilities.\n");
      Attribute attribute0 = new Attribute("unprunedTipText", (-11));
      Attribute.typeToString(3092);
      String string0 = "getWeightThreshold";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Evaluation.handleCostOption("string", (-2066));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.086960842373327
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNumeric((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominal((-2756));
      evaluation0.SFMeanPriorEntropy();
      int[] intArray0 = new int[6];
      intArray0[0] = 2180;
      intArray0[1] = 17;
      AbstractClassifier.makeCopy(linearRegression0);
      intArray0[2] = (-2756);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = 62;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-100));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(357913932);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.109456894540626
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(naiveBayes0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getStopwords();
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      System.setCurrentTimeMillis((byte) (-24));
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((byte) (-24));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 4;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      System.setCurrentTimeMillis((-682L));
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7564305173108314
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier0.toString();
      evaluation0.falseNegativeRate(2476);
      evaluation0.toMatrixString();
      evaluation0.numTruePositives(1);
      evaluation0.trueNegativeRate(1);
      evaluation0.SFPriorEntropy();
      evaluation0.kappa();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBMeanInformation();
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.431320227527281
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      evaluation0.falseNegativeRate((-1892));
      evaluation0.toMatrixString();
      evaluation0.numTruePositives(89);
      System.setCurrentTimeMillis((-2));
      evaluation0.kappa();
      evaluation0.toMatrixString("RlDwt9PMH4G!{oG+c6");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores((double[]) null, (double[]) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9320603645981418
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) 1;
      testInstances0.setNumRelationalNumeric(2180);
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.log2 = (double) 2;
      testInstances0.setNumRelationalNominal(14);
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation1.precision(106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 106
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.989811093928025
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.toMatrixString(".%k}]\u0003Rak3b");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.140224867040049
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1));
      evaluation0.falseNegativeRate((-1457654551));
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 2180;
      testInstances0.setNumRelationalNumeric(2180);
      evaluation0.m_DiscardPredictions = true;
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.931999793126397
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.areaUnderROC(2);
      textDirectoryLoader0.getRevision();
      evaluation0.weightedFMeasure();
      evaluation0.areaUnderPRC((-136));
      evaluation0.matthewsCorrelationCoefficient(1);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = (-2373);
      intArray0[3] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 104);
      evaluation0.getHeader();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.094361706545458
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootRelativeSquaredError();
      evaluation1.weightedAreaUnderPRC();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation2 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double0 = evaluation2.weightedMatthewsCorrelation();
      double double1 = evaluation1.m_Incorrect;
      evaluation0.SFMeanSchemeEntropy();
      double double2 = evaluation2.weightedAreaUnderROC();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.incorrect();
      evaluation0.SFSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.071522124044181
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal(10001);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5217669383437986
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      testInstances0.setNumRelationalNominal(14);
      evaluation0.SFMeanPriorEntropy();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 14;
      intArray0[2] = 2180;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 0);
      evaluation0.getHeader();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.126088659982384
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.areaUnderROC(1980);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      evaluation0.numFalsePositives(21);
      evaluation0.useNoPriors();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.toSummaryString("-packages", true);
      evaluation2.precision((-1911562654));
      evaluation2.falseNegativeRate(2);
      evaluation1.falseNegativeRate(9);
      int int0 = 19;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3532148820957524
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      naiveBayes0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities1 = principalComponents0.getCapabilities();
      capabilities1.dependencies();
      capabilities0.and(capabilities1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.SFSchemeEntropy();
      double double2 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.9940302114769565;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2);
      evaluation0.updateMargins(doubleArray0, 0, (-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_Incorrect;
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(191.801028, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) logitBoost0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1407427931411687
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.addNumericTrainClass(1.0, 6.283185307179586);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) mockRandom0;
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 100, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8942254499643238
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.m_SumPriorSqrErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.16658366839149
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.numTrueNegatives(1);
      evaluation0.numFalseNegatives((-1));
      evaluation0.truePositiveRate(3);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setDebug(true);
      costSensitiveClassifier1.setDebug(true);
      evaluation0.weightedFalsePositiveRate();
      org.evosuite.runtime.Random.setNextRandom(2);
      CostMatrix costMatrix0 = new CostMatrix(111);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.941440681433638
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier2.toString();
      testInstances0.setClassIndex((byte) (-24));
      evaluation0.numTruePositives(2);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1054));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1054
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.129864397582504
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      AbstractClassifier.makeCopies(naiveBayes0, 2);
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.numFalseNegatives(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) (-1);
      testInstances0.getOptions();
      doubleArray0[5] = (double) 2;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.507305136385497
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-cfz>~");
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      linearRegression0.turnChecksOn();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      HashSet<RandomForest> hashSet0 = new HashSet<RandomForest>();
      treeSet0.addAll(hashSet0);
      costSensitiveClassifier0.toString();
      testInstances0.setClassIndex((byte)5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.containsAll(treeSet0);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.toClassDetailsString(".arff");
      System.setCurrentTimeMillis((-189L));
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialText0, (Instances) null, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.846010766818221
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.deleteStringAttributes();
      double double0 = evaluation0.numFalsePositives(255);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(".arff", true);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getStructure();
      File file0 = textDirectoryLoader2.getDirectory();
      textDirectoryLoader2.setSource(file0);
      evaluation1.precision((-1911562654));
      double double1 = evaluation1.falseNegativeRate(2119);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.recall(32);
      assertEquals(double2, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double3 = evaluation1.numTrueNegatives(32);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.unclassified();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6389482949003704
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.addNumericTrainClass(762.4, (-1));
      Stacking stacking0 = new Stacking();
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6907972632103165
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText1.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      evaluation0.falseNegativeRate(34);
      Instances instances1 = new Instances(instances0, 2, 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      String string0 = evaluation2.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.numTruePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.trueNegativeRate(4);
      assertEquals(double1, double0, 0.01);
      
      evaluation2.SFPriorEntropy();
      double double2 = evaluation1.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(104, charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1410;
      evaluation0.areaUnderROC(1410);
      evaluation0.areaUnderPRC(605);
      evaluation0.KBMeanInformation();
      DenseInstance denseInstance0 = new DenseInstance(31);
      evaluation0.m_SumErr = Double.NaN;
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.550683947301844
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-886));
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      evaluation1.numFalsePositives(1);
      evaluation0.m_MaxTarget = Double.NaN;
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier1.getOnDemandDirectory();
      costSensitiveClassifier1.setOnDemandDirectory(file0);
      evaluation1.numTrueNegatives(2);
      evaluation1.numFalseNegatives(7);
      evaluation1.truePositiveRate(1248);
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier2.setDebug(false);
      costSensitiveClassifier3.setDebug(false);
      evaluation0.numTruePositives(2);
      evaluation0.truePositiveRate(6);
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.getTechnicalInformation();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.360046888040859
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.areaUnderROC(2);
      evaluation0.toClassDetailsString();
      evaluation0.weightedFMeasure();
      evaluation0.areaUnderPRC(2);
      double double0 = evaluation0.m_TotalCoverage;
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation1.weightedMatthewsCorrelation();
      double double1 = evaluation1.m_SumKBInfo;
      MockRandom mockRandom0 = new MockRandom(1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation1.recall(105);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(76);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      evaluation1.numFalsePositives(0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8477201685276228
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-886));
      costSensitiveClassifier0.getOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation1.numFalsePositives(1);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier1.getOnDemandDirectory();
      costSensitiveClassifier1.setOnDemandDirectory(file0);
      Evaluation evaluation2 = new Evaluation(instances0);
      costSensitiveClassifier1.getOptions();
      evaluation2.toSummaryString("numRunsTipText", true);
      evaluation2.precision(4662);
      evaluation0.falseNegativeRate((-1031907734));
      evaluation2.falseNegativeRate(1);
      evaluation0.recall((-886));
      evaluation2.toSummaryString(false);
      double[][] doubleArray0 = evaluation2.confusionMatrix();
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      int int0 = (-4113);
      evaluation0.areaUnderROC((-4113));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.numFalseNegatives(2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 24, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte byte0 = (byte) (-57);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte) (-57);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@data", instances0, 1526, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.78609930273485
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.reset();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      textDirectoryLoader0.getDirectory();
      double double2 = evaluation0.numFalsePositives(21);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.toSummaryString("-packages", true);
      double double3 = evaluation2.precision((-1911562654));
      double double4 = evaluation2.m_Incorrect;
      double double5 = evaluation0.recall((-645));
      assertEquals(double5, double3, 0.01);
      
      double double6 = evaluation2.numTruePositives(1980);
      assertEquals(0.0, double6, 0.01);
      
      evaluation1.setDiscardPredictions(false);
      assertFalse(evaluation1.getDiscardPredictions());
      
      evaluation2.areaUnderROC(1542);
      assertEquals(0.0, evaluation2.unclassified(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7844613010968486
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.reset();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      instances0.deleteStringAttributes();
      MockFile mockFile0 = new MockFile("@relation", "@data");
      evaluation0.numFalsePositives(21);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString("-packages", true);
      evaluation1.precision((-1911562654));
      double double1 = evaluation1.m_Incorrect;
      evaluation1.m_ComplexityStatisticsAvailable = true;
      evaluation0.recall((-645));
      evaluation1.numTruePositives(1980);
      evaluation0.setDiscardPredictions(true);
      evaluation1.areaUnderROC(1542);
      double double2 = evaluation0.truePositiveRate((-645));
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0943550691473507
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-2);
      intArray0[4] = 1;
      intArray0[5] = 0;
      evaluation0.numTruePositives((-2));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5217669383437986
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      testInstances0.setNumRelationalNominal(14);
      evaluation0.SFMeanPriorEntropy();
      int[] intArray0 = new int[3];
      intArray0[2] = 2;
      intArray0[1] = 14;
      intArray0[2] = 2180;
      evaluation0.useNoPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 0);
      binarySparseInstance0.dataset();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8820446078902324
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.areaUnderROC(2);
      textDirectoryLoader0.getRevision();
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.areaUnderPRC((-136));
      evaluation0.matthewsCorrelationCoefficient(1);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.m_SumKBInfo;
      MockRandom mockRandom0 = new MockRandom(1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, 2, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7179359286873583
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.deleteStringAttributes();
      evaluation0.numFalsePositives(255);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(".arff", true);
      evaluation0.falseNegativeRate((-357913946));
      evaluation1.recall((-1911562654));
      REPTree rEPTree0 = new REPTree();
      MockRandom mockRandom0 = new MockRandom((-357913946));
      SGD sGD0 = new SGD();
      try { 
        evaluation0.crossValidateModel((Classifier) sGD0, instances0, 15, (Random) mockRandom0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3532148820957524
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      naiveBayes0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities1 = principalComponents0.getCapabilities();
      capabilities1.dependencies();
      capabilities0.and(capabilities1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double3, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2);
      evaluation0.updateMargins(doubleArray0, 0, (-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      int int0 = (-963);
      int[] intArray0 = new int[3];
      linearRegression0.getCapabilities();
      intArray0[0] = (-963);
      intArray0[1] = 0;
      intArray0[2] = (-963);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.687522060085299
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      evaluation0.falseNegativeRate((-1892));
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.numTruePositives(89);
      double double1 = evaluation0.trueNegativeRate(770);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.SFPriorEntropy();
      double double2 = evaluation0.m_Correct;
      double double3 = evaluation0.numTrueNegatives(102261128);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNumeric((-2313));
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(14);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      double double0 = evaluation0.m_Correct;
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.092718045712859
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      instances0.listIterator();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      naiveBayesMultinomialText0.getStopwords();
      evaluation0.errorRate();
      Integer integer0 = new Integer((-1741));
      evaluation0.falsePositiveRate(1459);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.0144864535881952
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.dependencies();
      evaluation0.pctIncorrect();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.toString(108, 0);
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.498826537369555
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2857;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      System.setCurrentTimeMillis(0L);
      evaluation0.kappa();
      evaluation0.toMatrixString(".bsi");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2857;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.equals(binarySparseInstance0);
      evaluation0.weightedPrecision();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7311887647907223
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      AbstractClassifier.makeCopies(naiveBayes0, 2);
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.numFalseNegatives(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      testInstances0.getOptions();
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 0.17499999701976776;
      doubleArray0[7] = (double) 2;
      evaluation1.updateMargins(doubleArray0, 1, 2.0);
      evaluation0.falseNegativeRate((-3031));
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3096661327250927
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      AbstractClassifier.makeCopies(linearRegression0, 1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(")cEr|A?");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.numFalseNegatives((-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 0.17499999701976776);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.549676551132721
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(14);
      evaluation0.SFMeanPriorEntropy();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      evaluation0.truePositiveRate(1);
      evaluation0.rootMeanPriorSquaredError();
      evaluation1.falseNegativeRate(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation2.numTruePositives((-2577));
      // Undeclared exception!
      try { 
        evaluation0.recall((-3683));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3683
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3417505201313795
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      CfsSubsetEval cfsSubsetEval1 = new CfsSubsetEval();
      cfsSubsetEval1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.makeOptionString(logitBoost1, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFEntropyGain();
      evaluation0.meanPriorAbsoluteError();
      Evaluation.makeOptionString(logitBoost0, true);
      evaluation2.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.14816065043309
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      CfsSubsetEval cfsSubsetEval1 = new CfsSubsetEval();
      cfsSubsetEval1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances1 = testInstances0.generate();
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances2);
      Evaluation.k_MarginResolution = 78;
      Evaluation.makeOptionString(linearRegression0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.meanPriorAbsoluteError();
      Evaluation.makeOptionString((Classifier) null, false);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 2180;
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles((double) 0, 1.2000000029802322);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesUpdateable0, instances0, (-2), (Random) mockRandom1, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7678883814482043
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      evaluation0.numFalsePositives(255);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(".arff", true);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getStructure();
      File file0 = textDirectoryLoader2.getDirectory();
      textDirectoryLoader2.setSource(file0);
      double double0 = evaluation1.precision((-1911562654));
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.falseNegativeRate(2119);
      double double1 = evaluation0.recall(32);
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation1.unweightedMicroFmeasure();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.071743828954945
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(1);
      double double0 = evaluation1.m_SumClass;
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      double double1 = evaluation1.m_Correct;
      double double2 = evaluation1.m_TotalSizeOfRegions;
      // Undeclared exception!
      try { 
        evaluation1.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.254040376052317
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.areaUnderPRC((byte) (-24));
      evaluation0.matthewsCorrelationCoefficient(101);
      evaluation0.numFalseNegatives(1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.KBRelativeInformation();
      costSensitiveClassifier0.setDebug(false);
      evaluation0.weightedFalsePositiveRate();
      org.evosuite.runtime.Random.setNextRandom(101);
      evaluation0.weightedAreaUnderROC();
      evaluation0.numTrueNegatives((-520));
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) costSensitiveClassifier0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3303605532424205
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      evaluation0.m_TotalCoverage = (double) 2;
      evaluation0.weightedFMeasure();
      evaluation0.areaUnderPRC((-136));
      evaluation0.matthewsCorrelationCoefficient(1);
      evaluation0.numFalseNegatives(1);
      costSensitiveClassifier0.getCapabilities();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.relativeAbsoluteError();
      evaluation0.KBRelativeInformation();
      costSensitiveClassifier0.setDebug(false);
      evaluation0.weightedFalsePositiveRate();
      org.evosuite.runtime.Random.setNextRandom(1);
      evaluation1.weightedAreaUnderROC();
      evaluation0.numTrueNegatives(2);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      instances0.listIterator();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopy(additiveRegression0);
      naiveBayesMultinomialText0.getStopwords();
      double double0 = evaluation0.falseNegativeRate((-1505));
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.KBInformation();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = Double.NaN;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.areaUnderROC((-195225789));
      evaluation0.areaUnderPRC(108);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 0.125;
      doubleArray0[6] = 2.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.125, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3903020595808244
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(76);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      evaluation1.numTruePositives((-2577));
      evaluation1.recall(0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2133));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2133
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.134631643813234
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-652);
      TestInstances testInstances0 = new TestInstances();
      int int0 = (-2029057286);
      testInstances0.setNumRelationalNumeric((-2029057286));
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("M-n%51^5W(", arrayList0, 10000000);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier2.toString();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setClassIndex(1);
      LinkedList<IBk> linkedList0 = new LinkedList<IBk>();
      instances0.containsAll(treeSet0);
      costSensitiveClassifier2.getCostMatrix();
      System.setCurrentTimeMillis(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      String string0 = costSensitiveClassifier0.toString();
      testInstances0.setClassIndex((byte)5);
      costSensitiveClassifier0.getCostMatrix();
      System.setCurrentTimeMillis((-189L));
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, " ");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-652);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-652);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (double) 2;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(14);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = 500;
      intArray0[3] = 14;
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      intArray0[6] = 14;
      intArray0[7] = 14;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14, intArray0, 99);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(1.2000000029802322, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(1088.7385835249, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1088
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.2614342352291943
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GaWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = (-1);
      intArray0[5] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-886.203272804202), intArray0, (-102261121));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(1000.0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-652);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) (-652);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      testInstances0.setNumRelationalNumeric(2182);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.201090277254506
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-2);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-2);
      evaluation0.numTruePositives((-2));
      // Undeclared exception!
      try { 
        evaluation0.recall(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.0753327006913165
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier0.toString();
      testInstances0.setClassIndex((byte)5);
      double double0 = evaluation0.numTruePositives((-1056));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.recall(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1777486156207164
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayes naiveBayes1 = new NaiveBayes();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier0.toString();
      testInstances0.setClassIndex(1);
      costSensitiveClassifier0.costMatrixSourceTipText();
      LinkedList<IBk> linkedList0 = new LinkedList<IBk>();
      evaluation0.areaUnderPRC(2);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.304656248863884
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.setOnDemandDirectory(file0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      costSensitiveClassifier2.toString();
      testInstances0.setClassIndex((byte) (-24));
      costSensitiveClassifier0.costMatrixSourceTipText();
      LinkedList<IBk> linkedList0 = new LinkedList<IBk>();
      evaluation0.areaUnderPRC((byte) (-24));
      evaluation0.fMeasure(1);
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {9.425000002607703}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.832873058594917
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setMinimal(true);
      linearRegression0.getOptions();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(classificationViaRegression0, true);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFSchemeEntropy();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) classificationViaRegression0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.567544838226769
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(")cEr|A?");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.numFalseNegatives((-1));
      evaluation0.toSummaryString("grZ]21%o{t7O-|25", true);
      evaluation0.precision(0);
      evaluation0.falseNegativeRate(0);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.272645764437107
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setMinimal(true);
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      linearRegression0.setRidge((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(classificationViaRegression0, true);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.268232094288681
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumPredicted;
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "shape=box style=filled ");
      instances0.deleteStringAttributes();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      evaluation1.numFalsePositives((-1));
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.toSummaryString("@data", false);
      // Undeclared exception!
      try { 
        evaluation1.precision(74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 74
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.6124815995781114
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
      evaluation0.falseNegativeRate((-1892));
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      instances0.removeIf(predicate0);
      double double1 = evaluation0.numTruePositives(89);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.trueNegativeRate(770);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.SFPriorEntropy();
      double double4 = evaluation0.m_Correct;
      double double5 = evaluation0.numTrueNegatives(102261128);
      assertEquals(double5, double3, 0.01);
      
      System.setCurrentTimeMillis((-1));
      evaluation0.getRevision();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.6671897003648666
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_SumPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      textDirectoryLoader2.getDirectory();
      double double1 = evaluation1.numFalsePositives(280106558);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.m_TotalSizeOfRegions = 753.60233319;
      evaluation2.toSummaryString("Y#}@;J<yg", false);
      double double2 = evaluation1.precision(1073741824);
      evaluation2.priorEntropy();
      double double3 = evaluation1.falseNegativeRate(6);
      assertEquals(0.0, double3, 0.01);
      
      evaluation1.recall(122);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation1.KBInformation();
      double double4 = evaluation2.falsePositiveRate(1024);
      assertEquals(double4, double2, 0.01);
      
      evaluation2.getRevision();
      String string1 = evaluation2.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.4522872388476773
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      instances0.listIterator();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      naiveBayesMultinomialText0.getStopwords();
      evaluation0.errorRate();
      evaluation0.weightedFalsePositiveRate();
      org.evosuite.runtime.Random.setNextRandom((-1995670920));
      evaluation0.weightedAreaUnderROC();
      try { 
        Evaluation.handleCostOption("Zf*/#]M", (-1995670920));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      instances0.listIterator();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayes0);
      naiveBayesMultinomialText0.getStopwords();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte) (-57);
      doubleArray0[3] = (double) (byte) (-24);
      doubleArray0[4] = 724.611319688;
      doubleArray0[5] = (-2873.3);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-446.15984);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)5, doubleArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) linearRegression0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1151727593175793
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      textDirectoryLoader0.setDebug(true);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.toSummaryString(true);
      evaluation0.toSummaryString();
      double double1 = evaluation0.weightedFalsePositiveRate();
      evaluation0.matthewsCorrelationCoefficient((-4579));
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.640723369911164
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3351968613054326
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(linearRegression0, true);
      evaluation0.numFalsePositives(2);
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      classificationViaRegression0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation0.avgCost();
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.144875863408365
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2180);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(2180);
      evaluation1.setPriors(instances0);
      evaluation0.weightedTrueNegativeRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.5555153366946053
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopies(additiveRegression0, 0);
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedRecall();
      evaluation0.rootMeanSquaredError();
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.448442309591302
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.totalCost();
      evaluation0.areaUnderROC(1980);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation1.weightedTruePositiveRate();
      double double1 = evaluation1.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      double double2 = evaluation1.pctIncorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.0816382575067487
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2857;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.trueNegativeRate((-3864));
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_Correct;
      double double3 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8037143984351165
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double0 = evaluation0.numFalsePositives(0);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC((-2));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setNumFolds(2);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      logitBoost1.globalInfo();
      cVParameterSelection0.setClassifier(naiveBayes0);
      Evaluation.makeOptionString((Classifier) null, true);
      try { 
        Evaluation.wekaStaticWrapper(logitBoost1, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.238365336668736
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      AbstractClassifier.makeCopy(simpleLinearRegression0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.5106067567084245
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1625502375));
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.precision(2);
      Evaluation.makeOptionString(inputMappedClassifier0, true);
      evaluation1.falseNegativeRate(21);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9866570820077527
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = kStar0.getCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N'B@M490HbUH9-abtM";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      AbstractClassifier.runClassifier(kStar0, stringArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      testInstances0.setNumRelationalNominal(200);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.m_SumPriorSqrErr;
      double double2 = evaluation0.m_SumSqrErr;
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.941067786459767
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      AbstractClassifier.makeCopy(simpleLinearRegression0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      int int0 = 662;
      evaluation0.numFalseNegatives((-2));
      testInstances1.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      SMOreg sMOreg0 = new SMOreg();
      SelectedTag selectedTag0 = sMOreg0.getFilterType();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7101962751419162
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 100;
      evaluation0.numFalsePositives(100);
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.151585731725183
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = "Ls";
      String string1 = "+jwAAE%@ BR";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=@relation
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.0394030318626974
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m;?GWhR3`");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-2);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-2);
      intArray0[7] = 2;
      intArray0[8] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-2));
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0082405871330216
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      Utils.log2 = (double) 2;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDirectory();
      evaluation1.numFalsePositives(280106558);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.m_Incorrect = (double) 1;
      evaluation2.toSummaryString("Y#}@;J<yg", false);
      double double1 = evaluation1.precision(2);
      double double2 = evaluation2.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.falseNegativeRate(6);
      evaluation1.recall(122);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      Integer integer0 = new Integer(122);
      double double4 = evaluation2.falsePositiveRate(1024);
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.truePositiveRate(61);
      assertEquals(double5, double3, 0.01);
      
      evaluation1.numFalseNegatives((-3014));
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7094458197175149
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = 'j';
      charArray0[2] = '[';
      String string0 = evaluation0.num2ShortID(21, charArray0, 26);
      assertEquals("                       j55", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.340799102201791
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(linearRegression0, true);
      evaluation0.numFalsePositives(2);
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      classificationViaRegression0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation.makeOptionString(classificationViaRegression0, true);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "h`Y5!,h34nay(4`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.9851618115346552
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.dependencies();
      evaluation0.pctIncorrect();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.SFMeanPriorEntropy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 21.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 21.0;
      evaluation0.m_TrainClassWeights = doubleArray0;
      // Undeclared exception!
      try { 
        sparseInstance0.equalHeadersMsg(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      AbstractClassifier.makeCopy(simpleLinearRegression0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.272645764437107
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.makeOptionString(linearRegression0, true);
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.096126910270421
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      capabilities0.capabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNumeric(2188);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation2 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      double double1 = evaluation1.weightedMatthewsCorrelation();
      evaluation1.SFSchemeEntropy();
      double double2 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PPMatrix";
      stringArray0[1] = "PPMatrix";
      stringArray0[2] = "PPMatrix";
      try { 
        Evaluation.evaluateModel("PPMatrix", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name PPMatrix.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Attribute attribute0 = new Attribute("unprunedTipText", (-11));
      Attribute.typeToString(3092);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "relational";
      stringArray0[1] = "integer";
      stringArray0[2] = "ax5?_zr&U5EB";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "integer";
      stringArray0[5] = "integer";
      Evaluation.main(stringArray0);
      TreeSet<RandomForest> treeSet0 = new TreeSet<RandomForest>();
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.132951830896407
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 1945);
      DecisionTable decisionTable0 = new DecisionTable();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setKeys(">`2t2hAxwF");
      MockFile.createTempFile("d.N7{O'O9wb{j$dgF\"", (String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1, 2);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.listOptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "fuQhQ\"<usR?vM)W\"OC";
      stringArray0[1] = "\tThe range of attribute to force type to be DATE.\n\t'first' and 'last' are accepted as well.\n\tExamples: \"first-last\", \"1,4,5-27,50-last\"\n\t(default: -none-)";
      stringArray0[2] = "fuQhQ\"<usR?vM)W\"OC";
      stringArray0[3] = "= ";
      stringArray0[4] = "fuQhQ\"<usR?vM)W\"OC";
      stringArray0[5] = "= ";
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[2];
      try { 
        Evaluation.evaluateModel((Classifier) regressionByDiscretization0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = (-1033.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1033.0);
      doubleArray0[1] = (-1033.0);
      doubleArray0[2] = (-1033.0);
      doubleArray0[3] = (-1033.0);
      double double1 = (-0.25);
      doubleArray0[4] = (-0.25);
      doubleArray0[5] = (-1033.0);
      doubleArray0[6] = (-1033.0);
      SparseInstance sparseInstance0 = new SparseInstance((-1033.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
