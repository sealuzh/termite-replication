/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:25:40 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      jRip0.getDebug();
      Instances instances0 = new Instances("date", arrayList0, 0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 0);
      jRip0.getDebug();
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      arrayList0.removeAll(instances0);
      Attribute.typeToString(attribute0);
      binarySparseInstance0.deleteAttributeAt(2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "relational";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      jRip_RipperRule0.size();
      byteArray0[1] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(2);
      jRip_RipperRule0.grow(instances0);
      assertEquals(2.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1810.577705;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1160);
      int[] intArray0 = new int[4];
      intArray0[0] = 2920;
      intArray0[1] = 1160;
      intArray0[2] = 1160;
      intArray0[3] = 1160;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1810.577705, intArray0, 120);
      instances0.add((Instance) binarySparseInstance0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 2145782426);
      arrayList0.removeAll(instances0);
      Attribute.typeToString(attribute0);
      binarySparseInstance0.deleteAttributeAt(2);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ClassOrder classOrder0 = new ClassOrder();
      classOrder0.getCapabilities(instances0);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 3, 63.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6241026221599713
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      jRip0.getDebug();
      Instances instances0 = new Instances("date", arrayList0, 0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      arrayList0.removeAll(instances0);
      Attribute.typeToString(attribute0);
      binarySparseInstance0.deleteAttributeAt(2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "relational";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(2);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      Attribute.typeToString(attribute0);
      binarySparseInstance0.deleteAttributeAt(2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      arrayList0.removeAll(instances0);
      Attribute.typeToString(attribute0);
      binarySparseInstance0.deleteAttributeAt(2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "relational";
      stringArray0[2] = "string";
      stringArray0[3] = "string";
      Instances.main(stringArray0);
      RuleStats.partition(instances0, 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7535103423460603
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 1512);
      jRip0.setDebug(true);
      jRip0.getRevision();
      jRip0.getOptions();
      jRip0.globalInfo();
      jRip0.listOptions();
      jRip0.setMinNo(4019.404224106);
      jRip0.enumerateMeasures();
      jRip0.minNoTipText();
      jRip0.globalInfo();
      jRip0.getRevision();
      jRip0.usePruningTipText();
      jRip0.checkErrorRateTipText();
      assertEquals(4019.404224106, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      instances0.setRelationName("relational");
      attribute0.setWeight(0);
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1120.9911712332), doubleArray0);
      boolean boolean0 = jRip_NominalAntd1.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertFalse(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      instances0.setRelationName("relational");
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2N7+NS");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-48);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";V\"WVW");
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jRip_RipperRule0.setConsequent((-402.59431968613325));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-76));
      jRip0.getOptimizations();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = null;
      try {
        bufferedReader1 = new BufferedReader(stringReader0, (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMAN;
      Locale locale2 = Locale.GERMANY;
      jRip0.setUsePruning(false);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1);
      Locale locale3 = Locale.GERMAN;
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale4 = locale0.stripExtensions();
      locale4.getDisplayLanguage(locale2);
      locale1.getExtensionKeys();
      Locale locale5 = Locale.CHINESE;
      Locale.lookup(arrayList0, linkedList2);
      locale4.getUnicodeLocaleKeys();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale locale6 = Locale.KOREAN;
      locale3.getDisplayScript();
      Locale locale7 = Locale.SIMPLIFIED_CHINESE;
      locale7.getExtensionKeys();
      String[] stringArray0 = jRip0.getOptions();
      Locale.lookup(arrayList0, linkedList3);
      StringReader stringReader0 = new StringReader(".|%ppPYhqJhV");
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setMinNo(4.8);
      jRip0.getCheckErrorRate();
      jRip0.getMinNo();
      jRip0.getOptimizations();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nDeleting rules to decrease DL of the whole ruleset ...");
      jRip0.getCheckErrorRate();
      jRip0.listOptions();
      jRip0.checkErrorRateTipText();
      String string0 = "";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.8;
      doubleArray0[1] = 189.782627339;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 189.782627339;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = 4.8;
      doubleArray0[8] = 4.8;
      DenseInstance denseInstance0 = new DenseInstance(189.782627339, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-927.0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("99PuQL>*EOl", protectedProperties0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BallNode ballNode0 = new BallNode(2, (byte)62, (-2), binarySparseInstance1, (-763.9009557477341));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip1.getSeed();
      try { 
        jRip1.rulesetForOneClass(3, (Instances) null, 1112.496665927, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      instances0.setRelationName("relational");
      attribute0.setWeight(0);
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      jRip_NominalAntd0.splitData(instances0, 3, 3);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("/O2P", (List<String>) null);
      jRip0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccuRate();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      ClassOrder classOrder2 = new ClassOrder();
      ClassOrder classOrder3 = new ClassOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassOrder classOrder4 = new ClassOrder();
      classOrder4.setClassOrder(5751);
      ClassOrder classOrder5 = new ClassOrder();
      ClassOrder classOrder6 = new ClassOrder();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getExtensionKeys();
      JRip jRip1 = new JRip();
      Instances instances0 = new Instances("cyx3qRx$M", arrayList0, 5751);
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.064396240310271
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Fast Effective Rule Induction";
      jRip0.enumerateMeasures();
      stringArray0[1] = ".1.:v.-N!.XDHx";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[2] = "\n\nClass ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[3] = "-E";
      stringArray0[4] = "oF:8HM&(o[$I0E2";
      stringArray0[5] = "Test of '";
      stringArray0[6] = "~";
      stringArray0[7] = "";
      jRip0.setOptions(stringArray0);
      jRip0.setFolds(432);
      jRip0.getTechnicalInformation();
      jRip0.toString();
      jRip0.getOptions();
      assertEquals(432, jRip0.getFolds());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to", (List<String>) null);
      attribute0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 1);
      arrayList0.removeAll(instances0);
      Attribute.typeToString(attribute0);
      binarySparseInstance0.deleteAttributeAt(2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      AbstractClassifier.runClassifier(decisionTable0, (String[]) null);
      DecisionTable decisionTable1 = new DecisionTable();
      JRip jRip0 = new JRip();
      Enumeration enumeration0 = new WordTokenizer();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Remove remove0 = decisionTable4.m_delTransform;
      AbstractClassifier.makeCopies(jRip0, 2);
      decisionTable4.m_disTransform = (Filter) null;
      Instances instances0 = decisionTable4.m_theInstances;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2601.658036623799;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 2;
      decisionTable1.m_classPriorCounts = doubleArray0;
      DecisionTable decisionTable5 = new DecisionTable();
      Instances instances1 = decisionTable1.m_dtInstances;
      jRip0.getMinNo();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1834));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      AllFilter allFilter0 = new AllFilter();
      decisionTable0.m_disTransform = (Filter) allFilter0;
      Instances instances0 = new Instances("\nRXlb w|g", arrayList0, 5);
      Locale locale0 = Locale.GERMANY;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale1 = locale0.stripExtensions();
      Locale locale2 = Locale.TAIWAN;
      locale1.getExtensionKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.lookup(linkedList1, list0);
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      Locale locale4 = Locale.KOREA;
      locale1.getDisplayLanguage();
      Locale locale5 = Locale.GERMANY;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale5);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      locale2.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale6 = Locale.KOREAN;
      locale1.getDisplayScript();
      Locale locale7 = Locale.SIMPLIFIED_CHINESE;
      locale3.getExtensionKeys();
      Attribute attribute0 = new Attribute("@relation", instances0);
      attribute0.enumerateValues();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      Attribute.typeToString(attribute0);
      jRip_NumericAntd0.splitData(instances0, 2, 4);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale2 = Locale.CANADA_FRENCH;
      locale2.getExtensionKeys();
      locale1.stripExtensions();
      locale1.getExtensionKeys();
      locale2.getExtensionKeys();
      Locale.getISOLanguages();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Attribute attribute0 = new Attribute((String) null, "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      linkedList1.remove(object0);
      Locale.lookup(arrayList0, linkedList0);
      locale1.getUnicodeLocaleKeys();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("instancem\n", protectedProperties1);
      attribute0.enumerateValues();
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      ClassOrder classOrder2 = new ClassOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      classOrder0.setClassOrder((-642));
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Quit rule", arrayList0, 2);
      classOrder5.getCapabilities(instances0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1, 1);
      System.setCurrentTimeMillis(0);
      jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      SparseInstance sparseInstance0 = new SparseInstance(23);
      jRip_RipperRule0.covers(sparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringReader stringReader0 = new StringReader("D(?T`Je5gW");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 62);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2);
      // Undeclared exception!
      try { 
        bufferedReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3628722294375422
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      jRip1.setOptions(stringArray0);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip jRip1 = new JRip();
      jRip0.enumerateMeasures();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule1.getConsequent();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = 2.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)62;
      doubleArray0[1] = 1810.577705;
      doubleArray0[2] = (double) (byte)62;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int int0 = 69;
      binarySparseInstance0.setMissing(69);
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int1 = 80;
      Attribute attribute0 = new Attribute("", arrayList0, 80);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.covers(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-245));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.KOREAN;
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale3 = locale0.stripExtensions();
      linkedList1.offer(locale2);
      locale3.getExtension('Y');
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      locale0.getUnicodeLocaleKeys();
      locale2.stripExtensions();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[9];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      classOrderArray0[3] = classOrder3;
      ClassOrder classOrder4 = new ClassOrder();
      classOrderArray0[4] = classOrder4;
      ClassOrder classOrder5 = new ClassOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassOrder classOrder6 = new ClassOrder();
      classOrderArray0[4] = classOrder6;
      ClassOrder classOrder7 = new ClassOrder();
      classOrderArray0[7] = classOrder7;
      ClassOrder classOrder8 = new ClassOrder();
      classOrderArray0[8] = classOrder8;
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("null <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale2 = locale0.stripExtensions();
      locale2.getExtension('Y');
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      locale0.getUnicodeLocaleKeys();
      locale1.stripExtensions();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[9];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      classOrderArray0[3] = classOrder3;
      ClassOrder classOrder4 = new ClassOrder();
      classOrderArray0[4] = classOrder4;
      ClassOrder classOrder5 = new ClassOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      classOrderArray0[5] = classOrder5;
      classOrder5.setClassOrder((-642));
      ClassOrder classOrder6 = new ClassOrder();
      classOrderArray0[5] = classOrder6;
      ClassOrder classOrder7 = new ClassOrder();
      classOrderArray0[7] = classOrder7;
      ClassOrder classOrder8 = new ClassOrder();
      classOrderArray0[8] = classOrder8;
      Instances instances0 = new Instances("date", arrayList1, 1);
      RuleStats.partition(instances0, 3);
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\nR'ule #";
      stringArray0[1] = "W";
      stringArray0[2] = "W";
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("W", arrayList0, 1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getTechnicalInformation();
      jRip_RipperRule0.prune(instances0, true);
      Reader reader0 = null;
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.GERMAN;
      Locale locale3 = Locale.CANADA;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      locale3.stripExtensions();
      Locale locale4 = Locale.TAIWAN;
      locale0.getExtensionKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      Locale locale5 = Locale.SIMPLIFIED_CHINESE;
      Locale locale6 = Locale.KOREA;
      locale6.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale7 = Locale.GERMANY;
      Locale.setDefault(locale_Category0, locale5);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale locale8 = Locale.GERMANY;
      linkedList1.add(locale8);
      locale3.getDisplayScript();
      Locale locale9 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale10 = Locale.GERMANY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category1, locale1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode3);
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute("", 83);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 4, 511.22980422);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, int0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.136920820622443
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, (String[]) null);
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("|h*#XA^", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      String[] stringArray0 = jRip0.getOptions();
      assertFalse(jRip0.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1810.577705;
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = bayesNet1.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.setEstimator(bayesNetEstimator0);
      Attribute attribute0 = new Attribute("", (List<String>) null, 1151);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(" = ", string0);
      
      jRip_NominalAntd0.splitData(instances0, 204.063, 99.0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.replaceAll(biFunction0);
      Attribute attribute0 = new Attribute("99PuQL>*EOl", protectedProperties0);
      jRip_RipperRule0.toString(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      principalComponents0.toString();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2414625352988633
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.foldsTipText();
      jRip0.setCheckErrorRate(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[1] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[2] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[3] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[4] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[5] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[6] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(674.172);
      JRip jRip1 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip_RipperRule0.hasAntds();
      jRip1.minNoTipText();
      jRip1.setUsePruning(false);
      jRip0.enumerateMeasures();
      JRip jRip2 = new JRip();
      jRip2.getRevision();
      jRip2.usePruningTipText();
      jRip_RipperRule0.hasAntds();
      jRip2.setMinNo(1.7976931348623157E308);
      jRip1.toString();
      jRip0.setMinNo(674.172);
      jRip2.getUsePruning();
      jRip1.getTechnicalInformation();
      jRip_RipperRule0.setConsequent(1.7976931348623157E308);
      jRip1.getUsePruning();
      jRip2.debugTipText();
      assertEquals(1.7976931348623157E308, jRip2.getMinNo(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.CANADA;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      locale1.stripExtensions();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("alone");
      jRip0.getUsePruning();
      Locale locale4 = Locale.FRENCH;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale4.getExtension('X');
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Set<String> set0 = locale4.getUnicodeLocaleKeys();
      locale4.stripExtensions();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale5 = Locale.GERMANY;
      locale5.getDisplayScript();
      locale4.getDisplayCountry();
      Locale locale6 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add(locale_LanguageRange0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode1);
      locale6.getExtensionKeys();
      locale2.getExtensionKeys();
      Attribute attribute0 = new Attribute("", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList2, 1);
      jRip_NumericAntd0.splitData(instances0, 2, 2);
      BallNode ballNode0 = new BallNode((-458));
      assertTrue(ballNode0.isALeaf());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q=g");
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tWhat type of density estimator to use: 0=histogram/1=kernel/2=normal (default: 0).");
      jRip0.getCheckErrorRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_RipperRule0.setConsequent((byte)62);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.foldsTipText();
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertFalse(jRip0.getUsePruning());
      assertFalse(jRip0.getCheckErrorRate());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1810.577705;
      doubleArray0[2] = (double) (byte)62;
      SparseInstance sparseInstance0 = new SparseInstance(64.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      binarySparseInstance0.setMissing((-2787));
      JRip jRip0 = new JRip();
      jRip0.setFolds(4858);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      sparseInstance0.setValue(62, (double) 62);
      Attribute attribute0 = new Attribute("", 89);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      // Undeclared exception!
      try { 
        binarySparseInstance1.equalHeaders(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1810.577705;
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = bayesNet1.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet3 = new BayesNet();
      bayesNet2.toXMLBIF03();
      SparseInstance sparseInstance0 = new SparseInstance(1810.577705, doubleArray0);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("r_c5,_WO\"J'", (-1));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.CANADA;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale4 = locale1.stripExtensions();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("alone");
      linkedList0.add(locale_LanguageRange0);
      Locale locale5 = Locale.FRENCH;
      locale5.getDisplayCountry(locale4);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      locale5.getExtension('P');
      List<Locale> list0 = new ArrayList<Locale>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale locale6 = Locale.KOREA;
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale7 = Locale.GERMANY;
      locale7.getDisplayScript();
      Locale locale8 = Locale.SIMPLIFIED_CHINESE;
      Locale.setDefault(locale1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add(locale_LanguageRange0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      locale8.getExtensionKeys();
      locale2.getExtensionKeys();
      locale7.getDisplayName(locale3);
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList2, 1);
      try { 
        jRip0.rulesetForOneClass((-402.59431968613325), instances0, (-402.59431968613325), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      AbstractClassifier.runClassifier(decisionTable0, (String[]) null);
      DecisionTable decisionTable1 = new DecisionTable();
      JRip jRip0 = new JRip();
      decisionTable0.enumerateMeasures();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable2 = new DecisionTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Remove remove0 = decisionTable4.m_delTransform;
      decisionTable4.m_disTransform = (Filter) null;
      Attribute attribute0 = new Attribute("@relation", (String) null, 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getCover();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = null;
      try {
        instances1 = new Instances("\tWhether NOT use pruning\n\t(default: use pruning)", arrayList0, (-320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -320
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, SparseInstance> biFunction0 = (BiFunction<Object, Object, SparseInstance>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.globalInfo();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "X#;{1=5y=\"";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "G8^m'H";
      JRip.main(stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)62;
      doubleArray0[1] = (double) (byte)62;
      doubleArray0[2] = (double) (byte)62;
      doubleArray0[3] = (double) (byte)62;
      SparseInstance sparseInstance0 = new SparseInstance((byte)62, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setMissing(3102);
      JRip jRip1 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Kernel estimator with bandwidth ", arrayList0, 62);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(64.0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.setValue(80, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-213L));
      int int0 = (-9);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, (-459), (-459));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "ial";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("ial");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ial not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "N/r]m1G!k+)!wnf";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("N/r]m1G!k+)!wnf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N/r]m1G!k+)!wnf not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2692404415462466
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute.typeToString(attribute0);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("6C(|L:,R09YK}o#Z1", arrayList1, 1);
      instances0.setRelationName("@attribute");
      Attribute attribute1 = new Attribute((String) null, (List<String>) null, (-7));
      arrayList1.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      jRip_NominalAntd0.splitData(instances0, 2, -0.0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 4;
      Attribute.typeToString(3);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-1.0);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.ITALIAN;
      Locale locale2 = Locale.GERMAN;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      locale3.stripExtensions();
      Locale locale4 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale5 = Locale.JAPAN;
      Locale locale6 = Locale.SIMPLIFIED_CHINESE;
      Locale locale7 = Locale.KOREA;
      locale7.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale8 = Locale.ITALIAN;
      Locale.setDefault(locale_Category0, locale6);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale locale9 = Locale.FRANCE;
      Locale.forLanguageTag("article");
      locale9.getDisplayName(locale4);
      linkedList1.add(locale9);
      locale3.getDisplayScript();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale10 = Locale.GERMANY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category1, locale1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode3);
      Attribute attribute0 = new Attribute(" TGm-T", (-12));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      int[] intArray0 = new int[6];
      doubleArray0[0] = (double) (-12);
      intArray0[1] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(563.2195689292016, doubleArray0, intArray0, 0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.optimizationsTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getAttr();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      classOrder0.setSeed(1);
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale3 = locale2.stripExtensions();
      Locale locale4 = Locale.TAIWAN;
      locale0.getExtensionKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale5 = Locale.SIMPLIFIED_CHINESE;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale locale6 = Locale.SIMPLIFIED_CHINESE;
      locale6.clone();
      Locale locale7 = Locale.GERMANY;
      locale7.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale8 = Locale.GERMANY;
      Locale.setDefault(locale_Category0, locale6);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode2);
      linkedList2.containsAll(linkedList1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list1, locale_FilteringMode3);
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale locale9 = Locale.KOREAN;
      locale1.getDisplayScript();
      Locale locale10 = Locale.SIMPLIFIED_CHINESE;
      locale3.getExtensionKeys();
      Attribute attribute0 = new Attribute("=R5._Drq4i:4a>Sf4", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("instancem\n", protectedProperties1);
      attribute0.enumerateValues();
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      ClassOrder classOrder2 = new ClassOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      classOrder0.setClassOrder((-642));
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Quit rule", arrayList0, 2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1, 1);
      jRip_NumericAntd0.getRevision();
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      KDTree kDTree0 = new KDTree();
      kDTree0.setMeasurePerformance(false);
      IBk iBk0 = new IBk(1);
      iBk0.pruneToK((Instances) null, (double[]) null, 2);
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-399));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.GERMAN;
      Locale locale3 = Locale.GERMANY;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale4 = locale3.stripExtensions();
      Locale locale5 = Locale.TAIWAN;
      locale5.getExtensionKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale6 = Locale.PRC;
      Locale locale7 = Locale.JAPAN;
      Locale locale8 = Locale.GERMANY;
      locale8.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale9 = Locale.GERMANY;
      Locale.setDefault(locale_Category0, locale7);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      linkedList0.containsAll(linkedList1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list1, locale_FilteringMode2);
      locale3.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale locale10 = Locale.KOREAN;
      locale1.getDisplayScript();
      Locale locale11 = Locale.SIMPLIFIED_CHINESE;
      locale4.getExtensionKeys();
      Attribute attribute0 = new Attribute("=R5._rq4i:4a>Sf-", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      Attribute.typeToString(attribute0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0057511712691096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getAttrValue();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      attribute0.copy("8118");
      jRip_RipperRule0.copy();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "integer";
      stringArray0[1] = "numeric";
      Attribute.main(stringArray0);
      jRip_NumericAntd0.getSplitPoint();
      jRip0.getOptions();
      jRip0.setOptimizations(1);
      jRip0.seedTipText();
      jRip0.toString();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1810.577705;
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = bayesNet1.getEstimator();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet0.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet3 = new BayesNet();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "j}N0&";
      stringArray0[1] = "D28uz@5(";
      stringArray0[2] = "j}N0&";
      stringArray0[2] = "D28uz@5(";
      stringArray0[4] = "j}N0&";
      stringArray0[5] = "P~dd:p p&khZ6E7Q";
      stringArray0[6] = "D28uz@5(";
      stringArray0[7] = "j}N0&";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to");
      Attribute attribute1 = new Attribute("to");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute1);
      Instances instances0 = new Instances("relational", arrayList0, 86);
      instances0.setRelationName("=7J61EC}=JV/");
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Attribute attribute2 = new Attribute("g[9S^u2./9km", arrayList3, 109);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      jRip_NominalAntd0.splitData(instances0, 0.5, 109);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale3 = locale2.stripExtensions();
      Locale locale4 = Locale.TAIWAN;
      locale0.getExtensionKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add(locale2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale5 = Locale.SIMPLIFIED_CHINESE;
      locale5.clone();
      Locale locale6 = Locale.GERMANY;
      locale6.getDisplayLanguage();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale5);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      linkedList2.containsAll(linkedList1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list1, locale_FilteringMode2);
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale locale7 = Locale.KOREAN;
      locale1.getDisplayScript();
      Locale locale8 = Locale.SIMPLIFIED_CHINESE;
      locale3.getExtensionKeys();
      Attribute attribute0 = new Attribute("=R5._Drq4i:4a>Sf4", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Attribute.typeToString(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1810.577705;
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractClassifier.makeCopies(bayesNet1, 90);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip0.listOptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.size();
      jRip_RipperRule0.setConsequent(1810.577705);
      try { 
        jRip_RipperRule2.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }
}
