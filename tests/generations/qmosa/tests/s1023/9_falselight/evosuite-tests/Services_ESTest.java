/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:39:52 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://}oSV*(Jl8ikTwQOM:1877");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "-");
      Services.testHTTPS("}oSV*(Jl8ikTwQOM", 1877);
      System.setCurrentTimeMillis(1877);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1889);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP(":QJTpBWHK~=m^6v`1%<", 1889);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.861689812002369
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", (-2524));
      services_SIMPLE_Result0.time = 0L;
      String string0 = services_SIMPLE_Result0.Error;
      services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-2524**.\n****", (-2524));
      Services services0 = new Services();
      Services.testPOP3("Ry%4dNE ", (-2524));
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("**Erreur : java.lang.IllegalArgumentException: port out of range:-2524**", (-3380));
      services_SIMPLE_Result1.time = 0L;
      services_SIMPLE_Result1.reset();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://'Dr^cCrM:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur : java.lang.IllegalArgumentException: port out of range:-2524**");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("**Erreur : java.lang.IllegalArgumentException: port out of range:-2524**", 0);
      String string1 = services_SIMPLE_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-3380**.\n****", string1);
      
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("'Dr^cCrM", 0);
      String string2 = services_HTTP_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : true\n** Temps : 0 ms\n** Poid de la page : 73 octets\n** Code de page : -1\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string2);
      
      services_HTTP_Result1.time = (long) (-2524);
      services_HTTP_Result0.page_weight = (-2524);
      services_HTTP_Result0.reset();
      services_SIMPLE_Result1.reset();
      Services.testSMTP("", 0);
      String string3 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string3);
      
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("'Dr^cCrM", 1);
      services_HTTP_Result2.reset();
      assertFalse(services_HTTP_Result2.works);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", (-2524));
      services_SIMPLE_Result0.time = 0L;
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-2524**.\n****", (-2524));
      Services services0 = new Services();
      Services.testPOP3("Ry%4dN ", 0);
      Services.testSMTP("**Erreur : java.lang.IllegalArgumentException: port out of range:-2524**", (-3380));
      services_SIMPLE_Result1.time = 0L;
      services_SIMPLE_Result1.reset();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://'Dr^cCrM:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("dymjH2:uj2fbWkAkx", (-2524));
      services_SIMPLE_Result0.toString();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("'Dr^cCrM", 0);
      assertEquals((-1), services_HTTP_Result1.code);
      
      services_HTTP_Result0.toString();
      services_HTTP_Result1.works = false;
      services_HTTP_Result1.Error = "Ux&o:*#gT7+";
      services_HTTP_Result1.reset();
      services_SIMPLE_Result1.reset();
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("**Erreur : java.lang.IllegalArgumentException: port out of range:-2524**", 0);
      services_SIMPLE_Result2.time = 0L;
      services_HTTP_Result0.toString();
      services_HTTP_Result1.reset();
      services_SIMPLE_Result2.reset();
      assertEquals(0L, services_SIMPLE_Result2.time);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1228);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[1];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("**URL Mal Form\u00E9** (", 1228);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, (-1));
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 1888);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.page_weight = (-14);
      services_HTTP_Result0.code = (-14);
      services_HTTP_Result0.page_weight = (-14);
      services_HTTP_Result0.code = 2800;
      services_HTTP_Result0.toString();
      services_HTTP_Result0.code = (-14);
      services_HTTP_Result0.code = (-14);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      
      services_HTTP_Result0.code = 0;
      services_HTTP_Result0.code = services_HTTP_Result0.code;
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      assertFalse(services_SIMPLE_Result1.works);
      assertEquals(0L, services_SIMPLE_Result1.time);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.toString();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      Services.testPOP3((String) null, (-1166));
      System.setCurrentTimeMillis(763L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2468L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("`uL?Rxg9VhFuYM/?uQv", (-2791));
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
  }
}
