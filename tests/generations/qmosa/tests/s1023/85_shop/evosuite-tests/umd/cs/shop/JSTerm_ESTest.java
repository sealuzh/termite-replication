/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:24:17 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.20112526258819
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("xhQ&~c1M>$)p#Fn/'w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-3);
      JSJshopVars.leftPar = (-3);
      System.setCurrentTimeMillis((-3));
      StringReader stringReader0 = new StringReader("hi*okenizi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(+RJ!qgO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4058244050138073
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution3);
      jSTerm0.addElement(jSSubstitution1);
      StringReader stringReader0 = new StringReader("0.00");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm1);
      Integer integer0 = new Integer(691);
      jSTerm0.addElement(integer0);
      StringReader stringReader1 = new StringReader("hk");
      System.setCurrentTimeMillis(691);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.734841638203521
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E`Mn8Vz%[Y;t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeFunction();
      stringReader0.reset();
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT((JSSubstitution) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm2.addAll((Collection) jSTerm1);
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      jSTerm2.remove((Object) "E`Mn8Vz%[Y;t");
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      jSTerm4.clone();
      jSTerm3.matches(jSTerm0, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm5.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(14, 14);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-3));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.setSize(3346);
      Spliterator spliterator0 = jSPredicateForm0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) spliterator0;
      objectArray0[1] = (Object) ".";
      objectArray0[2] = (Object) unaryOperator0;
      objectArray0[3] = (Object) unaryOperator0;
      jSPredicateForm0.add(objectArray0[3]);
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(40);
      jSTerm0.addElement(integer0);
      StringReader stringReader0 = new StringReader("function");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(40);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.setSize(1924);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution2);
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution2);
      jSTerm0.addElement(jSSubstitution0);
      jSSubstitution2.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Integer integer0 = new Integer(0);
      jSSubstitution4.add((Object) integer0);
      jSSubstitution4.removeElementAt(0);
      jSTerm0.addElement(jSSubstitution4);
      StringReader stringReader0 = new StringReader("V");
      stringReader0.read();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1);
      jSTerm0.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate0);
      predicate3.test(predicate2);
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate0);
      predicate12.or(predicate5);
      predicate12.or(predicate10);
      predicate10.and(predicate4);
      Predicate.isEqual((Object) predicate9);
      predicate5.or(predicate9);
      Predicate.isEqual((Object) predicate3);
      int int0 = 91;
      jSTerm0.setSize(91);
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(91);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      jSTerm0.addElement(".");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("function");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.setSize(4);
      System.setCurrentTimeMillis(72L);
      jSPredicateForm0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      Predicate<Object> predicate8 = predicate4.negate();
      jSTerm0.lastElement();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) null);
      predicate8.or(predicate6);
      Predicate<Object> predicate10 = predicate2.and(predicate4);
      Predicate<Object> predicate11 = predicate10.or(predicate5);
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate11.and(predicate12);
      predicate9.negate();
      predicate5.negate();
      predicate3.and(predicate11);
      predicate7.and(predicate13);
      Predicate<Object> predicate14 = predicate12.or(predicate3);
      Predicate<Object> predicate15 = predicate4.or(predicate0);
      predicate15.or(predicate14);
      predicate8.negate();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer1.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.reset();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      jSTerm0.removeElement(streamTokenizer1);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.eolIsSignificant(false);
      stringReader0.reset();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer1.nextToken();
      streamTokenizer4.resetSyntax();
      stringReader0.reset();
      stringReader0.skip(0L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      int int0 = (-1246);
      Integer integer0 = new Integer((-1246));
      jSTerm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 37;
      jSTerm0.setSize(37);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(RJ!gO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-3);
      JSJshopVars.leftPar = (-3);
      System.setCurrentTimeMillis((-3));
      String string0 = " Expecting wor as teru";
      StringReader stringReader0 = new StringReader(" Expecting wor as teru");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution3.addElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution3);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.addElement(jSSubstitution4);
      jSSubstitution4.forEach(consumer0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.containsAll(jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSSubstitution3);
      jSSubstitution5.retainAll(jSSubstitution0);
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution4.clear();
      jSSubstitution0.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.addElements(jSSubstitution6);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution8.add((Object) jSSubstitution3);
      jSSubstitution8.clear();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSTerm0.setSize(3);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution2);
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.930150070806983
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xdt![w\"&K$)_LOB@}Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isFunction());
      
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT((JSSubstitution) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      JSTerm jSTerm4 = (JSTerm)jSTerm2.clone();
      jSTerm0.standarizerPredicateForm();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSTerm4);
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate0.and(predicate5);
      predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate4.or(predicate0);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate9.and(predicate7);
      Predicate.isEqual((Object) "Xdt![w\"&K$)_LOB@}Z");
      predicate8.negate();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      JSTerm jSTerm6 = jSTerm4.call();
      jSTerm6.removeAllElements();
      Object object0 = new Object();
      predicate6.negate();
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate.isEqual((Object) predicate10);
      System.setCurrentTimeMillis((-1));
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm4.equals(jSTerm5);
      jSTerm4.matches(jSTerm6, jSSubstitution0);
      assertTrue(jSTerm6.isFunction());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.664137839392251
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(37);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("?U20zuQF0R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      JSJshopVars.interrogation = (-5395);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution0.removeElements(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5908055472548903
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = (-1);
      JSJshopVars.equalT = 37;
      JSJshopVars.percent = (-2948);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) "notequal");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      jSTerm1.parallelStream();
      jSTerm0.equals(jSTerm2);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7161299744376426
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.commentChar(0);
      streamTokenizer1.ttype = (-2);
      JSJshopVars.greaterT = (-2);
      stringReader0.ready();
      streamTokenizer1.ordinaryChars(2049, 95);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      streamTokenizer2.ttype = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.sval = "JSTerm: Error reading control parameters: ";
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.nextToken();
      streamTokenizer0.ordinaryChars((-1079), 124);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-2));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      JSJshopVars.minus = (-2);
      jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm0, jSSubstitution0);
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-3);
      JSJshopVars.leftPar = (-3);
      System.setCurrentTimeMillis((-3));
      StringReader stringReader0 = new StringReader("AbJH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSJshopVars.leftPar = (-3);
      System.setCurrentTimeMillis((-3));
      StringReader stringReader0 = new StringReader("hi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9286342742396902
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      jSTerm0.makeVariable();
      streamTokenizer1.ordinaryChars(32, 427);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.commentChar((-1));
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = '_';
      charArray0[2] = 'i';
      charArray0[3] = '~';
      charArray0[4] = '(';
      charArray0[5] = 'C';
      charArray0[6] = 'i';
      charArray0[7] = 'D';
      charArray0[8] = '^';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("planningdomain:");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StringReader stringReader1 = new StringReader("}rT=HA2{zz/Fg");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("}rT=HA2{zz/Fg");
      stringReader2.skip(0L);
      stringReader1.reset();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(hi *okenizr isvSvACE");
      stringReader0.skip((-1866L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.618344923242498
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-2);
      JSJshopVars.greaterT = (-2);
      jSTerm0.isVariable();
      streamTokenizer1.ordinaryChars((-2), 95);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5218890888688006
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      streamTokenizer0.ordinaryChars(1518, 1518);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.nextToken();
      streamTokenizer1.ordinaryChars((-3), 10);
      StringReader stringReader1 = new StringReader("tokenizer");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.commentChar(38);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      
      jSTerm0.clone();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSSubstitution0, jSSubstitution1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3200862559959092
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      jSTerm1.call();
      jSTerm1.call();
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.710832876408638
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-2);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-2));
      streamTokenizer2.quoteChar((-2));
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-2), (-2));
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-2));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      streamTokenizer4.sval = null;
      streamTokenizer4.slashStarComments(false);
      streamTokenizer4.quoteChar((-2));
      streamTokenizer4.ordinaryChar((-2));
      streamTokenizer4.commentChar((-2));
      jSTerm0.standardizerTerm();
      streamTokenizer1.ttype = (-2);
      jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8411476517771987
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.equals(jSTerm1);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm0.isGround();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.equals(jSTerm5);
      JSTerm jSTerm7 = jSTerm2.cloneT();
      jSTerm1.isGround();
      JSTerm jSTerm8 = new JSTerm();
      JSTerm jSTerm9 = new JSTerm();
      jSTerm7.equals(jSTerm3);
      JSTerm jSTerm10 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm10.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6187450833065236
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-2);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-2), (-2));
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.commentChar((-2));
      streamTokenizer1.quoteChar((-2));
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer2.pushBack();
      streamTokenizer2.commentChar((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.nval = (double) (-2);
      streamTokenizer3.sval = null;
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.quoteChar((-2));
      streamTokenizer3.ordinaryChar((-2));
      streamTokenizer3.commentChar((-2));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 3203;
      String string0 = "<";
      StringReader stringReader0 = new StringReader("<");
      stringReader0.skip(3203);
      stringReader0.reset();
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.703175492758203
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.isConstant();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm0.isGround();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.equals(jSTerm5);
      JSTerm jSTerm7 = jSTerm2.cloneT();
      jSTerm1.isGround();
      JSTerm jSTerm8 = new JSTerm();
      JSTerm jSTerm9 = new JSTerm();
      jSTerm7.equals(jSTerm3);
      JSTerm jSTerm10 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm10.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.773699519462731
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rx=Zv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-1);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer0.nval = (double) (-1);
      streamTokenizer2.ordinaryChar((-1));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = null;
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      streamTokenizer4.sval = null;
      streamTokenizer4.slashStarComments(false);
      streamTokenizer4.quoteChar((-1));
      streamTokenizer4.ordinaryChar((-1));
      streamTokenizer4.commentChar((-1));
      jSTerm0.standardizerTerm();
      streamTokenizer1.ttype = (-1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6187450833065236
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      jSTerm0.equals(jSTerm0);
      streamTokenizer1.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-2);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-2));
      streamTokenizer2.quoteChar(1436);
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.ordinaryChar((-4090));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.ordinaryChars((-4090), 1436);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = null;
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-2));
      streamTokenizer4.commentChar((-2));
      jSTerm0.standardizerTerm();
      streamTokenizer0.nval = (double) (-2);
      jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.737309882650043
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.setSize(37);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      StringReader stringReader0 = new StringReader("2Y?\")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate4);
      predicate7.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate5.and(predicate8);
      predicate7.and(predicate4);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) jSTerm2);
      predicate3.and(predicate2);
      predicate7.or(predicate9);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "2Y?\")");
      predicate4.or(predicate10);
      JSTerm jSTerm3 = new JSTerm();
      Predicate.isEqual((Object) jSTerm3);
      Object object0 = new Object();
      predicate10.negate();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      Predicate.isEqual((Object) jSTerm4);
      System.setCurrentTimeMillis(37);
      boolean boolean0 = jSTerm4.equals(jSTerm0);
      assertEquals("[?%%%]", jSTerm4.toString());
      assertFalse(jSTerm4.isConstant());
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertFalse(boolean0);
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.691891258681255
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rx=Zv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-1);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.ordinaryChar((-1));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = null;
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      streamTokenizer4.sval = null;
      streamTokenizer4.slashStarComments(false);
      streamTokenizer4.quoteChar((-1));
      streamTokenizer4.ordinaryChar((-1));
      streamTokenizer4.commentChar((-1));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer1.ttype = (-1);
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.604097959678625
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-2);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-2));
      streamTokenizer2.quoteChar((-2));
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.ordinaryChar((-4090));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.ordinaryChars((-4090), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = null;
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.sval = null;
      streamTokenizer4.commentChar((-2));
      jSTerm0.standardizerTerm();
      streamTokenizer0.nval = (double) (-2);
      jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.633167426372882
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E`Mn8Vz%[Y;t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      stringReader0.reset();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT((JSSubstitution) null);
      JSSubstitution jSSubstitution1 = jSTerm2.matches((JSPredicateForm) jSTerm0);
      jSTerm2.remove((Object) "E`Mn8Vz%[Y;t");
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      jSTerm4.clone();
      jSTerm3.matches(jSTerm0, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm5.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6099572441508134
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8795603748239165
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.call();
      jSTerm2.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.equals(jSTerm4);
      JSTerm jSTerm6 = jSTerm0.cloneT();
      jSTerm0.isGround();
      streamTokenizer0.ordinaryChars(37, 37);
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = new JSTerm();
      jSTerm8.matches(jSTerm6, (JSSubstitution) null);
      jSTerm8.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm7.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.522918073164143
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(40);
      jSTerm0.addElement(integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      int int0 = 96;
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.setSize(3346);
      System.setCurrentTimeMillis(4);
      Spliterator spliterator0 = jSPredicateForm0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) spliterator0;
      objectArray0[1] = (Object) ".";
      objectArray0[2] = (Object) unaryOperator0;
      objectArray0[3] = (Object) unaryOperator0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      objectArray0[7] = (Object) ".";
      objectArray0[8] = (Object) unaryOperator0;
      jSTerm0.toArray(objectArray0);
      System.setCurrentTimeMillis(4);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      Object object0 = jSTerm0.clone();
      jSSubstitution1.add(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution1);
      jSTerm0.addAll((Collection) jSSubstitution1);
      jSTerm0.addElement((Object) null);
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("hk");
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.842867469156866
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.equals(jSTerm1);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.isFunction();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.equals(jSTerm5);
      jSTerm2.cloneT();
      jSTerm1.isGround();
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = null;
      try {
        jSTerm8 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      int int0 = (-5);
      JSJshopVars.slash = (-5);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSTerm0.addAll((Collection) linkedList0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator1.apply((String) null);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator2);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.colon = 958;
      jSTerm2.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.502407616732523
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.trimToSize();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.slashSlashComments(true);
      stringReader0.reset();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), 0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer2.ordinaryChar((-2));
      streamTokenizer1.commentChar((-63));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer1.nextToken();
      streamTokenizer4.resetSyntax();
      stringReader0.skip(0L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("91&}[/~D&9Ct@L=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.669437548207739
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("im=c|W}+!K1jA4b@!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[3];
      jSTerm0.isGround();
      charArray0[0] = 'I';
      charArray0[1] = 'J';
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate0.test(predicate5);
      predicate5.and(predicate3);
      predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate4.or(predicate3);
      predicate6.and(predicate2);
      predicate5.or(predicate4);
      predicate3.negate();
      predicate2.negate();
      Object object0 = new Object();
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3220);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.interrogation = (-2);
      boolean boolean0 = jSTerm1.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.552538459367743
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.makeEval(true);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm4.standardizerTerm();
      assertTrue(jSTerm2.isEval());
      
      JSTerm jSTerm5 = jSTerm1.cloneT();
      assertFalse(jSTerm5.isEval());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7646708055296703
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      stringReader0.ready();
      streamTokenizer1.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-2));
      streamTokenizer2.quoteChar(1436);
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.ordinaryChars((-4090), 1436);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = "F";
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-2));
      streamTokenizer0.ordinaryChars((-2), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.commentChar((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0);
      assertFalse(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(boolean0);
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PtX;vIwYFAJ]NK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = '\"';
      stringReader0.read(charArray0);
      streamTokenizer0.eolIsSignificant(true);
      JSJshopVars.apostrophe = (-1);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.367420033319239
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isGround();
      jSTerm0.replaceAll(unaryOperator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSTerm0.removeAll(linkedList0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.319273793020535
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(54, 54);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.604097959678625
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-2);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-2));
      streamTokenizer2.quoteChar((-2));
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = null;
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.sval = null;
      streamTokenizer4.quoteChar((-2));
      streamTokenizer4.ordinaryChar((-2));
      streamTokenizer4.commentChar((-2));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer1.ttype = (-2);
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.print();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2263282181113064
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSJshopVars.slash = 0;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, JSSubstitution> function1 = unaryOperator1.andThen((Function<? super Integer, ? extends JSSubstitution>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      function1.compose((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.andThen((Function<? super Integer, ?>) function1);
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JG<hu7ub%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8515037185653487
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSJshopVars.leftPar = (-1076348249);
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hit*okenizr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(stringReader0);
      jSTerm0.print();
      Integer integer0 = new Integer((-1));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate1.and(predicate2);
      Predicate<Object> predicate8 = predicate0.or(predicate4);
      Predicate<Object> predicate9 = predicate7.and(predicate3);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate6);
      Predicate<Object> predicate12 = predicate3.or(predicate1);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate9.and(predicate11);
      predicate9.test(predicate12);
      Predicate<Object> predicate15 = predicate13.or(predicate2);
      predicate14.negate();
      Predicate<Object> predicate16 = predicate9.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate17 = predicate16.or(predicate0);
      Predicate<Object> predicate18 = predicate4.negate();
      predicate5.or(predicate17);
      Predicate<Object> predicate19 = predicate12.negate();
      Predicate.isEqual((Object) predicate16);
      predicate13.negate();
      predicate4.and(predicate1);
      predicate12.or(predicate18);
      predicate6.and(predicate19);
      predicate4.or(predicate19);
      predicate2.negate();
      predicate15.negate();
      Object object0 = new Object();
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "the tokenizer is SPACE!";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) stringReader0;
      objectArray0[7] = (Object) jSSubstitution0;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "(he tokenizYr is SPACE!";
      StringReader stringReader0 = new StringReader("(he tokenizYr is SPACE!");
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.resetSyntax();
      stringReader0.reset();
      stringReader0.skip(0L);
      stringReader0.reset();
      System.setCurrentTimeMillis(1609L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      stringReader1.reset();
      stringReader0.markSupported();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.ready();
      stringReader1.reset();
      stringReader0.skip(0L);
      stringReader1.reset();
      System.setCurrentTimeMillis(1609L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.099723244302639
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(he tokenzYr .s SdSCE!");
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.reset();
      long long0 = 0L;
      stringReader0.skip(0L);
      stringReader0.reset();
      long long1 = 1609L;
      System.setCurrentTimeMillis(1609L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.576564673331267
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rx=Zv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-1);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.commentChar((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.ordinaryChar((-1));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.sval = null;
      streamTokenizer3.pushBack();
      streamTokenizer3.commentChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      streamTokenizer4.sval = null;
      streamTokenizer4.slashStarComments(false);
      streamTokenizer4.quoteChar((-1));
      streamTokenizer4.ordinaryChar((-1));
      streamTokenizer4.commentChar((-1));
      jSTerm0.standardizerTerm();
      streamTokenizer1.ttype = (-1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSJshopVars.leftPar = (-15);
      StringReader stringReader0 = new StringReader("n'd!_KW9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      streamTokenizer0.ordinaryChar(5471);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-15);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars((-1238), 1106);
      streamTokenizer0.pushBack();
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(40);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars((-1238), (-15));
      try { 
        streamTokenizer2.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      jSTerm0.print();
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-2538));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate1.and(predicate2);
      Predicate<Object> predicate8 = predicate7.and(predicate3);
      Predicate<Object> predicate9 = predicate3.or(predicate7);
      Predicate<Object> predicate10 = predicate9.and(predicate6);
      Predicate<Object> predicate11 = predicate3.or(predicate1);
      predicate8.and(predicate10);
      predicate8.test(predicate11);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate2.or(predicate9);
      Predicate<Object> predicate14 = predicate7.negate();
      Predicate<Object> predicate15 = predicate14.negate();
      predicate2.and(predicate7);
      predicate13.negate();
      predicate5.and(predicate8);
      Predicate<Object> predicate16 = Predicate.isEqual((Object) predicate1);
      predicate16.negate();
      predicate14.negate();
      Predicate<Object> predicate17 = predicate9.or(predicate15);
      predicate17.negate();
      Predicate<Object> predicate18 = Predicate.isEqual((Object) null);
      predicate18.negate();
      Object object0 = new Object();
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(3203);
      System.setCurrentTimeMillis(277L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9809211261807627
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate5.or(predicate0);
      Predicate<Object> predicate7 = predicate5.and(predicate2);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate0);
      Predicate<Object> predicate10 = predicate9.or(predicate3);
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate7);
      predicate3.test(predicate2);
      Predicate<Object> predicate13 = predicate0.or(predicate11);
      predicate1.negate();
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate15 = predicate12.or(predicate9);
      predicate10.negate();
      predicate10.or(predicate2);
      predicate15.negate();
      jSTerm0.lastElement();
      Predicate.isEqual((Object) ".");
      Predicate<Object> predicate16 = predicate13.negate();
      Predicate<Object> predicate17 = predicate4.or(predicate13);
      predicate17.and(predicate10);
      predicate5.or(predicate0);
      predicate16.and(predicate5);
      Predicate<Object> predicate18 = Predicate.isEqual((Object) ".");
      predicate18.or(predicate15);
      predicate14.negate();
      predicate15.negate();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.setSize(1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeAll(jSSubstitution1);
      jSSubstitution4.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.clear();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.setSize(58);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(hi *okenizr isvSvACE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.setSize(1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution4.removeAll(jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution1);
      Integer integer0 = new Integer((-3590));
      jSSubstitution5.add((Object) integer0);
      jSSubstitution2.removeElements(jSSubstitution5);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      UnaryOperator.identity();
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      function1.apply((Object) null);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function1);
      jSSubstitution1.replaceAll(unaryOperator0);
      jSSubstitution4.removeAll(jSSubstitution2);
      jSSubstitution0.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
