/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 23:34:58 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.339767129894459
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1583, (Object) "");
      String string0 = jSONArray0.join((String) null);
      jSONArray0.put(1583, false);
      jSONArray0.optBoolean(24);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray1);
      jSONArray0.put(47, 4);
      jSONObject0.optDouble("", (double) 1583);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float(0.0);
      Float float1 = new Float((double) 47);
      hashMap0.put(float0, float1);
      jSONArray0.put(1583, (Map) hashMap0);
      jSONObject0.optBoolean("Expected a ',' or '}'");
      jSONArray0.put(1583, 1358.72386);
      jSONObject0.optString("null", "spl");
      jSONArray0.getLong(47);
      jSONObject0.optInt("null");
      Integer integer0 = new Integer(8448);
      Integer integer1 = new Integer(47);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer1);
      linkedList0.toArray();
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      jSONObject0.getJSONArray(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3969568370742453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1583, (Object) "");
      int int0 = 24;
      String string0 = jSONArray0.join((String) null);
      jSONArray0.optBoolean(24);
      jSONArray1.toJSONObject(jSONArray0);
      Double double0 = new Double(1583);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.offerLast(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      Boolean boolean1 = Boolean.FALSE;
      linkedList2.add((String) null);
      LinkedList<Boolean> linkedList5 = new LinkedList<Boolean>();
      linkedList5.add(boolean0);
      linkedList2.removeAll(linkedList0);
      linkedList0.toArray();
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList1.retainAll(linkedList4);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList1);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.628335652604384
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.quote(": ");
      Float.max((-77.66F), 1586.7F);
      Float.max(2678.083F, 1586.7F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Short.toUnsignedLong((short)8);
      Short.toUnsignedInt((short)331);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\": \"";
      stringArray0[1] = ": ";
      JSONObject jSONObject0 = new JSONObject("\": \"", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(": ", ": ");
      Short.compare((short)25, (short)331);
      Short.toUnsignedInt((short)331);
      jSONObject1.put("\": \"", false);
      jSONObject1.getJSONArray(": ");
      JSONObject jSONObject2 = jSONObject0.put("\": \"", (Object) " at character ");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(Double.NaN);
      Integer integer0 = new Integer(34);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clear();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>(linkedList0);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>(linkedList2);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer.valueOf(34);
      linkedList3.add(integer0);
      linkedList5.toArray();
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6418065596721658
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte byte1 = new Byte((byte)45);
      long long0 = new Byte((byte)45);
      jSONObject0.opt((String) null);
      Long long1 = new Long((short)87);
      Long.compareUnsigned(26L, 168L);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2989728622062722
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = JSONObject.quote("{6AW");
      assertEquals("\"{6AW\"", string0);
      
      Integer integer0 = new Integer((-3169));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"{6AW\"";
      stringArray0[1] = "{6AW";
      stringArray0[2] = "\"{6AW\"";
      stringArray0[3] = "{6AW";
      JSONObject jSONObject0 = new JSONObject("\"{6AW\"", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString(28);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONTokener jSONTokener0 = new JSONTokener("{6AW");
      JSONTokener jSONTokener1 = new JSONTokener("\"{6AW\"");
      JSONTokener jSONTokener2 = new JSONTokener("E.g,");
      int int0 = jSONObject0.optInt((String) null, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.302456210046893
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("d@`?\\6@", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("mi_EJ-,?|X@/U", (-954.003248039607));
      jSONObject2.getDouble("mi_EJ-,?|X@/U");
      int int0 = 113;
      int int1 = (-392);
      jSONObject1.toString(113, (-392));
      Integer integer0 = new Integer((-392));
      JSONObject jSONObject3 = jSONObject1.accumulate("d@`?\\6@", "d@`?\\6@");
      jSONObject3.putOpt("' and instead saw '", "' and instead saw '");
      int int2 = 1793;
      Integer integer1 = new Integer(1793);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short short0 = new Short((short)87);
      Float float0 = new Float(0.0F);
      Float.max((-1789.7096F), 0.0F);
      Float.isFinite((-2197.7544F));
      Float.min((-122.6F), 402.24298F);
      Float.max((-1789.7096F), (short)87);
      Float.max(2047.0F, 2047.0F);
      Float.isFinite(441.856F);
      Float.max(1.0F, 1.0F);
      Double double0 = new Double((-2468.65155));
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double1 = new Double(1.0F);
      hashMap0.put("lon", double1);
      JSONTokener jSONTokener0 = new JSONTokener("{Fqz%LFQ.|<Y}p!");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {Fqz%LFQ.|<Y}p!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)37);
      Short short1 = new Short((short)37);
      String string0 = "{9h(2(";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9h(2(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {9h(2(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(128);
      Short.toUnsignedLong((short)2);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList0.removeAll(linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.retainAll(linkedList0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList3);
      String string0 = JSONObject.valueToString(linkedList3, 128, (short)2);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(8192);
      Short.toUnsignedInt((short)60);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("null");
      JSONObject jSONObject1 = jSONObject0.put("#Osj'-", (Collection) linkedList0);
      try { 
        jSONObject1.getDouble("#Osj'-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#Osj'-\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7847408153609514
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.append("is", jSONObject1);
      StringWriter stringWriter1 = new StringWriter(1);
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("*_5J");
      try { 
        jSONObject2.get("w aGg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w aGg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6117376823630047
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short)87);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short) (-1239));
      Short.toUnsignedInt((short)87);
      jSONObject0.append(",\n", ",\n");
      Short.compare((short)25, (short)87);
      Short.toUnsignedInt((short)58);
      jSONObject0.put(",\n", false);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.253622376896737
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "";
      int int0 = 8192;
      StringWriter stringWriter0 = new StringWriter(8192);
      Short.toUnsignedInt((short)60);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",-?s0`w@Mp+_*";
      Double double0 = new Double((-1362.882128819686));
      JSONObject jSONObject1 = jSONObject0.put("", (Object) double0);
      try { 
        jSONObject1.put((String) null, (long) 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6488470716724797
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(34);
      JSONArray jSONArray1 = new JSONArray();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";E:/,s\",y2#%}P_";
      stringArray0[2] = "{}";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Double double0 = new Double((short)2);
      jSONObject0.accumulate("{}", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(2282);
      JSONObject jSONObject0 = new JSONObject((Object) "|t/h0%\ni q3LsyH");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0334586357769107
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Short.toUnsignedInt((short)686);
      Short.toUnsignedLong((short)525);
      Float float0 = new Float((double) 686);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float float1 = new Float((float) (short)2312);
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("&[A>J,l\"=/#*", (Map) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray3 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray3);
      jSONObject0.names();
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.145045401634786
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONArray jSONArray0 = new JSONArray();
      Short.toUnsignedInt((short)1620);
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "5yy\". }";
      JSONObject jSONObject1 = jSONObject0.put("5yy\". }", (double) 1620);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "5yy\". }");
      jSONObject1.write(stringWriter1);
      String string1 = "2;R(P7J8i8WO4I-lc";
      Integer integer0 = Integer.getInteger("2;R(P7J8i8WO4I-lc", 115);
      JSONObject jSONObject2 = jSONObject0.accumulate("$tqF,{T('u9Fn^q ", integer0);
      jSONObject2.get("5yy\". }");
      jSONObject2.optString("5yy\". }");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "5yy\". }", 1620, 93);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 24, 47);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0058322775694197
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      Long long0 = new Long(1583);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1583, (Object) "");
      jSONArray0.optBoolean(24);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.optDouble("", (double) 1583);
      jSONObject0.optBoolean("");
      Short.toUnsignedInt((short)127);
      jSONArray0.put((Object) long0);
      jSONObject0.optString("null", "spl");
      jSONObject0.optInt("null");
      jSONArray1.optLong((int) (short)127, 0L);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Short.toUnsignedLong((short) (-619));
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("{}");
      jSONTokener1.nextValue();
      jSONTokener1.nextTo("CP:+.U5.$v C3zv,");
      String string0 = "jGZmU*K";
      JSONTokener jSONTokener2 = new JSONTokener("jGZmU*K");
      JSONTokener jSONTokener3 = new JSONTokener("*1v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of jGZmU*K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.083903148646728
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(17L);
      jSONObject0.optLong("istoString", 134L);
      jSONObject0.optInt("istoString");
      jSONObject0.optBoolean("istoString");
      Integer integer0 = new Integer(795);
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Object) "&KQ&ywem2&dccCLJO");
      jSONObject1.optDouble("8/0H=3s#N|G", 0.0);
      jSONObject1.put("istoString", (-2671L));
      jSONObject0.optInt("A JSONArray text must start with '['");
      Object object0 = new Object();
      int int0 = (-1449);
      Integer integer1 = new Integer((-952));
      try { 
        jSONObject1.getInt("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetClass\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7045514452672972
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer integer0 = new Integer(34);
      Short short0 = new Short((short)2);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "%-$";
      JSONObject jSONObject1 = jSONObject0.accumulate(";E:/,s\",y2#%}P_", ";E:/,s\",y2#%}P_");
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2092536248090335
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte byte1 = new Byte((byte)45);
      Byte.toUnsignedLong((byte)34);
      jSONObject0.opt("!3LPH@H)zSS*");
      Long long0 = new Long((short)87);
      Long.compareUnsigned(0L, 168L);
      JSONTokener jSONTokener0 = new JSONTokener("val");
      jSONTokener0.nextTo("H");
      jSONTokener0.skipPast("wheel.json.JSONException");
      JSONTokener jSONTokener1 = new JSONTokener("|i");
      JSONTokener jSONTokener2 = new JSONTokener("getsum");
      jSONTokener1.nextTo("|i");
      jSONTokener2.nextValue();
      jSONTokener1.nextTo("|i");
      JSONTokener jSONTokener3 = new JSONTokener("[]");
      Byte byte2 = new Byte((byte)48);
      Long long1 = new Long((-100L));
      try { 
        jSONObject0.put((String) null, (Object) long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optJSONObject((String) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(17L);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000060", (Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.append("-;A#WRp/W/ak?fT", jSONObject1);
      jSONObject0.put("-;A#WRp/W/ak?fT", 0.0);
      JSONTokener jSONTokener0 = new JSONTokener("N]o3|heD");
      jSONTokener0.back();
      double double0 = jSONObject2.getDouble("-;A#WRp/W/ak?fT");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3011792585421476
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("d@`?\\6@", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("mi_EJ-,?|X@/U", 176.2472338);
      jSONObject2.getDouble("mi_EJ-,?|X@/U");
      JSONObject.valueToString("d@`?\\6@", 96, 96);
      Integer integer0 = new Integer((-392));
      JSONObject jSONObject3 = jSONObject1.accumulate("d@`?\\6@", "d@`?\\6@");
      JSONObject jSONObject4 = jSONObject3.putOpt("' and instead saw '", "' and instead saw '");
      Integer.getInteger("mi_EJ-,?|X@/U");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject3.optJSONArray("UG9 OJ6ctF");
      Integer integer1 = new Integer((-392));
      jSONObject0.append("\"java.lang.String@0000000003\"", integer1);
      jSONObject2.put("87.0", (Object) null);
      jSONArray0.optLong(20, 2325L);
      Integer integer2 = new Integer(96);
      jSONObject4.append("d@`?\\6@", "' and instead saw '");
      jSONArray0.put((Object) integer2);
      jSONObject4.put("\"java.lang.String@0000000003\"", 0L);
      jSONObject0.getInt("\"java.lang.String@0000000003\"");
      Integer integer3 = new Integer(2);
      jSONObject3.getInt("\"java.lang.String@0000000003\"");
      try { 
        jSONObject4.getDouble("JlJ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JlJ\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8576539971834682
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)1620);
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("6;'&CZpT,x^4U)UtK%", (Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("5yy\". }", (double) short0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "5yy\". }");
      jSONObject1.write(stringWriter1);
      String string0 = "2;R(P7J8i8WO4I-lc";
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "5yy\". }", (-30733247), 93);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.544009143216721
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Short short0 = new Short((short)87);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short) (-1239));
      Short.toUnsignedInt((short)87);
      jSONObject0.append(",\n", ",\n");
      Short.compare((short)25, (short)87);
      Short.toUnsignedInt((short)58);
      jSONObject0.put(",\n", false);
      try { 
        jSONObject0.append(",\n", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,
         // ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.933809998920632
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(1583);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1583, (Object) "");
      jSONArray0.optBoolean(24);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.optDouble("", (double) 1583);
      boolean boolean0 = new Boolean(false);
      Short.toUnsignedInt((short)127);
      jSONObject0.optString("Bad value from toJSONString: ", "");
      Double double0 = new Double(127);
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Bad value from toJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      int int0 = 3;
      try { 
        jSONObject0.put((String) null, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1661152994802744
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("]~6dFe2e}!P,g");
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("d@`?\\6@", (Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.append("-;A#WRp/W/ak?fT", object0);
      JSONObject jSONObject3 = jSONObject0.put("mi_EJ-,?|X@/U", 176.2472338);
      jSONTokener0.back();
      JSONObject.valueToString(jSONObject2);
      jSONObject3.getDouble("mi_EJ-,?|X@/U");
      jSONObject3.remove("d@`?\\6@");
      jSONObject2.optLong("M)`59:tVR", (long) (-406));
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.946230575030074
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("]~6dFe2e}!P,g");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "mi_EJ-,?|X@/U";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.put("]~6dFe2e}!P,g", jSONObject0);
      jSONObject0.put("d@`?\\6@", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("mi_EJ-,?|X@/U", 176.2472338);
      jSONTokener0.back();
      // Undeclared exception!
      jSONObject1.toString(125);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.put("", false);
      short short0 = (short)24;
      Short short1 = new Short((short)24);
      Short.toUnsignedLong((short)32);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6283413145315921
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Rf)`b@^k42";
      jSONObject0.optLong("Rf)`b@^k42", 2314L);
      String string1 = "NQ&ywems2&9cc=JO";
      Object object0 = new Object();
      jSONObject0.put("NQ&ywems2&9cc=JO", object0);
      try { 
        jSONObject0.getBoolean("NQ&ywems2&9cc=JO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NQ&ywems2&9cc=JO\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "2bQs%qhPKwua?");
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertFalse(stringWriter2.equals((Object)stringWriter1));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("%-$", (Map) hashMap1);
      jSONObject0.accumulate("%-$", "k=IOHSV}o7*}FFP!1");
      hashMap0.put("k=IOHSV}o7*}FFP!1", (Double) null);
      Double double0 = new Double((-1.0));
      Double.min((-1.0), (-1.0));
      hashMap0.put("k=IOHSV}o7*}FFP!1", double0);
      JSONTokener jSONTokener0 = new JSONTokener("zg6{7&$[;N|NDHZ!}");
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eq";
      stringArray0[1] = "0";
      stringArray0[2] = "MDM.*";
      stringArray0[3] = "null";
      stringArray0[4] = "2bQsqhPKwua?";
      stringArray0[5] = "not";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toJSONArray((JSONArray) null);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1052.72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 17L;
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer((-4345));
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = new JSONObject((Object) "Uj{POd]Sb+5nqt&vr1'");
      Integer integer1 = new Integer(128);
      String string0 = "ys";
      JSONObject jSONObject3 = new JSONObject((Object) "ys");
      jSONObject0.optDouble(";E:/,s\",y2#%}P_");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject3.put("NjF/[&V19[v", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short.toUnsignedInt((short)92);
      String string0 = JSONObject.valueToString((Object) null, 42, (-36837697));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(8192);
      Short.toUnsignedInt((short)37);
      Short.toUnsignedInt((short)111);
      Short.toUnsignedInt((short)83);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (short)37, (-1107));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3356031336424652
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.sum(17L, 17L);
      Integer integer0 = new Integer((-4345));
      Short.toUnsignedLong((short) (-1880));
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener(";E:/,s\",y2#%}P_");
      jSONObject0.accumulate("] is not a Boolean.", jSONArray0);
      Boolean boolean0 = new Boolean(";E:/,s\",y2#%}P_");
      Boolean.logicalXor(true, true);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2868726303980162
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "";
      Long long0 = new Long(1583);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1583, (Object) "");
      jSONArray1.toJSONObject(jSONArray0);
      double double0 = new Integer(1583);
      Short.toUnsignedInt((short)127);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONArray0.put(128, true);
      Long long1 = new Long(1L);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1, 127);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6418065596721658
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Short short0 = new Short((short)87);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short) (-1239));
      Short.compare((short)87, (short)70);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (long) (short)70);
      jSONObject1.get("Unterminated string");
      Short.toUnsignedInt((short)8448);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5936174605927704
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer((-4345));
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = new JSONObject((Object) "Uj{POd]Sb+5nqt&vr1'");
      Integer integer1 = new Integer(128);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(integer1, stringArray0);
      String string0 = "q-dDrd_H*";
      jSONObject2.optDouble("q-dDrd_H*", (double) (-4345));
      jSONObject2.optString("J=^+", (String) null);
      Double double0 = new Double((-1.0));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("J=^+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of J=^+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9143183647009203
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      Long long0 = new Long(0);
      Byte byte0 = Byte.valueOf((byte)13);
      JSONObject.getNames((Object) byte0);
      Integer integer0 = new Integer(97);
      Integer.sum((-105), (-3299));
      Float float0 = new Float((float) 0);
      JSONObject.numberToString(float0);
      jSONObject0.opt("java.lang.Float@0000000006");
      long long1 = jSONObject1.getLong("Az#2bBR");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.34985821237579
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("d@`?\\6@", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("mi_EJ-,?|X@/U", 176.2472338);
      jSONObject2.getDouble("mi_EJ-,?|X@/U");
      int int0 = (-392);
      jSONObject1.toString(113, (-392));
      Integer integer0 = new Integer((-392));
      jSONObject0.getLong("mi_EJ-,?|X@/U");
      JSONObject jSONObject3 = jSONObject1.accumulate("d@`?\\6@", "d@`?\\6@");
      jSONObject3.putOpt("' and instead saw '", "' and instead saw '");
      Integer integer1 = new Integer(1793);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.285995972195872
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1583, (Object) "");
      jSONArray1.optLong(69);
      jSONArray0.put(1583, true);
      jSONArray0.join((String) null);
      jSONArray0.put(1583, false);
      jSONArray0.optBoolean(24);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray1);
      String string0 = "null";
      int int0 = 47;
      jSONArray0.put(47, 4);
      jSONObject0.optDouble("", (double) 1583);
      jSONObject0.optBoolean("Expected a ',' or '}'");
      jSONArray0.optInt(1583, 91);
      jSONArray0.put(1583, 1358.72386);
      jSONObject0.optString("null", (String) null);
      jSONArray0.getLong(47);
      jSONObject0.optInt("null");
      jSONArray0.optLong((int) (short)127);
      try { 
        jSONArray0.getString((-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-112] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8840633284714166
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(17L);
      jSONObject0.optLong("istoString", 134L);
      jSONObject0.optInt("istoString");
      String string0 = "&KQ&ywem2&dccCLJO";
      Integer integer0 = new Integer(795);
      jSONObject0.put("istoString", (Object) "&KQ&ywem2&dccCLJO");
      try { 
        jSONObject0.getBoolean("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eq";
      stringArray0[1] = "0";
      stringArray0[2] = "MDM.*";
      stringArray0[3] = "null";
      stringArray0[4] = "2bQsqhPKwua?";
      stringArray0[5] = "not";
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short.valueOf((short)16);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eq";
      stringArray0[1] = "eq";
      stringArray0[5] = "MDM.*";
      stringArray0[3] = "nusl";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8002947557525362
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf("wheel.json.JSONObject$Null");
      jSONObject0.putOpt("ishighestOneBit", boolean0);
      jSONObject0.names();
      try { 
        jSONObject0.getLong("ishighestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishighestOneBit\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8018799128594765
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer((-4345));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Object) "Uj{POd]Sb+5nqt&vr1'");
      Integer integer1 = new Integer(128);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject3 = new JSONObject(integer1, stringArray0);
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      jSONObject1.optDouble("Uj{POd]Sb+5nqt&vr1'");
      jSONObject2.put(";E:/,s\",y2#%}P_", (Object) jSONObject4);
      jSONObject2.optLong(";E:/,s\",y2#%}P_", (-1L));
      try { 
        Integer.decode("Uj{POd]Sb+5nqt&vr1'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Uj{POd]Sb+5nqt&vr1'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONArray jSONArray0 = new JSONArray();
      Short.toUnsignedInt((short)1620);
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "5yy\". }";
      JSONObject jSONObject1 = jSONObject0.put("5yy\". }", (double) 1620);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "5yy\". }");
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.890362775338868
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Short.toUnsignedInt((short)60);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "is";
      stringArray0[1] = "$ADGmdv?4i*Vg])v`-z";
      stringArray0[2] = "is";
      stringArray0[3] = "is";
      stringArray0[4] = "is";
      JSONObject jSONObject2 = new JSONObject("is", stringArray0);
      Float float0 = new Float(0.0);
      jSONObject2.accumulate("m", float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "isdecode";
      linkedList0.add("isdecode");
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getJSONArray("N%`Y\"B`a'kYWM3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N%`Y\\\"B`a'kYWM3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7793778057291478
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Short.toUnsignedInt((short)7);
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-!p#h", (double) 7);
      jSONObject0.optDouble("-!p#h");
      jSONObject1.optInt("Unterminated string");
      try { 
        jSONObject0.getInt("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8073365769337297
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(17L);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Object object0 = new Object();
      jSONObject0.append("java.lang.Long@00000000060", jSONObject0);
      jSONObject0.accumulate("{", "java.lang.Long@00000000060");
      Integer integer0 = new Integer(58);
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@00000000060", object1);
      jSONObject0.put("java.lang.Long@00000000060", (-4644.781368497159));
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optInt("1", (-703));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double((-2197.7544F));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double((-2197.7544F));
      linkedList1.add(double1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>(linkedList1);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList2.sort(comparator0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedList3.clear();
      linkedList2.retainAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optJSONObject("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long.sum(17L, 17L);
      Integer integer0 = new Integer((-4345));
      Short.toUnsignedLong((short) (-1880));
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener(";E:/,s\",y2#%}P_");
      Boolean boolean0 = new Boolean(";E:/,s\",y2#%}P_");
      Boolean.logicalXor(true, true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("{}", 1824.04743714814);
      assertEquals(1, jSONObject0.length());
      assertEquals(1824.04743714814, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2368389764651782
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long.sum(2431L, 0L);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(101, false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("}]IK%6MZJ%Ln9Ehzhex", (String) null);
      jSONObject0.optInt((String) null);
      try { 
        jSONObject0.getInt("4)osWr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4)osWr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.4130961095623933
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short short0 = new Short((short)87);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short)25, (short)87);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0, (-62), 18);
      assertEquals("[]", string0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, short0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short)87);
      Float.isFinite((-2197.7544F));
      Float.min(1.0F, (-372.24786F));
      Float.max(0.0F, (-1018.36F));
      Float.max(5091.527F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.max(0.0F, 3124.6F);
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6214522123068729
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short) (-2756));
      Float.max((-1.0F), (-1.0F));
      Float.max((-1.0F), (short) (-2756));
      Float.max((short) (-2756), (short) (-2756));
      float float0 = new Short((short) (-2756));
      Float.isFinite(2043.79F);
      Float.min(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(1495.0F, (-1.0F));
      Double double0 = new Double((-3293.12483188));
      String string0 = JSONObject.valueToString(double0, (-4086), 44);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8687758226236038
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1583);
      Short.toUnsignedInt((short)60);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("fMBd)2.|_TO%^rzv+0", (double) 1583);
      jSONObject0.getString("fMBd)2.|_TO%^rzv+0");
      jSONObject0.optLong("(S9:_QxUJz730d41aX", (long) 60);
      jSONObject0.optInt("");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3605138827424867
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Boolean> hashMap2 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap2.put("", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.put(61, true);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.400824338570159
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      Float float0 = new Float((-2197.7544F));
      Float.max(1000, 1000);
      Float.isFinite(1000.0F);
      Float.min(296.13498F, (-1802.89F));
      Float.max(0.0F, 1000);
      Float.max(1000.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum(0.0F, (-2197.7544F));
      Float.isFinite((-0.41265306F));
      Float.min(1495.0F, 1000.0F);
      Float.sum(0.0F, 2647.7F);
      Float.max((-24.62659F), 0.0F);
      Double double0 = new Double((-2197.7544F));
      String string0 = JSONObject.valueToString(double0, 2173, (-4086));
      String string1 = JSONObject.valueToString("java.lang.Double@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3517839942896461
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-3257));
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      Boolean boolean0 = new Boolean("\"qHK");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Boolean) null, jSONObject0);
      Double double0 = new Double((short) (-3257));
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6963338849145788
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(241.83203723069);
      linkedList0.add(double0);
      linkedList0.sort(comparator0);
      linkedList1.clear();
      linkedList0.retainAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a JSONArray.");
      JSONTokener jSONTokener2 = new JSONTokener("wheel.json.JSONException");
      assertFalse(jSONTokener2.equals((Object)jSONTokener0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8711604142318063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eq";
      stringArray0[1] = "0";
      stringArray0[2] = "MDM.*";
      stringArray0[3] = "null";
      stringArray0[4] = "2bQsqhPKwua?";
      stringArray0[5] = "not";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      try { 
        jSONObject0.accumulate((String) null, stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.3178116546158716
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("mi_EJ-,?|X@/U", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("mi_EJ-,?|X@/U", 176.2472338);
      jSONObject2.getDouble("mi_EJ-,?|X@/U");
      int int0 = 113;
      int int1 = (-392);
      jSONObject1.toString(113, (-392));
      Integer integer0 = new Integer((-392));
      JSONObject jSONObject3 = jSONObject1.accumulate("mi_EJ-,?|X@/U", "mi_EJ-,?|X@/U");
      jSONObject3.putOpt("' and instead saw '", "' and instead saw '");
      Integer integer1 = new Integer(1793);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Short short0 = new Short((short)87);
      Short.compare((short)123, (short)62);
      Float float0 = new Float(0.0F);
      Float.max((-1789.7096F), 0.0F);
      Float.isFinite(1.0F);
      Float.min((-122.6F), 402.24298F);
      Float.max((-1789.7096F), (short)87);
      Float.max(2047.0F, 2047.0F);
      Boolean boolean0 = new Boolean(true);
      Short.compare((short)87, (short)87);
      Float.max(1.0F, 1.0F);
      Float.isFinite((-122.6F));
      Float.min((-717.6F), 0.0F);
      Short.compare((short)87, (short)44);
      Float.max(0.0F, 0.0F);
      Float.max(1.0F, 0.0F);
      Float.min((-1131.6189F), (short)62);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1580);
      int int0 = new Integer(1580);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (double) 1580);
      double double0 = new Short((short)60);
      jSONObject0.optInt("");
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.getInt("");
      double double1 = jSONObject0.getDouble("");
      assertEquals(1580.0, double1, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.002356421522029
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(17L);
      jSONObject0.optLong("istoString", 17L);
      jSONObject0.optInt("istoString");
      String string0 = "&NQ&ywem2&9ccC=JO";
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Object) "&NQ&ywem2&9ccC=JO");
      jSONObject1.putOpt("&NQ&ywem2&9ccC=JO", jSONObject0);
      jSONObject0.put("] is not a number.", (-2968L));
      jSONObject1.optInt("&NQ&ywem2&9ccC=JO");
      Object object0 = new Object();
      int int0 = (-1449);
      Integer integer1 = new Integer((-1449));
      try { 
        jSONObject0.getInt("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetClass\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "k=IOHSV}o7*}FFP!1";
      jSONObject0.accumulate("%-$", "k=IOHSV}o7*}FFP!1");
      Double double0 = new Double((-1.0));
      hashMap0.put("y>HhO", double0);
      hashMap0.put("k=IOHSV}o7*}FFP!1", (Double) null);
      Double double1 = new Double((-1.0));
      hashMap0.put("k=IOHSV}o7*}FFP!1", double1);
      try { 
        jSONObject0.getJSONObject("%-$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%-$\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "QV<NWv";
      stringArray0[1] = "}e7=p";
      stringArray0[2] = "quo";
      stringArray0[3] = "isaccumulate";
      stringArray0[4] = "JSONArray[";
      stringArray0[5] = "EetIpPM)UA/yo%q?";
      stringArray0[6] = "O0U$}a19~';EU";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6935851881355024
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) linkedList0);
      jSONObject1.optLong("oIoc2+,eB)!uzG\"", 1L);
      jSONObject0.optJSONArray("null");
      jSONObject0.length();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.getInt("{jOtte_<A*9_Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{jOtte_<A*9_Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      Float float0 = new Float((-2197.7544F));
      Float.min(296.13498F, (-1802.89F));
      Float.max(0.0F, 1000);
      Float.max(1000.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum(0.0F, (-2197.7544F));
      Float.isFinite((-0.41265306F));
      Float.min(1495.0F, 1000);
      Float.sum((short)1000, 1000);
      Float.max((short)1000, 0.0F);
      Float.min((-1717.1F), 0.0F);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, 128, 13);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getreverseBytes";
      String string0 = "] is not a JSONArray.";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "{}";
      stringArray0[3] = "] is not a JSONArray.";
      String string1 = "istoString";
      stringArray0[4] = "istoString";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has("istoString");
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Short short0 = new Short((short) (-1011));
      Short.toUnsignedInt((short)44);
      JSONObject jSONObject1 = new JSONObject(short0);
      jSONObject0.append("^P{>", "^P{>");
      boolean boolean0 = jSONObject0.has("^P{>");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble((String) null);
      Float.min(0.0F, 0.0F);
      Float float0 = new Float(549.1F);
      assertEquals(549.1F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("[]", false);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("de");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8869312248636236
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.quote("Az#2bBR");
      JSONObject jSONObject0 = new JSONObject((Object) "&KQ&ywem2&dccCLJO");
      jSONObject0.toString((-649), 1714);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(785L);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double((-543.3867950518));
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = JSONObject.NULL;
      jSONObject0.remove((String) null);
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.doubleToString((-1974.1));
      Integer integer0 = new Integer(32);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clear();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer((-2040));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(3875);
      linkedList2.add((Integer) null);
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.valueToString(jSONObject0, 3282, 8);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.valueToString((Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.884419009243226
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("]~(Fee}!P,g");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      Short short0 = new Short((short)1331);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"java.lang.Object@0000000002\"";
      stringArray0[1] = "P&{Ao>,TLeGVd_$";
      stringArray0[2] = "P&{Ao>,TLeGVd_$";
      stringArray0[3] = "";
      stringArray0[4] = "\"java.lang.Object@0000000002\"";
      stringArray0[5] = "P&{Ao>,TLeGVd_$";
      JSONObject.valueToString(jSONObject0, (short)1331, 42);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z+|,a4np!x=CB";
      stringArray0[1] = "Z+|,a4np!x=CB";
      stringArray0[2] = ",\n";
      stringArray0[3] = "Z+|,a4np!x=CB";
      stringArray0[4] = ",\n";
      stringArray0[5] = ",\n";
      stringArray0[6] = "Z+|,a4np!x=CB";
      stringArray0[7] = "Z+|,a4np!x=CB";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(54);
      Integer integer1 = new Integer(47);
      linkedList0.add(integer0);
      linkedList0.toArray();
      Byte byte0 = new Byte((byte)57);
      Float float0 = new Float((float) (short)1000);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.toString((int) (short)1000);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6528388233121019
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optLong("java.lang.Float@00000000010");
      Byte.toUnsignedLong((byte)13);
      jSONObject0.opt("!3LPH@H)zSS*");
      Long long0 = new Long((short)87);
      Long.compareUnsigned(0L, 168L);
      JSONTokener jSONTokener0 = new JSONTokener("val");
      jSONTokener0.skipPast("wheel.json.JSONException");
      JSONTokener jSONTokener1 = new JSONTokener("|i");
      JSONTokener jSONTokener2 = new JSONTokener("getsum");
      jSONTokener2.nextValue();
      jSONTokener1.nextTo("|i");
      JSONTokener jSONTokener3 = new JSONTokener("[]");
      Byte byte1 = new Byte((byte)48);
      assertFalse(byte1.equals((Object)byte0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(8192);
      Short.toUnsignedInt((short)60);
      Float.isFinite(1525.5288F);
      JSONTokener jSONTokener0 = new JSONTokener("");
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Short.toUnsignedInt((short)1158);
      String string0 = "spl";
      jSONObject0.optString("is", "spl");
      jSONObject0.optInt("}utG;;ENgrxpS]{`It");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(8192, 1425L);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optLong("Unterminated string", (-3327L));
      try { 
        jSONObject0.getInt("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONArray[";
      jSONObject0.optBoolean("JSONArray[", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eq";
      Integer integer0 = new Integer((-1585));
      Integer integer1 = new Integer((short)16);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        Integer.valueOf("WEDGKI", 91);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 91 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7664123555634643
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("istoString", 134L);
      jSONObject0.optInt("istoString");
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Object) "&KQ&ywem2&dccCLJO");
      jSONObject1.optInt("&KQ&ywem2&dccCLJO");
      jSONObject0.optString("istoString", "pu");
      String string0 = "getgetJSONArr`ay";
      jSONObject0.optInt("getgetJSONArr`ay");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer(0);
      try { 
        jSONObject0.getInt("java.lang.String@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.String@0000000005\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Short short0 = new Short((short)87);
      Float float0 = new Float(0.0F);
      Float.max((-1789.7096F), 0.0F);
      Float.isFinite((-2197.7544F));
      Float.max(0.0F, 0.0F);
      Float.isFinite((-624.01294F));
      Float.min(0.0F, 0.0F);
      Float.max(0.0F, 1645.8788F);
      Float.max(0.0F, (-122.6F));
      Float.max(0.0F, 0.0F);
      String string0 = JSONObject.quote("\"~h8x7/0\"Lt)3R");
      assertEquals("\"\\\"~h8x7/0\\\"Lt)3R\"", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(241.83203723069);
      linkedList0.add(double0);
      linkedList0.sort(comparator0);
      linkedList1.clear();
      linkedList0.retainAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.put("va", (int) (short)25);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-30803738));
      Integer integer1 = new Integer(3351);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      linkedList0.toArray();
      Byte byte0 = new Byte((byte)8);
      String string0 = jSONObject0.optString("(c*&|~");
      assertEquals("", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3425741290760551
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      jSONObject0.optInt("gEU$0k:x5!G>PcC[J2/");
      stringArray0[0] = "eq";
      stringArray0[1] = "0";
      stringArray0[2] = "MDM.*";
      stringArray0[3] = "null";
      stringArray0[4] = "2bQsqhPKwua?";
      stringArray0[5] = "not";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertFalse(stringWriter2.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("ERRjf`gV/;?5", (int) (short)16);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      Integer.valueOf((-1275));
      Integer integer0 = new Integer((-366));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = Integer.getInteger("cp", (-366));
      linkedList0.spliterator();
      linkedList0.add(integer1);
      linkedList0.toArray();
      Byte byte0 = new Byte((byte) (-84));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Boolean> hashMap2 = new HashMap<String, Boolean>();
      Float.min((-1.1486611F), 1.0F);
      Short.compare((short)44, (short)44);
      Float.max((short)44, 0.0F);
      Float.max(0.0F, 561.7F);
      Float.min((-634.18243F), 0.22747998F);
      Integer integer0 = new Integer((-1838));
      Integer.remainderUnsigned(0, 3151);
      Integer.max(108, 8);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "null";
      stringArray0[0] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("lo", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.90853528164356
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float.isFinite(0.0F);
      JSONTokener jSONTokener0 = new JSONTokener("true");
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("%-$", (Object) null);
      jSONObject0.put("%-$", true);
      JSONObject jSONObject2 = jSONObject0.append("Unclosed comment", jSONObject1);
      jSONObject2.put("[]", (Object) "Unclosed comment");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("]nG(&\\Q", (-1372L));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Short short0 = new Short((short)87);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.keys();
      Long.compareUnsigned((-1435L), (-1435L));
      JSONTokener jSONTokener0 = new JSONTokener("7");
      jSONTokener0.skipPast("7");
      JSONTokener jSONTokener1 = new JSONTokener("java.lang.Short@0000000005.");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 0 of 7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z+|,a4np!x=CB";
      stringArray0[1] = "Z+|,a4np!x=CB";
      stringArray0[2] = ",\n";
      stringArray0[3] = "Z+|,a4np!x=CB";
      stringArray0[4] = ",\n";
      stringArray0[5] = ",\n";
      stringArray0[6] = "Z+|,a4np!x=CB";
      stringArray0[7] = "Z+|,a4np!x=CB";
      stringArray0[8] = ",\n";
      JSONObject jSONObject0 = new JSONObject("Z+|,a4np!x=CB", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("istoUnsignedLong");
      JSONTokener jSONTokener1 = new JSONTokener(" at character ");
      JSONTokener jSONTokener2 = new JSONTokener(",\n");
      try { 
        jSONObject0.getBoolean("Z+|,a4np!x=CB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z+|,a4np!x=CB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      Short.toUnsignedLong((short) (-1552));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1000);
      Double.min((-5738.316), (-5738.316));
      Double double1 = new Double((-5738.316));
      linkedList0.offerLast(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      Boolean boolean1 = Boolean.TRUE;
      linkedList3.add(boolean1);
      linkedList2.removeAll(linkedList3);
      linkedList2.add("Tp/NB!=%L");
      linkedList0.toArray();
      linkedList1.retainAll(linkedList2);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.924605680345058
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optLong("", 0L);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject1.optDouble("", Double.NaN);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("WHGM,u?l1ggz}s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of WHGM,u?l1ggz}s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      Float.max(0.0F, 0.0F);
      Float.max(641.51F, 110.84531F);
      Float.max(649.95F, 0.0F);
      Float.max(1336.0F, 0.0F);
      Float.max((-3017.071F), 0.0F);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getLong("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short short0 = new Short((short)87);
      Float float0 = new Float(0.0F);
      Float.max((-1789.7096F), 0.0F);
      Float.isFinite((-2197.7544F));
      Float.min((-122.6F), 402.24298F);
      Float.max((-1789.7096F), (short)87);
      Float.max(2047.0F, 2047.0F);
      Float.isFinite(441.856F);
      Float.max(1.0F, (-122.6F));
      Float.isFinite((-122.6F));
      Float.min((-717.6F), 0.0F);
      Float.max(76.894F, (-1.0F));
      Float.max((-1745.86F), 1.0F);
      String string0 = JSONObject.quote("}=\u0004");
      assertEquals("\"}=\\u0004\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      Boolean boolean0 = new Boolean(true);
      Short short0 = new Short((short)91);
      BiFunction<Short, Object, Short> biFunction0 = (BiFunction<Short, Object, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(boolean0, short0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean1 = jSONObject0.optBoolean("YrC2|8]'Gn0{~}5rlrh");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.isNull("istoUnsignedLong");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = stringArray0[0];
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[2] = "null";
      stringArray0[7] = "P&{Ao>,TLeGVd_$";
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      Integer.valueOf((-1275));
      Integer integer0 = new Integer(3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = Integer.getInteger("cp", 3);
      linkedList0.spliterator();
      linkedList0.add(integer1);
      linkedList0.toArray();
      Byte byte0 = new Byte((byte) (-84));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.2013670042689852
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double((-2197.7544F));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double((-2197.7544F));
      linkedList1.add(double1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>(linkedList1);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList2.sort(comparator0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedList3.clear();
      linkedList2.retainAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.putOpt(" of ", linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(0.0F);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double0 = new Double(0.0F);
      Double double1 = new Double(3213.7);
      linkedList3.add(double0);
      Boolean.logicalXor(false, true);
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean.logicalXor(true, true);
      linkedList4.add(boolean1);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.removeAll(linkedList4);
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      linkedList2.toArray();
      LinkedList<Float> linkedList7 = new LinkedList<Float>();
      LinkedList<Byte> linkedList8 = new LinkedList<Byte>();
      LinkedList<Long> linkedList9 = new LinkedList<Long>();
      linkedList6.retainAll(linkedList9);
      JSONObject.quote((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"\"";
      stringArray0[1] = null;
      stringArray0[2] = "\"\"";
      stringArray0[3] = "false";
      stringArray0[4] = "~0c<j {6P(8&<";
      stringArray0[5] = "1";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Boolean> hashMap2 = new HashMap<String, Boolean>();
      Float.max(0.0F, 0.0F);
      Float.max(641.51F, 111.0F);
      Float.max(0.0F, 0.0F);
      Float.max((-1361.272F), 641.51F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("*)qLW3qCXZ1", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer((-1045));
      String[] stringArray0 = new String[5];
      stringArray0[0] = " at character ";
      stringArray0[1] = "";
      stringArray0[2] = "2Ocr</ qO";
      stringArray0[3] = "d,5nZ; _";
      stringArray0[4] = ",\n";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put(" at character ", (double) (-1045));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Boolean> hashMap2 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      jSONObject0.put("4[T/_'*+*l", true);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short.toUnsignedLong((short)70);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("ia/#5I^@7>6\"<I5");
      JSONTokener jSONTokener2 = new JSONTokener("istoString");
      assertTrue(jSONTokener2.more());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Boolean> hashMap2 = new HashMap<String, Boolean>();
      Float.max(0.0F, 0.0F);
      Float.max(641.51F, 0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap2);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer(34);
      Short.toUnsignedLong((short)69);
      Long long0 = new Long(69L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      linkedList1.toArray();
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      String string0 = "0";
      String string1 = "jRlDG)#;13ftA31Y,Hv";
      String string2 = "|hL4%[y^v6mMGmQQ3k";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|hL4%[y^v6mMGmQQ3k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |hL4%[y^v6mMGmQQ3k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>(linkedList0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList2.toArray();
      Integer integer0 = new Integer((-38689130));
      Integer.compareUnsigned(128, 128);
      Integer integer1 = new Integer((-38689130));
      linkedList2.add(integer0);
      Integer integer2 = new Integer(1210);
      Integer integer3 = new Integer(1210);
      linkedList3.add(integer1);
      linkedList2.toArray();
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Boolean> hashMap2 = new HashMap<String, Boolean>();
      HashMap<String, Boolean> hashMap3 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((short)87);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((float) (short)87);
      Float.isFinite(0.0F);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(float0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      Short.toUnsignedLong((short) (-26636));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Double double0 = new Double(38900L);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "not";
      jSONObject0.toString(885, 1349);
      stringArray0[1] = ",\n";
      stringArray0[2] = "2bQsqhPKwua?";
      stringArray0[3] = "not";
      stringArray0[4] = "3Fk@C~q;I";
      stringArray0[5] = "not";
      stringArray0[6] = "2bQsqhPKwua?";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short.toUnsignedInt((short)37);
      Short.toUnsignedInt((short)111);
      Short.toUnsignedInt((short)83);
      String string0 = JSONObject.quote("??<g)/.A3`qe0Op;PK~~");
      assertEquals("\"??<g)/.A3`qe0Op;PK~~\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(32);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clear();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>(linkedList1);
      Integer integer1 = new Integer(3352);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add(integer1);
      Integer integer2 = new Integer((-906));
      linkedList3.add(integer0);
      linkedList1.toArray();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      String string0 = JSONObject.valueToString(jSONArray0, 32, 3352);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Short short0 = new Short((short)87);
      long long0 = new Short((short) (-3013));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Double double0 = new Double((short) (-3013));
      Double double1 = new Double((short) (-3013));
      Double double2 = new Double((short)87);
      linkedList0.offerLast(double2);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList0.add(double0);
      Boolean.logicalXor(false, true);
      LinkedList<Boolean> linkedList6 = new LinkedList<Boolean>();
      Boolean boolean1 = new Boolean(false);
      linkedList4.add(boolean1);
      linkedList3.removeAll(linkedList0);
      LinkedList<Double> linkedList7 = new LinkedList<Double>();
      linkedList7.stream();
      linkedList5.toArray();
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      LinkedList<Byte> linkedList9 = new LinkedList<Byte>();
      linkedList2.retainAll(linkedList5);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "&<.9#dfX8V";
      stringArray0[2] = "!{Z";
      stringArray0[3] = "Y:qZI^y=`&JFbJ=PW94";
      stringArray0[4] = "{2]v@IKD]NlIdr-P";
      stringArray0[5] = "Y<";
      stringArray0[6] = "false";
      stringArray0[7] = "li.CX";
      JSONObject jSONObject0 = new JSONObject(stringWriter0, stringArray0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Short.toUnsignedInt((short)1000);
      Integer integer0 = new Integer((-874));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clear();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>(linkedList2);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>(linkedList0);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer1 = new Integer(1519);
      Integer integer2 = new Integer(1519);
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      Integer integer3 = new Integer((-22654515));
      linkedList7.add(integer3);
      linkedList7.toArray();
      Byte byte0 = new Byte((byte)31);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("VQLs(_+:AEL;6^_9}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VQLs(_+:AEL;6^_9}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{8&h'W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {8&h'W
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
