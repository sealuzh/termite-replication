/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:53:11 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.27620482753131
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("isvalueOf", "isvalueOf");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject.valueToString(object0, (-1139), 35);
      jSONObject1.optString("FA5~-9Wjc", (String) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7833528391447175
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.put((Object) null, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("?", jSONObject1);
      jSONObject1.optInt("?");
      JSONObject.getNames((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject2.toString(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToLongBits", (-119.6367199399));
      jSONObject1.optDouble("getdoubleToLongBits");
      Integer integer0 = new Integer(97);
      Integer.remainderUnsigned(97, 1202);
      Integer.divideUnsigned(4, (-208));
      Integer integer1 = new Integer(1178);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        Integer.decode("getdoubleToLongBits");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getdoubleToLongBits\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.514585561244944
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] is not a Boolean.");
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", object0);
      jSONObject1.put("] is not a Boolean.", 1635);
      jSONObject1.optLong("] is not a Boolean.");
      jSONObject1.getLong("] is not a Boolean.");
      jSONObject0.opt("a=@OoROM4S9fW");
      Integer integer0 = new Integer((-1261));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.push(integer0);
      Integer integer1 = new Integer(13);
      linkedList0.add(integer1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer(13);
      Integer integer3 = new Integer(0);
      linkedList0.add(integer3);
      JSONObject jSONObject2 = new JSONObject(integer0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer4 = new Integer(127);
      linkedList0.offerFirst((Integer) null);
      assertTrue(linkedList0.contains(int0));
      
      Integer integer5 = new Integer((-1261));
      linkedList2.push(integer5);
      Integer integer6 = new Integer(0);
      assertTrue(integer6.equals((Object)int0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToLongBits", (-119.6367199399));
      Integer integer0 = new Integer(97);
      Integer.remainderUnsigned(97, 1202);
      Integer.divideUnsigned(4, (-208));
      Integer integer1 = new Integer(1176);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(4);
      long long0 = jSONObject1.getLong("getdoubleToLongBits");
      assertEquals((-119L), long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9112368893587037
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)1);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject.valueToString(hashMap0, (short)1, 1626);
      Long long0 = new Long((-1L));
      Long.max(644L, 1L);
      Long long1 = new Long(644L);
      Long long2 = new Long(644L);
      hashMap0.put(long1, long2);
      hashMap0.put(long0, long0);
      String string0 = JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.Long@0000000003\":java.lang.Long@0000000003,\"java.lang.Long@0000000004\":java.lang.Long@0000000005}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      stringArray0[2] = "{}";
      stringArray0[3] = "{\"java.lang.Long@0000000003\":java.lang.Long@0000000003,\"java.lang.Long@0000000004\":java.lang.Long@0000000005}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{\"java.lang.Long@0000000003\":java.lang.Long@0000000003,\"java.lang.Long@0000000004\":java.lang.Long@0000000005}";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("{\"java.lang.Long@0000000003\":java.lang.Long@0000000003,\"java.lang.Long@0000000004\":java.lang.Long@0000000005}", object0);
      Short short1 = new Short((short)47);
      jSONObject1.isNull("{\"java.lang.Long@0000000003\":java.lang.Long@0000000003,\"java.lang.Long@0000000004\":java.lang.Long@0000000005}");
      Short short2 = new Short((short)47);
      jSONObject1.append("{}", short2);
      Long long3 = new Long(644L);
      String string1 = JSONObject.valueToString(long3);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2758760123808286
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gettoString";
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      short short0 = (short)16;
      Short short1 = new Short((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short2 = new Short((short)16);
      String string1 = "] is not a number.";
      JSONObject jSONObject2 = jSONObject1.append("o", jSONObject0);
      // Undeclared exception!
      jSONObject2.toString(2, 572);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.653923378796104
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getdoubleToLongBits";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("getdoubleToLongBits", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToLongBits", (-110.30419172108358));
      jSONObject1.optLong("getdoubleToLongBits", 0L);
      jSONObject1.toString();
      jSONObject1.optLong("getdoubleToLongBits");
      int int0 = 97;
      try { 
        Integer.decode("{\"java.lang.String@0000000003\":java.lang.Double@0000000004}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"java.lang.String@0000000003\":java.lang.Double@0000000004}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9284975978729617
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      Short.toUnsignedInt((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)16);
      JSONObject jSONObject2 = jSONObject1.append("o", jSONObject0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gettoString";
      stringArray0[2] = "] is not a number.";
      Integer.remainderUnsigned((-1801), 2821);
      Integer.getInteger("gettoString");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(1458);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = new JSONObject(object0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(2821);
      linkedList0.offerFirst(integer2);
      linkedList1.push(integer2);
      JSONArray jSONArray1 = jSONObject2.optJSONArray("gettoString");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9750574918886135
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      hashMap0.put("?", jSONObject0);
      JSONObject jSONObject2 = jSONObject0.accumulate("?", jSONObject1);
      jSONObject1.optInt("?");
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("Unterminated string", jSONArray0);
      jSONObject2.put("Unterminated string", (Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject0);
      // Undeclared exception!
      jSONObject2.toString(4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7695274178358926
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(43);
      Long.max(43, 644L);
      Long long1 = new Long((-1501L));
      Long long2 = new Long(0L);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      hashMap0.put(long1, long2);
      Long long3 = new Long(43);
      hashMap0.put(long0, long3);
      JSONObject.valueToString(linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.toString(11);
      linkedList0.listIterator();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>(linkedList0);
      linkedList0.addAll((Collection<? extends JSONObject>) linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.has("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optDouble((String) null, 0.0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("gettoString", "gettoString");
      Short.toUnsignedInt((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)16);
      String string0 = "e'XV:lc}`]0W{ip";
      String[] stringArray0 = new String[6];
      stringArray0[3] = "gettoString";
      stringArray0[1] = "e'XV:lc}`]0W{ip";
      stringArray0[2] = "e'XV:lc}`]0W{ip";
      Short short1 = new Short((short)4805);
      Short short2 = new Short((short) (-569));
      JSONTokener jSONTokener0 = new JSONTokener("e'XV:lc}`]0W{ip");
      char char0 = '';
      Float float0 = new Float(Double.NaN);
      Float.sum((-1.0F), (short)4805);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.648687725228102
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 10);
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      jSONObject1.put("Az#2bBR", 0L);
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", 10);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", false);
      JSONObject jSONObject2 = jSONObject1.put("C", (Object) jSONObject0);
      try { 
        jSONObject2.getBoolean("Az#2bBR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Az#2bBR\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.put((String) null, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0922128021574444
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.accumulate("?", jSONObject1);
      jSONObject1.optInt("?");
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("Unterminated string", jSONArray0);
      JSONObject jSONObject3 = jSONObject2.put("Unterminated string", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, 0, 0);
      jSONObject2.toString(4);
      Object object0 = new Object();
      jSONObject0.accumulate("isaddLast", "");
      JSONObject jSONObject4 = jSONObject2.append("", object0);
      jSONObject4.opt("");
      jSONObject0.toString(923, 923);
      jSONObject0.optLong("?", (-23L));
      jSONObject0.optJSONObject("Unterminated string");
      try { 
        jSONObject3.getInt("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.072799304625399
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Az#2bBR", 0);
      jSONObject0.optLong((String) null, (long) 0);
      jSONObject0.optInt("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Az#2bBR");
      jSONObject0.put(".nx~iR\"Fg.[l1", (Collection) linkedList0);
      Long long0 = new Long(0L);
      jSONObject0.optDouble("*|9 MoP2x3d<8dO");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      Long.compare(0, 0L);
      linkedList0.containsAll(linkedList1);
      linkedList1.add((String) null);
      Long.getLong("has", (long) 0);
      linkedList0.containsAll(linkedList1);
      Long.getLong("", (Long) null);
      JSONObject.numberToString(long0);
      jSONObject0.isNull("istoString");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4925524999534017
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ";'";
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger(";'");
      JSONObject jSONObject1 = new JSONObject(integer0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer((-1647));
      Integer integer4 = new Integer((-1261));
      linkedList1.push(integer2);
      linkedList1.add(integer2);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList1.add(integer3);
      JSONObject jSONObject2 = jSONObject0.accumulate(";'", jSONArray0);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject3 = jSONObject1.put(";'", (Map) hashMap0);
      jSONObject1.opt(";'");
      jSONObject3.optLong("9wKX1", (long) 0);
      try { 
        jSONObject2.getInt(";'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short short0 = (short)528;
      Short.toUnsignedInt((short)528);
      Short.toUnsignedInt((short) (-2928));
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)899);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ou";
      stringArray0[1] = "Ou";
      stringArray0[2] = "Ou";
      stringArray0[3] = "Ou";
      stringArray0[4] = "Ou";
      Float.sum(0.0F, 0.0F);
      Float.min(1463.1237F, (short)528);
      JSONTokener jSONTokener0 = new JSONTokener("Ou");
      JSONObject.valueToString(jSONArray0);
      jSONTokener0.nextTo('');
      try { 
        jSONTokener0.nextString('s');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 2 of Ou
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7783766624627177
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject0.append("\"\"", (Object) null);
      Integer integer0 = new Integer(43);
      Object object1 = JSONObject.NULL;
      Integer integer1 = new Integer((-1532));
      Integer integer2 = new Integer(3517);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(14);
      Integer integer4 = new Integer(291);
      linkedList0.push(integer4);
      Integer integer5 = new Integer((-368));
      Double double0 = new Double(1384.85338);
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.offerFirst(integer4);
      linkedList1.push(integer4);
      Integer integer6 = new Integer((-2361));
      assertEquals((-2361), (int)integer6);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.699589431085871
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gettoString";
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      String string1 = "$c}l2,%q6FP@I";
      jSONObject0.optInt("$c}l2,%q6FP@I", 102);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(102, (double) 102);
      jSONArray1.getLong(102);
      jSONObject1.optBoolean("getequals");
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject3 = new JSONObject(jSONArray0, stringArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      jSONObject0.put("gettoString", (Map) hashMap1);
      jSONObject3.put("Tkx:G8veP8NL", (Map) hashMap1);
      JSONObject jSONObject4 = jSONObject2.put("$c}l2,%q6FP@I", true);
      try { 
        jSONObject4.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)4);
      Long.compareUnsigned(0L, 263L);
      Short.toUnsignedLong((short)528);
      Integer integer0 = new Integer(8);
      Integer.remainderUnsigned((short)4, 8);
      JSONObject jSONObject0 = new JSONObject(integer0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.772796659842156
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ou";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject1.put("Ou", (Object) boolean0);
      jSONObject2.getBoolean("Ou");
      jSONObject1.optInt("`sjBCYF8");
      jSONObject1.optBoolean("`sjBCYF8", true);
      String string0 = "a=@OoROM4S9fW";
      jSONObject2.optString("`sjBCYF8", "4 ");
      try { 
        jSONObject1.getDouble("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.816322804310319
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' ad instead sw['", 0);
      jSONObject0.optLong((String) null, (-1L));
      jSONObject0.optInt("");
      JSONObject jSONObject2 = jSONObject1.put(";L!b*N}1?=s", (long) (-649));
      jSONObject2.toString((-649), 0);
      Integer integer0 = new Integer(0);
      JSONObject.quote(";L!b*N}1?=s");
      JSONObject jSONObject3 = jSONObject0.put("' ad instead sw['", 47);
      jSONObject2.getInt(";L!b*N}1?=s");
      String string0 = null;
      try { 
        jSONObject3.getString("\";L!b*N}1?=s\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\";L!b*N}1?=s\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9700976449686745
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optString("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short)116);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(45);
      Integer integer1 = Integer.getInteger("h\":l1Hhm6<`vb$", 0);
      Integer integer2 = new Integer(4);
      linkedList1.push(integer0);
      Integer integer3 = new Integer(3712);
      Integer integer4 = new Integer(45);
      linkedList1.push(integer2);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7074201229568504
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long((-1L));
      Long.max(644L, 1L);
      Long long1 = new Long(644L);
      Long long2 = new Long(644L);
      hashMap0.put(long1, long2);
      hashMap0.put(long0, long0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Long@0000000002\":java.lang.Long@0000000002,\"java.lang.Long@0000000003\":java.lang.Long@0000000004}");
      jSONObject0.isNull("Missing value");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getLong("=%NX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=%NX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.648687725228102
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      int int0 = (-1215);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", (-1215));
      String string1 = "C";
      jSONObject1.getDouble("Az#2bBR");
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      String string2 = "&KQ&ywem2&dccCLJO";
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", (-1215));
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", true);
      JSONObject jSONObject2 = jSONObject1.put("C", (Object) jSONObject0);
      try { 
        jSONObject2.getBoolean("Az#2bBR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Az#2bBR\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double((-939.7363043042378));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "isappend";
      stringArray0[1] = "app";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4640530022828098
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      short short0 = (short)16;
      Short.toUnsignedInt((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)16);
      jSONObject1.append("\t", jSONObject0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gettoString";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "HR#)2u>!9xf2I";
      jSONObject0.get("gettoString");
      JSONObject jSONObject2 = jSONObject0.putOpt("D7k2_/-YDb8", (Object) null);
      // Undeclared exception!
      try { 
        jSONObject2.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.898201296082015
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", 0);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", false);
      jSONObject1.put("C", (Object) jSONObject0);
      int int0 = 1491;
      StringWriter stringWriter0 = new StringWriter(1491);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Az#2bBR");
      stringWriter0.append((CharSequence) "C");
      stringWriter0.flush();
      stringWriter1.append('~');
      // Undeclared exception!
      jSONObject0.write(stringWriter1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.761293760646598
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("' and instead saw '", 0);
      jSONObject0.optLong((String) null, (long) 0);
      jSONObject0.optInt("");
      String string0 = ";L!b*N}1?=s";
      JSONObject jSONObject1 = new JSONObject((Object) ";L!b*N}1?=s");
      jSONObject1.toString((-649), 0);
      Integer.getInteger("null", 0);
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8698427372029576
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("?", jSONObject1);
      jSONObject1.optInt("?");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject2.toString(0);
      JSONObject.quote(",\n");
      Integer.getInteger(",\n", 0);
      int int0 = 308;
      StringWriter stringWriter0 = new StringWriter(39);
      StringWriter stringWriter1 = new StringWriter(0);
      stringWriter1.append((CharSequence) "\",\n\"");
      StringWriter stringWriter2 = stringWriter0.append('~');
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject1.getDouble("{\"java.lang.String@0000000003\": {}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\": {}}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6179065258021716
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>(2979);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("4846.10", false);
      JSONObject jSONObject2 = jSONObject0.put("4846.10", (double) 2979);
      jSONObject2.getDouble("4846.10");
      jSONObject1.put(".", 2979.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.648687725228102
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      int int0 = 0;
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      String string1 = "C";
      jSONObject1.getDouble("Az#2bBR");
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      String string2 = "&KQ&ywem2&dccCLJO";
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", 0);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", false);
      JSONObject jSONObject2 = jSONObject1.put("C", (Object) jSONObject0);
      try { 
        jSONObject2.getBoolean("Az#2bBR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Az#2bBR\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.66342030525194
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gettoString";
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      int int0 = 102;
      jSONObject0.optInt("$c}l2,&q06FPYI", 102);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject0.put("1=ps,bz/+>V5l@", (long) 102);
      jSONObject1.optString("6_iV!2{PJ(%");
      Object object0 = new Object();
      jSONObject0.accumulate("gettoString", object0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "gettoString", (-4033), 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2623477045221727
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 43;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = "\"\"";
      jSONObject0.put("\"\"", (Map) null);
      try { 
        jSONObject0.append("\"\"", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063407745759119
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("^?FKNo", (Collection) linkedList0);
      jSONObject0.put("ishashCode", false);
      try { 
        jSONObject0.getInt("^?FKNo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^?FKNo\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.926441522086995
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Az#2bBR", 0);
      jSONObject0.optLong((String) null, (long) 0);
      jSONObject0.optInt("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Az#2bBR");
      JSONObject jSONObject1 = jSONObject0.put(".nx~iR\"Fg.[l1", (Collection) linkedList0);
      Long long0 = new Long(0L);
      jSONObject0.optDouble("*|9 MoP2x3d<8dO");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      Long.compare(0, 0L);
      linkedList0.containsAll(linkedList1);
      linkedList1.add((String) null);
      Long.getLong("has", (long) 0);
      linkedList0.containsAll(linkedList1);
      Long.getLong((String) null, long0);
      jSONObject0.getLong("Az#2bBR");
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.739529930396921
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      int int0 = 0;
      String string1 = "getgetChars";
      String string2 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.434448337225669
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)1);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)4);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "\r";
      stringArray0[3] = "HoAn+";
      stringArray0[4] = "e'XV:lc}`]0W{ip";
      stringArray0[5] = "e'XV:lc}`]0W{ip";
      stringArray0[6] = "e'XV:lc}`]0W{ip";
      stringArray0[7] = "e'XV:lc}`]0W{ip";
      stringArray0[8] = null;
      JSONObject jSONObject0 = new JSONObject("HoAn+", stringArray0);
      Float float0 = new Float(2879.56);
      Float.min((short)4, 1.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("<0_>#\"xv.#  ", "e'XV:lc}`]0W{ip");
      Short short2 = new Short((short)1);
      jSONObject1.isNull("equ");
      try { 
        jSONObject1.put("wheel.json.JSONObject", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5544897329904974
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("\"\"", (Map) null);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 160, 160);
      Long long0 = new Long((-1L));
      Long.max(160, 0L);
      Long long1 = new Long(0L);
      Long long2 = new Long(0L);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long3 = new Long(1L);
      hashMap0.put(long3, long1);
      hashMap0.put(long1, long2);
      JSONObject.valueToString(long2);
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.810101674784239
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      String string0 = "$c}l2,%q06FP@I";
      jSONObject0.optInt("$c}l2,%q06FP@I", 102);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject1.put("gettoString", (Object) stringWriter0);
      String string1 = "1=ps,bz/+>V5l@";
      jSONObject2.put("1=ps,bz/+>V5l@", (long) 102);
      jSONObject1.optString("1=ps,bz/+>V5l@");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject2.accumulate("gettoString", object0);
      jSONObject3.write(stringWriter0);
      jSONObject0.optJSONArray("java.lang.Long@0000000007");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'I';
      charArray0[2] = 'Q';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 102, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3461947020468616
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(644L);
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3213574059801636
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.accumulate("?", jSONObject1);
      jSONObject1.optInt("?");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject2.optBoolean("?", true);
      jSONObject2.toString(4);
      String string0 = "Wb`#U](K6$oil";
      JSONObject jSONObject3 = jSONObject0.put("Wb`#U](K6$oil", 101);
      jSONObject3.optLong("istrim", (long) 0);
      jSONObject0.put("7LFt?&fu#J~*cN=", (-1.0));
      jSONObject0.getInt("Wb`#U](K6$oil");
      jSONObject1.has("{");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.631662112441477
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Short short0 = new Short((short)1);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject.valueToString(hashMap0, (short)1, (short)1);
      Long long0 = new Long((-1L));
      Long.max(644L, 1L);
      Long long1 = new Long(644L);
      Long long2 = new Long(644L);
      hashMap0.put(long1, long2);
      hashMap0.put(long0, long0);
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.Long@0000000003\":java.lang.Long@0000000003,\"java.lang.Long@0000000004\":java.lang.Long@0000000005}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long(0L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long1 = new Long(0L);
      try { 
        jSONObject0.put((String) null, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      int int0 = 0;
      try { 
        jSONObject0.put((String) null, (long) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      stringArray0[0] = "K";
      stringArray0[1] = "$";
      stringArray0[5] = "$";
      stringArray0[6] = "$";
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2093064));
      int int0 = 4;
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(14);
      try { 
        Integer.parseUnsignedInt("K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9673224694687903
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject0.optLong((String) null, (long) 0);
      jSONObject0.optInt("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Az#2bBR");
      jSONObject0.put(".nx~iR\"Fg.[l1", (Collection) linkedList0);
      Long long0 = new Long(0L);
      Long long1 = new Long(0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      Long.compare(0, 0L);
      linkedList0.containsAll(linkedList1);
      linkedList0.spliterator();
      linkedList1.add((String) null);
      Long.getLong("has", (long) 0);
      linkedList0.containsAll(linkedList1);
      Long.getLong((String) null, long0);
      JSONObject.numberToString(long0);
      jSONObject0.isNull("istoString");
      jSONObject1.getString(".nx~iR\"Fg.[l1");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.129000481253818
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      Short.toUnsignedInt((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)16);
      JSONObject jSONObject2 = jSONObject1.append("o", jSONObject0);
      String[] stringArray0 = new String[6];
      jSONObject2.optInt("", (-64089270));
      stringArray0[0] = "gettoString";
      Float float0 = new Float((double) (short)16);
      String string0 = "cz2ffuCa/]n{Hm";
      jSONObject0.put("cz2ffuCa/]n{Hm", true);
      try { 
        jSONObject1.getJSONObject("java.lang.Float@0000000003.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000003.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.320358259549659
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      int int0 = 0;
      String string1 = "getgetChars";
      JSONObject jSONObject1 = jSONObject0.put("getgetChars", false);
      jSONObject1.optBoolean("getgetChars", true);
      jSONObject0.put("Az#2bBR", (double) 0);
      try { 
        jSONObject0.getDouble("getgetChars");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetChars\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.913513966039322
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)1);
      Short.toUnsignedInt((short) (-838));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (short) (-838), (short)1);
      jSONObject0.toJSONArray(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("z_@7.", (long) (short) (-838));
      jSONArray1.optBoolean((int) (short) (-838), false);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.toString();
      jSONObject1.optDouble("z_@7.", (double) (short) (-838));
      jSONObject0.toString(1784, 1624);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.iterator();
      jSONObject0.toJSONArray(jSONArray1);
      // Undeclared exception!
      jSONArray0.put(64698, true);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.20591682924042
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      short short0 = (short)4;
      Short short1 = new Short((short)4);
      String[] stringArray0 = new String[2];
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = "d-]Dt$i-_u^I";
      JSONObject jSONObject1 = jSONObject0.put("d-]Dt$i-_u^I", 528);
      StringWriter stringWriter0 = new StringWriter((short)528);
      StringWriter stringWriter1 = new StringWriter(528);
      jSONObject0.optDouble("d-]Dt$i-_u^I");
      jSONObject1.put("Ou", 32);
      Short short2 = new Short((short) (-1003));
      JSONObject jSONObject2 = new JSONObject(short2, stringArray0);
      try { 
        jSONObject0.getInt("xJR!VO8L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xJR!VO8L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.671193286591189
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short short1 = new Short((short)1);
      JSONArray jSONArray0 = new JSONArray();
      Short short2 = new Short((short)4);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ou";
      stringArray0[1] = "Ou";
      JSONObject jSONObject0 = new JSONObject("Ou", stringArray0);
      Float float0 = new Float(3184.2548);
      JSONObject jSONObject1 = jSONObject0.put("Ou", true);
      jSONObject0.putOpt("Ou", jSONArray0);
      jSONObject1.getJSONArray("Ou");
      jSONObject1.get("Ou");
      String string0 = null;
      try { 
        jSONObject1.put((String) null, (-1693));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(43);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "\"\"";
      Integer integer1 = new Integer((-1532));
      Integer integer2 = new Integer(3517);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer(14);
      Integer integer4 = new Integer(291);
      Integer.getInteger((String) null);
      Integer integer5 = new Integer((-368));
      JSONObject jSONObject0 = new JSONObject(integer4);
      assertEquals(1, jSONObject0.length());
      
      Integer integer6 = new Integer((-368));
      String string0 = JSONObject.valueToString((Object) null, 2981, (-1532));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.292066491137483
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ou";
      stringArray0[1] = "e'XV:lc}`]0W{ip";
      JSONObject jSONObject0 = new JSONObject("e'XV:lc}`]0W{ip", stringArray0);
      Integer integer0 = new Integer(65);
      Integer integer1 = new Integer(34);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("9T$U\"a*W", (Map) hashMap0);
      String string0 = "Zw@G)VAl. Ip";
      jSONObject1.opt("9T$U\"a*W");
      jSONObject1.optLong("Zw@G)VAl. Ip", (long) 34);
      try { 
        jSONObject1.getInt("BzAdi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BzAdi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short.toUnsignedInt((short)528);
      Short.toUnsignedLong((short)1);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((short)528);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(15);
      Integer integer2 = new Integer(2617);
      linkedList1.push(integer2);
      jSONArray0.put((Collection) linkedList1);
      Float float0 = new Float((-1410.0F));
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = "000";
      stringArray0[3] = ".";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      stringArray0[6] = "000";
      stringArray0[7] = "000";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Integer.getInteger("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(1787);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(65);
      Integer integer2 = new Integer(1787);
      linkedList1.add(integer1);
      Integer integer3 = new Integer(65);
      Integer integer4 = new Integer(65);
      Integer integer5 = new Integer(65);
      Integer.getInteger("", integer5);
      Integer integer6 = new Integer(65);
      Integer integer7 = new Integer(65);
      Integer integer8 = new Integer(1787);
      Integer integer9 = new Integer(435);
      Integer integer10 = new Integer(3221);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.offerFirst(integer4);
      Integer integer11 = new Integer(848);
      Integer integer12 = new Integer(14);
      linkedList1.push(integer12);
      Integer integer13 = new Integer(14);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.102876083332593
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(43);
      linkedList0.add(integer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList1.retainAll(linkedList0);
      linkedList0.retainAll(linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer1 = new Integer((-1532));
      Integer integer2 = new Integer(3517);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(14);
      Integer.getInteger("[");
      linkedList0.push(integer3);
      Integer.getInteger((String) null);
      Integer integer4 = new Integer((-2123));
      Integer integer5 = new Integer((-1716));
      linkedList0.add((Integer) null);
      Integer.min(904, 14);
      Integer integer6 = new Integer(12);
      Integer integer7 = new Integer(43);
      linkedList0.push(integer7);
      Integer integer8 = new Integer(13);
      String string0 = JSONObject.valueToString(linkedList0, (-1532), (-893));
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0048228226986406
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short short1 = new Short((short)1);
      JSONArray jSONArray0 = new JSONArray();
      short short2 = (short)4;
      Short short3 = new Short((short)4);
      String[] stringArray0 = new String[7];
      String string0 = "O+";
      stringArray0[0] = "O+";
      stringArray0[1] = "O+";
      JSONObject jSONObject0 = new JSONObject("O+", stringArray0);
      Float float0 = new Float(3184.2548);
      jSONObject0.put("O+", true);
      try { 
        jSONObject0.getJSONObject("O+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O+\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6561545345566437
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject0.optLong("Az#2bBR", (long) 0);
      jSONObject0.optInt("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Az#2bBR", 0);
      Integer integer0 = new Integer(0);
      Integer.getInteger("gethashCode");
      Integer.getInteger("Az#2bBR", (Integer) null);
      Integer integer1 = new Integer(0);
      jSONObject0.optLong("Az#2bBR", (long) 0);
      jSONObject1.getInt("Az#2bBR");
      String string0 = "0";
      String string1 = null;
      jSONObject0.optLong((String) null, (-1L));
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5904964810812863
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.accumulate("", jSONObject1);
      jSONObject1.optInt("");
      jSONObject2.getString("");
      JSONObject.valueToString(jSONObject1);
      int int0 = 101;
      jSONObject0.put("Wb`#U](K6$oil", 101);
      String string1 = "U6Bhl";
      jSONObject0.getInt("Wb`#U](K6$oil");
      String string2 = "rve*O[asy\"w$P";
      try { 
        jSONObject0.getString("rve*O[asy\"w$P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rve*O[asy\\\"w$P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.459718127662389
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("Az#2bBR", 1678.995);
      jSONObject0.put("Az#2bBR", 0);
      jSONObject0.optLong((String) null, (long) 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Az#2bBR", 0);
      JSONObject jSONObject1 = jSONObject0.put(".nx~iR\"Fg.[l1", (Collection) linkedList0);
      Double double0 = new Double(827.2);
      jSONObject1.put("hDt1", (Object) double0);
      jSONObject0.opt("] is not a JSONObject.");
      jSONObject1.optLong(".nx~iR\"Fg.[l1", (long) 0);
      try { 
        jSONObject0.getInt("equ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"equ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0853480590441764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)4);
      String[] stringArray0 = new String[7];
      String string0 = "Ou";
      stringArray0[0] = "Ou";
      stringArray0[1] = "Ou";
      JSONObject jSONObject0 = new JSONObject("Ou", stringArray0);
      String string1 = "R";
      Float float0 = new Float(3184.2548);
      Float.sum(0.0F, (short)528);
      Float.min(528, (-1129.8074F));
      jSONObject0.toString((int) (short)528, 924);
      jSONObject0.optLong("{}", 489L);
      jSONObject0.optJSONObject("Ou");
      try { 
        jSONObject0.getInt("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Integer.getInteger(";'");
      Integer.sum(127, (-12437164));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-12437164));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-12437164));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.push(integer0);
      Integer integer2 = new Integer((-523));
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONObject.quote("|)U!~MlFrA|`my[\"");
      try { 
        jSONTokener0.nextString('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7725521525437338
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "*W";
      JSONObject jSONObject0 = new JSONObject((Object) "*W");
      JSONObject jSONObject1 = jSONObject0.put("*W", 0);
      String string1 = null;
      String string2 = "toS";
      jSONObject0.optLong("toS", (long) 0);
      jSONObject1.optInt((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string3 = "false";
      Integer integer0 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter(180);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ".n~;3iR\"g.[l1");
      stringWriter1.append('~');
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1599111365795935
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("^?FKNo", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(42);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "^?FKNo");
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject0.getJSONObject("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1852693961766474
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short short1 = new Short((short)1);
      JSONArray jSONArray0 = new JSONArray();
      short short2 = (short)4;
      Short short3 = new Short((short)4);
      String[] stringArray0 = new String[7];
      String string0 = "O+";
      stringArray0[0] = "O+";
      stringArray0[1] = "O+";
      JSONObject jSONObject0 = new JSONObject("O+", stringArray0);
      Float float0 = new Float(3184.2548);
      jSONObject0.put("O+", false);
      Short short4 = new Short((short)1211);
      Double double0 = new Double(0.0);
      Short.compare((short)1, (short)1211);
      jSONObject0.accumulate("O+", double0);
      jSONObject0.put("O+", (Object) short4);
      try { 
        jSONObject0.getJSONObject("O+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O+\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.4833933924204614
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short2 = new Short((short)4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ou";
      stringArray0[1] = "e'XV:lc}`]0W{ip";
      JSONObject jSONObject0 = new JSONObject("e'XV:lc}`]0W{ip", stringArray0);
      Float float0 = new Float(3184.2548);
      jSONObject0.putOpt("R", float0);
      Short short3 = new Short((short)1);
      jSONObject0.isNull("wheel.json.JSONObject");
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8137745393610478
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short short0 = new Short((short)1);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short)4);
      String string0 = "HoAn+";
      Integer.getInteger("HoAn+", 2444);
      Integer.getInteger((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Integer.getInteger((String) null);
      Integer.sum(127, (-12437164));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-12437164));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.getInteger("eq");
      Integer integer1 = new Integer((-12437164));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.push(integer0);
      Integer integer2 = new Integer((-523));
      JSONTokener jSONTokener0 = new JSONTokener(".");
      try { 
        jSONObject0.put((String) null, (-12437037));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z%u4";
      stringArray0[1] = "**8Qaay-G-G7[t";
      stringArray0[2] = "Aqs1VXmrL#QuMB]";
      String string0 = "getspliterator";
      stringArray0[3] = "getspliterator";
      stringArray0[4] = "8.Eq/";
      stringArray0[5] = "LM]N8~n/$>";
      stringArray0[6] = "000";
      stringArray0[7] = "1529.81180810384.";
      stringArray0[8] = "java.lang.Float@0000000003.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.71120073641916
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      int int0 = 0;
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      String string1 = "C";
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", 0);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", false);
      JSONObject jSONObject2 = jSONObject1.put("C", (Object) jSONObject0);
      boolean boolean0 = new Boolean("C");
      jSONObject2.optInt("Az#2bBR");
      jSONObject1.optLong("&KQ&ywem2&dccCLJO", (long) 0);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", false);
      String string2 = "4 ";
      jSONObject0.optString("4 ", "a=@OoROM4S9fW");
      jSONObject2.optDouble("wa", (double) 0);
      try { 
        jSONObject2.getDouble("&KQ&ywem2&dccCLJO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&KQ&ywem2&dccCLJO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.040974186509856
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.append("", object0);
      jSONObject1.length();
      jSONObject1.optDouble("", (-1002.940642));
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2791501556673617
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short short0 = (short)3;
      Short short1 = new Short((short) (-3501));
      Short.toUnsignedInt((short)3);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONException", (long) (short)3);
      jSONObject0.optInt("wheel.json.JSONException");
      String string0 = "Expected a ',' or '}'";
      jSONObject0.optBoolean("Expected a ',' or '}'", false);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("", (Object) null);
      try { 
        jSONObject0.getBoolean("&KQ&ywem2&dccCLJO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&KQ&ywem2&dccCLJO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7506817223249798
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1647));
      Integer integer5 = new Integer((-1261));
      linkedList1.push(integer3);
      Integer integer6 = new Integer((-1261));
      linkedList1.add(integer6);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList1.add(integer4);
      Integer integer7 = new Integer((-1647));
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer8 = new Integer((-1801));
      linkedList2.offerFirst(integer8);
      linkedList2.push(integer2);
      jSONObject0.optJSONArray("getgetClass");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.315853451763105
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gMtt%Stbing", "gMtt%Stbing");
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "vT0PdS,\"HL$H[";
      stringArray0[1] = "Ou";
      stringArray0[2] = "!0";
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = jSONObject0.put("] is not a number.", false);
      JSONObject jSONObject3 = jSONObject2.putOpt((String) null, "] is not a number.");
      JSONObject jSONObject4 = jSONObject3.put("gettoHexString", false);
      assertSame(jSONObject4, jSONObject1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8046934105427237
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Map<Object, JSONArray> map0 = null;
      String string0 = "O3rZ>/;D#[i':1# ";
      int int0 = 52;
      jSONObject0.putOpt("O3rZ>/;D#[i':1# ", object0);
      try { 
        jSONObject0.getJSONArray("O3rZ>/;D#[i':1# ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O3rZ>/;D#[i':1# \"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9622594906199144
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer.min((-12437164), (-3201));
      Integer integer0 = new Integer((-12437164));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer((-1261));
      linkedList1.push(integer2);
      Integer integer4 = new Integer((-1261));
      linkedList1.add(integer4);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList1.add(integer2);
      Integer integer5 = new Integer((-1647));
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer6 = new Integer((-1801));
      linkedList2.offerFirst(integer6);
      linkedList2.push(integer1);
      Integer integer7 = new Integer((-382));
      try { 
        jSONObject0.getJSONArray("java.lang.Long@00000000060");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000060\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8104461872896946
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 43;
      String string0 = "k\"";
      JSONObject jSONObject1 = jSONObject0.append("k\"", (Object) null);
      Integer integer0 = new Integer(43);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.getDouble("k\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.6128231151303045
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.append("", object0);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.760750468781551
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      StringWriter stringWriter0 = new StringWriter((short)0);
      JSONObject.getNames((Object) stringWriter0);
      String string0 = "1.00";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("1.00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 1.00
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8324565304832894
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' ad instead sw['", 0);
      String string0 = null;
      jSONObject0.optLong((String) null, (-1L));
      jSONObject0.optInt("");
      String string1 = ";L!b*N}1?=s";
      JSONObject jSONObject2 = jSONObject1.put(";L!b*N}1?=s", (long) (-649));
      jSONObject2.toString((-649), 0);
      JSONObject.getNames((Object) null);
      Integer.getInteger("' ad instead sw['");
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.3283076112308976
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Short short0 = new Short((short)54);
      Short.toUnsignedInt((short)54);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short) (-15));
      Integer integer0 = new Integer((short) (-15));
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer integer1 = new Integer(54);
      Integer integer2 = new Integer((short) (-15));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer((short)54);
      Integer integer4 = new Integer(1137);
      Integer integer5 = new Integer((short)54);
      jSONObject0.put(" ,}pi6A", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(integer1);
      JSONObject.valueToString(jSONObject1, 125, (-3435));
      LinkedList<String> linkedList2 = new LinkedList<String>();
      jSONObject1.put("to", (Collection) linkedList2);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3373641978673163
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("gettoString", "gettoString");
      Short.toUnsignedInt((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)16);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gettoString";
      stringArray0[1] = "e'XV:lc}`]0W{ip";
      stringArray0[2] = "e'XV:lc}`]0W{ip";
      stringArray0[4] = "Ou";
      stringArray0[5] = "HR#)2u>!9xf2I";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      Float float0 = new Float((double) (short)16);
      jSONObject1.putOpt("D7k2_/-YDb8", (Object) null);
      Short short1 = new Short((short)16);
      JSONTokener jSONTokener0 = new JSONTokener("getjoin");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7581374267316687
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Map<Object, JSONObject> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "9M>s,,iEj";
      long long0 = 0L;
      Short short0 = new Short((short)35);
      jSONObject0.optDouble("9M>s,,iEj", (double) (short)35);
      jSONObject0.putOpt("9M>s,,iEj", short0);
      JSONObject jSONObject1 = jSONObject0.put("9M>s,,iEj", 0L);
      jSONObject1.put("JMCH#TZT+A=cVb(", false);
      JSONObject.getNames(jSONObject1);
      String string1 = "ishashCode";
      String string2 = "JSON does not allow non-finite numbers.";
      jSONObject0.optInt("JSON does not allow non-finite numbers.", (-2346));
      try { 
        jSONObject0.getDouble("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "?";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.067301671119086
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 43;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = "\"\"";
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Map) null);
      try { 
        jSONObject1.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short short0 = new Short((short)4);
      String[] stringArray0 = new String[2];
      Long.compareUnsigned(0L, 282L);
      Short.toUnsignedLong((short)528);
      String string0 = JSONObject.doubleToString(4846.1);
      assertEquals("4846.1", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("ZQn![fgm* =5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZQn![fgm* =5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1756407392813157
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt("a=@OoROM4S9fW");
      jSONObject0.optInt("a=@OoROM4S9fW", 3257);
      jSONObject0.opt((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("false");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of false
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6883643070890986
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject0.optLong((String) null, (long) 0);
      jSONObject0.optInt("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("Az#2bBR");
      jSONObject0.put(".nx~iR\"Fg.[l1", (Collection) linkedList0);
      Long long0 = new Long(0L);
      Long long1 = new Long(0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      String string0 = "has";
      jSONObject1.has("*|9 MoP2x3d<8dO");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("", (Map) hashMap0);
      String string1 = "92..";
      String string2 = null;
      Object object1 = new Object();
      jSONObject0.optLong("", 0L);
      try { 
        jSONObject0.getInt("92..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"92..\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.938762547701273
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 0);
      jSONObject0.optLong((String) null, (-1L));
      jSONObject0.optInt("");
      String string0 = ";L!b*N}1?=s";
      jSONObject1.put(";L!b*N}1?=s", (long) (-649));
      JSONObject.quote("");
      Integer.getInteger("null", 59);
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "EV*ug$Ha)0;Zv_.}u";
      stringArray0[1] = ".ueV";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "'a5>@/|)ff[";
      stringArray0[4] = "\"\"";
      stringArray0[5] = "kc$$0eSP`q";
      stringArray0[6] = "is";
      stringArray0[7] = "x)zu@}}FZ0FNmP";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble("DKH>.;c}I");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = (byte)79;
      Byte byte1 = new Byte((byte)79);
      JSONTokener jSONTokener0 = new JSONTokener("%Z7u\"eg2i>(");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.accumulate("000", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of %Z7u\"eg2i>(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.9621693083585323
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-18));
      Integer integer0 = new Integer(433);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(528);
      Integer.remainderUnsigned(528, (short) (-18));
      Integer.getInteger("Expected a ',' or '}'", (Integer) null);
      Integer integer2 = new Integer(3580);
      Integer integer3 = new Integer(433);
      Integer integer4 = new Integer((-1532));
      Integer integer5 = new Integer((-1532));
      Integer.compareUnsigned(3580, 433);
      Integer.getInteger("CFEG4U", (-362));
      Integer integer6 = new Integer(528);
      Integer.compare(528, 3580);
      Integer integer7 = new Integer((-1532));
      Integer.getInteger("/b1M;btutiukU&Sb@", integer7);
      Double double0 = new Double((short) (-18));
      Double.max(2528.385866241448, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer8 = new Integer((-1305));
      Integer integer9 = new Integer((-1532));
      Integer integer10 = new Integer(528);
      Integer integer11 = new Integer(104);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.092517855880794
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.accumulate("?", jSONObject1);
      jSONObject1.optInt("?");
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = jSONObject0.putOpt("Unterminated string", jSONArray0);
      JSONObject jSONObject4 = jSONObject2.put("Unterminated string", (Map) hashMap0);
      jSONObject3.toString(0);
      jSONObject2.toString(4);
      Object object0 = new Object();
      jSONObject0.accumulate("isaddLast", "");
      JSONObject jSONObject5 = jSONObject2.append("", object0);
      String string0 = "cle";
      jSONObject5.opt("");
      jSONObject0.toString(906, 906);
      jSONObject0.optLong("?", (-23L));
      jSONObject0.optJSONObject("JSONArray initial value should be a string or collection or array.");
      String string1 = "'";
      try { 
        jSONObject4.getInt("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.784079133852037
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' ad instead sw['", 0);
      String string0 = null;
      jSONObject0.optLong((String) null, (-1L));
      String string1 = "";
      jSONObject0.optInt("");
      String string2 = ";L!b*N}1?=s";
      JSONObject jSONObject2 = jSONObject1.put(";L!b*N}1?=s", (long) (-649));
      jSONObject2.toString(0, 0);
      Integer.getInteger("' ad instead sw['");
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.622620537911692
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' ad instead sw['", (-21));
      String string0 = null;
      jSONObject0.optLong((String) null, 47L);
      int int0 = new Integer((-21));
      String string1 = ";L!b*N}1?=s";
      JSONObject jSONObject2 = jSONObject1.put(";L!b*N}1?=s", (long) (-637));
      jSONObject2.toString((-637), (-21));
      jSONObject2.put("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.String@0000000005\": java.lang.Long@0000000006\n}", 63);
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.5630474080393433
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Az#2bBR";
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject0.remove("Az#2bBR");
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", 0);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", false);
      JSONObject jSONObject2 = jSONObject1.put("C", (Object) jSONObject0);
      try { 
        jSONObject2.getLong("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.5914258180806007
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "gettoString");
      Short.toUnsignedInt((short)16);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)16);
      jSONObject1.append("o", jSONObject0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gettoString";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "HR#)2u>!9xf2I";
      JSONObject jSONObject2 = jSONObject0.putOpt("D7k2_/-YDb8", (Object) null);
      jSONObject2.remove("] is not a number.");
      Short short1 = new Short((short)16);
      boolean boolean0 = jSONObject1.isNull("gettoString");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4569655952858007
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long.compareUnsigned((-1L), 2009L);
      String string0 = JSONObject.doubleToString(2009L);
      Long long0 = Long.valueOf("000");
      Long.divideUnsigned((-1L), 2916L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      stringArray0[2] = "'";
      stringArray0[3] = "'";
      stringArray0[4] = "'";
      stringArray0[5] = "'";
      stringArray0[6] = "'";
      stringArray0[7] = "'";
      stringArray0[8] = "'";
      JSONObject jSONObject0 = new JSONObject("'", stringArray0);
      String string0 = JSONObject.valueToString(jSONObject0, 97, 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7856029815063876
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "' ad instead sw['";
      jSONObject0.optLong("' ad instead sw['", (-1L));
      String string1 = "";
      jSONObject0.optInt("");
      String string2 = ";L!b*N}1?=s";
      JSONObject jSONObject1 = jSONObject0.put(";L!b*N}1?=s", (long) (-649));
      jSONObject1.toString((-649), 0);
      jSONObject1.put("{\"java.lang.String@0000000004\": java.lang.Long@0000000005}", 63);
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.toString((-1483));
      Integer.getInteger(";'");
      Integer.sum(127, (-12437164));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-12437164));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-12437164));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.push(integer0);
      Integer integer2 = new Integer((-523));
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("getdoubleToRawLongBits");
      assertNull(object0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(">");
      Integer integer0 = new Integer(97);
      Integer.remainderUnsigned(97, 1202);
      Integer.divideUnsigned(4, (-208));
      Integer integer1 = new Integer(1178);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        Integer.decode("getdoubleToLongBits");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getdoubleToLongBits\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5905174557951867
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 0);
      jSONObject1.optLong("C", (-1L));
      jSONObject0.optInt("Az#2bBR");
      jSONObject1.optInt("&KQ&ywem2&dccCLJO", 0);
      jSONObject1.optBoolean("&KQ&ywem2&dccCLJO", true);
      JSONObject jSONObject2 = jSONObject1.put("C", (Object) jSONObject0);
      try { 
        jSONObject2.getBoolean("Az#2bBR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Az#2bBR\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.2414456828156455
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Integer.getInteger(";'", (-12437164));
      Integer.getInteger(";'");
      Integer.sum(127, (-12437164));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-12437164));
      String string0 = ".";
      Integer.getInteger(".", (-1));
      jSONObject0.append(".", (Object) null);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-12437164));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.push(integer0);
      Integer integer2 = new Integer((-523));
      jSONObject0.optString(".", "(KP2");
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((-1496.98565));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.optString("'Mm=ACP2b[3");
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer((-2042));
      Integer integer1 = new Integer((-2042));
      Integer.max(39, (-5141));
      Integer.getInteger("5n#N>~D*Ld^", integer1);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      int int0 = 410;
      Integer integer0 = new Integer(410);
      Integer.getInteger("");
      Integer.max((-647), 1904);
      Integer integer1 = new Integer(410);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      int int1 = 1787;
      Integer integer2 = new Integer(1787);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(65);
      Integer integer4 = new Integer(1787);
      int int2 = 72;
      Integer.sum(55, 59);
      jSONObject0.keys();
      Integer integer5 = new Integer(410);
      Integer.getInteger("", integer0);
      try { 
        Integer.parseUnsignedInt("val");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"val\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      Double double0 = new Double((-716.73911885));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject.quote("l):c(@ :/hL=('E");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      Integer.getInteger("\"l):c(@ :/hL=('E\"", 4);
      Integer integer1 = new Integer((-1456));
      Integer integer2 = new Integer((-3856));
      Integer integer3 = new Integer((-1532));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer4 = new Integer(291);
      linkedList1.add(integer0);
      Integer.getInteger((String) null);
      Integer integer5 = new Integer((-1532));
      Integer integer6 = Integer.getInteger((String) null, integer1);
      Integer integer7 = new Integer(2118);
      linkedList0.add(integer7);
      Integer integer8 = new Integer(1244);
      Integer integer9 = new Integer((-230));
      Integer.getInteger("?a(BS>])/u", integer6);
      linkedList1.add(integer8);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.574729047527649
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, 47L);
      jSONObject0.optInt("");
      StringWriter stringWriter0 = new StringWriter(308);
      StringWriter stringWriter1 = new StringWriter(2419);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "l):c(@ :/hL=('E";
      JSONObject.quote((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      int int0 = 4;
      Integer.getInteger("\"\"", 4);
      int int1 = (-1532);
      Integer integer1 = new Integer((-1453));
      Integer.sum((-1532), (-1532));
      int int2 = 3520;
      Integer integer2 = new Integer(28);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      Integer integer3 = new Integer(14);
      int int3 = 1;
      Integer integer4 = new Integer(14);
      try { 
        Integer.decode("l):c(@ :/hL=('E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"l):c(@ :/hL=('E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.578049229751225
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer(43);
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Float float0 = new Float(340.570290222);
      try { 
        jSONObject0.getJSONObject("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("UItaXz{|Lu$g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UItaXz{|Lu$g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Expected '";
      stringArray0[1] = ",8iI8\"|~.";
      stringArray0[2] = "tri";
      stringArray0[3] = "=N3dH6p";
      stringArray0[4] = "N'YjXbr";
      stringArray0[5] = "}3\"$N5Rty";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.getLong(",8iI8\"|~.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",8iI8\\\"|~.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.129029299502578
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("'");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8530039128771998
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1647));
      Integer integer5 = new Integer((-1261));
      linkedList1.push(integer3);
      Integer integer6 = new Integer((-1261));
      linkedList1.add(integer6);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList1.add(integer4);
      Integer integer7 = new Integer((-1647));
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer8 = new Integer((-1801));
      linkedList2.offerFirst(integer8);
      linkedList2.push(integer2);
      Integer integer9 = new Integer((-382));
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.3028407789149683
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("YMWR*IGit?p");
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(integer1);
      Integer integer4 = new Integer((-1647));
      Integer.toUnsignedString((-1261));
      Integer integer5 = new Integer((-12437164));
      Integer.getInteger("H4Y%$rq*_N^NEs\"|.", integer5);
      Integer integer6 = new Integer((-1261));
      linkedList0.push(integer3);
      Integer integer7 = new Integer((-1261));
      linkedList0.add(integer7);
      Integer.remainderUnsigned((-1798), (-1647));
      Integer.getInteger(";'");
      linkedList0.add(integer4);
      Integer integer8 = new Integer((-1647));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer9 = new Integer((-1798));
      linkedList1.offerFirst(integer9);
      linkedList1.push(integer2);
      linkedList1.push(integer4);
      Integer integer10 = new Integer((-1798));
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.8350070556411429
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[6] = "null";
      stringArray0[7] = "Yq=Lw>-y$QOgCwUu=}>";
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)4);
      Float.sum(528, 915.8115F);
      Float.min(1.0F, 528);
      Short short1 = new Short((short)2884);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject.valueToString((Object) null);
      jSONTokener0.nextTo(',');
      try { 
        jSONTokener0.nextString('');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.066278442414676
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.toUnsignedInt((short)560);
      JSONArray jSONArray0 = new JSONArray();
      Short short2 = new Short((short)4);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ou";
      stringArray0[1] = "Ou";
      Float.sum(0.0F, (short)560);
      Float.min(560, (-1129.8074F));
      Short short3 = new Short((short)1);
      JSONTokener jSONTokener0 = new JSONTokener("R");
      char char0 = '';
      JSONObject.valueToString("Ou");
      jSONTokener0.nextTo(',');
      try { 
        jSONTokener0.next('');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '' and instead saw '\u0000' at character 1 of R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6383542260872654
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject.quote("l):c(@ :/hL=('E");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      Integer.getInteger("\"l):c(@ :/hL=('E\"", 4);
      Integer integer1 = new Integer((-1456));
      Integer integer2 = new Integer(28);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer((-1532));
      Integer integer4 = new Integer((-162));
      Integer integer5 = new Integer(1536);
      linkedList1.add(integer1);
      JSONObject jSONObject0 = new JSONObject((Object) "\"l):c(@ :/hL=('E\"");
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer6 = new Integer(929);
      Integer integer7 = new Integer((-162));
      linkedList2.offerFirst(integer7);
      Integer integer8 = new Integer(55);
      linkedList0.push((Integer) null);
      Integer integer9 = new Integer((-369));
      assertFalse(integer9.equals((Object)integer5));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.053942183541995
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-18));
      Integer integer0 = new Integer(433);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(528);
      Integer.getInteger("Expected a ',' or '}'", (Integer) null);
      Integer integer2 = new Integer(3580);
      Integer integer3 = new Integer(433);
      Integer integer4 = new Integer((-1532));
      Integer integer5 = new Integer((-1532));
      Integer.compareUnsigned(3580, 433);
      Integer.getInteger("CFEG4U", (-10384350));
      Integer.compare(528, 3580);
      Integer.getInteger("/b1M;btutiukU&Sb@", integer5);
      Double double0 = new Double((short) (-18));
      Double.max(2528.385866241448, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer6 = new Integer((-1305));
      Integer.min(3580, 528);
      Integer integer7 = new Integer(528);
      Integer integer8 = new Integer(104);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/b1M;btutiukU&Sb@";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "CFEG4U";
      stringArray0[3] = "/b1M;btutiukU&Sb@";
      stringArray0[4] = "Expected a ',' or '}'";
      stringArray0[5] = "CFEG4U";
      stringArray0[6] = "CFEG4U";
      stringArray0[7] = null;
      stringArray0[8] = "CFEG4U";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("CFEG4U", (Object) jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.998587878542509
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)1);
      Short.toUnsignedInt((short)528);
      Short.toUnsignedLong((short)1);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.0659423689305765
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short)54);
      Short.toUnsignedInt((short)54);
      Short short1 = new Short((short)54);
      JSONObject.valueToString(short1, 51, 2094);
      Long long0 = new Long(1626);
      Long.max(644L, (-1L));
      Long long1 = new Long(0L);
      Long long2 = new Long(2094);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      hashMap0.put(long1, (Long) null);
      Long long3 = new Long(644L);
      hashMap0.put(long1, long3);
      Byte byte0 = new Byte((byte)110);
      JSONObject.valueToString(byte0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Byte@0000000002");
      JSONTokener jSONTokener1 = new JSONTokener("~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1647));
      Integer integer5 = new Integer((-1261));
      linkedList0.push(integer3);
      Integer integer6 = new Integer((-1261));
      linkedList0.add(integer6);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList0.add(integer4);
      Integer integer7 = new Integer((-1647));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getgetClass
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7810345150559752
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(433);
      linkedList0.add(integer0);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(528);
      Integer.getInteger("Expected a ',' or '}'", (Integer) null);
      Integer integer2 = new Integer(3580);
      linkedList0.add(integer2);
      Integer integer3 = new Integer(433);
      Integer integer4 = new Integer((-1532));
      Integer integer5 = new Integer((-1532));
      Integer.compare(528, 3580);
      Integer.getInteger("/b1M;btutiukU&Sb@", integer5);
      linkedList0.add((Integer) null);
      Double double0 = new Double((short)4);
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer6 = new Integer((-1305));
      Integer.min(3580, 528);
      linkedList0.push(integer6);
      Integer integer7 = new Integer(528);
      Integer integer8 = new Integer(104);
      jSONObject0.accumulate("/b1M;btutiukU&Sb@", integer1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.9622594906199144
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("YMWR*IGit?p");
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(integer1);
      Integer integer4 = new Integer((-1647));
      Integer.toUnsignedString((-1261));
      Integer integer5 = new Integer((-12437164));
      Integer.toUnsignedString((-1261));
      Integer.getInteger("H4Y%$rq*_N^NEs\"|.", integer5);
      Integer integer6 = new Integer((-1261));
      linkedList0.push(integer3);
      Integer integer7 = new Integer((-1261));
      Integer.toUnsignedString(8);
      linkedList0.add(integer7);
      Integer.remainderUnsigned((-1798), (-1647));
      Integer.getInteger(";'");
      linkedList0.add(integer4);
      Integer integer8 = new Integer((-1647));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getBoolean("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetClass\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long((-476L));
      Long.divideUnsigned((-476L), (-1L));
      Long.compareUnsigned((-476L), (-1L));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 1634, 1634);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.3401196061221263
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((short)1);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, (short)1, 1626);
      Long long0 = new Long((-1L));
      Long.max(644L, 1L);
      Long long1 = new Long(644L);
      Integer integer0 = new Integer(1626);
      Integer integer1 = new Integer(1626);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.push(integer1);
      linkedList0.add((Integer) null);
      Integer.getInteger((String) null);
      Integer integer2 = new Integer(32);
      linkedList0.add(integer2);
      Integer integer3 = new Integer(2138);
      Integer integer4 = new Integer(1436);
      linkedList0.offerFirst(integer4);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer5 = new Integer((-1875));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.push(integer4);
      Integer integer6 = new Integer(61);
      assertFalse(integer6.equals((Object)integer4));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0, (-4378), 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.4945402641306105
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a Boolean.");
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", object0);
      jSONObject1.put("] is not a Boolean.", 1635);
      jSONObject1.optLong(",\n");
      jSONObject1.getLong("] is not a Boolean.");
      jSONObject0.opt("a=@OoROM4S9fW");
      Integer integer0 = new Integer((-1261));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.push(integer0);
      Integer integer1 = new Integer(13);
      linkedList0.add(integer1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer(13);
      Integer integer3 = new Integer(13);
      Integer integer4 = new Integer(0);
      linkedList0.add(integer4);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer(127);
      linkedList0.offerFirst((Integer) null);
      Integer integer6 = new Integer((-1261));
      linkedList2.push(integer6);
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(1084);
      jSONObject1.putOpt("#b+|2Js^^,4Qqx", integer8);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.quote("Wb`#U](K6$oil");
      assertEquals("\"Wb`#U](K6$oil\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.9622594906199144
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(integer1);
      Integer integer4 = new Integer((-1647));
      Integer integer5 = new Integer((-12437164));
      Integer.getInteger("H4Y%$rq*_N^NEs\"|.", integer5);
      Integer integer6 = new Integer((-1261));
      linkedList0.push(integer3);
      Integer integer7 = new Integer((-1261));
      linkedList0.add(integer7);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList0.add(integer4);
      Integer integer8 = new Integer((-1647));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer9 = new Integer((-1801));
      linkedList1.offerFirst(integer9);
      linkedList1.push(integer2);
      try { 
        jSONObject0.getString("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.957491293605532
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short.toUnsignedInt((short)528);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-18));
      Integer integer0 = new Integer(433);
      Integer.getInteger((String) null);
      Integer integer1 = new Integer(528);
      Integer.remainderUnsigned(528, (short) (-18));
      Integer.getInteger("Expected a ',' or '}'", (Integer) null);
      Integer integer2 = new Integer(3580);
      Integer integer3 = new Integer(433);
      Integer integer4 = new Integer((-1532));
      Integer integer5 = new Integer((-1532));
      Integer.compareUnsigned(3580, 433);
      Integer integer6 = new Integer((-362));
      Integer integer7 = new Integer(528);
      Integer.compare(528, 3580);
      Integer integer8 = new Integer((-1532));
      Integer.getInteger("/b1M;btutiukU&Sb@", integer8);
      Double double0 = new Double((short) (-18));
      Double.max(2528.385866241448, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer9 = new Integer((-1305));
      Integer integer10 = new Integer((-1532));
      Integer integer11 = new Integer(528);
      Integer integer12 = new Integer(104);
      jSONObject0.accumulate("Expected a ',' or '}'", (Object) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = ";'";
      Integer.getInteger(";'", (-12437164));
      Integer integer0 = new Integer((-12437164));
      Integer.getInteger("getgetClass", integer0);
      Integer integer1 = new Integer((-12437164));
      Integer integer2 = new Integer((-12437164));
      Integer integer3 = new Integer((-1647));
      Integer.divideUnsigned((-12437164), (-1647));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer4 = new Integer((-1647));
      Integer integer5 = new Integer((-1261));
      linkedList0.push(integer3);
      Integer integer6 = new Integer((-1261));
      linkedList0.add(integer6);
      Integer.remainderUnsigned((-1801), (-1647));
      Integer.getInteger(";'");
      linkedList0.add(integer4);
      Integer integer7 = new Integer((-1647));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getgetClass
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
