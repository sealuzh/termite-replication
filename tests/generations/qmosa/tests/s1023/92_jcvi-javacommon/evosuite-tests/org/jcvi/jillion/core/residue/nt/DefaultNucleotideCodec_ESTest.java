/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:41:02 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate8);
      Predicate<Object> predicate14 = predicate10.and(predicate0);
      predicate6.and(predicate14);
      predicate4.or(predicate13);
      predicate12.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      predicate15.and(predicate7);
      predicate15.or(predicate9);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)20;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)3);
      assertEquals(Nucleotide.NotAdenine, nucleotide0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.816028897382805
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byte byte0 = (byte) (-111);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(57, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      nucleotide1.getBasesFor();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.572413362602879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray3, 1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 304);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray4 = defaultNucleotideCodec6.encode((-1), iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec2.decodedLengthOf(byteArray2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec5.toString(byteArray4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.467281719963474
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      nucleotide1.getBasesFor();
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray2, 0);
      defaultNucleotideCodec2.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray0);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte) (-65);
      byteArray3[2] = (byte)30;
      byteArray3[3] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray3, (byte)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 13 corresponds to encodedIndex 10  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotide0.getAllPossibleAmbiguities();
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.144936394416894
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec2.getGapOffsets(byteArray1);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1073741824);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1819, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-41);
      byte[] byteArray1 = new byte[1];
      byteArray0[1] = (byte) (-41);
      Byte byte0 = new Byte((byte) (-41));
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)3;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList1.listIterator();
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      linkedList1.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(8, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.28395823351803
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      nucleotide0.getBasesFor();
      Nucleotide nucleotide1 = Nucleotide.Purine;
      Nucleotide nucleotide2 = Nucleotide.Purine;
      linkedList0.add(nucleotide2);
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      linkedList0.removeFirst();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
      
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 127);
      assertEquals(127, int1);
      
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("AG", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)18}, byteArray1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      nucleotide0.getBasesFor();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4L, 255L);
      range0.getEnd();
      byte byte0 = (byte) (-65);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor((byte[]) null, 872);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = (byte)7;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Byte byte1 = new Byte((byte)7);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.480319747383784
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray3, 1);
      defaultNucleotideCodec2.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray0);
      Range range0 = Range.of(1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1 .. 1 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.164095793421275
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-80);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[3] = (byte)81;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.iterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray1[3] = (byte) (-124);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.532035889228501
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec5.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.decodedLengthOf(byteArray0);
      int int0 = defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray2, 1);
      assertEquals(1, int0);
      
      int int1 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray2, (-2100));
      assertEquals((-2100), int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec7.toString(byteArray1);
      assertEquals("-", string0);
      
      defaultNucleotideCodec6.getGapOffsets(byteArray0);
      assertEquals(5, byteArray0.length);
      
      defaultNucleotideCodec5.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec8.isGap(byteArray1, 1);
      assertFalse(boolean0);
      
      Range range0 = Range.ofLength(0L);
      defaultNucleotideCodec3.iterator(byteArray1, range0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6301419135197617
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray3, 1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      Range range0 = Range.ofLength(1L);
      defaultNucleotideCodec2.iterator(byteArray3, range0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray4 = defaultNucleotideCodec6.encode(0, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec5.toString(byteArray4);
      defaultNucleotideCodec2.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide2 = Nucleotide.Weak;
      defaultNucleotideCodec1.encode(nucleotide2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec7.encode(2121, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate6.and(predicate11);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      predicate3.and(predicate8);
      Predicate<Object> predicate12 = predicate5.and(predicate0);
      predicate6.and(predicate12);
      Predicate<Object> predicate13 = predicate11.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate7.test(predicate4);
      predicate11.and(predicate1);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.and(predicate7);
      predicate14.or(predicate9);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.47773307680443
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray1);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray3, 1);
      defaultNucleotideCodec1.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.603266637512244
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      Integer integer0 = new Integer(1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray1);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray3, (int) integer0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.iterator(byteArray0);
      int int1 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, 304);
      assertEquals(304, int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray4 = defaultNucleotideCodec5.encode(0, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec6.getGappedOffsetFor(byteArray1, 0);
      assertTrue(int2 == int0);
      
      defaultNucleotideCodec1.decodedLengthOf(byteArray2);
      defaultNucleotideCodec4.toString(byteArray4);
      byte[] byteArray5 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray5);
      
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec6.iterator(byteArray0);
      long long0 = defaultNucleotideCodec3.getUngappedLength(byteArray3);
      assertEquals(1L, long0);
      
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray4, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray4);
      
      defaultNucleotideCodec5.isGap(byteArray1, (-1804));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)80}, byteArray1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3734));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1641);
      byteArray0[0] = (byte) (-28);
      byteArray0[0] = (byte)62;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      predicate4.and(predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate5);
      Predicate<Object> predicate9 = predicate2.and(predicate3);
      predicate0.or(predicate6);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate5.and(predicate10);
      predicate2.negate();
      predicate3.and(predicate6);
      Predicate<Object> predicate11 = predicate8.and(predicate0);
      Predicate.isEqual((Object) predicate8);
      predicate0.negate();
      predicate5.and(predicate11);
      Byte byte0 = new Byte((byte)20);
      Object object1 = new Object();
      predicate8.test(predicate4);
      predicate10.and(predicate1);
      Predicate<Object> predicate12 = Predicate.isEqual(object1);
      predicate12.and(predicate1);
      predicate12.or(predicate7);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)88;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Keto;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.921700419787323
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1076);
      byteArray0[0] = (byte)90;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1276);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 3635L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 3635 corresponds to encodedIndex 1821  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.isGap(byteArray0, 201326592);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.spliterator();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) listIterator0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.14199568423465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec4.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, (-957));
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray2, (-787));
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.toString(byteArray2);
      defaultNucleotideCodec3.getGapOffsets(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec9 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec9.decodedLengthOf(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec9.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9784131432944947
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-24);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 573);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2146571764));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Integer integer0 = new Integer((-2146571764));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-791));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte) (-24);
      defaultNucleotideCodec1.isGap(byteArray1, (byte)37);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide0);
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((int) (byte) (-8), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Predicate.isEqual((Object) defaultNucleotideCodec0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec3.iterator(byteArray0);
      defaultNucleotideCodec1.isGap(byteArray0, 2141920218);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 2141920218);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.toString(byteArray2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate8);
      Predicate<Object> predicate14 = predicate10.and(predicate0);
      predicate6.and(predicate14);
      predicate4.or(predicate13);
      predicate12.and(predicate4);
      predicate7.test(predicate8);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      predicate15.and(predicate7);
      predicate15.or(predicate9);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.203099706052705
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[1] = (byte)0;
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 201326592);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertFalse(boolean0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.toArray();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) listIterator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      defaultNucleotideCodec0.toString(byteArray0);
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1585));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 1565;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2520320084843135
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set1);
      List<Integer> list0 = defaultNucleotideCodec2.getGapOffsets(byteArray1);
      assertTrue(list0.isEmpty());
      
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1073741824);
      int int1 = defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      assertEquals(1, int1);
      
      int int2 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 1073741824);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2299), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 2890;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 2890);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      predicate4.test(predicate1);
      predicate0.test(predicate2);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      predicate1.or(predicate2);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate2);
      predicate8.negate();
      byte byte0 = (byte)20;
      Byte byte1 = new Byte((byte)20);
      Object object1 = new Object();
      predicate5.test(object1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-667));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Guanine;
      linkedList0.add(nucleotide1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.684093263561258
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray3, 1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 13);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray0);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 304);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray4 = defaultNucleotideCodec6.encode(0, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec2.decodedLengthOf(byteArray2);
      defaultNucleotideCodec5.toString(byteArray4);
      byte[] byteArray5 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec7.iterator(byteArray0);
      Range range0 = Range.of(385L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.iterator(byteArray5, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 385 .. 385 ]/0B is out of range of sequence which is only [ 0 .. 1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.162655525991488
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-2105376124);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-2105376124));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, (-2105376124));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -2105376124
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-90);
      byte byte0 = (byte)64;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)71;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte) (-51), 6L);
      Range.of(6L);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-71);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      Predicate<Object> predicate9 = predicate1.or(predicate3);
      predicate8.and(predicate0);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate10 = predicate7.and(predicate8);
      predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate11 = predicate6.negate();
      predicate3.test(predicate8);
      Predicate<Object> predicate12 = predicate4.negate();
      predicate7.or(predicate12);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<Integer> predicate14 = predicate2.or(predicate13);
      predicate1.and(predicate9);
      Predicate<Integer> predicate15 = predicate14.or(predicate4);
      Predicate<Object> predicate16 = predicate11.and(predicate1);
      predicate14.negate();
      Object object1 = new Object();
      predicate15.negate();
      predicate3.or(predicate16);
      byte[] byteArray0 = new byte[7];
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-823L), (long) (byte) (-112));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -824 .. -113 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate2.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      predicate1.or(predicate3);
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      Predicate<Object> predicate10 = predicate9.and(predicate3);
      Predicate<Object> predicate11 = predicate10.negate();
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)8);
      Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate12 = predicate4.negate();
      predicate7.or(predicate12);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate13 = predicate10.and(predicate9);
      predicate2.or(predicate13);
      predicate7.test(object1);
      Predicate<Object> predicate14 = predicate11.and(predicate10);
      Object object2 = new Object();
      predicate2.negate();
      predicate3.or(predicate14);
      predicate6.test(object1);
      predicate3.and(predicate10);
      predicate7.negate();
      predicate12.and(predicate3);
      predicate13.or(predicate11);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9836225007577806
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)18}, byteArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate8);
      Predicate<Object> predicate14 = predicate10.and(predicate0);
      Predicate<Object> predicate15 = predicate6.and(predicate14);
      predicate7.or(predicate15);
      predicate4.or(predicate13);
      predicate12.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate16 = Predicate.isEqual(object2);
      predicate16.and(predicate7);
      predicate16.or(predicate9);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)20);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      int int0 = new Byte((byte) (-124));
      byteArray0[1] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte byte0 = (byte) (-76);
      defaultNucleotideCodec0.isGap(byteArray0, 201326592);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.toArray();
      linkedList0.poll();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) listIterator0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1585));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate8.or(predicate4);
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      predicate7.negate();
      predicate3.and(predicate8);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate13 = Predicate.isEqual(object2);
      predicate13.and(predicate7);
      predicate13.or(predicate9);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(3635L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Integer> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      predicate5.test(predicate0);
      predicate0.test(predicate2);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate0.and(predicate4);
      predicate0.or(predicate2);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      predicate0.and(predicate2);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate9 = predicate5.negate();
      Object object1 = new Object();
      Predicate<Object> predicate10 = predicate3.negate();
      predicate6.or(predicate10);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate7.and(predicate8);
      Predicate<Integer> predicate12 = predicate1.or(predicate11);
      Integer integer0 = new Integer((-5351));
      Predicate.isEqual((Object) integer0);
      predicate6.test(object1);
      predicate12.negate();
      Predicate<Object> predicate13 = predicate9.and(predicate0);
      predicate12.negate();
      predicate12.negate();
      predicate2.or(predicate13);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      Range range0 = Range.of((long) (byte)11);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      predicate1.or(predicate3);
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      Predicate<Object> predicate10 = predicate9.and(predicate3);
      Predicate<Object> predicate11 = predicate10.negate();
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)8);
      Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate12 = predicate4.negate();
      predicate7.or(predicate12);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate13 = predicate10.and(predicate9);
      predicate2.or(predicate13);
      predicate7.test(object1);
      Predicate<Object> predicate14 = predicate11.and(predicate10);
      Object object2 = new Object();
      predicate2.negate();
      predicate3.or(predicate14);
      predicate6.test(object1);
      predicate3.and(predicate10);
      predicate7.negate();
      predicate12.and(predicate3);
      predicate13.or(predicate11);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4206856081320836
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1073741824);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.decode(byteArray0, 0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.toString(byteArray0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-", string0);
      
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-14);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertEquals(1, list0.size());
      
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte) (-14));
      assertEquals(0, int0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertEquals((-234881024L), long0);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-14);
      byteArray2[1] = (byte) (-14);
      byteArray2[2] = (byte) (-14);
      byteArray2[3] = (byte) (-14);
      byteArray2[4] = (byte)36;
      byteArray2[5] = (byte) (-14);
      byteArray2[6] = (byte) (-14);
      byteArray2[7] = (byte) (-14);
      byteArray2[8] = (byte) (-14);
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, (byte) (-14));
      assertEquals((-14), int1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.821353328953235
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-422));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-51);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte) (-51);
      byteArray1[5] = (byte) (-51);
      byteArray1[6] = (byte) (-51);
      defaultNucleotideCodec0.iterator(byteArray1);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.141329928602007
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.encode(nucleotide0);
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      Integer integer0 = new Integer(1);
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, 1);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGapOffsets(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.getUngappedLength(byteArray0);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec5.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.517062636442278
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1073741824);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-", string0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 0);
      assertEquals(Nucleotide.Gap, nucleotide1);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-14);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, list0.size());
      
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte) (-14));
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertEquals((-234881024L), long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.107694069091043
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byte byte0 = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)71;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1795162112);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 13);
      defaultNucleotideCodec2.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.encode(8, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0570128495250297
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3734));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1641);
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)31;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Thymine, nucleotide0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 2L);
      assertEquals(Nucleotide.Adenine, nucleotide1);
      
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3177);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-94);
      defaultNucleotideCodec1.decode(byteArray0, 1L);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.417715857393759
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate5 = Predicate.isEqual(object1);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate5);
      Predicate<Object> predicate9 = predicate2.and(predicate3);
      predicate0.or(predicate6);
      Object object2 = new Object();
      Predicate.isEqual(object2);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate5.and(predicate10);
      Predicate.isEqual((Object) null);
      predicate0.negate();
      Predicate<Object> predicate11 = predicate3.and(predicate6);
      Predicate<Object> predicate12 = predicate8.and(predicate0);
      predicate5.and(predicate12);
      predicate4.or(predicate11);
      Predicate<Object> predicate13 = predicate10.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object3 = new Object();
      predicate8.test(predicate4);
      predicate13.test(predicate6);
      predicate10.and(predicate1);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.and(predicate4);
      predicate14.or(predicate7);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      Predicate<Object> predicate9 = predicate1.or(predicate3);
      Predicate<Object> predicate10 = predicate8.and(predicate0);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate11 = predicate7.and(predicate8);
      predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate12 = predicate6.negate();
      Object object1 = new Object();
      Predicate<Object> predicate13 = predicate10.negate();
      predicate7.or(predicate13);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate14 = predicate8.and(predicate11);
      Predicate<Integer> predicate15 = predicate2.or(predicate14);
      predicate7.test(object1);
      predicate1.and(predicate9);
      Predicate<Integer> predicate16 = predicate15.or(predicate4);
      Predicate<Object> predicate17 = predicate12.and(predicate1);
      predicate15.negate();
      Object object2 = new Object();
      predicate16.negate();
      predicate3.or(predicate17);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.622204027249963
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      predicate4.test(predicate1);
      predicate0.test(predicate2);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      predicate1.or(predicate2);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate2);
      Predicate<Object> predicate9 = predicate8.negate();
      Byte byte0 = new Byte((byte)20);
      Object object1 = new Object();
      predicate5.test(object1);
      Predicate<Object> predicate10 = predicate9.and(predicate8);
      Object object2 = new Object();
      Predicate.isEqual(object2);
      predicate2.or(predicate10);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)20;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-483));
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)88;
      byteArray1[4] = (byte)88;
      byteArray1[5] = (byte)11;
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 2668);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3778475412793196
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-76);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-76));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.545463827449269
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec1.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray1);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray3, 1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, 13);
      defaultNucleotideCodec3.isGap(byteArray0, (-2534));
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator1 = defaultNucleotideCodec5.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.encode(1, iterator0);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.getGappedOffsetFor(byteArray3, 1);
      defaultNucleotideCodec4.toString(byteArray3);
      defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.encode(0, iterator1);
      defaultNucleotideCodec7.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      predicate0.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate1.and(predicate5);
      Predicate<Object> predicate8 = predicate1.or(predicate3);
      predicate7.and(predicate0);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate6.and(predicate7);
      predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate10 = predicate0.negate();
      predicate3.test(predicate7);
      Predicate<Object> predicate11 = predicate4.negate();
      predicate6.or(predicate11);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Integer> predicate13 = predicate2.or(predicate12);
      predicate1.and(predicate8);
      Predicate<Integer> predicate14 = predicate13.or(predicate4);
      Predicate<Object> predicate15 = predicate10.and(predicate1);
      predicate13.negate();
      Object object1 = new Object();
      predicate14.negate();
      predicate3.or(predicate15);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte) (-112));
      assertFalse(boolean0);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-112));
      assertEquals((-112), int0);
      
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-112));
      assertEquals(0, int1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate3.and(predicate8);
      Object object2 = new Object();
      Predicate.isEqual(object2);
      Predicate<Object> predicate13 = predicate10.and(predicate0);
      predicate6.and(predicate13);
      predicate8.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object3 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate15 = predicate14.negate();
      predicate15.and(predicate7);
      predicate15.or(predicate9);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 16579836);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(15, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      predicate1.or(predicate3);
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      Predicate<Object> predicate10 = predicate9.and(predicate3);
      Predicate<Object> predicate11 = predicate10.negate();
      Object object1 = new Object();
      Predicate<Object> predicate12 = predicate4.negate();
      predicate7.or(predicate12);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate13 = predicate10.and(predicate9);
      predicate2.or(predicate13);
      predicate7.test(object1);
      Predicate<Object> predicate14 = predicate11.and(predicate10);
      Object object2 = new Object();
      predicate2.negate();
      predicate3.or(predicate14);
      predicate6.test(object1);
      predicate3.and(predicate10);
      predicate7.negate();
      predicate12.and(predicate3);
      predicate13.or(predicate11);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 628);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(930, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate8);
      Predicate<Object> predicate14 = predicate10.and(predicate0);
      predicate6.and(predicate14);
      predicate4.or(predicate13);
      predicate12.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      predicate15.and(predicate7);
      predicate15.or(predicate9);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-33007616L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -33007616
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      predicate3.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate6);
      Predicate<Object> predicate10 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate6.and(predicate11);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate12 = predicate3.and(predicate8);
      Predicate<Object> predicate13 = predicate9.and(predicate0);
      predicate6.and(predicate13);
      predicate4.or(predicate12);
      predicate11.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate9.test(predicate4);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5096736624473883
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      predicate1.or(predicate3);
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      Predicate<Object> predicate10 = predicate9.and(predicate3);
      Predicate<Object> predicate11 = predicate10.negate();
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)8);
      Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate12 = predicate4.negate();
      predicate7.or(predicate12);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate13 = predicate10.and(predicate9);
      predicate2.or(predicate13);
      predicate7.test(object1);
      Predicate<Object> predicate14 = predicate11.and(predicate10);
      Object object2 = new Object();
      predicate2.negate();
      predicate3.or(predicate14);
      predicate6.test(object1);
      predicate3.and(predicate10);
      predicate7.negate();
      predicate12.and(predicate3);
      predicate13.or(predicate11);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)4;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 336855060);
      assertEquals(336855060, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      List<Integer> list0 = new LinkedList<Integer>();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte) (-70);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate8);
      Predicate<Object> predicate14 = predicate10.and(predicate0);
      predicate6.and(predicate14);
      predicate4.or(predicate13);
      predicate12.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      predicate15.and(predicate7);
      predicate15.or(predicate9);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate6.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      Predicate<Object> predicate9 = predicate1.or(predicate3);
      Predicate<Object> predicate10 = predicate8.and(predicate0);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate11 = predicate7.and(predicate8);
      predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate12 = predicate6.negate();
      Object object1 = new Object();
      Predicate<Object> predicate13 = predicate10.negate();
      predicate7.or(predicate13);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate14 = predicate8.and(predicate11);
      Predicate<Integer> predicate15 = predicate2.or(predicate14);
      predicate7.test(object1);
      predicate1.and(predicate9);
      Predicate<Integer> predicate16 = predicate15.or(predicate4);
      Predicate<Object> predicate17 = predicate12.and(predicate1);
      predicate15.negate();
      Object object2 = new Object();
      predicate16.negate();
      predicate3.or(predicate17);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.529551924117843
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate6);
      Predicate<Object> predicate11 = predicate2.and(predicate3);
      predicate0.or(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate6.and(predicate12);
      Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate8);
      Predicate<Object> predicate14 = predicate10.and(predicate0);
      predicate6.and(predicate14);
      predicate4.or(predicate13);
      predicate12.and(predicate4);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      predicate10.test(predicate4);
      predicate12.and(predicate1);
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      predicate15.and(predicate7);
      predicate15.or(predicate9);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-41);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-41);
      Byte byte0 = new Byte((byte) (-41));
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)42;
      byte byte1 = (byte)15;
      byteArray0[4] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.4026604904230435
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      predicate5.test(predicate1);
      predicate0.test(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate1.and(predicate0);
      predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate8.and(predicate3);
      Predicate<Object> predicate10 = predicate9.negate();
      Byte byte0 = new Byte((byte)20);
      Object object1 = new Object();
      predicate9.and(predicate8);
      predicate6.test(object1);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      Object object2 = new Object();
      predicate2.negate();
      predicate3.or(predicate11);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)20;
      byteArray0[0] = (byte)88;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-483));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Byte byte0 = new Byte((byte)20);
      Object object2 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)20);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
