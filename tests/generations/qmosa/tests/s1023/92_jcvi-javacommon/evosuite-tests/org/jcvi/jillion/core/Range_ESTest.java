/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:49:29 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6137810687533514
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range0.endsBefore(range0);
      range0.intersection(range1);
      Range.of(9223372036854774451L, 9223372036854774451L);
      Range.of(9223372036854774451L);
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range2);
      Long long0 = new Long(9223372036854775807L);
      assertEquals(9223372036854775807L, (long)long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7447472895848426
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of(510L);
      Range range1 = Range.ofLength(2491L);
      range0.intersection(range1);
      Range range2 = Range.of(510L, 9223372036854774450L);
      range0.intersection(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 510L, 9223372036854774450L);
      Object object4 = new Object();
      Long long0 = new Long(395L);
      Long long1 = new Long((-9223372036854775800L));
      range2.equals(range3);
      Long long2 = new Long(2491L);
      assertEquals(2491L, (long)long2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(1653L);
      Object object0 = new Object();
      Range range0 = Range.of(1653L, 9223372036854775807L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(4294967295L);
      range0.equals(object3);
      Long long2 = new Long(1101L);
      assertFalse(long2.equals((Object)long0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.629206953760551
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      range2.intersection(range0);
      Range range3 = Range.of(9223372036854774451L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(range3);
      Long long0 = new Long(9223372036854775807L);
      assertEquals(9223372036854775807L, (long)long0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6138717012386237
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      range2.intersection(range0);
      Range range3 = Range.of(9223372036854774451L);
      Range range4 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range4.equals(range3);
      Long long0 = new Long(9223372036854774451L);
      assertEquals(9223372036854774451L, (long)long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6033400481319067
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      Range range0 = Range.of((-1L), (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of((-1L));
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.994438254548675
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      range_Builder1.copy();
      range_Builder0.expandBegin(2743L);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range range1 = Range.of((-1L), (-1L));
      range1.equals(range_Builder0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.ofLength(2743L);
      Range range3 = Range.of(2628L, 2743L);
      range0.equals(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.intersection(range1);
      Long long0 = new Long(214L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5926202705270596
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-3331L));
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Long long0 = new Long(1287L);
      assertEquals(1287L, (long)long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.874628709636869
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of(9223372036854775277L);
      range1.endsBefore(range0);
      range1.spliterator();
      Range.ofLength(10172L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 1563L;
      Long long1 = new Long(1563L);
      long long2 = (-32768L);
      Long long3 = new Long((-32768L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775277 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.624681629780872
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      range1.intersection(range0);
      range1.spliterator();
      Range range2 = Range.of(57L, 127L);
      Object object0 = new Object();
      Range range3 = Range.of(127L);
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(range3);
      Long long0 = new Long(2350L);
      assertEquals(2350L, (long)long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.880531657764289
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      long long0 = new Long(127L);
      Range range2 = Range.ofLength(127L);
      Range range3 = Range.of((-3335L), (-3335L));
      boolean boolean0 = range3.endsBefore(range1);
      assertTrue(boolean0);
      
      boolean boolean1 = range2.startsBefore(range3);
      assertFalse(boolean1);
      
      range1.spliterator();
      Range range4 = Range.ofLength(57L);
      Range.of(127L);
      range0.equals(range4);
      Range range5 = range4.intersection(range2);
      assertFalse(range2.equals((Object)range4));
      assertNotSame(range5, range2);
      assertSame(range5, range4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.100235681481069
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(2183L, 4294967320L);
      Range.of(2749L, 2816L);
      Range range1 = Range.ofLength(264L);
      Range range2 = Range.of(976L, 4294967320L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      List<Range> list0 = range0.complement(range2);
      range1.complementFrom(list0);
      Range range3 = Range.of(4294967320L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2749L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range range4 = Range.ofLength(2749L);
      Range.of(4294967320L, 9223372036854773065L);
      Range.CoordinateSystem.values();
      range3.intersection(range4);
      // Undeclared exception!
      try { 
        Range.of(2816L, 2749L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8157136398944624
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      range0.equals(range1);
      Object object1 = new Object();
      range2.spliterator();
      Range.of((-2147483648L));
      Object object2 = new Object();
      Object object3 = new Object();
      String string0 = "cu";
      // Undeclared exception!
      try { 
        Range.of(1653L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.458352183621367
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long(1653L);
      Object object0 = new Object();
      Range range0 = Range.of(255L, 9223372036854775807L);
      Object object1 = new Object();
      Object object2 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object3 = new Object();
      Long long1 = new Long(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long2 = new Long(255L);
      Long long3 = new Long(394L);
      Long long4 = new Long(4294967295L);
      assertEquals(4294967295L, (long)long4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6960163297189914
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      Long long0 = new Long((-1L));
      range0.equals(long0);
      Range range1 = Range.of((-1312L), 2147483647L);
      range0.intersection(range1);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.771634381143101
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      range2.equals(range_CoordinateSystem0);
      Object object1 = new Object();
      range2.equals(range_CoordinateSystem0);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-1052L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1052L), 5362L);
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals(range0);
      Long long0 = new Long(1256L);
      assertEquals(1256L, (long)long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7174878815849617
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-2505L), (-2505L));
      Range range1 = Range.of((-274L));
      Range.of((-274L));
      Object object0 = new Object();
      range0.equals(range1);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(976L);
      Long long0 = new Long(976L);
      range1.equals(range0);
      Long long1 = new Long((-4395L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4002502977081126
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.of(127L);
      Range range0 = Range.ofLength(9223372036854775373L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(321L);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(3543L);
      Object object4 = new Object();
      range0.equals((Object) null);
      Long long1 = new Long(32767L);
      assertEquals(32767L, (long)long1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7717478984680044
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 65525L, 65525L);
      Range range1 = Range.ofLength(2495L);
      Range.Builder range_Builder3 = new Range.Builder(65525L);
      Range range2 = range_Builder2.build();
      range_Builder2.build();
      Object object0 = new Object();
      range_Builder2.shift(65525L);
      Object object1 = new Object();
      range_Builder2.build();
      Range range3 = range1.intersection(range2);
      range3.complement(range0);
      range2.equals(range_Builder1);
      Long long0 = new Long(65525L);
      assertEquals(65525L, (long)long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.081080943563459
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 2165L;
      Range range0 = Range.of(2165L, 4294967309L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2165L, 4294967309L);
      range0.equals(range1);
      range0.spliterator();
      range1.complement(range0);
      range0.spliterator();
      Range.of((-3243L), (-3243L));
      long long1 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-3448L), 4294967295L);
      range_Builder0.expandEnd((-906L));
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775292L, 9223372036854775292L);
      Range.ofLength(2164L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4269932545609474
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-815L), (-815L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.of(2476L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.000022049839312
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(32767L, 32767L);
      List<Range> list0 = range0.split(1894L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range range1 = Range.of(32767L, 32767L);
      Range range2 = Range.of(range_CoordinateSystem0, (-5035L), 32767L);
      range0.complement(range1);
      range2.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.parseRange(">u", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >u into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5972371055830243
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(510L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775267L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775267L, (-2042L));
      Range.ofLength(9223372036854775267L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2043 would make range [9223372036854775267 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8191292355084836
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(510L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.asRange();
      Range range3 = range2.intersection(range1);
      Object object0 = new Object();
      boolean boolean0 = range2.equals(object0);
      assertFalse(boolean0);
      
      Range range4 = Range.ofLength(0L);
      range2.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2254L));
      Range.ofLength(0L);
      Object object1 = new Object();
      Long long0 = new Long(269L);
      range3.equals(range0);
      Long long1 = new Long(2147483647L);
      Long long2 = new Long(510L);
      range4.complementFrom(linkedList0);
      assertTrue(range4.isEmpty());
      assertSame(range4, range3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8566950836722453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-273L), 127L);
      Range.of(633L, 4294967295L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("value can not be <0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.value can not be <0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.056215573659859
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372034707292183L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.spliterator();
      Range.ofLength(0L);
      Object object1 = new Object();
      Range range1 = Range.of((-9223372036854775808L));
      Object object2 = new Object();
      long long0 = 1042L;
      Range range2 = Range.of(1042L, 1042L);
      List<Range> list0 = range0.complement(range2);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372034707292183 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.728621594281975
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.of((-2505L), (-2505L));
      Range.ofLength(1583L);
      Range.of((-32768L), (-290L));
      long long0 = 373L;
      Range.of(1L, 975L);
      Range.of(255L, 2159L);
      Range.ofLength(1L);
      Range.of((-935L), 32767L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.of((-3814L), (-452L));
      // Undeclared exception!
      try { 
        Range.ofLength((-3356L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.198110543333192
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(65548L, 65548L);
      Range range2 = Range.of(435L, 65548L);
      range2.getLength();
      range2.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      linkedList0.parallelStream();
      Range.of(0L, 2198L);
      Range.ofLength(0L);
      Object object0 = new Object();
      Long long0 = new Long(2198L);
      Object object1 = new Object();
      range0.equals((Object) null);
      Long long1 = new Long(4167L);
      Long long2 = new Long((-300L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-3786L), 2198L);
      range2.asRange();
      range3.toString();
      range3.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -3786 .. 2198 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7509137388078946
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.endsBefore(range0);
      range1.isSubRangeOf(range0);
      range0.spliterator();
      Range range2 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      boolean boolean0 = range1.intersects(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range2.endsBefore(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range3 = range2.intersection(range1);
      Long long0 = new Long((-2654L));
      long long1 = range3.getLength();
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertEquals(0L, long1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2007670511016713
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(4L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.009478954890127
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(2183L, 4294967320L);
      Range range1 = Range.of(2749L, 2816L);
      Range range2 = Range.ofLength(255L);
      Range range3 = Range.of(976L, 4294967320L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range2.spliterator();
      Range range4 = range0.intersection(range0);
      List<Range> list0 = range0.complement(range3);
      range2.complementFrom(list0);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(2183L);
      Object object0 = new Object();
      Object object1 = new Object();
      range4.equals((Object) null);
      Long long0 = new Long(1586L);
      assertEquals(1586L, (long)long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5268324265975086
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long(1653L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals(long0);
      long long2 = 1L;
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2742L, 1653L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.440534963938307
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775289L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(395L);
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(9223372036854774450L);
      range0.equals(long1);
      Long long2 = new Long(9223372036854774450L);
      Long long3 = new Long(9223372036854775289L);
      assertFalse(long3.equals((Object)long2));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5741452796038806
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 2165L;
      long long1 = 4294967309L;
      Range range0 = Range.of(2165L, 4294967309L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2165L, 4294967309L);
      range1.intersects(range1);
      range0.equals(range1);
      range0.spliterator();
      range0.spliterator();
      long long2 = (-3783L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3783L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.60379496896026
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = (-2505L);
      Range range0 = Range.of((-2505L), (-2505L));
      Range range1 = Range.of((-274L));
      Range.of((-274L));
      Object object0 = new Object();
      range0.equals(range1);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-274L), (-274L));
      long long1 = 9223372036854775277L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775277L, (-2505L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2505 would make range [9223372036854775277 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.374225142924556
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = 510L;
      Object object0 = new Object();
      range0.equals((Object) null);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long2 = 3712L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3712L, 510L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.656673284737173
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      Range range2 = range1.intersection(range0);
      range1.spliterator();
      Range.of(57L, 127L);
      range1.equals(range2);
      Long long0 = new Long((-943L));
      Long long1 = new Long(343L);
      Object object0 = new Object();
      Long long2 = new Long(9223372036854775540L);
      assertFalse(long2.equals((Object)long0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.8642011734536625
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      Range.of(57L, 218L);
      Object object0 = new Object();
      Range.of(1237L);
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range0);
      Long long0 = new Long((-32768L));
      assertEquals((-32768L), (long)long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.338596728816859
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long(1653L);
      Object object0 = new Object();
      Range range0 = Range.of(255L, 9223372036854775807L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(4294967295L);
      Object object4 = new Object();
      range0.equals(object4);
      Long long2 = new Long(1101L);
      assertEquals(1101L, (long)long2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6714251517301486
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 65548L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65548L, 65548L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(65548L, 65548L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      linkedList0.parallelStream();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range range1 = Range.of(3653L, 65548L);
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.215074642957456
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 452L, 65535L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1522L, 65535L);
      Range.ofLength(255L);
      Range range2 = Range.of((-1L), 793L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      List<Range> list0 = range2.split(452L);
      range0.complementFrom(list0);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5857557609818
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-2505L), (-2505L));
      Range.of((-290L));
      Object object0 = new Object();
      range0.equals(range0);
      range0.spliterator();
      long long0 = 9223372036854775277L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775277L, (-2505L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2505 would make range [9223372036854775277 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.8980975959466884
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      boolean boolean0 = range1.endsBefore(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(9223372036854774451L);
      range0.endsBefore(range4);
      boolean boolean1 = range2.startsBefore(range4);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range3.complementFrom(linkedList0);
      range2.complementFrom(list0);
      List<Range> list1 = range4.complement(range3);
      List<Range> list2 = range4.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list2.contains(range2));
      //  // Unstable assertion: assertTrue(list2.contains(range1));
      
      List<Range> list3 = range0.complement(range4);
      //  // Unstable assertion: assertTrue(list3.contains(range0));
      
      Range range5 = range0.intersection(range4);
      //  // Unstable assertion: assertSame(range5, range3);
      
      Range range6 = Range.ofLength(0L);
      //  // Unstable assertion: assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.231631516427302
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(9223372036854774451L);
      boolean boolean0 = range0.endsBefore(range4);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range2.startsBefore(range4);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Range> consumer0 = (Consumer<Range>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      List<Range> list0 = range3.complementFrom(linkedList0);
      range0.intersects(range3);
      boolean boolean1 = range2.intersects(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, 1287L, 2873L);
      boolean boolean2 = range2.intersects(range5);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, 192L, 2311L);
      List<Range> list1 = range0.complement(range3);
      //  // Unstable assertion: assertFalse(list1.contains(range2));
      
      range4.complementFrom(list0);
      //  // Unstable assertion: assertSame(range3, range2);
      
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range.of((-1L), 4294967295L);
      Range range6 = Range.ofLength(65579L);
      Range range7 = range6.intersection(range4);
      range7.intersection(range6);
      //  // Unstable assertion: assertNotSame(range4, range2);
      //  // Unstable assertion: assertNotSame(range4, range3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5978659242866287
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 435L;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(435L, 435L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("'M7L84mjL?2fuhdo(L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.'M7L84mjL?2fuhdo(L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.588266014388034
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = 510L;
      Range range1 = Range.of(510L);
      range0.intersection(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.ofLength(0L);
      range2.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals((Object) null);
      range1.spliterator();
      Range.ofLength(0L);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.873871185872723
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      long long0 = (-1546L);
      Range range1 = Range.of((-1546L));
      range0.intersection(range1);
      Object object0 = new Object();
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.755238822786768
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775289L);
      Object object0 = new Object();
      range0.spliterator();
      Object object1 = new Object();
      Range range1 = Range.of(9223372034707292183L);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals((Object) null);
      Long long0 = new Long(4176L);
      assertEquals(4176L, (long)long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.043587477372004
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(2147483624L, 2147483624L);
      Iterator<Long> iterator0 = range0.iterator();
      range0.equals(iterator0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(128L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147483625L, 2147483647L);
      List<Range> list2 = range2.complement(range0);
      Range range3 = Range.ofLength(2147483624L);
      range3.complementFrom(list2);
      range1.split(255L);
      range0.iterator();
      Range.ofLength(317L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 128L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.707972078861534
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(2165L, 4294967320L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2165L, 2147483647L);
      range1.intersects(range0);
      range1.intersects(range1);
      range0.equals(range1);
      range0.intersects(range1);
      range1.spliterator();
      range0.intersection(range1);
      Range.of(1L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.utilCaches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.utilCaches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.877738912097889
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(3709L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      range0.spliterator();
      Range range1 = Range.ofLength(2147483647L);
      Object object1 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long(701L);
      Range range2 = Range.of((-1181L), 3709L);
      boolean boolean2 = range0.equals(range2);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.054547467440229
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2165L, 4294967309L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2165L, 4294967309L);
      range1.intersects(range1);
      range1.equals(range_CoordinateSystem0);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 2147483647L);
      Range range2 = Range.ofLength(2165L);
      range2.complement(range0);
      Range.of((-1L), (-1L));
      Range.CoordinateSystem.values();
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.914361725215665
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.endsBefore(range0);
      range1.isSubRangeOf(range0);
      range0.spliterator();
      Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.startsBefore(range0);
      range1.spliterator();
      Range.ofLength(57L);
      Range.of((-52L));
      range1.equals("length must be >= 0");
      Long long0 = new Long(1268L);
      assertEquals(1268L, (long)long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.477216706018524
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2749L;
      Range.of(range_CoordinateSystem0, 2749L, 9223372036854773625L);
      long long1 = 2154L;
      long long2 = 2147483647L;
      Range.of(2154L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854773625L);
      linkedList0.parallelStream();
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 2154L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.588604020717485
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.endsBefore(range0);
      range1.isSubRangeOf(range0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-9223372036854775551L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1731L, (-9223372036854775551L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775552 would make range [1731 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.533075418947981
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 2495L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(264L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(2495L);
      long long1 = 9223372036854774450L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854774450L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774450 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5140647977352653
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 431L;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(431L, 65579L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.797751029572271
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = (-863L);
      long long2 = 9223372036854772423L;
      Range range1 = Range.of((-863L), 9223372036854772423L);
      long long3 = 1L;
      range1.split(long3);
      range0.complement(range1);
      long long4 = (-283L);
      range_Builder0.contractBegin(long4);
      String string0 = "";
      Range.parseRange(string0, range_CoordinateSystem0);
      Range range2 = Range.of(range_CoordinateSystem0, long1, long1);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long5 = 1227L;
      Range.of(range_CoordinateSystem1, long2, long5);
      long long6 = 9223372036854743041L;
      long long7 = 1L;
      Range.of(long6, long7);
      Range.ofLength(long0);
      range0.intersection(range2);
      String string1 = null;
      Range.CoordinateSystem.valueOf(string1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.1358734283809016
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(2495L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.expandBegin(2495L);
      Range range1 = Range.ofLength(65525L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(2495L);
      Range range3 = Range.of((-128L));
      range1.intersects(range3);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-215L), 641L);
      Range range5 = Range.ofLength(2495L);
      List<Range> list0 = range4.complement(range5);
      range2.complementFrom(list0);
      range2.intersects(range5);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      range0.intersects(range3);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, (-215L), 400L);
      range0.complement(range3);
      range0.complementFrom(list0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(2311L, (-573L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6359714856044443
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.of(9223372034707292183L);
      Object object0 = new Object();
      Range range0 = Range.of((-128L), 127L);
      range0.spliterator();
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1527301734434996
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(127L);
      Long long0 = new Long(127L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Long long1 = new Long(4176L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.808787021750977
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.of(127L);
      Range range2 = range1.intersection(range0);
      range1.spliterator();
      Range.of(57L, 127L);
      Object object0 = new Object();
      Range range3 = Range.ofLength(57L);
      Long long0 = new Long(127L);
      Range range4 = range3.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range5 = Range.of(0L);
      boolean boolean0 = range2.intersects(range4);
      assertFalse(range2.isEmpty());
      assertTrue(range4.isEmpty());
      
      Range.of(127L, 1916L);
      boolean boolean1 = range0.intersects(range5);
      assertTrue(boolean1 == boolean0);
      assertFalse(range5.isEmpty());
      assertSame(range0, range2);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.1638965626144175
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(2495L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.expandBegin(2495L);
      Range range1 = Range.ofLength(65525L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(2495L);
      Range range3 = Range.of((-128L));
      range1.intersects(range3);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-215L), 641L);
      Range range5 = Range.ofLength(2495L);
      List<Range> list0 = range4.complement(range5);
      List<Range> list1 = range2.complementFrom(list0);
      range1.endsBefore(range5);
      range1.complementFrom(list1);
      range2.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range6 = Range.of(range_CoordinateSystem0, (-215L), 2311L);
      range5.complement(range6);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.758368564432397
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9223372036854775277L, 9223372036854775277L);
      Range range1 = Range.of(435L, 435L);
      range1.intersection(range0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.665570406510078
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.ofLength(0L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-815L);
      Object object0 = new Object();
      Range range0 = Range.of((-815L));
      range0.getLength();
      long long1 = (-273L);
      // Undeclared exception!
      try { 
        Range.of((-273L), (-815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7406307253315974
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.ofLength(2147483646L);
      Range range1 = Range.of(127L);
      Long long1 = new Long(2147483646L);
      range0.equals(long1);
      range1.spliterator();
      Range.ofLength(2147483646L);
      Range.of(127L, 2147483646L);
      Range.CoordinateSystem.values();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.6227385970394534
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(1653L);
      Range.Builder range_Builder2 = new Range.Builder(17L, 1653L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange("value can not be <0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse value can not be <0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.9659890756692215
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-32768L), (-32768L));
      Range.of(2498L, 9223372036854775807L);
      Range range2 = Range.ofLength(2498L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.of(268L, 2498L);
      Range.of(255L);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      assertNotSame(range2, range0);
      
      Range.CoordinateSystem.values();
      Long long0 = new Long((-3356L));
      Range range4 = Range.of(4294967295L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.8608212315616632
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(65548L, 65548L);
      Range range1 = Range.of(435L, 65548L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      linkedList0.parallelStream();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range range2 = Range.of(435L, 435L);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), (-32768L));
      Range.of(1299L, 65548L);
      Range.ofLength(2089L);
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.431042449115447
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2445L));
      range_Builder1.contractEnd((-2445L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range range0 = Range.of(1210L, 9223372036854775807L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.7463775371622177
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.of(127L);
      Range.of(127L);
      Range.of((-9223372036854775288L), 127L);
      Object object0 = new Object();
      Range.of(834L);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(1574L);
      Long long1 = new Long(9223372036854775807L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.8010113821368807
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775806L;
      Range range0 = Range.of(9223372036854775806L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
      range0.endsBefore(range1);
      Range range2 = Range.of((-3299L));
      range1.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      range0.intersects(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range1.complement(range2);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3299 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.376805972532326
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 2183L;
      Range range0 = Range.of(2183L, 4294967295L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.ofLength((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3897279928660753
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.ofLength(127L);
      // Undeclared exception!
      try { 
        Range.of(2410L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.of(431L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Long long2 = new Long(9223372036854775807L);
      Object object1 = new Object();
      Long long3 = new Long(431L);
      assertFalse(long3.equals((Object)long0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.686778520759257
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of(127L);
      Range range1 = Range.of((-2505L), (-2505L));
      range0.intersects(range1);
      long long1 = 65535L;
      Range.of(127L, 65535L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      // Undeclared exception!
      try { 
        Range.of(127L, (-274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.311421333856452
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(431L, 65579L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(9223372036854766138L);
      Long long1 = new Long(65579L);
      Long long2 = new Long((-225L));
      Object object0 = new Object();
      Long long3 = new Long(65535L);
      List<Range> list0 = range0.split(2310L);
      assertFalse(list0.contains(range0));
      assertEquals(29, list0.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.6605340718818162
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-815L);
      Range range0 = Range.of(range_CoordinateSystem0, (-815L), (-815L));
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.of((-815L));
      // Undeclared exception!
      try { 
        Range.of((-273L), (-815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3248135734013062
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range1.equals(range0);
      long long1 = 2443L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(2443L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.449247830367885
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = (-590L);
      Range range0 = Range.of((-590L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-590L), (-2695L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.326895299571161
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = (-2445L);
      long long1 = 1207L;
      Range.of(1207L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-2683L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2139L), (-2683L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.5658217608566845
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.429782810467801
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = 65548L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.split(9223372036854775292L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 9223372036854775292L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.738967600682729
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(431L, 65579L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-2545L), (-2545L));
      range0.intersection(range1);
      String string0 = "? '=(;h9Z";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("? '=(;h9Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.? '=(;h9Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.6648069305021744
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 65525L;
      long long1 = (-314L);
      Range range0 = Range.of((-314L));
      Long long2 = new Long(2495L);
      range0.equals(long2);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-358L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4239060353590345
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long(1653L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals(long0);
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2742L, 1653L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.1521629584690243
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(2147483647L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long(0L);
      Object object6 = new Object();
      Range range0 = Range.of(4294967295L);
      range0.equals((Object) null);
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=4.150482919673943
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 1408L);
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      range1.spliterator();
      Range.CoordinateSystem.values();
      range1.asRange();
      range1.complement(range1);
      range0.spliterator();
      Range.ofLength(825L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2650L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=4.235224841731589
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(65525L);
      Range range0 = Range.ofLength(2495L);
      Range range1 = Range.of((-2147480712L), 2147483647L);
      range0.complement(range1);
      range1.spliterator();
      Range range2 = Range.ofLength(2495L);
      Object object0 = new Object();
      Long long0 = new Long(65525L);
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long((-9223372036854775808L));
      Long long2 = new Long((-2147480712L));
      Range range3 = Range.ofLength(2147483647L);
      Range range4 = range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.parseRange("*2jsTK'1 -3,wSp", range_CoordinateSystem1);
      range4.intersects(range5);
      range4.isSubRangeOf(range5);
      Range range6 = range2.asRange();
      assertFalse(range6.equals((Object)range3));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.269887431532369
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = (-273L);
      long long1 = 4294967295L;
      Range range1 = Range.of((-273L), 4294967295L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range.parseRange("[ 127 .. 127 ]/0B", range_CoordinateSystem0);
      Range.ofLength(2933L);
      Range range2 = range0.intersection(range1);
      range2.isSubRangeOf(range1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.1968824804758986
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.7432577214216955
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.of((-1L), 9223372036854775289L);
      Object object0 = new Object();
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(9223372036854775289L, 9223372036854775807L);
      Range.CoordinateSystem.valueOf("RESIDUE_BASED");
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("b<=(%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.b<=(%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.538338992958964
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      long long0 = 2504L;
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = 624L;
      range_Builder0.expandEnd(624L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-13L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 624L, (-13L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7633383070541173
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(127L);
      Long long0 = new Long(127L);
      Object object0 = new Object();
      Range range1 = Range.of(1351L, 1351L);
      Object object1 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complement(range1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range2 = range1.intersection(range0);
      Range range3 = range2.intersection(range0);
      range3.getEnd();
      long long1 = range3.getEnd();
      assertEquals((-1L), long1);
      
      boolean boolean1 = range1.intersects(range2);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.777903813380102
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      range0.endsBefore(range0);
      Range range1 = range0.intersection(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(9223372036854774451L);
      range1.startsBefore(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      range0.intersects(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complement(range2);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      range0.intersection(range0);
      Long long0 = new Long(9223372036854774451L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.8110630983163234
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder0.expandBegin(2743L);
      range_Builder2.build();
      long long0 = (-1331L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range range1 = Range.of((-1L), (-1L));
      range1.equals(range_Builder0);
      long long1 = 2628L;
      long long2 = 17L;
      range_Builder2.expandEnd(17L);
      range_Builder3.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.679327940597965
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(510L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(0L);
      Object object2 = new Object();
      Range.of(763L, 4294967295L);
      Long long1 = new Long(4176L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5735483774780805
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long.valueOf(809L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.intersects(range0);
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2742L, 809L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.7551294372032533
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.of(2183L, 4294967320L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(2749L, 2816L);
      Range range0 = Range.ofLength(255L);
      Range.of(976L, 4294967320L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range0.spliterator();
      Range.of(range_CoordinateSystem0, 41L, 255L);
      Range.of(2816L, 4294967320L);
      Range.ofLength(4294967320L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.587640435720809
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 98L;
      long long1 = 2147483645L;
      Range.of(range_CoordinateSystem0, 98L, 2147483645L);
      Range.of((-4908L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.386182706029501
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2475L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.4767140746009706
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.toString();
      range_Builder0.expandEnd(0L);
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.896039794630342
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.ofLength(255L);
      Range.of((-32768L), (-32768L));
      Range range0 = Range.of((-105L), 4294967295L);
      range0.getEnd();
      Range.ofLength(4294967295L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range range1 = Range.of(636L, 2147483647L);
      Range.of((-2982L));
      range1.intersection(range0);
      Range.CoordinateSystem.values();
      Long long0 = new Long(2498L);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("< ki?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.< ki?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.583678955767852
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.iterator();
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd();
      long long0 = (-211L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3386L, (-211L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.625947153189186
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1043L;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 1043L);
      Range.of(0L, 127L);
      range0.intersection(range1);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3610113272635873
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("<oUOXe!VqGb8Ks2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.<oUOXe!VqGb8Ks2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.779143355652944
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(9223372036854774451L);
      range0.endsBefore(range4);
      range4.getBegin();
      range2.startsBefore(range4);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      range0.intersects(range3);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range4.complement(range3);
      range4.complementFrom(list0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 678L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2495L, 678L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1341519506138185
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      long long0 = 397L;
      Long long1 = new Long(397L);
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(range_CoordinateSystem0, 397L, 397L);
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("5o0K>}pSLoom}C!~(<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.5o0K>}pSLoom}C!~(<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = (-847L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-847L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.925287684047485
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 65525L, 65525L);
      Range range1 = Range.ofLength(2495L);
      Range.Builder range_Builder3 = new Range.Builder(65525L);
      Range range2 = range_Builder2.build();
      range_Builder2.build();
      Object object0 = new Object();
      range_Builder2.shift(65525L);
      Range.of((-1512L));
      range2.intersection(range1);
      Range.CoordinateSystem.values();
      Long long0 = new Long(9223372036854774334L);
      Range range3 = Range.of(9223372036854774334L);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.246304923773509
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-2299L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.782478971229295
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(9223372036854774451L);
      range0.endsBefore(range4);
      range2.startsBefore(range4);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range3.complementFrom(linkedList0);
      range2.complementFrom(list0);
      List<Range> list1 = range4.complement(range3);
      range4.complementFrom(list1);
      range1.iterator();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("ls@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.ls@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.326895299571161
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(633L, 4294967295L);
      range0.split(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Long long0 = new Long((-834L));
      assertEquals((-834L), (long)long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.3485722774030737
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      long long0 = (-546L);
      Range range0 = Range.of((-546L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Zero Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=4.017036484400072
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(127L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-273L), 127L);
      Range.of(633L, 4294967295L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Long long0 = new Long((-834L));
      assertEquals((-834L), (long)long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=4.25436657235076
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2183L, 4294967350L);
      Range range1 = Range.of(2749L, 2816L);
      Range range2 = Range.ofLength(264L);
      Range range3 = Range.of(976L, 4294967350L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      List<Range> list0 = range0.complement(range3);
      List<Range> list1 = range2.complementFrom(list0);
      Range range4 = Range.of(4294967350L);
      Range.of((-2147483647L));
      Range range5 = Range.of((-3247L));
      List<Range> list2 = range5.complementFrom(list0);
      range0.complementFrom(list2);
      range2.complement(range0);
      range2.complementFrom(list1);
      assertTrue(list0.isEmpty());
      
      List<Range> list3 = range1.complement(range4);
      assertTrue(list3.contains(range1));
      
      range1.intersection(range4);
      Range.ofLength(9223372036854775292L);
      Range range6 = range4.asRange();
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.9482742918030174
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(127L);
      long long0 = 4294967295L;
      Range range1 = Range.of((-273L), 4294967295L);
      range1.complement(range0);
      Range.of(127L, 127L);
      Range.ofLength(2933L);
      range0.intersection(range1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.of((-2535L));
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = 2183L;
      long long1 = 4294967295L;
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.5360336010106406
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 127L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(2743L, 2743L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.expandBegin(2743L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.9234059811314204
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-32768L), (-32768L));
      Range range2 = Range.of(2498L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range2.complementFrom(linkedList0);
      range1.complementFrom(list0);
      range1.intersects(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complement(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      range1.intersection(range0);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.2622243017037382
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.360538514024816
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.4102515762362717
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-361L), (-361L));
      range_Builder0.build();
      range_Builder0.contractEnd(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.598795653099569
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.parallelStream();
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Comparators range_Comparators1 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 435L, 435L);
      long long0 = (-1L);
      Range.of((-1L), 2147483647L);
      range1.intersection(range0);
      String string0 = "value can not be <0";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("value can not be <0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.value can not be <0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.5544407818453623
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "ZH9Q- 5`tNJ<FY";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-658L), (-1L));
      Range range1 = Range.of((-882L), 255L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.3026475684767798
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2794L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.403686537012589
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.of((-1L), 9223372036854775289L);
      Object object0 = new Object();
      long long0 = 834L;
      // Undeclared exception!
      try { 
        Range.of(834L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5423123180940257
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-292L));
      Range range1 = Range.of((-292L));
      Object object0 = new Object();
      range1.isEmpty();
      range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-292L), (-292L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.797847861283023
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range0.isEmpty();
      range0.intersection(range1);
      range1.endsBefore(range0);
      long long0 = 3342L;
      Range range2 = Range.of(0L, 537L);
      // Undeclared exception!
      try { 
        range2.split((-818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.7585513228400873
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.endsBefore(range0);
      range1.isSubRangeOf(range0);
      range0.spliterator();
      Range range2 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      range1.intersects(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.toString();
      range2.complement(range1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      range2.intersection(range1);
      Long long0 = new Long(527L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.7779767819466117
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(9223372036854774451L);
      range0.endsBefore(range4);
      boolean boolean0 = range2.startsBefore(range4);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      range0.intersects(range3);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range4.complement(range3);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      range0.intersection(range1);
      Long long0 = new Long(9223372036854774451L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854774451 .. 9223372036854774450 ]/0B", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.58054243294188
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      range_Builder1.copy();
      range_Builder0.expandBegin(2743L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1357L);
      Object object2 = new Object();
      range0.equals(long0);
      Long long1 = new Long(2743L);
      Long long2 = new Long(2470L);
      assertEquals(2470L, (long)long2);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.7132682500754024
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      range_Builder1.copy();
      range_Builder0.expandBegin(2743L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.ofLength(2743L);
      // Undeclared exception!
      try { 
        Range.of(2410L, (-765L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.6301424667521123
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.endsBefore(range0);
      range0.isSubRangeOf(range0);
      range0.spliterator();
      Range range1 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range1.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.590844594610136
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(9223372036854774322L, 9223372036854774322L);
      Range range1 = Range.of(4L);
      range0.endsBefore(range1);
      range0.isSubRangeOf(range1);
      long long0 = 623L;
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of(638L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.6455747875491156
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = 9223372036854774451L;
      Range range0 = Range.ofLength(9223372036854774451L);
      Range range1 = Range.of(9223372036854774451L);
      range1.endsBefore(range0);
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      range0.isSubRangeOf(range1);
      range0.spliterator();
      Range.ofLength(9223372036854774451L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774451L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.408661043467654
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(127L);
      Long long0 = new Long(127L);
      Long long1 = new Long(239L);
      range0.equals("}1!");
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-1L), 9223372036854775681L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6478963543943985
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 65525L;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 65525L, 65525L);
      Range range1 = Range.of(65525L, 65525L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=4.011692264575084
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 65525L, 65525L);
      Range range0 = Range.ofLength(2495L);
      Range.Builder range_Builder3 = new Range.Builder(65525L);
      range_Builder0.expandEnd(65525L);
      Range.Builder range_Builder4 = new Range.Builder(4294967295L, 4294967295L);
      Range range1 = Range.ofLength(9223372036854772423L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(range1));
      
      range1.asRange();
      Range.of(21L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      
      Range range3 = range_Builder1.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.438979798883769
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1653L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long(5L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long1 = new Long(76773081L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.219005012070249
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 53L, 53L);
      // Undeclared exception!
      try { 
        Range.of(128L, 53L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-383L), (-383L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.of((-2166L), 0L);
      Object object0 = new Object();
      Long long0 = new Long((-789L));
      assertEquals((-789L), (long)long0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.5002767629080385
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long(1653L);
      Object object0 = new Object();
      Range.of(255L, 9223372036854775807L);
      Object object1 = new Object();
      Range.of(1351L);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(1489L);
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
  }
}
