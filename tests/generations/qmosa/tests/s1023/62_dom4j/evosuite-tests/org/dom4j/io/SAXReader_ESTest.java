/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 07:48:23 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("07RxyNX7", "07RxyNX7");
      file0.toPath();
      File file1 = MockFile.createTempFile("$t7oRf\".yzkZ^(V%f", "$t7oRf\".yzkZ^(V%f", (File) null);
      file1.setExecutable(false, true);
      file1.setWritable(false, true);
      file1.mkdirs();
      file0.setExecutable(false, false);
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile(file1, "$t7oRf\".yzkZ^(V%f");
      file0.setWritable(false);
      file0.setExecutable(true, false);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("07RxyNX7");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("//tmp/DocumentFragment0/tmp/UWpx~,Kv0/tmp/http:/xml.org/sax/properties/declaration-handler0", "http://xml.org/sax/properties/lexical-handler");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", defaultDocumentFactory0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)99;
      MockFile mockFile0 = new MockFile("Z!1;1:|Tt[6", "//tmp/%iiOCj&NFf9HG7hCI0/tmp/>]0/>]");
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile("Z!1;1:|Tt[6", "//tmp/%iiOCj&NFf9HG7hCI0/tmp/>]0/>]");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler(xMLFilter0);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3537832766292515
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("07RxyNX7", "07RxyNX7");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/07Rxy\\NX7007Rxy\\NX7");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      file0.toPath();
      File file1 = MockFile.createTempFile("$t7oRf\".yzkZ^(V%f", "$t7oRf\".yzkZ^(V%f", (File) null);
      file1.setWritable(false, true);
      file1.mkdirs();
      file0.setExecutable(false, false);
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile(file1, "$t7oRf\".yzkZ^(V%f");
      file1.toURL();
      file0.setWritable(true);
      file0.setExecutable(true, false);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.setEncoding("#_.@");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"#_.@\". Nested exception: Invalid encoding name \"#_.@\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@28010cc Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      DefaultDocumentFactory.getInstance();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext3 = new SimpleVariableContext();
      simpleVariableContext1.setVariableValue("GK", "GK", (Object) defaultDocumentFactory0);
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext3);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      CharBuffer.allocate(92);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4189303209052606
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      String string0 = "/";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("/");
      sAXReader0.setDefaultHandler(dispatchHandler0);
      InputSource inputSource0 = new InputSource("/");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      inputSource0.setByteStream(sequenceInputStream0);
      sAXReader0.addHandler("|pEI+H2!{e&GZ", (ElementHandler) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          MockURL.getFtpExample();
          sAXReader0.setIncludeExternalDTDDeclarations(true);
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getCharacterStream();
      inputSource0.setByteStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 186);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 186);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)43;
      byteArray0[7] = (byte) (-99);
      inputSource0.getPublicId();
      byteArray0[4] = (byte)49;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-25), 186);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream1.markSupported();
      bufferedInputStream1.mark((byte)0);
      byteArrayInputStream0.reset();
      bufferedInputStream1.reset();
      bufferedInputStream1.close();
      inputSource0.setByteStream(bufferedInputStream0);
      bufferedInputStream1.mark(2);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getCharacterStream();
      inputSource0.setByteStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 186);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 186);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)43;
      byteArray0[7] = (byte) (-99);
      inputSource0.getPublicId();
      byteArray0[4] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)0;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      byteArray0[7] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-25), 186);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream1.markSupported();
      bufferedInputStream1.mark((byte)0);
      byteArrayInputStream0.reset();
      bufferedInputStream1.reset();
      inputSource0.setByteStream(bufferedInputStream0);
      bufferedInputStream1.mark(2);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      try { 
        sAXReader0.setXMLReaderClassName("org.dom4j.io.SAXReader$SAXEntityResolver");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class org.dom4j.io.SAXReader$SAXEntityResolver loaded but cannot be instantiated (no empty public constructor?)
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5345863065472094
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.error((SAXParseException) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setErrorHandler(defaultHandler0);
      String string0 = " of document ";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " of document ");
      sAXReader0.resetHandlers();
      String string1 = "org.dom4j.jaxb.JAXBReader$PruningElementHandler";
      try { 
        sAXReader0.read("org.dom4j.jaxb.JAXBReader$PruningElementHandler");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.dom4j.jaxb.JAXBReader$PruningElementHandler (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.dom4j.jaxb.JAXBReader$PruningElementHandler (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/$IGzf|v V(kd90(Zo");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_domrj/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_domrj/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      MockFile mockFile0 = new MockFile("//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0", "//home/ubuntu/termite/projects/62_domrj/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      mockFile0.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("$IGzf|v V(kd9", "//home/ubuntu/termite/projects/62_domrj/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)96;
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getSystemId();
      MockURL.getFileExample();
      sAXReader0.createXMLReader();
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.getXMLReader();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.isIgnoreComments();
      sAXReader0.isStripWhitespaceText();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '5';
      charArray0[2] = 'V';
      charArray0[3] = 'O';
      charArray0[4] = '%';
      charArray0[5] = 't';
      charArray0[6] = 'P';
      charArray0[7] = '/';
      xMLFilterImpl0.characters(charArray0, (-3139), (byte) (-23));
      xMLFilterImpl0.error((SAXParseException) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl3.getDTDHandler();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl1.endDocument();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getURI((byte) (-23));
      xMLFilterImpl1.setContentHandler(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3433732912203284
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      MockException mockException0 = new MockException("/");
      SAXParseException sAXParseException0 = new SAXParseException((String) null, (Locator) null, mockException0);
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl2);
      try { 
        sAXReader0.read((InputStream) null, "fl6e//");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.addHandler((String) null, (ElementHandler) null);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("PHgLF", "#w~.!@d%");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertFalse(defaultDocument0.isReadOnly());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[0] = (byte)99;
      byteArray0[3] = (byte) (-127);
      MockFile.createTempFile("07RxyNX7", "07RxyNX7");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("position");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo", ">G:fA PYFy");
      sAXReader_SAXEntityResolver0.resolveEntity(">G:fA PYFy", "|");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      try { 
        sAXReader0.setXMLReaderClassName("*~8js-");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class *~8js- not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      char[] charArray0 = new char[7];
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.characters(charArray0, (-1), (-3139));
      xMLFilterImpl0.error((SAXParseException) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl2.getDTDHandler();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl2.endDocument();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getURI((-3139));
      xMLFilterImpl3.startElement((String) null, "//tmp/tmp/>]0/>]0http:/xml.org/sax/properties/lexical-handler", "//tmp/tmp/>]0/>]0http:/xml.org/sax/properties/lexical-handler", attributes2Impl0);
      xMLFilterImpl4.setContentHandler(xMLFilterImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/>]0/>]0http:/xml.org/sax/properties/lexical-handler");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader((String) null);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      xMLFilterImpl1.skippedEntity(" : ");
      charArray0[1] = '{';
      xMLFilterImpl1.characters(charArray0, (-275), (-275));
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("(xB1 SZd0Ct*V");
      defaultHandler0.startPrefixMapping("(xB1 SZd0Ct*V", "substring() requires two or three arguments.");
      defaultHandler0.ignorableWhitespace(charArray0, (-275), 24);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("(xB1 SZd0Ct*V", "");
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl4.startPrefixMapping("[5LT\"%(^CK\"", "[5LT\"%(^CK\"");
      SAXReader sAXReader0 = new SAXReader(true);
      xMLFilterImpl0.getParent();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl3.characters(charArray0, (-275), (-275));
      MockURL.getHttpExample();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getCharacterStream();
      inputSource0.setByteStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 186);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 186);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      inputSource0.getPublicId();
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)17, 186);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, (byte)17);
      bufferedInputStream1.skip(0L);
      bufferedInputStream1.markSupported();
      bufferedInputStream1.mark((byte) (-111));
      inputSource0.setByteStream(bufferedInputStream0);
      byteArrayInputStream0.reset();
      bufferedInputStream1.reset();
      inputSource0.setByteStream(bufferedInputStream1);
      int int0 = 30;
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl5);
      xMLFilterImpl6.getDTDHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl5);
      xMLFilterImpl6.endDocument();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getURI((-3139));
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl5);
      xMLFilterImpl8.startElement("//tmp/,a74K>NRxHk1/tmp/http:/xml.org/sax/properties/declaration-handler0", "//tmp/,a74K>NRxHk1/tmp/http:/xml.org/sax/properties/declaration-handler0", (String) null, attributes2Impl0);
      xMLFilterImpl7.setContentHandler(xMLFilterImpl8);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "//tmp/,a74K>NRxHk1/tmp/http:/xml.org/sax/properties/declaration-handler0");
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Tzr]_Y_TR4+z]2$.?t");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Tzr]_Y_TR4+z]2$.?t not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3030098046687266
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getFtpExample();
          sAXReader0.getXMLReader();
          DefaultHandler defaultHandler0 = new DefaultHandler();
          sAXReader0.setEntityResolver(defaultHandler0);
          URL uRL1 = MockURL.URL(uRL0, "-H iXNPe");
          try { 
            sAXReader0.read(uRL1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("PHgLF", "#w~.!@d%");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.isStripWhitespaceText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.getXMLReader();
      String string0 = "SRW'\\Gg";
      try { 
        sAXReader0.setXMLReaderClassName("SRW'Gg");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class SRW'Gg not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("R`");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.setColumnNumber((-759));
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 't';
      charArray0[2] = 'o';
      charArray0[3] = ' ';
      xMLFilterImpl3.ignorableWhitespace(charArray0, 2821, (-759));
      xMLFilterImpl3.endElement("$f.?AI+b#", "$f.?AI+b#", "6cebFu#ncNQ'H^[]Q");
      MockURL.getHttpExample();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("$f.?AI+b#");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.534663028478286
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.removeHandler("h_D?X\"&LO?98-");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      String string0 = ": A<FX.";
      sAXReader_SAXEntityResolver0.resolveEntity(": A<FX.", ": A<FX.");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl1.getContentHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      StringReader stringReader0 = new StringReader("n");
      String string1 = "";
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getCharacterStream();
      inputSource0.setByteStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 186);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 186);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)58;
      byteArray0[4] = (byte) (-111);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)17, 186);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, (byte)17);
      inputSource0.setByteStream(bufferedInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 30);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      xMLFilterImpl1.skippedEntity(" : ");
      charArray0[1] = '{';
      xMLFilterImpl1.characters(charArray0, (-275), (-275));
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("p*M,o0,^ &JO{5`");
      sAXReader_SAXEntityResolver0.resolveEntity("p*M,o0,^ &JO{5`", "org.jaxen.expr.DefaultAbsoluteLocationPath");
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl1.setDocumentLocator(locator2Impl0);
      xMLFilterImpl3.endDocument();
      xMLFilterImpl4.setParent(xMLFilterImpl2);
      xMLFilterImpl4.startPrefixMapping(".Tz]<U}", ".Tz]<U}");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4, true);
      xMLFilterImpl3.setErrorHandler(xMLFilterImpl0);
      xMLFilterImpl3.startDocument();
      xMLFilterImpl0.getParent();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl3.characters(charArray0, (-275), (-275));
      try { 
        MockURL.URL(".Tz]<U}", "p*M,o0,^ &JO{5`", "p*M,o0,^ &JO{5`");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: .tz]<u}
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      MockURL.getHttpExample();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement(";dtw", "_gD3j8EE!", ";dtw");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("//tmp/$IGzf|v V(kd90(Zo", "sO|Rys#=]Y", ";dtw");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      documentFactory0.createEntity(";dtw", "//tmp/$IGzf|v V(kd90(Zo");
      sAXReader0.setDocumentFactory(documentFactory0);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Pr%DABLk-^f}}0!4I");
      Object object0 = new Object();
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setValidation(false);
      HandlerBase handlerBase0 = new HandlerBase();
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^p~B4*J e^<f");
      MockFile mockFile0 = new MockFile("^p~B4*J e^<f", "^p~B4*J e^<f");
      mockFile0.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile1 = new MockFile(mockFile0, "$aVs}0%5w");
      mockFile1.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("$IGzf|v V(kd9", "http://xml.org/sax/handlers/LexicalHandler");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "^p~B4*J e^<f");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getCharacterStream();
      inputSource0.setByteStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 186);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 186);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)43;
      byteArray0[7] = (byte) (-99);
      inputSource0.getPublicId();
      byteArray0[4] = (byte)49;
      pushbackInputStream0.mark(2622);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-25), 186);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      byteArrayInputStream0.mark(2350);
      bufferedInputStream1.markSupported();
      bufferedInputStream0.mark((-13));
      bufferedInputStream1.mark((byte)0);
      byteArrayInputStream0.reset();
      bufferedInputStream1.reset();
      inputSource0.setByteStream(bufferedInputStream0);
      bufferedInputStream0.mark(2);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
          sAXReader0.isValidating();
          sAXReader0.setStringInternEnabled(false);
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      sAXReader0.createXMLReader();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.setEncoding("@D!>y@F9");
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultDocumentFactory.getInstance();
      namespace0.selectSingleNode("GK");
      namespace0.matches("pv\"^dHYts");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      simpleVariableContext0.setVariableValue("pv\"^dHYts", (Object) namespace0);
      defaultDocumentFactory0.createXPath("pv\"^dHYts", (VariableContext) simpleVariableContext0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      documentFactory0.createElement("pv\"^dHYts");
      String string0 = "org.jaxen.util.SingletonList";
      try { 
        sAXReader0.setFeature("org.jaxen.util.SingletonList", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'org.jaxen.util.SingletonList' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      
      String[] stringArray0 = new String[4];
      sAXReader0.setStringInternEnabled(false);
      stringArray0[0] = "BO~";
      stringArray0[1] = "org.dom4j.tree.AbstractEntity";
      stringArray0[2] = "Validation not supported for XMLReader: ";
      stringArray0[3] = "org.dom4j.tree.AbstractEntity";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      assertFalse(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultDocumentFactory.getInstance();
      namespace0.detach();
      namespace0.selectSingleNode("GK");
      namespace0.matches("GK");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      simpleVariableContext0.setVariableValue("GK", (Object) namespace0);
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object0 = new Object();
      DefaultElement defaultElement0 = new DefaultElement("GK");
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      Object object0 = new Object();
      simpleVariableContext2.setVariableValue("-<)", "-<)", (Object) simpleVariableContext0);
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext2);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object1 = new Object();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      Object object2 = new Object();
      Object object3 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader2.read("GK");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      Object object0 = new Object();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext3 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext4 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext5 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        sAXReader0.setProperty("GK", simpleVariableContext4);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'GK' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl2);
      MockException mockException0 = new MockException("");
      SAXParseException sAXParseException0 = new SAXParseException(" : ", locatorImpl2, mockException0);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      try { 
        sAXReader0.read((InputStream) null, ".k");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/.k (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/.k (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/$IGzf|v V(kd90(Zo");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_dom4j/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_dom4j/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/UWpf~,Kvm/tmp/hmPp:/xml.orgcsa}vpr%p$rties/declarNUion-hatdler0");
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      mockFile0.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.getCanonicalFile();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("$IGzf|v V(kd9", "//home/ubuntu/termite/projects/62_dom4j/Expected one of '.', '..', '@', '*', <QName>/(Zo/>FA+K;Xjh,F:=R7B-M?0(Zo");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)92;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/$IGzf|v V(kd90(Zo");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)18;
      SAXParseException sAXParseException0 = new SAXParseException("5'X/", "5'X/", "5'X/", (byte) (-23), (byte)18);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.error((SAXParseException) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl3.getDTDHandler();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl1.endDocument();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getURI((byte)18);
      xMLFilterImpl3.startElement("5'X/", "5'X/", "5'X/", attributes2Impl0);
      xMLFilterImpl1.setContentHandler(xMLFilterImpl2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("5'X/");
      sAXReader_SAXEntityResolver0.resolveEntity("F", "");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      SAXReader sAXReader1 = new SAXReader((String) null);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.removeHandler("");
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      Object object0 = new Object();
      simpleVariableContext2.setVariableValue("-<)", "-<)", (Object) simpleVariableContext0);
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext2);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      SAXReader sAXReader1 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader1.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Namespace namespace1 = new Namespace("AzyK", "AzyK");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      Object object0 = new Object();
      simpleVariableContext1.setVariableValue("JCk^;e? [`7tEv,", "JCk^;e? [`7tEv,", (Object) "AzyK");
      simpleVariableContext1.setVariableValue("@`uVmk;1=5%htJ", (Object) namespace1);
      defaultDocumentFactory0.createXPath("AzyK", (VariableContext) simpleVariableContext1);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      try { 
        sAXReader0.setXMLReaderClassName("ef;)G'=&");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ef;)G'=& not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      Object object0 = new Object();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext1);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      Object object2 = new Object();
      Object object3 = new Object();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      Object object0 = new Object();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext2);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        sAXReader0.read("sph}nTzh\"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: sph}nTzh\" Nested exception: no protocol: sph}nTzh\"
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      Object object0 = new Object();
      simpleVariableContext2.setVariableValue("-<)", "-<)", (Object) simpleVariableContext0);
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext2);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        sAXReader0.read("sph}nTzh\"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: sph}nTzh\" Nested exception: no protocol: sph}nTzh\"
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2610316958599697
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("(xB1 SZd0Ct*V", "$Lx/,{>u!D:kjY", "$Lx/,{>u!D:kjY", (-317), (-317));
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.error(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '{';
      xMLFilterImpl1.characters(charArray0, (-317), (-317));
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      defaultHandler0.startPrefixMapping("(xB1 SZd0Ct*V", "");
      defaultHandler0.ignorableWhitespace(charArray0, (-317), 24);
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4, true);
      xMLFilterImpl0.getParent();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@1461a3dd Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@1461a3dd Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      char[] charArray0 = new char[6];
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[5] = '\u0000';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(78);
      charBuffer1.mark();
      charBuffer0.read(charBuffer1);
      charBuffer0.mark();
      CharBuffer charBuffer2 = charBuffer1.asReadOnlyBuffer();
      charBuffer0.clear();
      charBuffer2.read(charBuffer1);
      CharBuffer.allocate('f');
      charBuffer1.put(charBuffer2);
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      charBuffer0.slice();
      CharBuffer.allocate(92);
      CharBuffer.allocate('f');
      charBuffer1.put(charBuffer2);
      CharBuffer.allocate('f');
      charBuffer3.clear();
      CharBuffer.allocate(6);
      charBuffer0.rewind();
      CharBuffer.allocate(6);
      StringReader stringReader0 = new StringReader("//tmp/org.jaxen.function.ContainsFunction007RxyNX7");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/org.jaxen.function.ContainsFunction007RxyNX7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file://tmp/org.jaxen.function.ContainsFunction007RxyNX7 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      xMLFilterImpl1.skippedEntity(" : ");
      charArray0[1] = '{';
      xMLFilterImpl1.characters(charArray0, (-275), (-275));
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      defaultHandler0.ignorableWhitespace(charArray0, (-275), 24);
      xMLFilterImpl1.setContentHandler(defaultHandler0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl4.startPrefixMapping("[5LT\"%(^CK\"", "[5LT\"%(^CK\"");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4, true);
      sAXReader0.resetHandlers();
      xMLFilterImpl0.getParent();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl3.characters(charArray0, (-275), (-275));
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("hh':Rwm]<*LY~ bS#", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class hh':Rwm]<*LY~ bS# not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createXPath("GK", (VariableContext) simpleVariableContext0);
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      simpleVariableContext1.setVariableValue("GK", (Object) documentFactory0);
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      Object object0 = new Object();
      simpleVariableContext2.setVariableValue("//tmpbwI|vwKJya0org.dom*j.IllegalAddException", (Object) "//tmpbwI|vwKJya0org.dom*j.IllegalAddException");
      simpleVariableContext0.setVariableValue("My6+2-+v", "//tmpbwI|vwKJya0org.dom*j.IllegalAddException", (Object) "My6+2-+v");
      defaultDocumentFactory0.createXPath("org.dom4j.tree.AbstractEntity", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      Object object1 = new Object();
      Object object2 = new Object();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      InputSource inputSource0 = new InputSource();
      MockURL.getFileExample();
      MockURL.getFtpExample();
      int int0 = 69;
      PipedInputStream pipedInputStream0 = new PipedInputStream(69);
      PipedInputStream pipedInputStream1 = new PipedInputStream(69);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      PipedInputStream pipedInputStream5 = new PipedInputStream(69);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream5);
      PipedInputStream pipedInputStream6 = null;
      try {
        pipedInputStream6 = new PipedInputStream(pipedOutputStream1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isIgnoreComments();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "07RxyNX7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"07RxyNX7\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3127371030753396
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'i';
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      charArray0[2] = 'f';
      charArray0[3] = '9';
      charArray0[5] = '\u0000';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(78);
      charBuffer1.mark();
      charBuffer0.read(charBuffer1);
      CharBuffer charBuffer2 = charBuffer1.asReadOnlyBuffer();
      charBuffer2.flip();
      CharBuffer charBuffer3 = CharBuffer.wrap((CharSequence) charBuffer2);
      CharBuffer.allocate('\u0000');
      CharBuffer.allocate(92);
      charBuffer0.put(0, 'f');
      charBuffer1.put(charBuffer2);
      charBuffer3.mark();
      CharBuffer.allocate(6);
      charBuffer0.rewind();
      CharBuffer.allocate(6);
      StringReader stringReader0 = new StringReader("//tmp/org.jaxen.function.ContainsFunction007RxyNX7");
      try { 
        sAXReader0.read((Reader) stringReader0, "RM]G}it@.em9v/9a+Y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document RM]G}it@.em9v/9a+Y : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.isIgnoreComments();
      sAXReader0.installXMLFilter((XMLReader) null);
      assertTrue(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource();
      inputSource0.getCharacterStream();
      inputSource0.setByteStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 186);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 186);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)17, 186);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, (byte)17);
      bufferedInputStream1.mark((byte) (-111));
      bufferedInputStream1.reset();
      inputSource0.setByteStream(bufferedInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null, 30);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.i.SAXReader");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.datatype.DatatypeAttribute", "org.dom4j.i.SAXReader");
      sAXReader0.setIgnoreComments(true);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      File file0 = MockFile.createTempFile("07RxyNX7", "07RxyNX7");
      file0.toPath();
      File file1 = MockFile.createTempFile("$t7oRf\".yzkZ^(V%f", "$t7oRf\".yzkZ^(V%f", (File) null);
      file1.mkdirs();
      file0.setExecutable(false, false);
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile(file1, "$t7oRf\".yzkZ^(V%f");
      file0.setWritable(false);
      file0.setExecutable(true, false);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.setColumnNumber((-759));
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 't';
      charArray0[2] = 'o';
      charArray0[3] = ' ';
      xMLFilterImpl3.ignorableWhitespace(charArray0, 2821, (-759));
      xMLFilterImpl3.endElement("$f.?AI+b#", "$f.?AI+b#", "6cebFu#ncNQ'H^[]Q");
      xMLFilterImpl3.endDocument();
      xMLFilterImpl0.setContentHandler(xMLFilterImpl1);
      xMLFilterImpl3.setContentHandler(xMLFilterImpl0);
      InputSource inputSource0 = new InputSource("/");
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4, true);
      xMLFilterImpl0.getParent();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      sAXReader0.setStripWhitespaceText(false);
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: null
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile("org.jaxen.expr.iter.IterableAttributeAxis", "org.jaxen.expr.iter.IterableAttributeAxis");
      MockFile mockFile1 = new MockFile(mockFile0, "org.jaxen.expr.iter.IterableAttributeAxis");
      URL uRL0 = mockFile1.toURL();
      URL uRL1 = MockURL.URL(uRL0, "org.jaxen.expr.iter.IterableAttributeAxis");
      try { 
        sAXReader0.read(uRL1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.jaxen.expr.iter.IterableAttributeAxis/org.jaxen.expr.iter.IterableAttributeAxis/org.jaxen.expr.iter.IterableAttributeAxis (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.jaxen.expr.iter.IterableAttributeAxis/org.jaxen.expr.iter.IterableAttributeAxis/org.jaxen.expr.iter.IterableAttributeAxis (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
