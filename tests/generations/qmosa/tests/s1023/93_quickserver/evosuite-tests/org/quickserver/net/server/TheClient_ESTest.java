/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 06:44:52 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.ByteBufferObjectPoolConfig;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.ObjectPoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "&amp;");
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      mockSocket0.getRemoteSocketAddress();
      mockSocket0.bind((SocketAddress) null);
      mockSocket0.getInetAddress();
      theClient0.setSocket(mockSocket0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setCommunicationLogging(false);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.713499480782177
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("maxConnection", 16);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      QuickServer quickServer0 = new QuickServer();
      quickServer0.run();
      theClient0.setTimeout(9877);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      QuickServer.setDebugNonBlockingMode(false);
      theClient0.setServer(quickServer0);
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      theClient0.setMaxAuthTry(9877);
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis((-4762L));
      theClient0.getServer();
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      assertEquals(9877, theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.close();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis((-309L));
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getSocketChannel();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("no socket");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quickServer0;
      objectArray0[1] = (Object) quickServer0;
      objectArray0[2] = (Object) quickServer0;
      objectArray0[3] = (Object) theClient0;
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      quickServerConfig0.setClientCommandHandler("|E's~");
      quickServer0.configQuickServer(quickServerConfig0);
      quickServer0.setRawCommunicationMaxLength((-19));
      quickServer0.setClientData("no socket");
      quickServer0.setStoreObjects(objectArray0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      try { 
        QuickServer.load("|E's~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("");
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      ObjectPoolConfig objectPoolConfig0 = new ObjectPoolConfig();
      ByteBufferObjectPoolConfig byteBufferObjectPoolConfig0 = new ByteBufferObjectPoolConfig();
      objectPoolConfig0.setMaxActive(2716);
      byteBufferObjectPoolConfig0.toXML("_#");
      byteBufferObjectPoolConfig0.setInitSize(0);
      objectPoolConfig0.getByteBufferObjectPoolConfig();
      byteBufferObjectPoolConfig0.setMaxIdle((-29));
      byteBufferObjectPoolConfig0.setMaxIdle((-29));
      objectPoolConfig0.setByteBufferObjectPoolConfig(byteBufferObjectPoolConfig0);
      objectPoolConfig0.setPoolManager("");
      quickServerConfig0.setObjectPoolConfig(objectPoolConfig0);
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = new QuickServer("_#");
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.321585437079472
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-33);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientWriteHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("no socket");
      quickServer0.setRawCommunicationLogging(true);
      theClient0.setMaxConnectionMsg("!S@");
      theClient0.setServer(quickServer0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxAuthTry((byte) (-33));
      theClient0.getSocketChannel();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertEquals((-33), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("no socket");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quickServer0;
      objectArray0[1] = (Object) quickServer0;
      quickServer0.setName("no socket");
      objectArray0[2] = (Object) quickServer0;
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      theClient0.getClientWriteHandler();
      quickServerConfig0.setClientWriteHandler((ClientWriteHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      quickServerConfig0.setClientAuthenticationHandler((ClientAuthenticationHandler) authenticator0);
      quickServerConfig0.getDBObjectPoolConfig();
      quickServerConfig0.setDBObjectPoolConfig((DBObjectPoolConfig) null);
      quickServerConfig0.setClientCommandHandler("|E's~");
      quickServer0.configQuickServer(quickServerConfig0);
      quickServer0.closeAllPools();
      quickServer0.setRawCommunicationMaxLength(0);
      quickServer0.closeAllPools();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getServer();
      System.setCurrentTimeMillis((-2L));
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)110;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)0;
      MockSocket mockSocket0 = new MockSocket();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel.open();
      Data data0 = new Data();
      data0.setLastAsked("v/.l8i,<TT'.-}");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      data0.setLastAsked("");
      byte[] byteArray0 = new byte[0];
      theClient0.setClientData(data0);
      theClient0.getClientExtendedEventHandler();
      Data data1 = (Data)theClient0.getClientData();
      data1.setLastAsked("Not connected .. so returning ClientData and ClientHandler objects for : ");
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTrusted();
      theClient0.getClientWriteHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEvent();
      theClient0.setClientEvent((ClientEvent) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getTrusted();
      theClient0.getClientCommandHandler();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setTimeoutMsg((String) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      Data data0 = new Data();
      data0.setUsername((String) null);
      theClient0.setClientData(data0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setTimeout((-301));
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeout();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeoutMsg("BB0Ip2dCD6");
      theClient0.getClientExtendedEventHandler();
      assertEquals((-301), theClient0.getTimeout());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ThreadAccessCount can't go beyond ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'M/|KPzs:vQqQ*l");
      byte[] byteArray0 = new byte[0];
      theClient0.setMaxConnectionMsg("'M/|KPzs:vQqQ*l");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-4));
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer();
      assertFalse(quickServer0.isRawCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "commandPlugin");
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      byte[] byteArray0 = new byte[10];
      byteArray0[6] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      theClient0.setCommunicationLogging(false);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(theClient0.getCommunicationLogging());
      
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-12);
      byteArray0[6] = (byte)64;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setLastAsked("HNID,~PT@LW`s");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(983);
      assertEquals("<ClientHandler-Pool#983-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      ClientEvent clientEvent1 = ClientEvent.LOST_CON;
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      mockSocket0.setPerformancePreferences((-1012), 0, 283);
      mockSocket0.setSoLinger(true, 0);
      theClient0.setSocket(mockSocket0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      System.setCurrentTimeMillis((-1012));
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "(|z");
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[7];
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "commandPlugin");
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      theClient0.getCommunicationLogging();
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      MockSocket mockSocket0 = new MockSocket();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[7];
      theClient0.setMaxConnectionMsg("");
      byteArray0[0] = (byte) (-12);
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:10>", nonBlockingClientHandler0.getName());
      
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEventHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("kg<fKa");
      theClient0.setTimeoutMsg("kg<fKa");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setTimeoutMsg("v");
      theClient0.setMaxConnectionMsg("org.quickserver.net.server.QuickServer");
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getServer();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Data data0 = new Data();
      data0.setUsername("#v}");
      data0.setUsername("F /x!Vq+Tt.");
      data0.setUsername("F /x!Vq+Tt.");
      data0.setUsername("(~(DJ< ");
      data0.setUsername("\"WFVo)L=k");
      data0.setUsername("org.quickserver.util.xmlreader.SecureStore");
      data0.setUsername("pW$;8+32[#\"odh");
      data0.setUsername("org.quickserver.util.xmlreader.SecureStore");
      byte[] byteArray0 = new byte[1];
      data0.setPassword(byteArray0);
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      System.setCurrentTimeMillis((-1915L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeoutMsg("");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setTimeoutMsg("");
      theClient0.setMaxConnectionMsg("org.quickserver.net.server.QuickServer");
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getServer();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'M/|KPzs:vQqQ*l");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getTimeoutMsg();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientObjectHandler();
      theClient0.setTimeout(1309);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeout();
      theClient0.getClientWriteHandler();
      assertEquals(1309, theClient0.getTimeout());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(58);
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer();
      assertNull(quickServer0.getSecurityManagerClass());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)64;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      theClient0.setTimeout(0);
      TheClient theClient1 = new TheClient();
      theClient1.getTimeout();
      theClient0.setTimeoutMsg("");
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer();
      assertNull(quickServer0.getSecurityManagerClass());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientData();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("no socket");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quickServer0;
      objectArray0[1] = (Object) quickServer0;
      objectArray0[2] = (Object) quickServer0;
      objectArray0[3] = (Object) theClient0;
      quickServer0.setStoreObjects(objectArray0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Data data0 = new Data();
      data0.setUsername("");
      data0.setUsername("\"WFVo)L=k");
      data0.setUsername("org.quickserver.util.xmlreader.SecureStore");
      data0.setUsername("org.quickserver.util.xmlreader.SecureStore");
      byte[] byteArray0 = new byte[0];
      data0.setPassword(byteArray0);
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      System.setCurrentTimeMillis((-1915L));
  }
}
