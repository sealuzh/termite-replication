/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 08:59:45 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("@GSMB");
      assertEquals("@GSMB", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("i%0Z@wmu[M%m|");
      advancedSettings0.setClientIdentifier("i%0Z@wmu[M%m|");
      advancedSettings0.setClientSocketReceiveBufferSize((-1651));
      advancedSettings0.setClientSocketReceiveBufferSize((-1803));
      advancedSettings0.setClientSocketSendBufferSize((-301));
      advancedSettings0.setClientIdentifier("</max-threads-for-nio-write>\n");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("</max-threads-for-nio-write>\n", advancedSettings0.getClientIdentifier());
      assertEquals((-301), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5383756999875677
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setClientSocketSendBufferSize((-3440));
      advancedSettings0.setSocketLinger((-3440));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setClientSocketTrafficClass(string0);
      String string1 = advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setClientIdentifier(string0);
      advancedSettings0.setBacklog(199);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize((-3440));
      advancedSettings0.setQSObjectPoolMaker(string0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier(string1);
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(890);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(890, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.478775391013212
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      String string0 = advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier(string0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings1.setClientIdentifier("");
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset(string0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // \t<client-socket-traffic-class></client-socket-traffic-class>
         // \t<client-socket-receive-buffer-size>2010</client-socket-receive-buffer-size>
         // \t<client-socket-send-buffer-size>10</client-socket-send-buffer-size>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7873780055103263
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(2351);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(2351);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(2010, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize((-650));
      advancedSettings0.setClientSocketTrafficClass(">*cjdwBxj");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize((-3030));
      assertEquals((-650), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(874);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(874);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("9");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(874);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(874);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(874);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("</charset>\n");
      advancedSettings0.getClientIdentifier();
      assertEquals("</charset>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0385256208092843
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("%rg.quickserver.net.server.impl.OptimicicClientIdentifier");
      advancedSettings0.setClientIdentifier("%rg.quickserver.net.server.impl.OptimicicClientIdentifier");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("%rg.quickserver.net.server.impl.OptimicicClientIdentifier");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("J;PDrVs");
      advancedSettings0.setClientIdentifier("4a]G\"TKp&Ja NT5c");
      advancedSettings0.setClientIdentifier("4a]G\"TKp&Ja NT5c");
      advancedSettings0.setClientIdentifier("4a]G\"TKp&Ja NT5c");
      assertEquals("4a]G\"TKp&Ja NT5c", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1943));
      advancedSettings0.setMaxThreadsForNioWrite((-3602));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-3602), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.553040715797101
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setByteBufferSize(858);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize(1983);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("</backlog>\n");
      assertEquals((-1), advancedSettings0.getClientSocketReceiveBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.setUseDirectByteBuffer(false);
      assertEquals((-1), advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.11673984287575
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth((-3030));
      advancedSettings0.setClientSocketReceiveBufferSize((-920));
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("kFg='>v ");
      assertEquals(10, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1743174176930435
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-4621));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1063));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("p(RPQ|NSx$ZtaD");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p(RPQ|NSx$ZtaD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("SdDk$^Kj,!,");
      advancedSettings0.setClientIdentifier("E#>1(K!i]");
      assertEquals((-1), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9740420290828737
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-3030));
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setPerformancePreferencesBandwidth(906);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("\"]*xW?`nmwK?N4oA");
      assertEquals(10, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.494958997140122
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setClientSocketSendBufferSize((-3440));
      advancedSettings0.setSocketLinger((-3440));
      advancedSettings0.setSocketLinger(240);
      advancedSettings0.setClientSocketTrafficClass("\"9OcCYY\u0001t8#4kB");
      advancedSettings0.setClientSocketTrafficClass(string0);
      String string1 = advancedSettings0.toXML((String) null);
      advancedSettings0.setClientIdentifier("\"9OcCYY\u0001t8#4kB");
      advancedSettings0.setBacklog(199);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(240);
      advancedSettings0.setQSObjectPoolMaker(string0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier(string1);
      assertEquals(240, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5303437581946024
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.toXML("<performance-preferences-connetion-ime>\n");
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1474));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(1685);
      advancedSettings0.setByteBufferSize(0);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(1685, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.638556100452948
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("%rg.quickserver.net.server.impl.OptimiticClientIdentifier");
      advancedSettings0.setClientIdentifier("%rg.quickserver.net.server.impl.OptimiticClientIdentifier");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize((-2444));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(15);
      advancedSettings1.setByteBufferSize((-2444));
      advancedSettings1.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setMaxThreadsForNioWrite((-208));
      advancedSettings2.setMaxThreadsForNioWrite(471);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientIdentifier();
      advancedSettings2.getClientSocketSendBufferSize();
      advancedSettings0.getBacklog();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      
      int int0 = advancedSettings3.getByteBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.53634590619339
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize((-3623));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("Z<>3?");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize((-3623));
      advancedSettings0.getCharset();
      assertEquals((-3623), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-5630));
      int int0 = advancedSettings0.getBacklog();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.483564960638842
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals(1, advancedSettings0.getClientSocketReceiveBufferSize());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings2.setUseDirectByteBuffer(false);
      advancedSettings2.getClientSocketSendBufferSize();
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.482410559484441
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("i%0Z@wmu[M%m|");
      advancedSettings0.setClientSocketReceiveBufferSize((-1651));
      advancedSettings0.setClientSocketReceiveBufferSize((-1803));
      advancedSettings0.setClientSocketSendBufferSize((-301));
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientIdentifier("</max-threads-for-nio-write>\n");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-301), int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertNotNull(string0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
  }
}
