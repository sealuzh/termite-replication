/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 01:06:40 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.685502766506237
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU*4KM0I~J Dy,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      int int0 = 58;
      streamTokenizer1.wordChars(58, 58);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.resetSyntax();
      jSTerm0.makeVariable();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.iterator();
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm3.standardizerTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm2.equals(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "(<";
      StringReader stringReader0 = new StringReader("(<");
      stringReader0.markSupported();
      int int0 = (-1248);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2323662005645053
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 3057);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      streamTokenizer1.whitespaceChars((-4), 32);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChar(32);
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.commentChar((-4));
      streamTokenizer2.ordinaryChar(3057);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer5.sval = null;
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer5.ordinaryChars(32, (-4));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7652476061734275
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.quoteChar(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.resetSyntax();
      jSTerm0.makeVariable();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm2.iterator();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-924L));
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm1.matches(jSTerm3);
      boolean boolean0 = jSTerm4.equals(jSTerm3);
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5555608775538077
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU*4KM0I~J Dy,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(58, 58);
      streamTokenizer0.commentChar(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(32, 32);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 3094);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars((-1), 32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1773469265589425
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      streamTokenizer0.commentChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 3057);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      streamTokenizer1.whitespaceChars((-1), 32);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChar((-3));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.ordinaryChar((-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.commentChar((-4));
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer5.ordinaryChars(32, (-4));
      jSTerm1.isFunction();
      jSTerm0.matches(jSTerm1);
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7111927169866474
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.quoteChar(508);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.resetSyntax();
      jSTerm0.makeVariable();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm3.cloneT();
      jSTerm2.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0739200498340806
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU*4KM0I~J Dy,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.commentChar(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(32, 32);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 3094);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars((-1), 32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer2.ordinaryChar(1904);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 254);
      streamTokenizer1.ordinaryChar(3094);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer4.sval = null;
      streamTokenizer4.eolIsSignificant(false);
      streamTokenizer4.ordinaryChars(32, (-4));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6959739979050763
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X.h)pq b/R6{Kj0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      int int0 = 0;
      streamTokenizer0.ttype = 0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.print();
      JSJshopVars.VarCounter = (-2661);
      jSTerm2.retainAll(jSSubstitution0);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8673518347967044
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.nval = (double) 2214;
      streamTokenizer0.quoteChar((-1256));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.resetSyntax();
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSJshopVars.greaterT = 10;
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm2.iterator();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm3.matches(jSTerm4, jSSubstitution2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm5.parallelStream();
      jSTerm0.equals(jSTerm3);
      streamTokenizer3.sval = "S";
      jSTerm1.matches(jSTerm5);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8599901419191216
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution6);
      jSSubstitution0.spliterator();
      jSTerm2.retainAll(jSSubstitution6);
      jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.iterator();
      jSTerm0.matches(jSTerm2, jSSubstitution4);
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9459959973559475
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QU`4K40I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(32, (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer2.wordChars(32, (-4));
      streamTokenizer2.nval = (double) (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer3.quoteChar(32);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.ordinaryChars((-4), 32);
      streamTokenizer3.nval = (double) (-4);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1036);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.sort(comparator0);
      Object object0 = new Object();
      Integer integer0 = new Integer(146);
      int int0 = 1;
      jSTerm0.insertElementAt(integer0, 1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%JvjBs)g9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.size();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      String string0 = null;
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW`A4K0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.nval = 0.0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.quoteChar(32);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.commentChar(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      jSTerm0.makeConstant();
      streamTokenizer2.slashSlashComments(true);
      jSTerm0.makeFunction();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), 217);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.pushBack();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nextToken();
      streamTokenizer3.whitespaceChars((-4), (-4));
      streamTokenizer6.ttype = (-4);
      streamTokenizer6.commentChar((-4));
      streamTokenizer6.whitespaceChars((-4), (-3));
      streamTokenizer6.commentChar((-3));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8313555222485527
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.nval = (double) 2214;
      streamTokenizer0.quoteChar((-1256));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSJshopVars.greaterT = 10;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.spliterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution4 = jSTerm2.matches(jSTerm3, jSSubstitution3);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSTerm jSTerm6 = jSTerm1.applySubstitutionT(jSSubstitution4);
      jSTerm5.standardizerTerm();
      JSTerm jSTerm7 = jSTerm6.call();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm7.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.286306589149214
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer1.nextToken();
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm0);
      streamTokenizer1.ordinaryChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "Dg";
      streamTokenizer2.commentChar((-3));
      streamTokenizer1.commentChar((-3));
      streamTokenizer2.ordinaryChars(32, (-1088));
      streamTokenizer0.parseNumbers();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer1.ordinaryChars((-4), 32);
      jSTerm0.makeFunction();
      streamTokenizer0.slashStarComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 97;
      jSTerm0.setSize(97);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2302958071897643
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU*4KM0I~J Dy,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 3094);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer2.ordinaryChar(1904);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 254);
      streamTokenizer1.ordinaryChar(3094);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer3.sval = null;
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.pushBack();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ttype = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      CharBuffer charBuffer0 = CharBuffer.allocate(47);
      charBuffer0.mark();
      charBuffer0.position(47);
      charBuffer0.clear();
      streamTokenizer0.nval = (double) '9';
      charBuffer0.rewind();
      streamTokenizer0.nextToken();
      stringReader0.reset();
      streamTokenizer0.quoteChar(2968);
      streamTokenizer0.ordinaryChars(40, 62);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(40, 47);
      streamTokenizer1.whitespaceChars(40, 40);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.whitespaceChars(40, 1026);
      streamTokenizer1.wordChars(62, 40);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2057244267073846
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashSlashComments(true);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer1.nextToken();
      streamTokenizer0.commentChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.ordinaryChars((-3), (-3));
      jSTerm0.makeConstant();
      streamTokenizer1.eolIsSignificant(true);
      jSTerm0.makeFunction();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(40, (-4));
      streamTokenizer2.slashStarComments(true);
      jSTerm0.makeFunction();
      streamTokenizer3.slashStarComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "(I";
      StringReader stringReader0 = new StringReader("(I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.pushBack();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ttype = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      CharBuffer charBuffer0 = CharBuffer.allocate(47);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'l';
      charArray0[2] = 'p';
      charArray0[3] = '7';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer0.read(charBuffer1);
      charBuffer0.mark();
      charBuffer0.position(47);
      charBuffer0.clear();
      streamTokenizer0.nval = (double) '9';
      charBuffer0.rewind();
      streamTokenizer0.nextToken();
      stringReader0.reset();
      streamTokenizer0.quoteChar(2968);
      streamTokenizer0.ordinaryChars(40, 62);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(40, 47);
      streamTokenizer1.whitespaceChars(40, 40);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.whitespaceChars(40, 1026);
      streamTokenizer1.wordChars(62, 40);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0351086206795497
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QU`4K40I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars(32, (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer2.nextToken();
      streamTokenizer2.wordChars(32, (-3));
      streamTokenizer2.nval = (double) (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer3.quoteChar(32);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer3.quoteChar((-3));
      streamTokenizer3.whitespaceChars((-4), (-1));
      streamTokenizer3.ordinaryChars((-3), 32);
      streamTokenizer3.nval = (double) (-3);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8694911898522726
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.nval = (double) 2214;
      streamTokenizer0.quoteChar((-1256));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.resetSyntax();
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.greaterT = 10;
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm2.iterator();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm3.matches(jSTerm4, jSSubstitution1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm2.cloneT();
      streamTokenizer2.commentChar((-1));
      jSTerm1.print();
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.785802575105974
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.quoteChar(2214);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      jSTerm1.makeVariable();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm1.iterator();
      jSTerm2.matches(jSTerm0, jSSubstitution2);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm4.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm0.cloneT();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7493440564421956
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.capacity();
      jSTerm0.isGround();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.nval = (double) 2214;
      streamTokenizer0.quoteChar((-1256));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.resetSyntax();
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSJshopVars.greaterT = 10;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.iterator();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm3.matches(jSTerm4, jSSubstitution2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      String string0 = "\\S";
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.548194917018036
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW`A4K0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.quoteChar((-4));
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.retainAll(jSTerm0);
      jSSubstitution0.spliterator();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(60);
      jSSubstitution1.add((Object) integer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSSubstitution4.clear();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution7);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.330091187063569
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(32);
      UnaryOperator.identity();
      jSTerm0.stream();
      Function.identity();
      System.setCurrentTimeMillis(0L);
      jSTerm0.trimToSize();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.cloneT();
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(32, jSTerm0.capacity());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.nval = 0.0;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars((-4), (-4));
      streamTokenizer3.nval = (double) (-4);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9033707590570543
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("LhZv#xeR7*/F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.retainAll(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.iterator();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution3.spliterator();
      jSSubstitution7.addAll((Collection) jSSubstitution5);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution8.removeAllElements();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution8.forEach(consumer0);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution5.clear();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution5);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      Predicate<String> predicate2 = predicate1.negate();
      predicate2.and(predicate1);
      jSTerm2.matches(jSTerm0, jSSubstitution7);
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution14);
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.245308166203682
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW`A4K0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.nval = 0.0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.quoteChar(32);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.commentChar(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      jSTerm0.makeConstant();
      streamTokenizer2.slashSlashComments(true);
      jSTerm0.makeFunction();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.pushBack();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), 255);
      streamTokenizer7.ttype = (-4);
      streamTokenizer7.commentChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2308259692357444
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isVariable();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(I");
      char[] charArray0 = new char[1];
      CharBuffer.wrap(charArray0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(47);
      System.setCurrentTimeMillis(877L);
      System.setCurrentTimeMillis((-4403L));
      System.setCurrentTimeMillis(47);
      System.setCurrentTimeMillis((-3322L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW`A4K0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.nval = 0.0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.quoteChar(32);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.commentChar(32);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      jSTerm0.makeConstant();
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeFunction();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer4.ttype = (-4);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1048);
      jSTerm0.lastElement();
      jSTerm0.clone();
      jSTerm0.setSize(39);
      StringReader stringReader0 = new StringReader("?c>QCcV1H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5820183568770023
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      jSTerm0.removeAll(jSTerm1);
      jSTerm0.trimToSize();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2312;
      Object object0 = new Object();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis((-558L));
      jSTerm0.isGround();
      jSTerm0.setSize(2312);
      // Undeclared exception!
      try { 
        jSTerm0.set(2466, object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2466
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.579755221006731
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 667;
      JSJshopVars.plus = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.ensureCapacity(2505);
      JSJshopVars.apostrophe = 2874;
      StringReader stringReader0 = new StringReader("?");
      jSTerm1.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.trimToSize();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      int int0 = 47;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.704230667392117
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(47, 3923);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(null )", stringBuffer0.toString());
      
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSSubstitution0.clear();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution5 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      assertTrue(jSSubstitution5.fail());
      
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm3);
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm4, jSTerm2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(32);
      UnaryOperator.identity();
      Function.identity();
      System.setCurrentTimeMillis(1L);
      jSTerm0.trimToSize();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9549936692992196
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("LhZv#xeR7*/F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.size();
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution2.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.forEach(consumer0);
      jSSubstitution2.clear();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.cloneT();
      jSTerm1.makeVariable();
      jSTerm1.matches(jSTerm0, jSSubstitution8);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution10);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "pX{(%[7=@G]CHxKiKQ");
      StringReader stringReader0 = new StringReader("X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(0, 0);
      stringReader0.close();
      streamTokenizer0.commentChar(2);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.039030189307001
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      jSTerm0.size();
      streamTokenizer1.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(1);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer2.whitespaceChars(32, (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer2.ordinaryChar(32);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ordinaryChars(1, 1);
      streamTokenizer1.pushBack();
      streamTokenizer3.wordChars(1, (-1363));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nval = 4.0;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars((-4), 32);
      streamTokenizer5.nval = (double) (-4);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) consumer0;
      objectArray0[0] = (Object) comparator0;
      objectArray0[6] = (Object) consumer0;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1036);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      jSTerm0.sort(comparator1);
      Object object1 = new Object();
      jSTerm0.insertElementAt((Object) null, 1036);
      StringReader stringReader0 = new StringReader(")X*CFs}5yjj0G4Sq_Zn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-649));
      streamTokenizer0.quoteChar(947);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(1036, 947);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-255));
      jSTerm0.parseList(streamTokenizer1);
      assertEquals(1037, jSTerm0.size());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1157434952314973
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      streamTokenizer0.commentChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 3057);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      streamTokenizer1.whitespaceChars((-1), 32);
      jSTerm0.makeVariable();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.ordinaryChar((-3));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.ordinaryChar((-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.commentChar((-4));
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer5.ordinaryChars(32, (-4));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8267514493135493
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("LhZv#xeR7*/F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.slash = 10;
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) "LhZv#xeR7*/F");
      jSSubstitution3.retainAll(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution5);
      jSSubstitution1.add((Object) jSSubstitution6);
      jSSubstitution5.iterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution1.spliterator();
      jSSubstitution0.clear();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution8.add((Object) jSSubstitution10);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution12.add((Object) jSSubstitution8);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.print();
      jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution4);
      jSTerm3.call();
      assertTrue(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) consumer0;
      objectArray0[0] = (Object) comparator0;
      objectArray0[2] = (Object) consumer0;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1015);
      Object object1 = new Object();
      jSTerm0.insertElementAt(objectArray0[1], 0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(570L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[8] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      StringReader stringReader0 = new StringReader("yu`4kki0ipd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-2570), 96);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-3));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars(0, (-4));
      streamTokenizer1.commentChar(0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.582488854212045
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 97;
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(97);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("+@e+CuF<yt6 ^2b'mv^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.forEach(consumer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add(object0);
      jSSubstitution0.add((Object) ">z{Yn");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.setSize(39);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "pX{(%[7=@G]CHxKiKQ");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("yu`4kki0ipd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(2103);
      streamTokenizer0.ordinaryChar(2103);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChars(2103, 42);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.324481088886851
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4KKM0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ttype = (-4);
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.forEach(consumer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add(object0);
      jSSubstitution0.forEach(consumer1);
      StringReader stringReader0 = new StringReader(">z{Yn");
      stringReader0.markSupported();
      stringReader0.read();
      StringReader stringReader1 = new StringReader(").O|ieEo3U71b>");
      stringReader1.skip(62);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(4, stringBuffer0.length());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[8] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "pX{(%[7=@G]CHxKiKQ");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.forEach(consumer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      jSSubstitution0.add((Object) ">z{Yn");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.setSize(39);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 97;
      long long0 = 8839L;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 97;
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(97);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8190805666269494
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("LhZv#xeR7*/F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.size();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution3.iterator();
      JSJshopVars.coma = 1;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution5);
      assertFalse(jSTerm2.isFunction());
      
      jSSubstitution0.spliterator();
      jSTerm0.iterator();
      jSSubstitution5.clear();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution3);
      jSSubstitution5.removeAllElements();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(0);
      streamTokenizer1.commentChar((-1));
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      jSTerm1.print();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution10 = jSTerm5.matches(jSTerm0, jSSubstitution0);
      assertNotSame(jSSubstitution10, jSSubstitution0);
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm5.isConstant());
      
      JSSubstitution jSSubstitution11 = jSTerm4.matches(jSTerm1);
      assertFalse(jSTerm4.isEval());
      assertFalse(jSSubstitution11.fail());
      assertFalse(jSTerm4.isVariable());
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7428519375615115
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW`A4K0I~d Dg,o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.quoteChar((-4));
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.retainAll(jSTerm0);
      jSSubstitution0.spliterator();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSSubstitution4.clear();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution10 = jSTerm2.matches(jSTerm0, jSSubstitution7);
      assertTrue(jSSubstitution10.fail());
      
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertNotSame(jSTerm2, jSTerm3);
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm2, jSTerm4);
      assertTrue(jSTerm4.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[6] = (Object) consumer0;
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 1042;
      jSTerm0.setSize(1042);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      jSTerm0.sort(comparator1);
      Object object1 = new Object();
      jSTerm0.insertElementAt((Object) null, 1042);
      JSJshopVars.equalT = 1042;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4333299207053694
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[8] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) jSSubstitution0;
      objectArray1[2] = (Object) consumer0;
      objectArray1[3] = null;
      objectArray1[4] = (Object) consumer0;
      objectArray1[5] = (Object) consumer0;
      jSSubstitution0.toArray(objectArray1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm1.setSize(1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "rvt9k{moJZ";
      StringReader stringReader0 = new StringReader("rvt9k{moJZ");
      StringReader stringReader1 = new StringReader("%");
      stringReader1.skip((-698L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      int int0 = 47;
      streamTokenizer0.quoteChar(47);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      jSTerm0.isFunction();
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(316L);
      System.setCurrentTimeMillis(685L);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(685L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1695L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(316L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.spliterator();
      jSSubstitution1.clear();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5047149847614376
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XU`4K0I~d Dg,o");
      StringReader stringReader1 = new StringReader("XU`4K0I~d Dg,o");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 1048;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      jSTerm1.equals(jSTerm0);
      jSTerm0.trimToSize();
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      jSTerm0.isVariable();
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(316L);
      System.setCurrentTimeMillis(685L);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis((-21L));
      System.setCurrentTimeMillis(685L);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis((-21L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(316L);
      System.setCurrentTimeMillis(685L);
      System.setCurrentTimeMillis(316L);
      System.setCurrentTimeMillis(316L);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.431848439223888
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      LinkedList<JSTerm> linkedList0 = new LinkedList<JSTerm>();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.forEach(consumer0);
      Object[] objectArray0 = new Object[9];
      jSSubstitution0.toArray(objectArray0);
      Integer integer0 = new Integer((-876));
      jSSubstitution0.add((Object) integer0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(2434L);
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      jSTerm0.isEval();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(888L);
      System.setCurrentTimeMillis(1694L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2434L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("of");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7JW;%1=_HynZjWYP+v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar(2913);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.620146169913955
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.assignFailure();
      Object object0 = new Object();
      jSSubstitution0.add((Object) "Expecting elements of the list");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution2.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertTrue(jSTerm2.isConstant());
      
      jSSubstitution2.spliterator();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm1.iterator();
      assertFalse(jSTerm1.isFunction());
      
      JSSubstitution jSSubstitution7 = jSTerm3.matches(jSTerm0, jSSubstitution6);
      assertTrue(jSSubstitution7.fail());
      
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      JSTerm jSTerm6 = new JSTerm();
      boolean boolean0 = jSTerm5.equals(jSTerm6);
      assertTrue(jSTerm5.isConstant());
      assertFalse(boolean0);
      assertNotSame(jSTerm3, jSTerm4);
      assertFalse(jSTerm5.isFunction());
      assertNotSame(jSTerm5, jSTerm3);
      assertFalse(jSTerm5.isVariable());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm5.isEval());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(2, (-914));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(*2sfAx%m0 *K&c}qrW6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("6{K:F)tdy");
      StringReader stringReader2 = new StringReader("(*2sfAx%m0 *K&c}qrW6");
      stringReader0.reset();
      stringReader0.reset();
      stringReader2.ready();
      stringReader2.skip(0L);
      StringReader stringReader3 = new StringReader("[ymCK");
      stringReader1.ready();
      char[] charArray0 = new char[9];
      stringReader3.reset();
      charArray0[2] = '7';
      stringReader1.read();
      stringReader3.mark(54);
      stringReader1.read(charArray0);
      stringReader1.mark(':');
      stringReader3.mark(1991);
      stringReader1.read();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.mark();
      stringReader0.reset();
      stringReader3.read(charBuffer0);
      stringReader1.read(charArray0);
      stringReader3.skip(1499L);
      stringReader3.markSupported();
      stringReader1.read();
      stringReader3.skip((-1));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 97;
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      long long0 = 1L;
      System.setCurrentTimeMillis(97);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(97);
      System.setCurrentTimeMillis(97);
      long long0 = 1L;
      System.setCurrentTimeMillis(97);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(107L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(7L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2201));
      System.setCurrentTimeMillis(107L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2424L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2218L));
      System.setCurrentTimeMillis((-2424L));
      System.setCurrentTimeMillis((-2201));
      System.setCurrentTimeMillis((-302L));
      System.setCurrentTimeMillis((-2424L));
      System.setCurrentTimeMillis((-2201));
      System.setCurrentTimeMillis(126L);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      long long0 = 2434L;
      System.setCurrentTimeMillis(2434L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 97;
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(97);
      System.setCurrentTimeMillis(2434L);
      jSTerm0.setSize(97);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(3929, 834);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-2513), 2843);
      streamTokenizer1.commentChar(2);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add(object0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution0.sort(comparator0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) consumer0;
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "pX{(%[7=@G]CHxKiKQ");
      StringReader stringReader0 = new StringReader("X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(0, 0);
      streamTokenizer0.commentChar(2);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
