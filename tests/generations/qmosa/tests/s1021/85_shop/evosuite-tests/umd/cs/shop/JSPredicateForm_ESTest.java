/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 19:18:12 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("(Gq>^nQ-;V;B");
      SystemInUtil.addInputLine("call ");
      StringReader stringReader0 = new StringReader("Reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      SystemInUtil.addInputLine("Reading");
      streamTokenizer1.ordinaryChars((-1627), (-946));
      streamTokenizer1.commentChar((-683));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.ordinaryChars((-3), 1211);
      streamTokenizer0.nextToken();
      streamTokenizer1.wordChars((-3), (-946));
      streamTokenizer1.ordinaryChar((-1103039393));
      streamTokenizer1.commentChar(1211);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars(0, 0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Gq>^nQ-;V;B");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5768984681302025
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.isGround();
      jSTerm0.add((Object) jSTerm1);
      SystemInUtil.addInputLine("j,pi~udx7ce5^dr");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm1.isGround();
      jSTerm1.makeVariable();
      SystemInUtil.addInputLine("A");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSTerm1.add((Object) jSPredicateForm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      SystemInUtil.addInputLine("%2\"DjH");
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      // Undeclared exception!
      try { 
        jSSubstitution2.insertElementAt(jSTerm2, (-324771022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "0D/@f>`[D-&`";
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      jSTerm0.add((Object) jSTerm1);
      SystemInUtil.addInputLine("j,pi~udx7ce5^dr");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm1.isGround();
      SystemInUtil.addInputLine("A");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5768984681302025
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.isGround();
      jSTerm0.add((Object) jSTerm1);
      SystemInUtil.addInputLine("j,pi~udx7ce5^dr");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm1.isGround();
      SystemInUtil.addInputLine("A");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSTerm1.add((Object) jSPredicateForm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      // Undeclared exception!
      try { 
        jSSubstitution2.insertElementAt(jSTerm2, (-324771022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("Operator name expected");
      StringReader stringReader0 = new StringReader("ln_");
      SystemInUtil.addInputLine("^cPv7za=Ha%0uZ@N7i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.415277974646454
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("line");
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      SystemInUtil.addInputLine("j,pi~udx7ce5^dr");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm1.isGround();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution3);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSPredicateForm0, jSSubstitution2);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.add((Object) jSSubstitution4);
      Integer integer0 = new Integer((-2005465948));
      jSTerm2.add((Object) integer0);
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSSubstitution4.insertElementAt(jSTerm2, (-324771022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4503379533856173
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) stringReader0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.remove((Object) jSTerm2);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm2));
      
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.standarizerPredicateForm();
      assertTrue(jSPredicateForm4.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lne : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm0.addElement(jSTerm0);
      System.setCurrentTimeMillis(32);
      Integer integer0 = new Integer((-1078399016));
      jSTerm0.add((Object) integer0);
      stringReader0.skip(0L);
      Integer integer1 = new Integer(32);
      streamTokenizer0.whitespaceChars(32, (-1));
      jSTerm0.addElement(integer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[9] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      Object[] objectArray1 = jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.toArray(objectArray1);
      jSPredicateForm0.add(objectArray0[0]);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "lNe");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) "lNe";
      Object[] objectArray1 = jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.toArray(objectArray1);
      StringReader stringReader0 = new StringReader("7)%:qo5[Ji");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.add((Object) jSTerm0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(9, stringBuffer0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.415277974646454
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("line");
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      SystemInUtil.addInputLine("j,pi~udx7ce5^dr");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm1.isGround();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution2);
      SystemInUtil.addInputLine("0D/@f>`[D-&`");
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSSubstitution3.insertElementAt(jSTerm2, (-324771022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lie J: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) streamTokenizer1;
      objectArray0[1] = (Object) "lie J: ";
      objectArray0[2] = (Object) "lie J: ";
      objectArray0[3] = (Object) "lie J: ";
      objectArray0[4] = (Object) "lie J: ";
      objectArray0[5] = (Object) streamTokenizer0;
      objectArray0[6] = (Object) jSTerm0;
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.print();
      jSTerm0.toStr();
      jSPredicateForm0.print();
      assertEquals(1, jSTerm0.size());
      assertEquals("[lie]", jSTerm0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.plus = 2218;
      jSPredicateForm0.add((Object) "lie");
      JSJshopVars.semicolon = 2218;
      JSJshopVars.semicolon = 0;
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[9] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) jSPredicateForm0;
      objectArray1[1] = (Object) jSPredicateForm0;
      objectArray1[2] = (Object) jSPredicateForm0;
      objectArray1[3] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray1);
      jSPredicateForm0.add(objectArray1[2]);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4677339293271525
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lie J: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.reset();
      jSTerm0.addAll((Collection) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm0.standarizerPredicateForm();
      jSSubstitution3.retainAll(jSTerm0);
      JSJshopVars.leftBrac = 32;
      jSSubstitution3.clear();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Bd");
      Predicate<String> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate2 = predicate1.or(predicate0);
      predicate0.and(predicate2);
      Predicate<Object> predicate3 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate3).test(any());
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate.isEqual((Object) jSSubstitution4);
      predicate5.test("lie J: ");
      predicate0.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      jSTerm0.removeIf(predicate6);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-1097797243), (-1097797243));
      jSTerm0.clonePF();
      boolean boolean0 = jSTerm1.equals(jSPredicateForm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Object> function0 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)unaryOperator0.apply(jSPredicateForm0);
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "umd.cs.shop.JSUtil");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("umd.cs.shop.JSUtil");
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      JSJshopVars.plus = 60;
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      jSPredicateForm0.addElement((Object) null);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      System.setCurrentTimeMillis(1619L);
      jSPredicateForm1.isEmpty();
      System.setCurrentTimeMillis(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Object> function0 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)unaryOperator0.apply(jSPredicateForm0);
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "umd.cs.shop.JSUtil");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      JSJshopVars.plus = 60;
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      jSPredicateForm0.addElement((Object) null);
      System.setCurrentTimeMillis(1619L);
      // Undeclared exception!
      try { 
        jSPredicateForm1.equals(jSPredicateForm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<JSTerm, Integer> function0 = (Function<JSTerm, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSTerm, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) "hn@ig`B");
      jSTerm0.addElement(unaryOperator0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      jSSubstitution0.removeElement(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/597624271 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "(>^nQ-;V;B";
      int int0 = 1211;
      StringReader stringReader0 = new StringReader("(>^nQ-;V;B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4791328074296435
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      objectArray0[7] = (Object) jSPredicateForm0;
      objectArray0[8] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.add((Object) "lNe");
      JSJshopVars.flagLevel = 43;
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      SystemInUtil.addInputLine("lNe");
      jSPredicateForm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm1.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.firstElement();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      Integer integer0 = new Integer(43);
      jSSubstitution0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm3.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      jSTerm0.addElement("0D/@f>`[D-&`");
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      Integer integer0 = new Integer(1282);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.lastElement();
      jSTerm1.setSize(2649);
      jSTerm1.addElement("%%%");
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      CharBuffer charBuffer0 = CharBuffer.allocate(849);
      CharBuffer charBuffer1 = CharBuffer.allocate(47);
      CharBuffer charBuffer2 = charBuffer0.put(charBuffer1);
      CharBuffer.allocate(0);
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      charBuffer2.mark();
      // Undeclared exception!
      try { 
        charBuffer0.read(charBuffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 58;
      stringReader0.skip((-1L));
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[9];
      objectArray0[8] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      objectArray0[7] = (Object) jSPredicateForm0;
      objectArray0[8] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.add((Object) "lNe");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Object> function0 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)unaryOperator0.apply(jSPredicateForm0);
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "umd.cs.shop.JSUtil");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("umd.cs.shop.JSUtil");
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      JSJshopVars.plus = 60;
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      jSPredicateForm0.addElement((Object) null);
      System.setCurrentTimeMillis(1619L);
      jSPredicateForm1.isEmpty();
      System.setCurrentTimeMillis(60);
      // Undeclared exception!
      try { 
        jSPredicateForm1.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super JSTerm, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator2);
      jSPredicateForm0.replaceAll(unaryOperator0);
      JSJshopVars.leftBrac = (-1994939181);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator3);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function0);
      UnaryOperator.identity();
      String string0 = "d46QtUNvUoAr_(m";
      jSPredicateForm0.add((Object) "d46QtUNvUoAr_(m");
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      jSPredicateForm0.lastElement();
      unaryOperator2.apply("d46QtUNvUoAr_(m");
      jSPredicateForm0.equals(jSPredicateForm0);
      jSPredicateForm0.addElement("d46QtUNvUoAr_(m");
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemInUtil.addInputLine("n3BG");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(jSPredicateForm0);
      jSPredicateForm0.replaceAll(unaryOperator1);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(4312);
      streamTokenizer0.sval = "0D/@f>`[D-&`";
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.parseNumbers();
      StringReader stringReader1 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.nextToken();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.ordinaryChars((-683), (-4));
      streamTokenizer2.commentChar((-2));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.ordinaryChars((-1), 96);
      streamTokenizer2.wordChars((-1), (-2));
      streamTokenizer1.sval = null;
      streamTokenizer2.commentChar((-1103039371));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.ordinaryChars(4312, (-2));
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(4312);
      streamTokenizer0.sval = "0D/@f>`[D-&`";
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StringReader stringReader1 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.nextToken();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.ordinaryChars((-683), (-4));
      streamTokenizer2.commentChar((-2));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.ordinaryChars((-1), 96);
      streamTokenizer2.wordChars((-1), (-2));
      streamTokenizer1.sval = null;
      streamTokenizer2.commentChar((-1103039371));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.ordinaryChars(4312, (-2));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(4312);
      streamTokenizer0.sval = "0D/@f>`[D-&`";
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StringReader stringReader1 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.nextToken();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.ordinaryChars((-683), (-4));
      streamTokenizer2.commentChar((-2));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.ordinaryChars((-1), 96);
      streamTokenizer2.wordChars((-1), (-2));
      streamTokenizer1.sval = null;
      streamTokenizer2.commentChar((-1103039371));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.ordinaryChars(4312, (-2));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) streamTokenizer1);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      jSTerm0.addElement("0D/@f>`[D-&`");
      System.setCurrentTimeMillis(1L);
      Integer integer0 = new Integer(1282);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.lastElement();
      jSTerm1.addElement("%%%");
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      CharBuffer.allocate(47);
      CharBuffer.allocate(0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7890221622909377
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "lNe");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate0.or(predicate4);
      jSPredicateForm0.removeIf(predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.removeAllElements();
      assertEquals(1, jSTerm0.size());
      
      jSTerm0.firstElement();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm0);
      jSPredicateForm1.matches((JSPredicateForm) jSTerm0);
      jSPredicateForm2.standarizerPredicateForm();
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer(1568);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      jSTerm0.addElement("0D/@f>`[D-&`");
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      stringReader0.skip(0L);
      Integer integer1 = new Integer(1282);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.lastElement();
      jSTerm1.addElement("%%%");
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      CharBuffer charBuffer0 = CharBuffer.allocate(849);
      CharBuffer charBuffer1 = CharBuffer.allocate(47);
      CharBuffer charBuffer2 = charBuffer0.put(charBuffer1);
      CharBuffer.allocate(0);
      charBuffer2.mark();
      // Undeclared exception!
      try { 
        charBuffer0.read(charBuffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      jSTerm0.addElement("0D/@f>`[D-&`");
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      Integer integer0 = new Integer(1282);
      jSTerm0.lastElement();
      jSTerm0.addElement("0D/@f>`[D-&`");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[9] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      jSPredicateForm0.addElement(objectArray0[4]);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.matches(jSPredicateForm0);
      CharBuffer.allocate(4572);
      int int0 = 47;
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SystemInUtil.addInputLine("n3BG");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(jSPredicateForm0);
      jSPredicateForm0.replaceAll(unaryOperator1);
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "d46QtUNvUoAr_(m");
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      SystemInUtil.addInputLine("n3BG");
      JSJshopVars.verticalL = (-336689585);
      jSPredicateForm0.addElement(unaryOperator1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/597624271 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0D/@f>`[D-&`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      jSTerm0.addElement("0D/@f>`[D-&`");
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      Integer integer0 = new Integer(1282);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.lastElement();
      jSTerm1.addElement("%%%");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      jSPredicateForm0.spliterator();
      unaryOperator0.compose((Function<? super JSTerm, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator2);
      jSPredicateForm0.replaceAll(unaryOperator0);
      JSJshopVars.leftBrac = (-1994939181);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator3);
      UnaryOperator.identity();
      String string0 = "d46QtUNvUoAr_(m";
      jSPredicateForm0.add((Object) "d46QtUNvUoAr_(m");
      UnaryOperator.identity();
      jSPredicateForm0.lastElement();
      unaryOperator2.apply("d46QtUNvUoAr_(m");
      jSPredicateForm0.equals(jSPredicateForm0);
      jSPredicateForm0.addElement("d46QtUNvUoAr_(m");
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Object> function0 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator.identity();
      jSPredicateForm0.add((Object) "umd.cs.shop.JSUtil");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      JSJshopVars.plus = 60;
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      SystemInUtil.addInputLine((String) null);
      jSPredicateForm0.addElement((Object) null);
      System.setCurrentTimeMillis(1619L);
      jSPredicateForm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis(60);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[9];
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm0);
      jSTerm0.replaceAll(unaryOperator0);
      UnaryOperator.identity();
      jSTerm0.add((Object) unaryOperator0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      SystemInUtil.addInputLine(")");
      SystemInUtil.addInputLine(")");
      jSTerm0.addElement((Object) null);
      System.setCurrentTimeMillis(60);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/597624271 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.semicolon = (-1);
      JSJshopVars.interrogation = 1185;
      JSJshopVars.slash = (-366172151);
      JSJshopVars.lessT = 1185;
      jSPredicateForm0.add((Object) "lNe");
      JSJshopVars.flagLevel = 43;
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(43);
      SystemInUtil.addInputLine("J");
      System.setCurrentTimeMillis(3188L);
      System.setCurrentTimeMillis(2998L);
      System.setCurrentTimeMillis((-868L));
      System.setCurrentTimeMillis((-1210L));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSPredicateForm0;
      objectArray0[7] = (Object) jSPredicateForm0;
      objectArray0[8] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.setSize(4);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      int int0 = (-120);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      int int0 = 169;
      CharBuffer charBuffer0 = CharBuffer.allocate(169);
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      int int1 = 43;
      // Undeclared exception!
      try { 
        charBuffer1.compact();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBufferR", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.mark(14);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lie J: ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.stream();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("d@K_l*kQbnM\"W!:Y-a");
      JSJshopVars.interrogation = (-2005465909);
      jSPredicateForm0.spliterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      SystemInUtil.addInputLine("lNe");
      jSPredicateForm0.add((Object) "lNe");
      jSPredicateForm0.print();
      SystemInUtil.addInputLine("");
      System.setCurrentTimeMillis(0L);
      SystemInUtil.addInputLine("lNe");
      System.setCurrentTimeMillis((-366172151));
      System.setCurrentTimeMillis(1185);
      System.setCurrentTimeMillis(2526L);
      System.setCurrentTimeMillis(3188L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "(>^Q-;V;B";
      int int0 = 1185;
      String string1 = "lNe";
      StringReader stringReader0 = new StringReader("(>^Q-;V;B");
      SystemInUtil.addInputLine(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "0D/@f>`[D-&`";
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(" . ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "(>^Q-;V;B";
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      jSTerm0.toArray(objectArray1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
