/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 02:46:50 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.InvalidMarkException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "R");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.clone();
      StringReader stringReader0 = new StringReader("R");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ist");
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("ist");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer1.put(charBuffer0);
      charBuffer0.order();
      stringReader0.read(charBuffer1);
      charBuffer0.duplicate();
      CharBuffer.allocate(1);
      stringReader0.reset();
      CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSJshopVars.semicolon = (-46716008);
      JSJshopVars.backquote = (-3);
      JSJshopVars.interrogation = (-3);
      JSJshopVars.astherisk = (-3);
      JSJshopVars.plus = (-3);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.minus = (-3);
      JSJshopVars.minus = (-3);
      JSJshopVars.coma = (-3);
      JSJshopVars.minus = 62;
      JSJshopVars.minus = (-3);
      JSJshopVars.astherisk = (-3);
      JSJshopVars.interrogation = (-46716008);
      JSJshopVars.minus = (-46716008);
      JSJshopVars.coma = (-46716008);
      JSJshopVars.rightBrac = (-46716008);
      JSJshopVars.percent = (-46716008);
      JSJshopVars.semicolon = (-46716008);
      JSJshopVars.dot = (-46716008);
      JSJshopVars.exclamation = (-46716008);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.flagLevel = (-3);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("Prdicateform.prlnt): 0 elem{ts");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSJshopVars.astherisk = 62;
      JSJshopVars.plus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.coma = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.minus = 62;
      SystemInUtil.addInputLine("/WrMYz*'p");
      JSJshopVars.coma = 62;
      JSJshopVars.semicolon = 62;
      JSJshopVars.dot = 62;
      JSJshopVars.exclamation = 62;
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.parallelStream();
      JSJshopVars.semicolon = 62;
      JSJshopVars.rightPar = 62;
      JSJshopVars.leftPar = (-2529);
      JSJshopVars.lessT = 62;
      System.setCurrentTimeMillis(62);
      JSJshopVars.semicolon = 62;
      JSJshopVars.equalT = 255;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "(Gn[)czn{&r6KKXq_";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Gn[)czn{&r6KKXq_");
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '~';
      charArray0[2] = ',';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = 'j';
      charArray0[6] = 'T';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        charBuffer0.reset();
        fail("Expecting exception: InvalidMarkException");
      
      } catch(InvalidMarkException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSJshopVars.semicolon = (-46716057);
      JSJshopVars.backquote = (-3);
      JSJshopVars.interrogation = (-3);
      JSJshopVars.astherisk = (-46716057);
      JSJshopVars.plus = (-46716057);
      JSJshopVars.leftPar = (-46716057);
      JSJshopVars.minus = (-46716057);
      JSJshopVars.coma = (-46716057);
      JSJshopVars.astherisk = (-46716057);
      JSJshopVars.interrogation = (-46716057);
      JSJshopVars.coma = (-46716057);
      JSJshopVars.rightBrac = (-46716057);
      JSJshopVars.percent = (-46716057);
      SystemInUtil.addInputLine(",*");
      JSJshopVars.semicolon = (-46716057);
      JSJshopVars.dot = (-46716057);
      JSJshopVars.exclamation = (-46716057);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.flagLevel = (-46716057);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("I=9wj");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ist");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.clone();
      StringReader stringReader0 = new StringReader("ist");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSJshopVars.astherisk = 62;
      JSJshopVars.plus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.coma = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.coma = 62;
      JSJshopVars.semicolon = 62;
      JSJshopVars.dot = 62;
      JSJshopVars.exclamation = 62;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(" (%9WHM_<5vh!c=]BqjN");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0194810901268747
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1=g,xR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine(",");
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "1vc=,x&r");
      jSSubstitution0.add(objectArray0[3]);
      jSSubstitution0.add((Object) "If");
      objectArray0[4] = (Object) (-404);
      objectArray0[6] = (Object) jSSubstitution0;
      jSTerm0.equals(objectArray0[1]);
      streamTokenizer0.slashSlashComments(false);
      jSSubstitution0.add((Object) "1vc=,x&r");
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm1));
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
      
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      assertEquals("(1.01.0 )", stringBuffer0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1ofRfYPGS6Y-L=$.3e(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.commentChar((-2));
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.wordChars((-2), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(59, 59);
      streamTokenizer2.nval = (double) (-2);
      streamTokenizer2.ordinaryChars((-2), (-2));
      streamTokenizer3.commentChar((-2));
      jSTerm0.stream();
      streamTokenizer0.pushBack();
      streamTokenizer2.wordChars((-2), (-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer2.commentChar((-2));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      streamTokenizer3.ordinaryChars(21, (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer0.wordChars((-2), (-2));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.wordChars((-4), (-2));
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.quoteChar((-2));
      streamTokenizer0.slashSlashComments(false);
      assertEquals(1, streamTokenizer0.lineno());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0232089559237063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1=g,xR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) jSTerm0;
      jSSubstitution0.add((Object) "1=g,xR");
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "1vc=,x&r");
      jSSubstitution0.add(objectArray0[3]);
      jSSubstitution0.add((Object) "If");
      objectArray0[4] = (Object) (-404);
      objectArray0[6] = (Object) jSSubstitution0;
      jSTerm0.equals(objectArray0[1]);
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.standardizerTerm();
      jSSubstitution0.add((Object) "1vc=,x&r");
      jSTerm0.clonePF();
      jSTerm0.isGround();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.clonePF();
      jSPredicateForm0.print();
      System.setCurrentTimeMillis((-404));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9396996555132768
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1=g,xR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution0;
      jSSubstitution1.add((Object) "1=g,xR");
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution1;
      jSSubstitution1.add((Object) "1vc=,x&r");
      jSSubstitution1.add(objectArray0[3]);
      jSSubstitution1.add((Object) "If");
      jSSubstitution1.removeAll(jSSubstitution0);
      objectArray0[4] = (Object) (-404);
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution1;
      jSTerm0.equals(objectArray0[1]);
      streamTokenizer0.slashSlashComments(false);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.containsAll(jSSubstitution1);
      jSSubstitution1.add((Object) "1vc=,x&r");
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm2));
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "1Vc=,x&R";
      StringReader stringReader0 = new StringReader("1Vc=,x&R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSSubstitution1.clear();
      jSSubstitution0.clear();
      int int0 = (-629);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.ensureCapacity((-2));
      jSSubstitution1.sort((Comparator) null);
      // Undeclared exception!
      try { 
        jSSubstitution0.instance(jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.wordChars((-4), (-4));
      jSTerm0.add((Object) null);
      streamTokenizer1.nextToken();
      streamTokenizer0.nval = (-4.0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer0.ttype = 47;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "1L";
      StringReader stringReader0 = new StringReader("1L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      stringReader0.close();
      jSTerm0.add((Object) "1L");
      boolean boolean0 = true;
      streamTokenizer0.slashStarComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZlUW,JRa(+2dg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1Vc=,x&R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-2);
      stringReader0.close();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.sval = "1Vc=,x&R";
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.close();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-2));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.wordChars((-2), (-2));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.wordChars(124, 124);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.wordChars((-2), (-2));
      streamTokenizer2.quoteChar((-2));
      streamTokenizer0.slashSlashComments(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      predicate0.negate();
      predicate1.negate();
      Predicate<String> predicate2 = Predicate.isEqual((Object) jSTerm0);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      predicate1.negate();
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.negate();
      predicate6.negate();
      predicate1.or(predicate0);
      predicate0.negate();
      predicate1.negate();
      predicate5.negate();
      predicate2.negate();
      Predicate<String> predicate7 = predicate6.negate();
      predicate2.negate();
      Predicate<String> predicate8 = predicate7.negate();
      predicate3.negate();
      predicate7.negate();
      predicate7.negate();
      predicate1.negate();
      predicate0.negate();
      predicate4.negate();
      predicate8.negate();
      predicate0.negate();
      predicate1.negate();
      predicate3.negate();
      predicate4.negate();
      predicate0.negate();
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("ist");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1ofRfYPGS6Y-L=$.3e(");
      SystemInUtil.addInputLine("1ofRfYPGS6Y-L=$.3e(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.nval = (double) (-2);
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.commentChar((-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(700);
      jSTerm0.add((Object) streamTokenizer2);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.wordChars(2213, 8);
      streamTokenizer2.commentChar(2213);
      streamTokenizer2.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSJshopVars.semicolon = (-46716008);
      JSJshopVars.backquote = (-3);
      JSJshopVars.interrogation = (-3);
      JSJshopVars.astherisk = (-3);
      JSJshopVars.plus = (-3);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.minus = (-3);
      JSJshopVars.minus = (-3);
      JSJshopVars.coma = (-3);
      JSJshopVars.minus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.astherisk = 62;
      JSJshopVars.interrogation = (-46716008);
      JSJshopVars.minus = (-46716008);
      JSJshopVars.coma = (-46716008);
      JSJshopVars.rightBrac = (-46716008);
      JSJshopVars.semicolon = (-46716008);
      JSJshopVars.dot = (-46716008);
      JSJshopVars.exclamation = (-46716008);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.flagLevel = 62;
      SystemInUtil.addInputLine("s");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("s");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1Vc=,x&R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-2);
      stringReader0.close();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-2);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.sval = "1Vc=,x&R";
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.close();
      jSTerm0.clone();
      jSTerm0.add((Object) "1Vc=,x&R");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "g1cVDL-YJ\"sW{!cC");
      jSTerm0.removeAllElements();
      jSTerm0.add((Object) "g1cVDL-YJ\"sW{!cC");
      jSTerm0.print();
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("g1cVDL-YJ\"sW{!cC");
      StringReader stringReader1 = new StringReader("g1cVDL-YJ\"sW{!cC");
      stringReader0.ready();
      stringReader0.reset();
      stringReader0.markSupported();
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = 'j';
      charArray0[3] = 'B';
      stringReader1.read(charArray0);
      stringReader0.reset();
      stringReader1.read();
      stringReader0.skip((-991L));
      stringReader1.skip(0L);
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("(!TI=9w8yy");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1Vc=,x&R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.size();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.iterator();
      streamTokenizer0.wordChars(1, 2213);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(0);
      StringReader stringReader1 = new StringReader("1Vc=,x&R");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      streamTokenizer1.whitespaceChars((-42668094), (-27));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-3));
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(false);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "list");
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "list");
      jSSubstitution0.clear();
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(1970L);
      System.setCurrentTimeMillis(1970L);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1ofRfYPGS6Y-L=$.3e(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer1.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.wordChars((-4), 2942);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.ordinaryChars((-4), (-2));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.wordChars((-4), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.quoteChar((-2));
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Jst");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      predicate0.negate();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) "!");
      Predicate<Object> predicate10 = predicate9.and(predicate0);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate<String> predicate12 = predicate7.and(predicate11);
      predicate8.negate();
      predicate5.and(predicate8);
      Predicate<String> predicate13 = predicate6.negate();
      Predicate<String> predicate14 = predicate6.or(predicate13);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate5.negate();
      predicate4.negate();
      Predicate<String> predicate16 = predicate12.negate();
      Predicate<String> predicate17 = predicate16.negate();
      Predicate<String> predicate18 = predicate6.negate();
      Predicate<String> predicate19 = predicate18.negate();
      predicate8.negate();
      Predicate<Object> predicate20 = predicate0.negate();
      predicate19.or(predicate20);
      predicate4.negate();
      predicate15.negate();
      predicate3.test(predicate0);
      predicate17.negate();
      predicate17.negate();
      predicate19.negate();
      jSPredicateForm0.clonePF();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals(1, jSPredicateForm1.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(40);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2303899811147658
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "{qga{,t?4dn6tbg`");
      jSTerm0.print();
      jSTerm0.print();
      SystemInUtil.addInputLine("BwKyd\"H@");
      StringReader stringReader0 = new StringReader("{qga{,t?4dn6tbg`");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("{qga{,t?4dn6tbg`");
      stringReader0.read();
      stringReader0.ready();
      stringReader0.reset();
      stringReader1.markSupported();
      stringReader0.markSupported();
      stringReader0.ready();
      stringReader1.skip((-2756L));
      char[] charArray0 = new char[5];
      stringReader0.reset();
      SystemInUtil.addInputLine("(");
      charArray0[0] = '!';
      SystemInUtil.addInputLine("yge");
      stringReader1.ready();
      charArray0[2] = '!';
      charArray0[4] = '!';
      stringReader0.read(charArray0, 1, 1);
      stringReader0.reset();
      stringReader1.read(charArray0);
      SystemInUtil.addInputLine("uX)B=;XGvj");
      stringReader0.ready();
      stringReader1.read(charArray0);
      stringReader0.reset();
      stringReader1.read();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!I=9>jRt8Oy");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      predicate0.negate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.negate();
      Predicate<String> predicate3 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate4 = predicate3.negate();
      predicate1.negate();
      predicate2.negate();
      predicate2.negate();
      predicate2.negate();
      Predicate<String> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.negate();
      predicate1.negate();
      predicate0.negate();
      predicate5.negate();
      predicate6.negate();
      Predicate<String> predicate7 = predicate6.negate();
      predicate7.negate();
      predicate1.negate();
      predicate3.negate();
      predicate7.negate();
      predicate2.negate();
      predicate0.negate();
      predicate6.negate();
      predicate4.negate();
      predicate2.negate();
      predicate4.negate();
      predicate5.negate();
      predicate7.negate();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ist");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "ist");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) "wva");
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) "ist");
      jSSubstitution1.iterator();
      jSSubstitution0.spliterator();
      Spliterator spliterator0 = jSSubstitution2.spliterator();
      jSSubstitution1.addAll((Collection) jSSubstitution0);
      jSSubstitution2.iterator();
      jSSubstitution2.iterator();
      jSSubstitution0.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution2.ensureCapacity((-629));
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution3);
      jSSubstitution1.clear();
      jSSubstitution1.removeElement(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution2.add((Object) null);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) "ist");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      jSSubstitution4.add((Object) spliterator0);
      jSSubstitution2.add((Object) "ist");
      // Undeclared exception!
      try { 
        jSSubstitution4.addElements(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$VectorSpliterator cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.sval = null;
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-2));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-2), (-2));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.wordChars((-2), (-2));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.quoteChar((-2));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.wordChars((-2), (-2));
      streamTokenizer2.quoteChar((-2));
      streamTokenizer0.slashSlashComments(false);
      assertEquals(1.0, streamTokenizer0.nval, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ist");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "_lUSy1");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) "ist");
      Iterator iterator0 = jSSubstitution1.iterator();
      jSSubstitution0.spliterator();
      jSSubstitution2.spliterator();
      jSSubstitution1.addAll((Collection) jSSubstitution0);
      Iterator iterator1 = jSSubstitution2.iterator();
      jSSubstitution2.iterator();
      jSSubstitution0.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.ensureCapacity((-927));
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.clear();
      jSSubstitution0.removeElement((Object) null);
      jSSubstitution1.add((Object) iterator1);
      jSSubstitution3.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) iterator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "_lUSy1";
      jSSubstitution0.add((Object) "_lUSy1");
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) "ist");
      jSSubstitution0.iterator();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSSubstitution1.spliterator();
      jSSubstitution1.add((Object) spliterator0);
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      jSSubstitution1.iterator();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution1.ensureCapacity((-629));
      jSSubstitution0.clear();
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) null);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) "ist");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSJshopVars.astherisk = 62;
      JSJshopVars.plus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.coma = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.minus = 62;
      SystemInUtil.addInputLine("/WrMYz*'p");
      JSJshopVars.coma = 62;
      JSJshopVars.semicolon = 62;
      JSJshopVars.dot = 62;
      JSJshopVars.exclamation = 62;
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.parallelStream();
      JSJshopVars.semicolon = 62;
      JSJshopVars.rightPar = 62;
      JSJshopVars.leftPar = (-2529);
      JSJshopVars.lessT = 62;
      System.setCurrentTimeMillis(62);
      JSJshopVars.semicolon = 62;
      JSJshopVars.equalT = 255;
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2690221622909377
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Jst");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      SystemInUtil.addInputLine("Jst");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<String> predicate7 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate9);
      Predicate<String> predicate11 = predicate7.negate();
      Predicate<String> predicate12 = predicate7.or(predicate11);
      predicate12.negate();
      predicate6.negate();
      predicate5.negate();
      predicate8.negate();
      predicate12.negate();
      Predicate<String> predicate13 = predicate8.negate();
      Predicate<String> predicate14 = predicate13.negate();
      predicate13.negate();
      predicate4.and(predicate3);
      predicate9.negate();
      Predicate<Object> predicate15 = predicate10.negate();
      predicate14.or(predicate15);
      predicate5.negate();
      predicate4.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches(jSPredicateForm3);
      assertFalse(jSSubstitution1.fail());
      
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm0);
      assertTrue(boolean0);
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.sval = null;
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-1));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-1), (-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.wordChars((-1), (-1));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.wordChars((-1), (-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer0.slashSlashComments(false);
      assertEquals(1, streamTokenizer0.lineno());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Jst");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<String> predicate4 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      predicate3.negate();
      predicate2.negate();
      Predicate<String> predicate7 = predicate4.negate();
      Predicate<String> predicate8 = predicate7.negate();
      predicate7.negate();
      predicate6.negate();
      predicate3.negate();
      Predicate<String> predicate9 = predicate7.negate();
      predicate4.negate();
      predicate8.negate();
      predicate9.negate();
      Predicate<String> predicate10 = predicate4.negate();
      predicate1.negate();
      predicate10.negate();
      predicate10.negate();
      predicate0.negate();
      predicate5.negate();
      jSTerm0.clonePF();
      jSTerm0.setSize(977);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      charBuffer0.position(1);
      charBuffer0.asReadOnlyBuffer();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "list");
      jSTerm0.add((Object) "list");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1256));
      jSPredicateForm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Jst");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.negate();
      predicate1.negate();
      Predicate<String> predicate3 = Predicate.isEqual((Object) jSTerm0);
      predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate5.negate();
      predicate5.negate();
      predicate2.negate();
      predicate2.negate();
      predicate6.negate();
      predicate3.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate3.negate();
      Predicate<String> predicate10 = predicate8.negate();
      predicate4.negate();
      predicate8.negate();
      predicate9.test("t6 Iqss?pf6!%)&z\"N");
      predicate8.negate();
      predicate1.negate();
      predicate2.negate();
      predicate5.negate();
      predicate10.negate();
      predicate0.negate();
      predicate1.negate();
      predicate5.negate();
      predicate0.negate();
      predicate4.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1ofRfYPGS6Y-L=$.3e(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer1.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.wordChars((-4), 2942);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.ordinaryChars((-4), (-2));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.wordChars((-4), (-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.quoteChar((-2));
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Jst");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      predicate7.negate();
      predicate7.negate();
      Predicate<String> predicate8 = predicate5.negate();
      Predicate<String> predicate9 = predicate8.negate();
      predicate6.negate();
      predicate1.negate();
      Predicate<String> predicate10 = predicate4.negate();
      predicate5.negate();
      Predicate<String> predicate11 = predicate4.negate();
      predicate9.negate();
      predicate10.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<String> predicate13 = predicate8.negate();
      predicate11.negate();
      predicate12.negate();
      predicate5.negate();
      Predicate<String> predicate14 = predicate9.negate();
      Predicate<Object> predicate15 = predicate2.and(predicate0);
      predicate15.negate();
      predicate13.negate();
      predicate14.negate();
      predicate5.negate();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.greaterT = (-17);
      JSJshopVars.plus = (-17);
      JSJshopVars.colon = (-17);
      JSJshopVars.coma = (-17);
      JSJshopVars.minus = (-17);
      JSJshopVars.semicolon = (-17);
      jSPredicateForm0.setSize(1);
      JSJshopVars.dot = (-17);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 0;
      jSPredicateForm0.add(0, (Object) "h/M-G");
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(0);
      char[] charArray0 = new char[3];
      int int1 = 5;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, (-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.add((Object) "(gW2");
      jSSubstitution0.trimToSize();
      jSSubstitution0.clear();
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.remove((Object) "(gW2");
      Spliterator spliterator1 = jSSubstitution0.spliterator();
      jSSubstitution0.clear();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.containsAll(jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.listIterator();
      jSSubstitution0.add((Object) spliterator1);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) spliterator0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) spliterator0);
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.remove((Object) spliterator1);
      jSSubstitution0.add((Object) "(gW2");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis(0L);
      String string0 = "=ej";
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        charBuffer0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      char[] charArray0 = new char[2];
      int int0 = 5;
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CharBuffer charBuffer1 = CharBuffer.allocate(5);
      int int1 = (-1969596283);
      charBuffer1.append((CharSequence) charBuffer0);
      char char0 = 'J';
      int int2 = (-1400);
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, 5, (-16582885));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSSubstitution0.trimToSize();
      jSSubstitution0.add((Object) "(gW+");
      jSSubstitution0.add((Object) "(gW+");
      jSSubstitution0.trimToSize();
      jSSubstitution0.add((Object) "(gW+");
      jSSubstitution0.clear();
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSSubstitution0.remove((Object) "(gW+");
      Spliterator spliterator1 = jSSubstitution0.spliterator();
      jSSubstitution0.clear();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) spliterator0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) spliterator1);
      jSSubstitution0.remove((Object) spliterator1);
      jSSubstitution0.add((Object) "(gW+");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("(gW+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSJshopVars.semicolon = (-46716008);
      JSJshopVars.backquote = (-3);
      JSJshopVars.interrogation = (-3);
      JSJshopVars.astherisk = (-3);
      JSJshopVars.plus = (-3);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.minus = (-3);
      JSJshopVars.minus = (-3);
      JSJshopVars.coma = (-3);
      JSJshopVars.minus = 62;
      JSJshopVars.minus = (-3);
      JSJshopVars.astherisk = (-3);
      JSJshopVars.interrogation = (-46716008);
      JSJshopVars.minus = (-46716008);
      JSJshopVars.coma = (-46716008);
      JSJshopVars.rightBrac = (-46716008);
      JSJshopVars.percent = (-46716008);
      JSJshopVars.semicolon = (-46716008);
      JSJshopVars.dot = (-46716008);
      JSJshopVars.exclamation = (-46716008);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.flagLevel = (-3);
      JSJshopVars.minus = (-2021676949);
      System.setCurrentTimeMillis((-46716008));
      System.setCurrentTimeMillis(2207L);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.semicolon = (-46716057);
      JSJshopVars.backquote = (-3);
      JSJshopVars.interrogation = (-3);
      JSJshopVars.plus = 42;
      JSJshopVars.leftPar = (-3);
      JSJshopVars.minus = 42;
      JSJshopVars.minus = 42;
      JSJshopVars.coma = 42;
      SystemInUtil.addInputLine("j  ");
      JSJshopVars.minus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.interrogation = (-46716057);
      JSJshopVars.minus = (-46716057);
      JSJshopVars.coma = (-46716057);
      JSJshopVars.rightBrac = (-46716057);
      JSJshopVars.semicolon = (-46716057);
      JSJshopVars.dot = (-46716057);
      JSJshopVars.exclamation = (-46716057);
      System.setCurrentTimeMillis((-46716057));
      System.setCurrentTimeMillis((-46716057));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "(cBGn[En{&cr6KKvq_";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(cBGn[En{&cr6KKvq_");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSSubstitution0.trimToSize();
      jSSubstitution0.trimToSize();
      jSSubstitution0.clear();
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      Spliterator spliterator1 = jSSubstitution0.spliterator();
      jSSubstitution0.clear();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution0.removeAll(jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) spliterator0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) spliterator1);
      jSSubstitution0.remove((Object) spliterator1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSJshopVars.semicolon = (-46716057);
      JSJshopVars.backquote = (-3);
      JSJshopVars.interrogation = (-3);
      JSJshopVars.astherisk = (-46716057);
      JSJshopVars.plus = (-46716057);
      JSJshopVars.leftPar = (-46716057);
      JSJshopVars.minus = (-46716057);
      JSJshopVars.minus = (-46716057);
      JSJshopVars.coma = (-46716057);
      JSJshopVars.minus = 62;
      JSJshopVars.minus = 62;
      JSJshopVars.astherisk = 62;
      JSJshopVars.interrogation = (-46716057);
      JSJshopVars.minus = (-46716057);
      JSJshopVars.coma = (-46716057);
      JSJshopVars.rightBrac = (-46716057);
      JSJshopVars.percent = (-46716057);
      JSJshopVars.semicolon = (-46716057);
      JSJshopVars.dot = (-46716057);
      JSJshopVars.exclamation = (-46716057);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.flagLevel = 62;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 63;
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.trimToSize();
      jSSubstitution0.removeElements(jSSubstitution0);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.listIterator(0);
      jSSubstitution0.removeElements(jSSubstitution0);
      Spliterator spliterator1 = jSSubstitution0.spliterator();
      jSSubstitution0.clear();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSSubstitution0);
      boolean boolean0 = jSSubstitution0.containsAll(jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.listIterator();
      jSSubstitution0.add((Object) spliterator1);
      SystemInUtil.addInputLine("% ");
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) spliterator0);
      jSSubstitution0.add((Object) jSSubstitution0);
      SystemInUtil.addInputLine((String) null);
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) spliterator0);
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.remove((Object) spliterator1);
      jSSubstitution0.add((Object) jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      boolean boolean1 = jSSubstitution0.addAll((Collection) jSSubstitution0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      char[] charArray0 = new char[2];
      int int0 = 5;
      CharBuffer.allocate(5);
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      // Undeclared exception!
      try { 
        charBuffer0.charAt(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1004201767809911
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SystemInUtil.addInputLine("BwKyd\"H@");
      StringReader stringReader0 = new StringReader("{qga{,t?4dn6tbg`");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("{qga{,t?4dn6tbg`");
      stringReader0.read();
      stringReader0.ready();
      stringReader0.reset();
      stringReader1.markSupported();
      stringReader0.markSupported();
      stringReader0.ready();
      stringReader1.skip((-2756L));
      char[] charArray0 = new char[5];
      stringReader0.reset();
      SystemInUtil.addInputLine("(");
      charArray0[0] = '!';
      SystemInUtil.addInputLine("yge");
      stringReader1.ready();
      charArray0[2] = '!';
      charArray0[4] = '!';
      stringReader0.read(charArray0, 1, 1);
      stringReader0.reset();
      stringReader1.read(charArray0);
      SystemInUtil.addInputLine("uX)B=;XGvj");
      stringReader0.ready();
      stringReader1.read(charArray0);
      stringReader0.reset();
      stringReader1.read();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!I=9wj 8yy");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "cBGn[En{&r6KKq_";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("cBGn[En{&r6KKq_");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "qga{,t?4dn6tbg`";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(cesao{&c2r6Kjvq_");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      System.setCurrentTimeMillis(8L);
      StringReader stringReader0 = new StringReader(">%XD2r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
