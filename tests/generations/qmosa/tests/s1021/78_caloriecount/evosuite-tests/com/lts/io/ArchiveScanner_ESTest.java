/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 01:51:34 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0639354877575324
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qseY.jr/home/ubuntu");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("qseY.dr281320.qseY.dr");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "zC.p(x7");
      MockFile mockFile0 = new MockFile("qseY.jr");
      mockFile0.getAbsolutePath();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true);
      mockFile0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URI uRI0 = mockFile0.toURI();
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", "zC.p(x7", mockFile0);
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      MockURI.toURL(uRI0);
      stringArray0[0] = "zC.p(x7";
      stringArray0[1] = "tz-U8-Qv42P";
      stringArray0[2] = "tz-U8-Qv42P";
      stringArray0[3] = "tz-U8-Qv42P";
      stringArray0[4] = "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr";
      archiveScanner0.setIncludes(stringArray0);
      mockFile0.setWritable(true, true);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("qseY.dr281321.qseY.dr/home");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "tz-U8-Qv42P");
      MockFile mockFile1 = new MockFile("Error during repository cleanup.\nContinue startup?", "*YD$J\r{6{@\"");
      archiveScanner0.scandir(mockFile0, "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", true);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, ".zip.jar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9492770073528045
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qseY.jr");
      MockFile.createTempFile("8>K_#Ns", "-~%IIH2H!%");
      mockFile0.getAbsolutePath();
      mockFile0.deleteOnExit();
      mockFile0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURI();
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", "zC.p(x7", mockFile0);
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.deleteOnExit();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zC.p(x7";
      stringArray0[1] = "tz-U8-Qv42P";
      stringArray0[2] = "tz-U8-Qv42P";
      stringArray0[3] = "tz-U8-Qv42P";
      stringArray0[4] = "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr";
      archiveScanner0.setIncludes(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qseY.dr281321.qseY.dr/home");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tz-U8-Qv42P");
      MockFile mockFile1 = new MockFile("Ewror during repository cleanup.\n\"ontinueUstartup?", "*o+D@\"");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, "*o+D@\"", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5362196185879133
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qseY.dr281320.qseY.dr");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qseY.jr");
      MockFile mockFile0 = new MockFile("qseY.jr");
      mockFile0.getAbsolutePath();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true);
      mockFile0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URI uRI0 = mockFile0.toURI();
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", "zC.p(x7", mockFile0);
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.deleteOnExit();
      String[] stringArray0 = new String[5];
      MockURI.toURL(uRI0);
      stringArray0[0] = "zC.p(x7";
      stringArray0[1] = "tz-U8-Qv42P";
      stringArray0[2] = "tz-U8-Qv42P";
      stringArray0[3] = "tz-U8-Qv42P";
      stringArray0[4] = "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr";
      archiveScanner0.setIncludes(stringArray0);
      mockFile0.setWritable(true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("qseY.dr281321.qseY.dr/home");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tz-U8-Qv42P");
      MockFile mockFile1 = new MockFile("Error during repository cleanup.\nContinue startup?", "*YD$J\r{6{@\"");
      archiveScanner0.scandir(mockFile0, "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", true);
      archiveScanner0.scandir(mockFile0, ".ZIP", true);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/qseY.jr/home/ubuntu/termite/projects/78_caloriecount/qseY.jr0zC.p(x7
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qseY.jr");
      File file0 = MockFile.createTempFile("8>K_#Ns", "-~%IIH2H!%");
      mockFile0.getAbsolutePath();
      mockFile0.deleteOnExit();
      file0.getAbsoluteFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URI uRI0 = mockFile0.toURI();
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", "zC.p(x7", mockFile0);
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.deleteOnExit();
      String[] stringArray0 = new String[5];
      MockURI.toURL(uRI0);
      stringArray0[0] = "zC.p(x7";
      stringArray0[1] = "tz-U8-Qv42P";
      stringArray0[2] = "tz-U8-Qv42P";
      stringArray0[3] = "tz-U8-Qv42P";
      stringArray0[4] = "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr";
      archiveScanner0.setIncludes(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qseY.dr281321.qseY.dr/home");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tz-U8-Qv42P");
      MockFile mockFile1 = new MockFile("Ewror during repository cleanup.\n\"ontinueUstartup?", "*YD$J\r{6{@\"");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NZj$.ja^r");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      stringArray0[0] = "NZj$.ja^r";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "NZj$.ja^r";
      archiveScanner0.setIncludes(stringArray0);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "NZj$.ja^r", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/NZj$.ja^r
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Vl[<g%'");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      stringArray0[0] = "Vl[<g%'";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "Vl[<g%'";
      Vector<InputStream> vector2 = new Vector<InputStream>();
      Comparator<InputStream> comparator0 = (Comparator<InputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector2.sort(comparator0);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      vector2.addAll((Collection<? extends InputStream>) linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)54, (byte)54);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 8);
      vector2.add((InputStream) pushbackInputStream0);
      archiveScanner0.setIncludes(stringArray0);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "Vl[<g%'", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/Vl[<g%'
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("h", "h");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "*M2BP#R;]H-~[0G";
      archiveScanner0.setIncludes(stringArray0);
      int int0 = (-1785);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector1;
      Integer integer0 = new Integer((-1785));
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("h");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "*M2BP#R;]H-~[0G";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      Integer integer0 = new Integer((-1785));
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "java.io.tmpdir";
      ImprovedFile improvedFile0 = new ImprovedFile("java.io.tmpdir");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.io.tmpdir";
      stringArray0[1] = "*M2BP#R;]H-~[0G";
      archiveScanner0.setIncludes(stringArray0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      Integer integer0 = new Integer((-1785));
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("java.io.tmpdir");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      pipedInputStream2.mark(4525);
      PipedInputStream pipedInputStream4 = new PipedInputStream(4525);
      pipedInputStream1.mark(1121);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("NyKo^GU}vFFom'}xe&Pr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream4);
      vector0.add((InputStream) pipedInputStream3);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-1702));
      pipedInputStream2.mark((-1702));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.add((InputStream) null);
      pipedInputStream2.markSupported();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream3);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "NyKo^GU}vFFom'}xe&Pr";
      vector0.add((InputStream) pipedInputStream5);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("NyKo^GU}vFFom'}xe&Pr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("h");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "*M2BP#R;]H-~[0G";
      archiveScanner0.setIncludes(stringArray0);
      int int0 = (-1785);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector1;
      Integer integer0 = new Integer((-1785));
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      pipedInputStream1.skip((-837L));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.mark(4580);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      pipedInputStream1.mark(1168);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("xq#gcljB}G +;xQ", "xq#gcljB}G +;xQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream3);
      pipedInputStream3.markSupported();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-131851595));
      pipedInputStream2.mark((-131851595));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.add((InputStream) pipedInputStream3);
      pipedInputStream2.markSupported();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      vector0.add((InputStream) pipedInputStream3);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "xq#gcljB}G +;xQ";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "xq#gcljB}G +;xQ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      pipedInputStream2.mark(4525);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream4 = new PipedInputStream(4525);
      pipedInputStream1.mark(1121);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("NyKo^GU}vFFom'}xe&Pr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream4);
      vector0.add((InputStream) pipedInputStream3);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-1702));
      pipedInputStream2.mark((-1702));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.add((InputStream) null);
      pipedInputStream2.markSupported();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream3);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "NyKo^GU}vFFom'}xe&Pr";
      vector0.add((InputStream) pipedInputStream5);
      archiveScanner0.setIncludes(stringArray0);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "NyKo^GU}vFFom'}xe&Pr", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/NyKo^GU}vFFom'}xe&Pr
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      pipedInputStream1.skip((-837L));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.mark(4564);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      pipedInputStream1.mark(1168);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("?qf#gcljB@ +;Q", "?qf#gcljB@ +;Q");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream3);
      pipedInputStream3.markSupported();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-131851595));
      pipedInputStream2.mark((-131851595));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.add((InputStream) pipedInputStream3);
      pipedInputStream2.markSupported();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream3);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "?qf#gcljB@ +;Q";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "?qf#gcljB@ +;Q", true);
      assertEquals(0L, improvedFile0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("WGh", "WGh");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WGh";
      vector0.spliterator();
      vector0.add("qU=ft]W{uhIiz5.jar");
      stringArray0[1] = "WGh";
      archiveScanner0.setIncludes(stringArray0);
      int int0 = 1860;
      vector0.setSize(1860);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector1;
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "WGh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "NZIA.jar";
      ImprovedFile improvedFile0 = new ImprovedFile("NZIA.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*M2BP#R;]H-~[0G";
      stringArray0[1] = "NZIA.jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("*M2BP#R;]H-~[0G");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("h");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "*M2BP#R;]H-~[0G";
      archiveScanner0.setIncludes(stringArray0);
      int int0 = (-1785);
      Integer integer0 = new Integer((-1785));
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NZI$.ja^r");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NZI$.ja^r";
      stringArray0[1] = "NZI$.ja^r";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "NZI$.ja^r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("h");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "h";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector0;
      archiveScanner0.processArchive(improvedFile0, "h");
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1402L));
      System.setCurrentTimeMillis(1666L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1101L));
      System.setCurrentTimeMillis(1263L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1452L);
      System.setCurrentTimeMillis((-1402L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      pipedInputStream1.mark(4580);
      pipedInputStream2.mark(4580);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      pipedInputStream1.mark(1168);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("o$8zl$09Q58.b-K\"EQN", "o$8zl$09Q58.b-K\"EQN");
      improvedFile0.makeDirectories();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      pipedInputStream2.markSupported();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream1);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream2.mark((-131851595));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.addAll((Collection<? extends InputStream>) vector1);
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "o$8zl$09Q58.b-K\"EQN";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "o$8zl$09Q58.b-K\"EQN", false);
      assertEquals(0L, improvedFile0.getTotalSpace());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NZIA.jazr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*M2BP#R;]H-~[0G";
      stringArray0[1] = "NZIA.jazr";
      archiveScanner0.setIncludes(stringArray0);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "*M2BP#R;]H-~[0G", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      pipedInputStream1.skip((-855L));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.mark(4558);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      pipedInputStream1.mark(1192);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("?Qqd$Pf#ljB_ <Q", "?Qqd$Pf#ljB_ <Q");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream3);
      pipedInputStream3.markSupported();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-131851598));
      pipedInputStream2.mark((-131851598));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.add((InputStream) null);
      pipedInputStream2.markSupported();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream3);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "?Qqd$Pf#ljB_ <Q";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "?Qqd$Pf#ljB_ <Q", true);
      assertFalse(improvedFile0.canExecute());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "**/CVS";
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.haveSlowResults = false;
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner1.addDefaultExcludes();
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner1.dirsIncluded = vector1;
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) archiveScanner0.DIRECTORY;
      integerArray0[1] = (Integer) archiveScanner0.ARCHIVE;
      integerArray0[2] = (Integer) archiveScanner1.FILE;
      int int0 = (-836);
      Integer integer0 = new Integer(int0);
      int int1 = 1643;
      vector1.setSize(int1);
      boolean boolean0 = false;
      archiveScanner1.haveSlowResults = boolean0;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) archiveScanner0.ARCHIVE;
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      archiveScanner2.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      System.setCurrentTimeMillis(archiveScanner1.FILE);
      System.setCurrentTimeMillis((long) integerArray0[3]);
      String string1 = "i_Fgw+!0l=$b_4+:JL";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.068722582125393
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("NZIA.jazr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*M2BP#R;]H-~[0G";
      stringArray0[1] = "NZIA.jazr";
      archiveScanner0.setIncludes(stringArray0);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      DirectoryScanner.matchPath("*M2BP#R;]H-~[0G", "NZIA.jazr");
      ImprovedFile improvedFile1 = new ImprovedFile("");
      ImprovedFile.createTempImprovedFile("<Separator>", "*M2BP#R;]H-~[0G", improvedFile1);
      DirectoryScanner.match("", "*M2BP#R;]H-~[0G");
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      archiveScanner1.includes = stringArray0;
      try { 
        archiveScanner0.scandir(improvedFile1, "*!32pXm5^Q", true);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/<Separator>0*M2BP#R;]H-~[0G
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.509266371452267
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("qseY.dr281320.qseY.dr");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qseY.jr");
      MockFile mockFile0 = new MockFile("qseY.jr");
      File file0 = MockFile.createTempFile("8>K_#Ns", "-~%EIH2H!H");
      mockFile0.getAbsolutePath();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURI();
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", "z&x}", mockFile0);
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.deleteOnExit();
      String[] stringArray0 = new String[5];
      mockFile0.toURL();
      stringArray0[0] = "z&x}";
      stringArray0[1] = "tz-U8-Qv42P";
      stringArray0[2] = "tz-U8-Qv42P";
      stringArray0[3] = "tz-U8-Qv42P";
      stringArray0[4] = "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr";
      archiveScanner0.setIncludes(stringArray0);
      mockFile0.setWritable(true, false);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("qseY.dr281321.qseY.dr/home");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tz-U8-Qv42P");
      MockFile mockFile1 = new MockFile("Error during repository cleanup.\nContinue startup?", "h?N$");
      archiveScanner0.scandir(mockFile0, "/home/ubuntu/termite/projects/78_caloriecount/qseY.jr", true);
      try { 
        archiveScanner0.scandir(file0, ".zip.jar", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /tmp/8>K_#Ns0-~%EIH2H!H
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "WGh";
      ImprovedFile improvedFile0 = new ImprovedFile("WGh", "WGh");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      vector0.spliterator();
      vector0.add("qU=ft]W{uhIiz5.jar");
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      int int0 = 1860;
      vector0.setSize(int0);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector1;
      archiveScanner0.processArchive(improvedFile0, string0);
      System.setCurrentTimeMillis(archiveScanner0.FILE);
      long long0 = 1493L;
      System.setCurrentTimeMillis(long0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(int0);
      long long2 = 1L;
      System.setCurrentTimeMillis(long2);
      archiveScanner0.setBasedir(string0);
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long1);
      long long4 = 0L;
      System.setCurrentTimeMillis(long4);
      long long5 = 945L;
      System.setCurrentTimeMillis(long5);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      long long6 = 220L;
      System.setCurrentTimeMillis(long6);
      long long7 = 923L;
      System.setCurrentTimeMillis(long7);
      assertFalse(long7 == long6);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      predicate2.test(predicate5);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) "mkG");
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate.isEqual(object0);
      Predicate<Object> predicate8 = predicate7.and(predicate2);
      predicate3.test(predicate5);
      Predicate<Object> predicate9 = predicate2.or(predicate5);
      Predicate<Object> predicate10 = predicate1.and(predicate4);
      Predicate<Object> predicate11 = predicate7.and(predicate1);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) "mkG");
      Predicate<Object> predicate13 = predicate12.and(predicate11);
      predicate2.test(predicate9);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate14 = predicate12.negate();
      Predicate<Integer> predicate15 = predicate6.and(predicate12);
      Predicate<Object> predicate16 = predicate10.and(predicate4);
      predicate14.or(predicate8);
      Object object1 = new Object();
      Predicate<Object> predicate17 = predicate14.and(predicate2);
      predicate13.negate();
      predicate15.negate();
      predicate17.negate();
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate18 = predicate10.or(predicate0);
      predicate16.negate();
      predicate18.negate();
      predicate9.and(predicate7);
      MockFile mockFile0 = new MockFile("MV]36GlGo}w,\"Dl:", "mkG");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("mkG", "mkG", mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "MV]36GlGo}w,\"Dl:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("^ZR>Zc={swmq4", "^ZR>Zc={swmq4");
      Vector<String> vector0 = new Vector<String>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?]e";
      stringArray0[1] = "NZIA";
      stringArray0[2] = "NZIA";
      stringArray0[3] = "?]e";
      stringArray0[4] = "^ZR>Zc={swmq4";
      stringArray0[5] = "a=Jz#NHIJTm45M+PZ2";
      stringArray0[6] = ",R{$B*$rO";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector1;
      archiveScanner0.processFile("The method, ");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("h");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "h";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "**/CVS";
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.haveSlowResults = false;
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner1.dirsIncluded = vector1;
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      Integer[] integerArray0 = new Integer[5];
      vector1.add(string0);
      integerArray0[0] = (Integer) archiveScanner0.DIRECTORY;
      integerArray0[1] = (Integer) archiveScanner0.ARCHIVE;
      integerArray0[2] = (Integer) archiveScanner1.FILE;
      int int0 = (-836);
      Integer integer0 = new Integer(int0);
      int int1 = 1643;
      vector1.setSize(int1);
      boolean boolean0 = false;
      archiveScanner1.haveSlowResults = boolean0;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) archiveScanner0.ARCHIVE;
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      archiveScanner2.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      System.setCurrentTimeMillis(archiveScanner1.FILE);
      System.setCurrentTimeMillis((long) integerArray0[3]);
      String string1 = "i_Fgw+!0l=$b_4+:JL";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream(4525);
      pipedInputStream3.mark(4525);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream4 = new PipedInputStream(4525);
      pipedInputStream1.mark(1192);
      PipedInputStream pipedInputStream5 = new PipedInputStream(4525);
      ImprovedFile improvedFile0 = new ImprovedFile("NyKo^GU}vFFom'}xe&Pr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream3);
      pipedInputStream3.markSupported();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-131851579));
      pipedInputStream2.mark((-131851579));
      vector1.add(pipedInputStream0);
      vector1.addElement(pipedInputStream1);
      vector0.add((InputStream) null);
      pipedInputStream2.markSupported();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream3);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "NyKo^GU}vFFom'}xe&Pr";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("X\">p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E33`m0JVKav");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E33`m0JVKav";
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-1402L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis(1452L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(639L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1391L));
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("e.jar");
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      long long0 = 6L;
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-1402L));
      System.setCurrentTimeMillis(1666L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis(0L);
      long long1 = 1452L;
      System.setCurrentTimeMillis(1452L);
      System.setCurrentTimeMillis((-5L));
      long long2 = 0L;
      System.setCurrentTimeMillis(1666L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.isArchive(improvedFile0);
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long0);
      long long4 = 639L;
      System.setCurrentTimeMillis(long4);
      System.setCurrentTimeMillis(long2);
      System.setCurrentTimeMillis(long2);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate5);
      predicate1.test(predicate0);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate9.or(predicate8);
      predicate5.test(predicate4);
      Predicate<Object> predicate12 = predicate10.or(predicate8);
      Predicate<Object> predicate13 = predicate11.negate();
      Predicate<Object> predicate14 = predicate10.negate();
      Predicate<Object> predicate15 = predicate10.or(predicate13);
      Vector<Object> vector0 = new Vector<Object>();
      predicate12.negate();
      Predicate<Object> predicate16 = predicate7.or(predicate10);
      Predicate<Object> predicate17 = predicate4.negate();
      Predicate<Object> predicate18 = predicate10.negate();
      Predicate<Object> predicate19 = predicate6.and(predicate17);
      Predicate<Object> predicate20 = predicate3.and(predicate18);
      Predicate<Object> predicate21 = predicate14.negate();
      predicate15.negate();
      Predicate.isEqual((Object) predicate19);
      Predicate<Object> predicate22 = predicate9.or(predicate1);
      Predicate<Object> predicate23 = predicate20.negate();
      predicate22.negate();
      predicate23.negate();
      predicate13.test(predicate4);
      vector0.removeIf(predicate21);
      predicate16.or(predicate0);
      ImprovedFile improvedFile0 = new ImprovedFile("2f");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate5);
      predicate1.test(predicate0);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate9.or(predicate8);
      predicate5.test(predicate4);
      Predicate<Object> predicate12 = predicate10.or(predicate8);
      Predicate<Object> predicate13 = predicate11.negate();
      Predicate<Object> predicate14 = predicate10.negate();
      Predicate<Object> predicate15 = predicate10.or(predicate13);
      Vector<Object> vector0 = new Vector<Object>();
      predicate12.negate();
      Predicate<Object> predicate16 = predicate7.or(predicate10);
      Predicate<Object> predicate17 = predicate4.negate();
      Predicate<Object> predicate18 = predicate10.negate();
      Predicate<Object> predicate19 = predicate6.and(predicate17);
      Predicate<Object> predicate20 = predicate3.and(predicate18);
      Predicate<Object> predicate21 = predicate14.negate();
      predicate15.negate();
      Predicate.isEqual((Object) predicate19);
      Predicate<Object> predicate22 = predicate9.or(predicate1);
      Predicate<Object> predicate23 = predicate20.negate();
      predicate22.negate();
      predicate23.negate();
      predicate13.test(predicate4);
      vector0.removeIf(predicate21);
      predicate16.or(predicate0);
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      pipedInputStream1.skip((-837L));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      pipedInputStream0.mark(4564);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedInputStream0.connect(pipedOutputStream0);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream1.mark(1168);
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("?qf#gcl;jB@ +;)", "?qf#gcl;jB@ +;)");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream0);
      pipedInputStream1.markSupported();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      pipedInputStream0.skip((-131851567));
      pipedInputStream2.mark((-131851567));
      vector1.add(pipedInputStream0);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      vector1.addElement(pipedInputStream5);
      vector0.add((InputStream) pipedInputStream2);
      pipedInputStream2.markSupported();
      archiveScanner0.excludes = stringArray0;
      vector0.add((InputStream) pipedInputStream0);
      vector0.add((InputStream) pipedInputStream2);
      stringArray0[0] = "?qf#gcl;jB@ +;)";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-113);
      byteArray0[0] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 4);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream1, byteArrayInputStream0);
      vector0.add((InputStream) sequenceInputStream0);
      archiveScanner0.setIncludes(stringArray0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      predicate2.test(predicate5);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) "PwG");
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate.isEqual(object0);
      Predicate<Object> predicate8 = predicate7.and(predicate2);
      predicate3.test(predicate5);
      Predicate<Object> predicate9 = predicate2.or(predicate5);
      Predicate<Object> predicate10 = predicate1.and(predicate4);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) "PwG");
      predicate2.test(predicate9);
      Predicate<Object> predicate12 = predicate1.negate();
      Predicate<Integer> predicate13 = predicate6.and(predicate11);
      Predicate<Object> predicate14 = predicate10.and(predicate4);
      predicate12.or(predicate8);
      Object object1 = new Object();
      Predicate<Object> predicate15 = predicate12.and(predicate2);
      Object object2 = new Object();
      predicate13.negate();
      predicate15.negate();
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate16 = predicate10.or(predicate0);
      predicate14.negate();
      predicate16.negate();
      MockFile mockFile0 = new MockFile("MV]36G,Ao}w,D:", "PwG");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("PwG", (String) null, mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      long long0 = 159L;
      System.setCurrentTimeMillis(159L);
      System.setCurrentTimeMillis((-2426L));
      long long1 = 1000000L;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "Xi14I5DPGaN*R&p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.mark(4568);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream4 = new PipedInputStream();
      pipedInputStream4.close();
      ImprovedFile improvedFile0 = new ImprovedFile("jQDPf0TNiT[n", "EVVhBz6)QnIV8");
      pipedInputStream4.close();
      pipedInputStream2.mark(47);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream1);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream4.connect(pipedOutputStream0);
      pipedInputStream1.mark(4568);
      vector1.add(pipedInputStream0);
      vector0.add((InputStream) pipedInputStream1);
      pipedInputStream0.markSupported();
      Vector<InputStream> vector2 = new Vector<InputStream>();
      vector1.add(pipedInputStream3);
      vector2.parallelStream();
      Consumer<InputStream> consumer0 = (Consumer<InputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector2.forEach(consumer0);
      vector2.add((InputStream) pipedInputStream2);
      vector2.add((InputStream) pipedInputStream0);
      vector2.add((InputStream) pipedInputStream0);
      vector1.add(pipedInputStream1);
      vector2.add((InputStream) pipedInputStream3);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      vector2.addAll((Collection<? extends InputStream>) vector1);
      vector0.add((InputStream) pipedInputStream0);
      Vector<InputStream> vector3 = new Vector<InputStream>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "jQDPf0TNiT[n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/jQDPf0TNiT[n/EVVhBz6)QnIV8
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.mark(4568);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream4 = new PipedInputStream(4568);
      pipedInputStream4.close();
      ImprovedFile improvedFile0 = new ImprovedFile("jQDPf0TNiT[n", "EVVhBz6)QnIV8");
      pipedInputStream4.close();
      pipedInputStream2.mark(91);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream1);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream4.connect(pipedOutputStream0);
      pipedInputStream1.mark(4568);
      vector1.add(pipedInputStream0);
      vector0.add((InputStream) pipedInputStream1);
      pipedInputStream0.markSupported();
      Vector<InputStream> vector2 = new Vector<InputStream>();
      vector1.add(pipedInputStream1);
      vector2.parallelStream();
      Consumer<InputStream> consumer0 = (Consumer<InputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector2.forEach(consumer0);
      vector2.add((InputStream) pipedInputStream2);
      vector2.add((InputStream) pipedInputStream0);
      vector2.add((InputStream) pipedInputStream0);
      vector1.add(pipedInputStream1);
      vector2.add((InputStream) pipedInputStream3);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      vector2.addAll((Collection<? extends InputStream>) vector1);
      PipedInputStream pipedInputStream5 = new PipedInputStream();
      vector0.add((InputStream) pipedInputStream5);
      Vector<InputStream> vector3 = new Vector<InputStream>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "EVVhBz6)QnIV8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/jQDPf0TNiT[n/EVVhBz6)QnIV8
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      Predicate<Object> predicate8 = predicate2.or(predicate5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Predicate<Object> predicate9 = predicate4.and(predicate5);
      predicate1.test(predicate0);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate4.negate();
      predicate11.or(predicate3);
      Vector<Object> vector0 = new Vector<Object>();
      predicate9.and(predicate6);
      predicate8.negate();
      predicate11.negate();
      Predicate<Object> predicate12 = predicate8.or(predicate11);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate13.negate();
      Predicate<Object> predicate14 = predicate5.or(predicate8);
      predicate14.or(predicate8);
      predicate0.test(predicate9);
      vector0.removeIf(predicate8);
      ImprovedFile improvedFile0 = new ImprovedFile("jomEBo=z'9pM", "q*r=2MpG");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E33`m0JVKav");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E33`m0JVKav";
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-1402L));
      System.setCurrentTimeMillis(1666L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis(1452L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(639L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1391L));
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("e.jar");
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      long long0 = 6L;
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-1402L));
      long long1 = 1666L;
      System.setCurrentTimeMillis(1666L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis(0L);
      long long2 = 1452L;
      System.setCurrentTimeMillis(1452L);
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis(1666L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.isArchive(improvedFile0);
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long0);
      long long4 = 639L;
      System.setCurrentTimeMillis(long4);
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(long2);
      long long5 = 1000000L;
      System.setCurrentTimeMillis(long5);
      assertFalse(long5 == long1);
  }
}
