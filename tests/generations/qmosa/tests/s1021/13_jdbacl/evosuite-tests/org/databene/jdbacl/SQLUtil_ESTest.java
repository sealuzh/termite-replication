/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 03:02:34 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.Delayed;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.expression.Parameter;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FBClob fBClob0 = new FBClob();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.nval = 2.147483648E9;
      streamTokenizer1.ordinaryChars((-334951280), 8);
      streamTokenizer1.slashStarComments(false);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2147483648", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("YMy5BK56i]?G\"H(ej}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YMy5BK56i]?G\"H(ej}";
      stringArray0[3] = null;
      stringArray0[4] = null;
      defaultDBTable0.getIndex("YMy5BK56i]?G\"H(ej}");
      Character character0 = new Character(':');
      Character.isAlphabetic((-2058161828));
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "UgU7UI");
      Boolean boolean0 = Boolean.FALSE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringArray0[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qARENT", (DBTable) null, (-1953), "qARENT");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals("qARENT, qARENT", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("qARENT, qARENT, qARENT, qARENT, qARENT", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.650659887990671
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "6";
      String string0 = SQLUtil.join(" NnML", "execute", stringArray0, "alterkindexnnml joi -e$,hxohk~p2q_ as execute on 3fbr?5kl.h2.axrconnect = execute.h2.axrconnect and 3fbr?5kl.-e$,hxohk~p2q_ = execute.-e$,hxhk~p2q_ and 3fbr?5kl.-e$,hxohk~p2q_&= execute.-$,hxohk~p2q_", "select into", stringArray0);
      assertEquals(" NnML join alterkindexnnml joi -e$,hxohk~p2q_ as execute on 3fbr?5kl.h2.axrconnect = execute.h2.axrconnect and 3fbr?5kl.-e$,hxohk~p2q_ = execute.-e$,hxhk~p2q_ and 3fbr?5kl.-e$,hxohk~p2q_&= execute.-$,hxohk~p2q_ as select into on execute.null = select into.null and execute.6 = select into.6 and execute.null = select into.null", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean1);
      
      DBSchema dBSchema0 = new DBSchema("|mtUW");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncatecallycy.nk", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "?lA", true, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alterkindexnnml joi -e$,hxohk~p2q_ as execute on 3fbr?5kl.h2.axrconnect = execute.h2.axrconnect and 3fbr?5kl.-e$,hxohk~p2q_ = execute.-e$,hxhk~p2q_ and 3fbr?5kl.-e$,hxohk~p2q_&= execute.-$,hxohk~p2q_", true, dBUniqueConstraint0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      MockFile mockFile0 = new MockFile("6", "execute");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getCanonicalFile();
      mockPrintWriter0.flush();
      mockPrintWriter0.println("!}])a\"Cy");
      mockPrintWriter0.println('W');
      mockFile0.delete();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean2 = Boolean.valueOf("?d'");
      assertFalse(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5339180198740388
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("j@xz0,", "/_&.GJ^]@Bd", "j@xz0,", false, "j@xz0,");
      rowOutputText0.writeEnd();
      rowOutputText0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputText0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/_&.GJ^]@Bd";
      stringArray0[1] = "/_&.GJ^]@Bd";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "/_&.GJ^]@Bd";
      stringArray0[4] = "j@xz0,";
      stringArray0[5] = "execjfls'9>s-";
      stringArray0[6] = "execjfls'9>s-";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("/_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND /_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND alter materialized view = 'alter materialized view' AND /_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND j@xz0, = 'j@xz0,' AND execjfls'9>s- = 'execjfls'9>s-' AND execjfls'9>s- = 'execjfls'9>s-'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "W])~IsDu5W n", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("j@xz0,", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      ((DefaultDBTable) dBTable0).getColumnNames();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "/_&.GJ^]@Bd", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /_&.GJ^]@Bd PRIMARY KEY (/_&.GJ^]@Bd, /_&.GJ^]@Bd, alter materialized view, /_&.GJ^]@Bd, j@xz0,, execjfls'9>s-, execjfls'9>s-)", string1);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"W])~IsDu5W n\" UNIQUE (/_&.GJ^]@Bd, /_&.GJ^]@Bd, alter materialized view, /_&.GJ^]@Bd, j@xz0,, execjfls'9>s-, execjfls'9>s-)", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = SQLUtil.isDDL("Nelect iYtos #-z9rho'/N?");
      assertFalse(boolean0);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("--", "--", (VersionNumber) null);
      defaultDatabase0.toString();
      defaultDatabase0.getCatalog("--");
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3175456484876826
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FBClob fBClob0 = new FBClob();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isQuery("select into");
      assertFalse(boolean2);
      
      GDSType.getType("B/b/z");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      GDSType.getType(";-#<Eb>_");
      GDSType.getType(";-#<Eb>_");
      FBManagedConnectionFactory fBManagedConnectionFactory1 = new FBManagedConnectionFactory();
      Boolean.valueOf("B/b/z");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";-#<Eb>_", false, "2'ExR:d/wy)^daH\"QC:", "B/b/z");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callycfXy.nk";
      stringArray0[1] = null;
      stringArray0[3] = null;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer(336789528);
      DBDataType dBDataType0 = DBDataType.getInstance(336789528, "=Da26>0q4");
      Integer integer2 = new Integer(3131);
      Integer integer3 = new Integer(3131);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callycfXy.nk", defaultDBTable0, dBDataType0, integer2, integer3);
      defaultDBColumn0.setDefaultValue("renameselect * from");
      defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer.compareUnsigned(1830, 20);
      Integer integer7 = new Integer(2420);
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer10 = new Integer((-1931));
      Integer integer11 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString(20);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1759380310637435
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop index", false, "left", "left");
      DBCatalog dBCatalog0 = new DBCatalog("Can''t infer the SQL type to use for an instance of {0}. Use setObject() with an explicit Types value to specify the type to use.");
      DBSchema dBSchema0 = new DBSchema("/", dBCatalog0);
      dBCatalog0.getSchemas();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":,1{<!'", dBSchema0);
      dBCheckConstraint0.setTable(defaultDBTable0);
      String string0 = SQLUtil.renderValue(dBCheckConstraint0);
      assertEquals("CONSTRAINT drop indexCHECK left", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK left", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop index";
      stringArray0[1] = null;
      stringArray0[2] = "drop index";
      stringArray0[3] = " class as single parameter was found.";
      stringArray0[4] = "drop index";
      stringArray0[5] = ":,1{<!'";
      String string2 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, "select] data leaf table:", stringArray0);
      assertEquals("left join null as select] data leaf table: on null.drop index = select] data leaf table:.drop index and null.null = select] data leaf table:.null and null.drop index = select] data leaf table:.drop index and null. class as single parameter was found. = select] data leaf table:. class as single parameter was found. and null.drop index = select] data leaf table:.drop index and null.:,1{<!' = select] data leaf table:.:,1{<!'", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6891541857645156
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callycy.nk";
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      defaultDBTable0.getIndex("COMMIT TRANSACTION TX_");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc(stringArray0[2]);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, dBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-641), "COMMIT TRANSACTION TX_");
      Integer integer0 = RawTransaction.ABORT;
      dBTable0.getIndexes();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[1], defaultDBTable0, dBDataType0, integer0, integer0);
      File file0 = FileUtil.canonicalFile("insert;-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println('W');
      dBTable0.addColumn(defaultDBColumn0);
      defaultDBColumn0.setDefaultValue("drop table");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.isDML("] data leaf table:");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      Character character0 = new Character('B');
      Character.highSurrogate(44);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Parameter parameter0 = new Parameter((-89303774));
      linkedList0.removeLastOccurrence(parameter0);
      Boolean.valueOf((String) null);
      Parameter parameter1 = new Parameter(34);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, parameter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";-";
      stringArray0[3] = ";-";
      stringArray0[4] = ";-";
      stringArray0[5] = ";-";
      DBDataType.getInstance((-1880113004), ";-");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-374), ";-");
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType.getInstance((-1880113004), ";-");
      DBDataType.getInstance((-374), ";-");
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      Boolean.valueOf(";-");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ts";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ts", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      dBPrimaryKeyConstraint0.setName((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("0%KksaN%&gi!>nBC{5E", false, dBPrimaryKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getName());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.renderValue(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1268);
      int int1 = 881;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(881, (CharSequence) stringBuilder0, 184, (-1268));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 881
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.derby.iapi.db.Factory::getTriggerExecutionContext(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "qARENT";
      int int0 = (-2742);
      String string1 = "(";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-2742), "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3303114498776156
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.innerJoin("orderedNulls", stringArray0, "orderedNulls", ".lob.db", stringArray0);
      assertEquals("orderedNulls as .lob.db on orderedNulls.null = .lob.db.null", string0);
      
      String string1 = SQLUtil.normalize("orderedNulls", false);
      assertEquals("orderedNulls", string1);
      
      boolean boolean0 = SQLUtil.isDML("alter session");
      assertFalse(boolean0);
      
      SQLUtil.mutatesStructure("execsetfetchsize");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean1);
      
      String string2 = SQLUtil.normalize("deletesetfetchsize", true);
      assertEquals("deletesetfetchsize", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PARENT");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CONSTRAINT ", true, dBPrimaryKeyConstraint0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      InternalTransactionCoordinator.AbstractTransactionCoordinator internalTransactionCoordinator_AbstractTransactionCoordinator0 = null;
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator((InternalTransactionCoordinator.AbstractTransactionCoordinator) null);
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "updatedrop index");
      DBDataType dBDataType0 = DBDataType.getInstance(1030, "CLOB");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = new Integer(1030);
      Integer integer4 = RawTransaction.ABORT;
      Integer.sum(2798, 1030);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatedrop index", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      defaultDBColumn0.setDoc((String) null);
      String string0 = defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer5 = new Integer(585);
      Integer.getInteger("updatedrop index : CLOB", integer1);
      Integer integer6 = new Integer(3828);
      Integer integer7 = new Integer(1030);
      Integer integer8 = new Integer((int) integer7);
      Integer integer9 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer10 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer11 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer12 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string1 = Integer.toUnsignedString((-503));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger("kmWRQ2+A}$5?", 527);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kmWRQ2+A}$5?", (DBTable) null, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8367470828633197
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.mutatesStructure("");
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6910801301395963
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("j@xz0,", "/_&.GJ^]@Bd", "j@xz0,", true, "j@xz0,");
      rowOutputText0.writeEnd();
      rowOutputText0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputText0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "/_&.GJ^]@Bd";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "/_&.GJ^]@Bd";
      stringArray0[4] = "j@xz0,";
      stringArray0[5] = "execjfls'9>s-";
      stringArray0[6] = "execjfls'9>s-";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("null = null AND /_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND alter materialized view = 'alter materialized view' AND /_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND j@xz0, = 'j@xz0,' AND execjfls'9>s- = 'execjfls'9>s-' AND execjfls'9>s- = 'execjfls'9>s-'");
      Character character0 = new Character('L');
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) character0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(8, (float) 1);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("alter materialized view", stringBuilder2);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashStarComments(true);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6105981585090816
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(2998, "alter tablennml join \u0001\u0117 as execute on 3fbr?5kl.h2.maxreconnect = execute.h2.maxreconnect and 3fbr?5kl.\u0001\u0117 = execute.\u0001\u0117 and 3fbr?5kl.\u0001\u0117 = execute.\u0001\u0117");
      Integer integer1 = new Integer(2998);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6XFUsB<ZcLm", defaultDBTable0, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "Jg]";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Jg]", defaultDBTable0, 2998, "");
      DBColumn dBColumn0 = defaultDBTable0.getColumn("Jg]");
      SQLUtil.renderColumnTypeWithSize(dBColumn0);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getTransactionIsolation();
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("nnml join ", defaultDBTable0, dBDataType0, integer3);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.equals("nnml join ");
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("6XFUsB<ZcLm", defaultDBTable0, (-2389), "Jg]");
      String string1 = "0rzb:j*Hd[OHT^/VE";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("0rzb:j*Hd[OHT^/VE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '0rzb:j*Hd[OHT^/VE' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.344371527222022
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      DBDataType dBDataType0 = DBDataType.getInstance(2299, " NOT");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(2299, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.normalize("", false);
      DBDataType dBDataType1 = DBDataType.getInstance(2299, "ALTER TABLE ");
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = RawTransaction.COMMIT;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert;-", defaultDBTable0, dBDataType1, integer4, integer4);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("ALTER TABLE ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec2 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CLOB", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FBClob fBClob0 = new FBClob();
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = SQLUtil.isQuery("select intos #-z9rho'/7?");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setDefaultResultSetHoldable(true);
      fBConnectionProperties0.setSqlDialect("j@xz0,");
      Boolean boolean0 = SQLUtil.mutatesStructure("create materialized viewisolation");
      assertTrue(boolean0);
      
      FBConnectionProperties fBConnectionProperties1 = new FBConnectionProperties();
      fBConnectionProperties1.getSocketBufferSize();
      fBConnectionProperties1.getNonStandardProperty("y&a,hCk5");
      fBConnectionProperties0.getEncoding();
      fBConnectionProperties1.setDatabase("isolation");
      fBConnectionProperties1.getBlobBufferSize();
      fBConnectionProperties1.setEncoding("y&a,hCk5");
      fBConnectionProperties1.getRoleName();
      Boolean.valueOf("useStreamBlobs");
      Character character0 = new Character('B');
      Character.isIdeographic(0);
      String string0 = SQLUtil.substituteMarkers("defaultHoldable", "defaultIsolation", character0);
      assertEquals("defaultHoldable", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      jdbcDataSource0.setUser("");
      jdbcDataSource0.setPassword("F");
      String string0 = "\\I|?u{ ";
      jdbcDataSource1.setDescription("crea");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("drop materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), "Z");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, dBDataType0, integer1, integer0);
      Object object0 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(547);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("!a", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(113, charArrayWriter0.size());
      assertEquals("!aALTER TABLE null ADD \n\tCONSTRAINT \"drop materialized view\" FOREIGN KEY (, , , , , ) REFERENCES null(, , , , , )", charArrayWriter0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5542445564603113
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callycy.nk";
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      defaultDBTable0.getIndex("COMMIT TRANSACTION TX_");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc(stringArray0[2]);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, dBTable0, stringArray0);
      SQLUtil.typeAndName(dBNonUniqueIndex0);
      DBDataType dBDataType0 = DBDataType.getInstance((-641), "COMMIT TRANSACTION TX_");
      Integer integer0 = RawTransaction.ABORT;
      dBTable0.getIndexes();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[1], defaultDBTable0, dBDataType0, integer0, integer0);
      File file0 = FileUtil.canonicalFile("insert;-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7249784919683249
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";-";
      stringArray0[3] = ";-";
      stringArray0[4] = ";-";
      stringArray0[5] = ";-";
      DBDataType dBDataType0 = DBDataType.getInstance((-1880113004), ";-");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-374), ";-");
      DBSchema dBSchema0 = new DBSchema(";-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";-", dBSchema0);
      dBSchema0.getSequences(true);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";-", defaultDBTable0, dBDataType0, integer2, integer2);
      File file0 = FileUtil.canonicalFile("drop materialized viewselect * from");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println('4');
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5212461460967805
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("drop materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("OTA_CONFIGS");
      PrintWriter printWriter0 = mockPrintWriter1.format("Z", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2800617579781544
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callycy.nk";
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      defaultDBTable0.getIndex("COMMIT TRANSACTION TX_");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc(stringArray0[2]);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, dBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-641), "COMMIT TRANSACTION TX_");
      Integer integer0 = RawTransaction.ABORT;
      dBTable0.getIndexes();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[1], defaultDBTable0, dBDataType0, integer0, integer0);
      File file0 = FileUtil.canonicalFile("insert;-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println('W');
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = Boolean.valueOf("constraint");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create tableoex`qb(";
      stringArray0[1] = "gn(gvq";
      stringArray0[2] = "i$1.IugL0L29s  u@";
      stringArray0[3] = "";
      stringArray0[4] = "Cannot call deleteRow() when on the insert row.";
      stringArray0[5] = "drop materialized viewencoding";
      stringArray0[6] = "gn(gvq*v";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "drop materialized viewencoding";
      objectArray0[1] = (Object) "Cannot call deleteRow() when on the insert row.";
      objectArray0[2] = (Object) "create tableoex`qb(";
      objectArray0[3] = (Object) "i$1.IugL0L29s  u@";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      int int0 = 4;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qARENT", (DBTable) null, 4, "qARENT");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      constraintDescriptorList0.add((Object) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.201793123629589
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ts";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ts", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("0%KksaN%&gi!>nBC{5E", true, dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter material_zed view");
      VersionNumber versionNumber0 = VersionNumber.valueOf("k=|8]6^u9b3");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      versionNumber0.toString();
      VersionNumber.valueOf("\" Whv0oRPb&fr8H'vf:");
      DataStore dataStore0 = new DataStore("select * fr");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0160111384877113
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLUtil.isDML("trderdNulls");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.toString();
      jdbcDataSource0.setPassword("ds1604: url= user=");
      jdbcDataSource0.setDescription("trderdNulls");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=!=4?U4vHuD@}55ZI";
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setUserName("trderdNulls");
      FBConnectionProperties fBConnectionProperties1 = new FBConnectionProperties();
      fBConnectionProperties1.setSocketBufferSize((-2252));
      fBConnectionProperties1.setBuffersNumber(46);
      fBConnectionProperties1.getCharSet();
      fBConnectionProperties1.setDefaultResultSetHoldable(true);
      fBConnectionProperties0.setSqlDialect("socketBufferSize");
      SQLUtil.mutatesStructure("=");
      FBConnectionProperties fBConnectionProperties2 = new FBConnectionProperties();
      fBConnectionProperties2.setEncoding("P@LO<");
      fBConnectionProperties0.getSocketBufferSize();
      fBConnectionProperties2.getNonStandardProperty("localEncoding");
      FBConnectionProperties fBConnectionProperties3 = new FBConnectionProperties();
      fBConnectionProperties3.getEncoding();
      fBConnectionProperties0.getBlobBufferSize();
      FBConnectionProperties fBConnectionProperties4 = new FBConnectionProperties();
      fBConnectionProperties4.setEncoding("localEncoding");
      fBConnectionProperties2.getRoleName();
      Boolean.valueOf("selectcreate materialized viewcreate materializedviewmkj@^swpk3");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BasicDatabase basicDatabase0 = new BasicDatabase();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("alter tableselect * from", stringArray0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.setPassword("X0X95.S");
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      char char0 = 'b';
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      char char1 = 'l';
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("PRIMARY KEY ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3342298951481277
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FBClob fBClob0 = new FBClob();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[4] = ")";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3072109573039925
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.isQuery("alter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewname=");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "drop materialized viewname=";
      stringArray0[1] = "alter session";
      stringArray0[2] = "drop materialized viewname=";
      stringArray0[3] = "drop materialized viewname=";
      stringArray0[4] = "drop materialized viewname=";
      stringArray0[5] = "drop materialized viewname=";
      stringArray0[6] = "drop materialized viewname=";
      stringArray0[7] = "alter session";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter session", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("alter session", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      stringBuilder2.append((StringBuffer) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '\'';
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'drop materialized viewname=' has no foreign key with the columns (drop materialized viewname=, alter session, drop materialized viewname=, drop materialized viewname=, drop materialized viewname=, drop materialized viewname=, drop materialized viewname=, alter session)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      StringBuilder stringBuilder0 = new StringBuilder("");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ">%", true, stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(518, (Object) dBUniqueConstraint0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 518
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VersionNumber.valueOf("k=|8]6^u9b3");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      VersionNumber versionNumber0 = VersionNumber.valueOf("\" Whv0oRPb&fr8H'vf:");
      versionNumber0.toString();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String string0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("java.lang.Object@f603d0d", dBPackage0);
      SQLUtil.ownerDotComponent(dBProcedure0);
      int int0 = 2597;
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        stringBuffer0.insert(2597, (CharSequence) "java.lang.Object@f603d0d", 184, 2597);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 2597
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3398392444296365
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = new Boolean("PARENT");
      Boolean boolean1 = new Boolean("PARENT");
      StringBuilder stringBuilder0 = new StringBuilder("SELECT INTO");
      TableContainer tableContainer0 = new TableContainer("^O,93tfR>a^j'o");
      TableContainer tableContainer1 = new TableContainer("SELECT * FROM ", tableContainer0);
      tableContainer1.getTable("execute");
      DBDataType.getInstance(547, "7KKCP:Z3Os5F?D");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      tableContainer1.getSequences(true);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("SELECT INTO");
      VersionNumber.valueOf("wxq{eL%d6s A");
      tableContainer1.getComponents();
      tableContainer0.getComponents();
      SQLUtil.isProcedureCall("");
      SQLUtil.isProcedureCall("wxq{eL%d6s A");
      SQLUtil.mutatesStructure("6PP<");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("S$t1x^jF.,:`");
      assertNull(boolean2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      SQLUtil.isDML("callycy.nk");
      SQLUtil.substituteMarkers("", "updatenull", stringArray0[3]);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3640107676358775
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = new Boolean("r]gYO>yEV<1w?./|h");
      Boolean boolean1 = new Boolean("r]gYO>yEV<1w?./|h");
      StringBuilder stringBuilder0 = new StringBuilder("r]gYO>yEV<1w?./|h");
      TableContainer tableContainer0 = new TableContainer("r]gYO>yEV<1w?./|h");
      tableContainer0.getComponents();
      tableContainer0.getTable("7KKCP:Z3Os5F?D");
      DBDataType.getInstance(2299, "r]gYO>yEV<1w?./|h");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      VersionNumber.valueOf("execute");
      TableContainer tableContainer1 = new TableContainer("r]gYO>yEV<1w?./|h");
      tableContainer1.getComponents();
      tableContainer1.getComponents();
      boolean boolean3 = SQLUtil.isProcedureCall("execute");
      boolean boolean4 = SQLUtil.isDML("7KKCP:Z3Os5F?D");
      assertFalse(boolean4);
      
      Boolean boolean5 = SQLUtil.mutatesStructure("r]gYO>yEV<1w?./|h");
      assertFalse(boolean5.equals((Object)boolean3));
      
      Boolean boolean6 = Boolean.valueOf("8p!*xC+*CExBr_rU");
      assertTrue(boolean6.equals((Object)boolean4));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FBClob fBClob0 = new FBClob();
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = SQLUtil.isProcedureCall("execute");
      boolean boolean2 = SQLUtil.isDML("insertorderednulls");
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = SQLUtil.isQuery("execute");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.006961364732055
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.mutatesStructure("create materializedviewmkj@^swpk3");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setSocketBufferSize(94);
      fBConnectionProperties0.getBuffersNumber();
      fBConnectionProperties0.getBlobBufferSize();
      fBConnectionProperties0.getPassword();
      fBConnectionProperties0.setSocketBufferSize((-2252));
      fBConnectionProperties0.setBuffersNumber(46);
      String[] stringArray0 = new String[24];
      stringArray0[0] = "sqlDialect";
      stringArray0[1] = "alterkindexnnml joi -e$,hxohk~p2q_ as execute on 3fbr?5kl.h2.axrconnect = execute.h2.axrconnect and 3fbr?5kl.-e$,hxohk~p2q_ = execute.-e$,hxhk~p2q_ and 3fbr?5kl.-e$,hxohk~p2q_&= execute.-$,hxohk~p2q_";
      stringArray0[11] = "6";
      stringArray0[3] = "userName";
      stringArray0[4] = "type";
      stringArray0[5] = "K(~Y$ZP_=,,9$-";
      stringArray0[6] = "defaultIsolation";
      // Undeclared exception!
      try { 
        SQLUtil.join(".tD3oQF-S|-tub%k", "password", (String[]) null, "database", "password", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Parameter parameter0 = new Parameter(335544760);
      constraintDescriptorList0.add((Object) parameter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qARENT", (DBTable) null, (-1953), "qARENT");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.h2.expression.Parameter cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = "w4ReGz6I(EE:n";
      SQLUtil.join("w4ReGz6I(EE:n", "", stringArray0, "org.postgresql.jdbc2.AbstractJdbc2Clob", (String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("w4ReGz6I(EE:n join org.postgresql.jdbc2.AbstractJdbc2Clob as null on ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: w4ReGz6I(EE:n join org.postgresql.jdbc2.AbstractJdbc2Clob as null on 
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0120895698602603
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FBClob fBClob0 = new FBClob();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean1);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer(39);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer.compareUnsigned(39, (-978));
      Integer integer3 = new Integer(1830);
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer6 = new Integer(34);
      Integer integer7 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString(1446);
      boolean boolean2 = SQLUtil.isDML("select into");
      assertTrue(boolean2);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = "i\\pkn:Gv<n)O!ksn<\"";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("\u0001\u0174", (String[]) null, "\u0001\u0174", "delete", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(13);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1572L));
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      assertEquals("-1572 or null", stringBuilder1.toString());
      assertEquals("-1572 or null", stringBuilder0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1949235467988237
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBDataType dBDataType0 = DBDataType.getInstance((-159298013), "sele");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-3), "PARENT");
      DBSchema dBSchema0 = new DBSchema("c?$,Dv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t7/VTsknpu'XkLM", dBSchema0);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType1 = DBDataType.getInstance((-374), "FOREIGN KEY ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewreferences", (DBTable) null, dBDataType1, integer3, integer2);
      Integer integer4 = new Integer((-374));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("x(7v; \")", defaultDBTable0, dBDataType0, integer2, integer4);
      defaultDBColumn1.toString();
      SQLUtil.normalize("FOREIGN KEY ", false);
      DBDataType.getInstance((-733), "x(7v; \")");
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = null;
      try {
        defaultDBColumn2 = new DefaultDBColumn("~:v/,^T1MZ87s", defaultDBTable0, (-1893), "x(7v; \") : SELE(3,-374)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7v; \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "c?$,Dv";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c?$,Dv";
      stringArray0[1] = "c?$,Dv";
      SQLUtil.innerJoin((String) null, stringArray0, "g3H?hK0iA6y&)4=N_du", "c?$,Dv", stringArray0);
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Hj", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pos: ", (DBSchema) null);
      String string1 = "SG<BXxB7so=}_T\"";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "SG<BXxB7so=}_T\"";
      stringArray1[1] = "%Di`s`;idSc-sX^Oz-";
      stringArray1[2] = "Hj";
      stringArray1[3] = "c?$,Dv";
      stringArray1[4] = "pos: ";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Hj", stringArray1, "a;lh>JN9Z!6LN", "y&U[Ym^_SHxNx", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2997417940689653
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Boolean boolean0 = SQLUtil.mutatesStructure("create materializedviewmkj@^swpk3");
      assertFalse(boolean0);
      
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.setSocketBufferSize(94);
      fBConnectionProperties0.getBuffersNumber();
      fBConnectionProperties0.setUserName("PhqN");
      fBConnectionProperties0.getPassword();
      fBConnectionProperties0.setSocketBufferSize((-2252));
      fBConnectionProperties0.setBuffersNumber(46);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "timestampUsesLocalTimezone";
      stringArray0[1] = "userName";
      stringArray0[2] = "localEncoding";
      stringArray0[3] = "blobBufferSize";
      stringArray0[4] = "blobBufferSize";
      fBConnectionProperties0.getTransactionParameters((-2112));
      String string0 = SQLUtil.join("", "6", stringArray0, "blobBufferSize", "r9;3EUp", stringArray0);
      assertEquals("blobBufferSize as r9;3EUp on 6.timestampUsesLocalTimezone = r9;3EUp.timestampUsesLocalTimezone and 6.userName = r9;3EUp.userName and 6.localEncoding = r9;3EUp.localEncoding and 6.blobBufferSize = r9;3EUp.blobBufferSize and 6.blobBufferSize = r9;3EUp.blobBufferSize", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("blobBufferSize as r9;3EUp on 6.timestampUsesLocalTimezone = r9;3EUp.timestampUsesLocalTimezone and 6.userName = r9;3EUp.userName and 6.localEncoding = r9;3EUp.localEncoding and 6.blobBufferSize = r9;3EUp.blobBufferSize and 6.blobBufferSize = r9;3EUp.blobBufferSize");
      boolean boolean2 = SQLUtil.isDML("PZSv7^9bnUr1\"A(8Z5");
      boolean boolean3 = SQLUtil.isQuery("exec");
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = SQLUtil.isDDL("r9;3EUp");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.4768214908993054
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ubo-r/U&2TpL)-AG~";
      stringArray0[1] = "Ubo-r/U&2TpL)-AG~";
      SQLUtil.innerJoin("Ubo-r/U&2TpL)-AG~", stringArray0, "Another process was faster", "QQ=`f4{d$&.V", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-fJ{?sv", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Ubo-r/U&2TpL)-AG~ = 'Ubo-r/U&2TpL)-AG~' AND Ubo-r/U&2TpL)-AG~ = 'Ubo-r/U&2TpL)-AG~'", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      SQLUtil.parseColumnTypeAndSize("Ubo-r/U&2TpL)-AG~");
      SQLUtil.mutatesStructure("$.g6Rmuna+dJ/G(gjx");
      SQLUtil.normalize("QQ=`f4{d$&.V", true);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("Another process was faster as QQ=`f4{d$&.V on Ubo-r/U&2TpL)-AG~.Ubo-r/U&2TpL)-AG~ = QQ=`f4{d$&.V.Ubo-r/U&2TpL)-AG~ and Ubo-r/U&2TpL)-AG~.Ubo-r/U&2TpL)-AG~ = QQ=`f4{d$&.V.Ubo-r/U&2TpL)-AG~");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '}';
      charArray0[2] = '4';
      charArray0[3] = '\\';
      charArray0[4] = '>';
      charArray0[5] = 'z';
      charArray0[6] = ',';
      charArray0[7] = 'n';
      StringBuilder stringBuilder3 = stringBuilder2.insert(2, charArray0);
      StringBuilder stringBuilder4 = stringBuilder3.append(951L);
      // Undeclared exception!
      try { 
        stringBuilder4.replace(2, (-116), "$.g6Rmuna+dJ/G(gjx");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > end
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.GroupedAggregateResultSet";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray1 = new String[2];
      stringArray0[3] = ";-";
      stringArray1[1] = "4;,@BxG%}b>h-K-I_1N";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(";-", stringArray0, ";-", "4;,@BxG%}b>h-K-I_1N", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7281798970041895
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("[^4IE]");
      tableContainer0.getSchema();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[^4IE]";
      stringArray0[1] = "[^4IE]";
      stringArray0[2] = "[^4IE]";
      stringArray0[3] = "[^4IE]";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "execname=";
      stringArray0[6] = "execname=";
      SQLUtil.renderColumnListWithTableName("[^4IE]", stringArray0);
      JdbcDataSource jdbcDataSource2 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource3 = new JdbcDataSource();
      jdbcDataSource2.getLogWriter();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "[^4IE]";
      // Undeclared exception!
      try { 
        SQLUtil.join("A~QD", "|bKU%", stringArray0, "execname=", "KJ6>r6oo", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "/J&E%";
      stringArray1[1] = ",";
      stringArray1[2] = "/J&E%";
      stringArray1[3] = ",";
      stringArray1[4] = "/J&E%";
      stringArray1[5] = "/J&E%";
      stringArray1[6] = "/J&E%";
      stringArray1[7] = "/J&E%";
      String string0 = SQLUtil.innerJoin("/J&E%", stringArray0, "/J&E%", ",", stringArray1);
      assertEquals("/J&E% as , on ", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.440981419536016
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("q``x", "create materialized view", "q``x", false, "q``x");
      rowOutputText0.reset();
      rowOutputText0.toString();
      rowOutputText0.writeLong(2258L);
      rowOutputText0.writeUTF("q``x");
      rowOutputText0.writeChars("H9Et.bH16;;:");
      rowOutputText0.writeLong((-1187L));
      rowOutputText0.writeSize(1);
      rowOutputText0.flush();
      rowOutputText0.writeUTF("create materialized view");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "create materialized view";
      stringArray0[3] = "q``x";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "create materialized view";
      stringArray1[1] = "H9Et.bH16;;:";
      stringArray1[2] = "H9Et.bH16;;:";
      stringArray1[3] = "q``x";
      stringArray1[4] = "excjfls'9>s-";
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ordinaryChars((-334951280), 45);
      streamTokenizer0.slashStarComments(true);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "executeinsert";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%/0/`o%q:");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.replace(291, 291, "executeinsert");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0008978692206196
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Boolean boolean0 = SQLUtil.mutatesStructure("create materializedviewmkj@^swpk3");
      assertFalse(boolean0);
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "create materializedviewmkj@^swpk3");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getSocketBufferSize();
      fBConnectionProperties0.isTimestampUsesLocalTimezone();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create table ");
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ";-", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";-", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.substituteMarkers("alter materialized viewname=", "'nocompres", (Object) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ";-");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "alter materialized viewname=");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      String string0 = "t=Hj?JRQ#}c$U,n[8w2";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("alter materialized viewname=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'alter materialized viewname=' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("DATE", false, "a}u,pDS,u}p;@", "selectfrom");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT DATE ", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLUtil.normalize(";-", false);
      SQLUtil.normalize(";-", false);
      SQLUtil.normalize("st-tVI=f,Q;|FP)Zt>", false);
      StringBuilder stringBuilder0 = new StringBuilder("GY2N{`p]>pd*[");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(419);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(41, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 41
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = null;
      stringArray1[1] = "callycy.nk";
      stringArray1[2] = null;
      stringArray1[3] = "yLMGJ=v:_Tn<Dw/MH|T";
      stringArray1[4] = "_f";
      stringArray1[5] = "<2 nSc_^eozf0z";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[1], true, defaultDBTable0, stringArray1, defaultDBTable0, (String[]) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PARENT", (DBTable) null, (-1671), "PARENT");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-1671));
      DBDataType dBDataType0 = DBDataType.getInstance((-1671), "PARENT");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = new Integer((-1671));
      Integer.toUnsignedString(643);
      Integer.compare(48, (-1671));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("PARENT", (DBTable) null, dBDataType0, integer0);
      String string0 = defaultDBColumn1.toString();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("trunca", (DBTable) null, dBDataType0, integer3, integer1);
      SQLUtil.removeComments("PARENT");
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer.compareUnsigned(0, 20);
      Integer integer7 = new Integer((-1671));
      Integer integer8 = RawTransaction.ABORT;
      Integer integer9 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer10 = new Integer((-1671));
      Integer integer11 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string1 = Integer.toUnsignedString(134);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      stringArray0[5] = "] data leaf table:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = null;
      stringArray1[1] = "callycy.nk";
      stringArray1[2] = null;
      stringArray1[3] = "yLMGJ=v:_Tn<Dw/MH|T";
      stringArray1[4] = "_f";
      stringArray1[5] = "<2 nSc_^eozf0z";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[1], true, defaultDBTable0, stringArray1, defaultDBTable0, (String[]) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      FKChangeRule fKChangeRule1 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, callycy.nk, , yLMGJ=v:_Tn<Dw/MH|T, _f, <2 nSc_^eozf0z) REFERENCES null()", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.2448999724663743
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicDatabase basicDatabase0 = new BasicDatabase();
      BasicUUID basicUUID0 = new BasicUUID("PAREN");
      Integer integer0 = RawTransaction.COMMIT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" DEFAULT ", compositeDBObject0);
      tableContainer0.getSchema();
      tableContainer0.getComponents();
      DBSequence dBSequence0 = new DBSequence("*/", (DBSchema) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PAREN", (DBSchema) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("selectve&oy%)al'#hmzs*");
      String string0 = "drop indexl'%=3aa(mr";
      int int0 = 128;
      String string1 = "Me6GT3";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("PAREN", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "updateBlob(int,Blob)";
      stringArray0[1] = "selectve&oy%)al'#hmzs*";
      stringArray0[2] = "drop indexl'%=3aa(mr";
      stringArray0[3] = " DEFAULT ";
      stringArray0[4] = " DEFAULT ";
      stringArray0[5] = "selectve&oy%)al'#hmzs*";
      stringArray0[6] = "*/";
      stringArray0[7] = " DEFAULT ";
      stringArray0[8] = "*/";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "updateBlob(int,Blob)", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "*/");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("*/", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append(1.0F);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder3, nameSpec0);
      SQLUtil.addOptionalCondition("selectve&oy%)al'#hmzs*", stringBuilder4);
      SQLUtil.isProcedureCall("uKCcbQ%Vm}&%O");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("c`[SJGnR");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FOREIGN KEY ";
      stringArray0[1] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      defaultDBTable0.getIndex("FOREIGN KEY ");
      Character character0 = new Character(':');
      Character.isAlphabetic((-2058161828));
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, false, defaultDBTable0, stringArray0);
      dBNonUniqueIndex0.setOwner(defaultDBTable0);
      dBNonUniqueIndex0.addColumnName("drop materialized view");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("DATE");
      dBNonUniqueIndex0.equals(jMXPrincipal0);
      boolean boolean0 = SQLUtil.isDML("floor(double)");
      boolean boolean1 = SQLUtil.isQuery("FOREIGN KEY ");
      assertFalse(boolean1);
      
      boolean boolean2 = SQLUtil.isDDL("drop materialized view");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("j@xz0,", "/_&.GJ^]@Bd", "j@xz0,", false, "j@xz0,");
      rowOutputText0.writeEnd();
      rowOutputText0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputText0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/_&.GJ^]@Bd";
      stringArray0[1] = "/_&.GJ^]@Bd";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "/_&.GJ^]@Bd";
      stringArray0[4] = "j@xz0,";
      stringArray0[5] = "execjfls'9>s-";
      stringArray0[6] = "execjfls'9>s-";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("/_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND /_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND alter materialized view = 'alter materialized view' AND /_&.GJ^]@Bd = '/_&.GJ^]@Bd' AND j@xz0, = 'j@xz0,' AND execjfls'9>s- = 'execjfls'9>s-' AND execjfls'9>s- = 'execjfls'9>s-'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "W])~IsDu5W n", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("j@xz0,", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "/_&.GJ^]@Bd", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /_&.GJ^]@Bd PRIMARY KEY (/_&.GJ^]@Bd, /_&.GJ^]@Bd, alter materialized view, /_&.GJ^]@Bd, j@xz0,, execjfls'9>s-, execjfls'9>s-)", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      defaultDBTable0.getIndex("BLOB");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("SELECT * FROM ", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      Character character0 = new Character(':');
      Character.isAlphabetic((-4));
      DBSchema dBSchema0 = new DBSchema("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "defaul";
      stringArray0[4] = "create unique index";
      stringArray0[5] = "create unique index";
      stringArray0[6] = "create unique index";
      stringArray0[7] = "defaul";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("defaul", true, defaultDBTable0, stringArray0);
      DBNonUniqueIndex dBNonUniqueIndex1 = new DBNonUniqueIndex(stringArray0[0], false, defaultDBTable0, stringArray0);
      dBNonUniqueIndex1.setOwner(defaultDBTable0);
      dBNonUniqueIndex0.setTable(defaultDBTable0);
      dBNonUniqueIndex0.addColumnName("create unique index");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("%,");
      dBNonUniqueIndex1.equals(dBNonUniqueIndex0);
      SQLUtil.typeAndName(dBNonUniqueIndex0);
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BasicDatabase basicDatabase0 = new BasicDatabase();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "yf";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.renderValue("PARENT");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 184;
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1259), (CharSequence) "'PARENT'", (-1259), (-1259));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1259
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ts";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ts", true, stringArray0);
      defaultDBTable0.countProviders();
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("ts", false, dBPrimaryKeyConstraint0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      dBPrimaryKeyConstraint0.setName("CONSTRAINT ts PRIMARY KEY (ts)");
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-7);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.201793123629589
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " nnml";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " nnml", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("0%KksaN%&gi!>nBC{5E", true, dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Gp%{aV&<{5w{";
      stringArray0[1] = "Gp%{aV&<{5w{";
      stringArray0[3] = "Gp%{aV&<{5w{";
      stringArray0[4] = "Gp%{aV&<{5w{";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Gp%{aV&<{5w{", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      FKChangeRule fKChangeRule1 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      StringBuilder stringBuilder0 = new StringBuilder("Gp%{aV&<{5w{");
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gp%{aV&<{5w{");
      TableContainer tableContainer0 = new TableContainer("!!?]s$f[E");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Gp%{aV&<{5w{ FOREIGN KEY (Gp%{aV&<{5w{, Gp%{aV&<{5w{, , Gp%{aV&<{5w{, Gp%{aV&<{5w{) REFERENCES null(Gp%{aV&<{5w{, Gp%{aV&<{5w{, , Gp%{aV&<{5w{, Gp%{aV&<{5w{)", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "EeQEo!^|/Z|eP:J";
      stringArray0[1] = "call";
      stringArray0[2] = "SYSDUMMY1";
      stringArray0[3] = "insertz$;>h/@yy,3";
      stringArray0[4] = "z$;>h/@y";
      stringArray0[5] = "alter index";
      stringArray0[6] = "~uS)Hy~dh7o<Jj";
      stringArray0[7] = "execute";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(EeQEo!^|/Z|eP:J, call, SYSDUMMY1, insertz$;>h/@yy,3, z$;>h/@y, alter index, ~uS)Hy~dh7o<Jj, execute)", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FBClob fBClob0 = new FBClob();
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = SQLUtil.isQuery("Nelect iYtos #-z9rho'/N?");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FBClob fBClob0 = new FBClob();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("43X22.U", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FBClob fBClob1 = new FBClob();
      Boolean boolean0 = new Boolean(true);
      String string0 = "Nelect iYtos #-z9rho'/N?";
      int int0 = (-34862631);
      String string1 = ")/>ZMWBM^DFJ.J7^7.|";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("Nelect iYtos #-z9rho'/N?", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PARENT", (DBTable) null, (-1953), "PARENT");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-1953));
      DBDataType dBDataType0 = DBDataType.getInstance((-1440752895), "PARENT");
      Integer integer2 = new Integer((-1953));
      Integer integer3 = new Integer(336789528);
      defaultDBColumn0.toString();
      Integer.compareUnsigned((-2709), (-1953));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("trunca", (DBTable) null, dBDataType0, integer3, integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer.compareUnsigned(0, 20);
      Integer integer7 = new Integer(41);
      Integer integer8 = RawTransaction.ABORT;
      Integer integer9 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer10 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer11 = new Integer((-1440752895));
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      Integer integer12 = fBManagedConnectionFactory0.getTransactionIsolation();
      assertFalse(integer12.equals((Object)integer7));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<VersionNumberComponent> linkedList0 = new LinkedList<VersionNumberComponent>();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("M", "select", versionNumber0);
      defaultDatabase0.getTable("M", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-231535573), " 0>U~:I");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" 0>U~:I(0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CLOB", 6);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("create table");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) evoSuiteRemoteAddress0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintStream0.format("ka9Q?0T:J", objectArray0);
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sB");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setTransactionTimeout", true, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, (-28856934), "setTransactionTimeout");
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("truncate : SETTRANSACTIONTIMEOUT", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("j@xz0,", "/_&.GJ^]@Bd", "j@xz0,", false, "j@xz0,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputText0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "/_&.GJ^]@Bd";
      objectArray0[3] = (Object) mockPrintStream1;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "XSRS7.S");
      rowOutputText0.writeEnd();
      objectArray0[4] = (Object) "/_&.GJ^]@Bd";
      rowOutputText0.writeBytes("XSRS7.S");
      mockPrintStream1.format("XSRS7.S", objectArray0);
      System.setCurrentTimeMillis((-232L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q2");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XSRS7.S";
      stringArray0[1] = "Q2";
      stringArray0[2] = "/_&.GJ^]@Bd";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.ABORT;
      Integer.toUnsignedString(1);
      System.setCurrentTimeMillis(1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qARENT", (DBTable) null, (-1953), "qARENT");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":}=j+-]??";
      stringArray0[1] = "]U3X;yv52j,t@EK3/sZ";
      stringArray0[2] = "qARENT";
      stringArray0[3] = "SESSION_CLOSE";
      stringArray0[4] = "qARENT";
      stringArray0[5] = "]U3X;yv52j,t@EK3/sZ";
      stringArray0[6] = "qARENT, qARENT, qARENT, qARENT, qARENT";
      stringArray0[7] = "create materialized viewvalues(";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(":}=j+-]??", (String[]) null, "qARENT", "]U3X;yv52j,t@EK3/sZ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AJ$hKz4UM? ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AJ$hKz4UM? ";
      stringArray0[1] = "AJ$hKz4UM? ";
      stringArray0[2] = "AJ$hKz4UM? ";
      stringArray0[3] = "AJ$hKz4UM? ";
      stringArray0[4] = "AJ$hKz4UM? ";
      stringArray0[5] = "AJ$hKz4UM? ";
      stringArray0[6] = "AJ$hKz4UM? ";
      stringArray0[7] = "AJ$hKz4UM? ";
      stringArray0[8] = "3t3&";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";-";
      stringArray0[1] = ";-";
      stringArray0[2] = ";-";
      stringArray0[3] = ";-";
      stringArray0[4] = ";-";
      stringArray0[5] = ";-";
      stringArray0[6] = ";-";
      stringArray0[7] = ";-";
      SQLUtil.innerJoin(";-", stringArray0, "c?$,Dv", (String) null, stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "<H";
      stringArray1[1] = "c?$,Dv as null on ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;-";
      stringArray1[2] = "SG<BXxB7so=}_T\"";
      stringArray1[3] = "y&U[Ym^_SHxNx";
      stringArray1[4] = "3E:HPhIW3MQHoF`Idw@";
      stringArray1[5] = "y&U[Ym^_SHxNx";
      stringArray1[6] = "c?$,Dv";
      stringArray1[7] = "c?$,Dv";
      SQLUtil.leftJoin(";-", stringArray1, "%Di`s`;idSc-sX^Oz-", "<H", stringArray1);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("c?$,Dv as null on ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;-", "3E:HPhIW3MQHoF`Idw@", "|2*T/8]FKJ3>>%R");
      PrintWriter printWriter0 = jdbcConnectionPool0.getLogWriter();
      assertNull(printWriter0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callycy.nk";
      stringArray0[1] = null;
      stringArray0[3] = null;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer(336789528);
      DBDataType dBDataType0 = DBDataType.getInstance(336789528, "=Da26>0q4");
      Integer integer2 = new Integer(3131);
      Integer integer3 = Integer.valueOf(336789528);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callycy.nk", defaultDBTable0, dBDataType0, integer2, integer3);
      defaultDBColumn0.toString();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer.compareUnsigned(1830, 20);
      Integer integer7 = new Integer(2420);
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer10 = new Integer((-1931));
      Integer integer11 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string1 = Integer.toUnsignedString(20);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("h5U&hkx;M8x!", compositeDBObject0);
      tableContainer0.getTable("Gjk(q\"DEVt4,?}\"S");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("WU*#cWc35", (DBTable) null, 8, "X=2G|7");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("X=2G|7", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("q``x", "create materialized view", "q``x", false, "q``x");
      rowOutputText0.writeChars("H9Et.bH16;;:");
      rowOutputText0.writeSize(213);
      rowOutputText0.flush();
      rowOutputText0.writeUTF("create materialized view");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "create materialized view";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "q``x";
      stringArray0[4] = "q``x";
      stringArray0[5] = "execjfls'9>s-";
      stringArray0[6] = "execjfls'9>s-";
      String string0 = SQLUtil.normalize("execjfls'9>s-", false);
      assertEquals("execjfls '9>s-'", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("r]gYO>yEV<1w?./$h", true);
      SQLUtil.normalize("r ] gYO > yEV < 1w ?./ $ h", true);
      String string0 = "selectselect * from";
      SQLUtil.normalize("EUZ$yla~^jC5/(k", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "selectselect * from");
      int int0 = (-132);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-132), 'O');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil.normalize("}Bwof9**z;w.OsTz\"", true);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      GDSType.getType("} Bwof9 * * z  ; w.OsTz  \"\"");
      GDSType.getType("}Bwof9**z;w.OsTz\"");
      GDSType.getType("crete materializedviewm");
      GDSType.getType("}Bwof9**z;w.OsTz\"");
      LinkedList<Delayed> linkedList0 = new LinkedList<Delayed>();
      Character character0 = new Character('0');
      Character.highSurrogate((-1460140055));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.listIterator();
      // Undeclared exception!
      try { 
        linkedList1.subList((-1460140055), (-1460140055));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1460140055
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "create materializedviewm";
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[5] = ";-";
      stringArray0[4] = ";-";
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CLOB", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$o`97?");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Skipping HASH JOIN because there are no hash key columns", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("Skipping HASH JOIN because there are no hash key columns");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), "Z");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("VkSYWi:'\"L;", (DBTable) null, (-2389), " NOT Z(3,0) NULL");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("!!?]s$f[E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '!!?]s$f[E' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("\u0001\u0080\u0001\u0081", stringBuilder0);
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '~';
      charArray0[2] = ',';
      charArray0[3] = 'v';
      charArray0[4] = 't';
      charArray0[5] = 'c';
      charArray0[6] = 'W';
      charArray0[7] = 'c';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      SQLUtil.addOptionalCondition("\u0001\u0080\u0001\u0081", stringBuilder2);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder2, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.0002574669850497
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[%zOUjC+=gc)";
      stringArray0[1] = "[%zOUjC+=gc)";
      stringArray0[2] = "[%zOUjC+=gc)";
      stringArray0[3] = "gZ?b)[Fvu{6~=3m";
      stringArray0[4] = "[%zOUjC+=gc)";
      SQLUtil.join("[%zOUjC+=gc)", "[%zOUjC+=gc)", stringArray0, "\nWHERE ", (String) null, stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "gZ?b)[Fvu{6~=3m";
      SQLUtil.renderWhereClause(stringArray1, stringArray1);
      DBColumn dBColumn0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[%zOUjC+=gc)", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "gZ?b)[Fvu{6~=3m", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec1);
      Object object0 = new Object();
      StringBuilder stringBuilder3 = stringBuilder2.append(object0);
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder4.insert((-1992), (-1992));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1992
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")~U1ClBwV547)");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")~U1ClBwV547)", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.0185666947917342
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "ts";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ts", true, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT ts PRIMARY KEY (ts, , , , , , , , , , , , , , , , , )", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("0%KksaN%&gi!>nBC{5E", true, dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ts PRIMARY KEY (ts, , , , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RowOutputText rowOutputText0 = new RowOutputText("j@xz0,", "/_&.GJ^]@Bd", "j@xz0,", false, "j@xz0,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputText0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      rowOutputText0.writeUTF("/_&.GJ^]@Bd");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintStream0.println(0.0);
      objectArray0[2] = (Object) "/_&.GJ^]@Bd";
      objectArray0[3] = (Object) mockPrintStream1;
      rowOutputText0.writeEnd();
      Locale locale0 = new Locale("XSRS7.S", "j@xz0,", "j@xz0,");
      Locale locale1 = new Locale("j@xz0,");
      locale0.getDisplayCountry(locale1);
      mockPrintStream1.printf(locale0, "XSRS7.S", objectArray0);
      objectArray0[4] = (Object) "/_&.GJ^]@Bd";
      rowOutputText0.writeBytes("XSRS7.S");
      mockPrintStream1.format("XSRS7.S", objectArray0);
      System.setCurrentTimeMillis((-232L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q2");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XSRS7.S";
      stringArray0[1] = "Q2";
      stringArray0[2] = "/_&.GJ^]@Bd";
      objectArray0[0] = (Object) "XSRS7.S";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q2", false, stringArray0);
      String string0 = SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT Q2 PRIMARY KEY (XSRS7.S, Q2, /_&.GJ^]@Bd, )", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CLOB", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
