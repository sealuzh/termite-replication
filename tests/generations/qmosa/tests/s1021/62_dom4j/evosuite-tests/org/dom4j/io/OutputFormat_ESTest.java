/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 01:52:50 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2844287779055943
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "bKPF%k";
      stringArray0[3] = "r^2\"MMIJe30&&$--";
      stringArray0[4] = "-exxp5dEmpty-ewlines";
      stringArray0[5] = "-encoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-suppressDeclaration", outputFormat0.getIndent());
      assertEquals(2, int0);
      
      outputFormat0.setIndent("");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("  ", outputFormat1.getIndent());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isPadText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isOmitEncoding());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6396601391061796
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1227343229650404
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "Fg${Kpw/~sb\\Ky";
      stringArray0[2] = "nso'tSO";
      stringArray0[3] = "Fg${Kpw/~sb\\Ky";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("Fg${Kpw/~sb\\Ky", outputFormat0.getLineSeparator());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isPadText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^A{svyYLT";
      stringArray0[1] = "-padText";
      OutputFormat outputFormat0 = new OutputFormat("", false);
      assertFalse(outputFormat0.isPadText());
      
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1761179835747093
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Qv~$l";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "-expandEmpty-exp5dEmt";
      stringArray0[3] = "-kje''Xmup";
      stringArray0[4] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.642317960825605
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding("");
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = "Gj@!,$933G3`aJN.c|";
      stringArray0[3] = "Gj@!,$933G3`aJN.c|";
      stringArray0[4] = "Gj@!,$933G3`aJN.c|";
      stringArray0[5] = "Gj@!,$933G3`aJN.c|";
      stringArray0[6] = "k:Qj^eGtna:_";
      outputFormat0.parseOptions(stringArray0, 2);
      OutputFormat outputFormat2 = new OutputFormat("(agUa<ncosa\"", true, stringArray0[1]);
      assertEquals("(agUa<ncosa\"", outputFormat2.getIndent());
      
      outputFormat2.setIndent(true);
      outputFormat2.getEncoding();
      OutputFormat.createPrettyPrint();
      String[] stringArray1 = new String[0];
      outputFormat1.parseOptions(stringArray1, 2);
      assertFalse(outputFormat1.isPadText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.563442886239663
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("M]`0U+.");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      outputFormat0.setIndent(true);
      outputFormat0.getEncoding();
      OutputFormat outputFormat2 = new OutputFormat("UTF-8");
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = string0;
      stringArray0[4] = "M]`0U+.";
      stringArray0[5] = "UTF-8";
      stringArray0[6] = "M]`0U+.";
      stringArray0[7] = "UTF-8";
      outputFormat2.parseOptions(stringArray0, 1);
      outputFormat1.getEncoding();
      outputFormat0.setIndent("-omitEncoding");
      outputFormat1.setIndent("UTF-8");
      outputFormat2.setIndent(string0);
      outputFormat0.setIndent("UTF-8");
      assertEquals("\\uT\"58/%g<H r%om;", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat("-indentSize", false, "-xhtmly/gs");
      outputFormat0.setLineSeparator((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "u8;<S(^oHhV8-Lkq";
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "u8;<S(^oHhV8-Lkq";
      outputFormat0.setIndent("");
      stringArray0[4] = null;
      stringArray0[5] = "u8;<S(^oHhV8-Lkq";
      stringArray0[6] = "u8;<S(^oHhV8-Lkq";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u8;<S(^oHhV8-Lkq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndent("");
      outputFormat0.setNewlines(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setLineSeparator("");
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "x/\"D*l";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      outputFormat0.setAttributeQuoteCharacter('\'');
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1724999229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1724999229
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setEncoding((String) null);
      outputFormat0.setLineSeparator("");
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags((-2991));
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GBd-)";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2991));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2991
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("DE}bg[cK+#", true, "DE}bg[cK+#");
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setSuppressDeclaration(true);
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-exp3|dEmpEy-ewlines";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "-newlines";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9185967534162014
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = new OutputFormat("EiM\"[");
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat1.setTrimText(true);
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "EiM\"[";
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[1] = "EiM\"[";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.getLineSeparator();
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("");
      outputFormat2.setIndent(false);
      outputFormat2.isSuppressDeclaration();
      outputFormat2.isTrimText();
      outputFormat2.setSuppressDeclaration(false);
      outputFormat1.getLineSeparator();
      outputFormat2.setExpandEmptyElements(true);
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1155335895186265
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("");
      String[] stringArray0 = new String[0];
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat1.setLineSeparator(string0);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(false);
      outputFormat2.setIndentSize(0);
      outputFormat1.setAttributeQuoteCharacter('\"');
      outputFormat0.setIndent(string0);
      outputFormat1.setIndentSize(1);
      outputFormat1.setIndent(true);
      outputFormat2.getIndent();
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("\\uT\"58/%g<H r%om;", outputFormat0.getIndent());
      
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat3.getIndent());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      OutputFormat outputFormat0 = new OutputFormat("");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\u0013');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\u0013)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h##iAk7PuK");
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setIndent("");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndent("pbJ|77%q0zda?'WXak?");
      outputFormat0.setIndent("+-trim");
      assertEquals("+-trim", outputFormat0.getIndent());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.170907233091901
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-exxp5dEmptySewlines";
      stringArray0[1] = "-exxp5dEmptySewlines";
      stringArray0[2] = "-exxp5dEmptySewlines";
      stringArray0[3] = "-exxp5dEmptySewlines";
      stringArray0[4] = "-exxp5dEmptySewlines";
      stringArray0[5] = "-exxp5dEmptySewlines";
      stringArray0[6] = "-exxp5dEmptySewlines";
      stringArray0[7] = "-exxp5dEmptySewlines";
      stringArray0[8] = "-exxp5dEmptySewlines";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setEncoding((String) null);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertTrue(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isXHTML());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals("  ", outputFormat2.getIndent());
      assertTrue(outputFormat2.isPadText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3489061161305265
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.isTrimText();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(false);
      outputFormat1.setIndent(false);
      outputFormat1.setIndent("-indent");
      outputFormat1.setEncoding("-expandEmpty-rxp35dEmpty-ewlines");
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat1.isNewlines();
      outputFormat1.getIndent();
      outputFormat1.setIndentSize((-1));
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setIndent("-expandEmpty-rxp35dEmpty-ewlines");
      outputFormat0.isPadText();
      outputFormat0.isExpandEmptyElements();
      outputFormat1.setEncoding("-indent");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions((String[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.032343996128673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      outputFormat0.setNewLineAfterNTags(0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat1.getLineSeparator();
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("");
      outputFormat2.setExpandEmptyElements(true);
      outputFormat2.isSuppressDeclaration();
      outputFormat2.setNewlines(true);
      outputFormat2.setNewLineAfterNTags(0);
      outputFormat2.isTrimText();
      outputFormat1.getLineSeparator();
      outputFormat2.setExpandEmptyElements(true);
      assertEquals("  ", outputFormat2.getIndent());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.218701080763228
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("");
      String[] stringArray0 = new String[0];
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat1.setLineSeparator(string0);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(false);
      outputFormat0.setXHTML(true);
      outputFormat2.setIndentSize(0);
      outputFormat2.setTrimText(false);
      outputFormat2.parseOptions(stringArray0, 1);
      outputFormat1.isNewlines();
      outputFormat1.setTrimText(true);
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setExpandEmptyElements(true);
      outputFormat1.setPadText(false);
      outputFormat2.setPadText(false);
      outputFormat3.setExpandEmptyElements(false);
      assertFalse(outputFormat3.isExpandEmptyElements());
      
      outputFormat2.setExpandEmptyElements(true);
      assertTrue(outputFormat2.isExpandEmptyElements());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Fg${Kpw/~sb\\Ky", false, "I,iSAV!Wj%i Z");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmptyrggGtz-U8-j";
      stringArray0[1] = "I,iSAV!Wj%i Z";
      stringArray0[2] = "-exxp5dEmpty-ewlines";
      stringArray0[3] = "-expandEmptyr1gGtz-U8-Q";
      stringArray0[4] = "-expandEmptyr1gGtz-U8-Q";
      stringArray0[6] = "I,iSAV!Wj%i Z";
      stringArray0[7] = "Fg${Kpw/~sb\\Ky";
      stringArray0[8] = "c2i[U1,@g0fZ>Q(11+";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("Fg${Kpw/~sb\\Ky", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("I,iSAV!Wj%i Z", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.162183381870309
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat1.setTrimText(true);
      outputFormat1.setOmitEncoding(false);
      outputFormat1.setPadText(false);
      outputFormat0.setXHTML(false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("");
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("");
      outputFormat1.setIndent("");
      OutputFormat.createCompactFormat();
      outputFormat1.setIndent("");
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3476688751778507
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("P]c");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("P]c");
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setLineSeparator("  ");
      outputFormat1.isSuppressDeclaration();
      outputFormat1.isTrimText();
      outputFormat0.setExpandEmptyElements(false);
      OutputFormat outputFormat2 = new OutputFormat("P]c", true);
      outputFormat2.setLineSeparator("  ");
      outputFormat2.setIndent(false);
      outputFormat2.setPadText(false);
      outputFormat1.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals(577, outputFormat0.getNewLineAfterNTags());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0685866802543194
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("-expandEmpty-xhtml(agUa<ncosa\";");
      outputFormat0.setXHTML(false);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent("(agUa<ncosa\"");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("k&&hn$");
      outputFormat0.isXHTML();
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(agUa<ncosa\";";
      outputFormat0.setLineSeparator("(agUa<ncosa\";");
      outputFormat0.setTrimText(true);
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("N\"wibYrWnl2Si>7");
      outputFormat0.setIndent("-xhtmlbK?PF%k_~FV5d;g8");
      assertEquals("-xhtmlbK?PF%k_~FV5d;g8", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("ig(agUa<ncosa\"");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("k&&hn$");
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(agUa<ncosa\";";
      stringArray0[1] = "~RmRE G.aJH";
      stringArray0[2] = "(agUa<ncosa\";";
      stringArray0[4] = "(agUa<ncosa\";";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("k&&hn$", outputFormat0.getLineSeparator());
      assertEquals(577, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.218701080763228
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setPadText(false);
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[0];
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setTrimText(false);
      outputFormat0.setXHTML(true);
      outputFormat1.setIndentSize(0);
      outputFormat1.setTrimText(false);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat0.isNewlines();
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setExpandEmptyElements(true);
      outputFormat0.setPadText(false);
      outputFormat1.setPadText(false);
      outputFormat2.setExpandEmptyElements(false);
      assertFalse(outputFormat2.isExpandEmptyElements());
      
      outputFormat1.setExpandEmptyElements(true);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat3.isPadText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "nso'tSO";
      stringArray0[4] = "nso'tSO";
      stringArray0[6] = "-ex35dEmpty-wlines";
      stringArray0[4] = "Fg${Kpw/~sb\\Ky";
      OutputFormat outputFormat0 = new OutputFormat("Fg${Kpw/~sb\\Ky");
      outputFormat0.setIndentSize(1);
      assertEquals(" ", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setEncoding("l3laJo0SAX4ezb Hmj");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.getEncoding();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l3laJo0SAX4ezb Hmj";
      stringArray0[1] = "l3laJo0SAX4ezb Hmj";
      stringArray0[2] = "l3laJo0SAX4ezb Hmj";
      stringArray0[3] = "`9=9-m5.";
      stringArray0[4] = "l3laJo0SAX4ezb Hmj";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2907));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2907
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8542306045431616
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~";
      stringArray0[1] = "Un>%'";
      int int0 = outputFormat0.parseOptions(stringArray0, 4207);
      assertEquals(4207, int0);
      
      outputFormat0.setNewlines(true);
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
      
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
      assertEquals('\"', char0);
      assertTrue(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isPadText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "-xhtml-ewines";
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 1;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtml-ewines";
      stringArray0[1] = "-xhtml-ewines";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9224967595081845
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`'FVyS29o", false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndentSize(1);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getIndent();
      outputFormat0.isPadText();
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("`'FVyS29o");
      assertEquals("`'FVyS29o", outputFormat0.getIndent());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setEncoding("");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0257505895352663
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[7];
      outputFormat0.setLineSeparator("(+@d[=x");
      outputFormat0.setTrimText(true);
      stringArray0[0] = "";
      outputFormat0.setExpandEmptyElements(true);
      stringArray0[1] = "Gw+ulwYUt3s\"{Vw";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "P}8;";
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent(false);
      stringArray0[4] = "";
      stringArray0[5] = "-expandEmpty";
      outputFormat0.parseOptions(stringArray0, 2103);
      outputFormat0.isPadText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      outputFormat0.isTrimText();
      outputFormat0.getIndent();
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isPadText());
      
      String string0 = outputFormat0.getIndent();
      assertEquals("  ", string0);
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isPadText());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isXHTML());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isNewlines());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertEquals("\n", outputFormat2.getLineSeparator());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(false);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(boolean0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9340017941205476
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 1677;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtml-ewines";
      stringArray0[1] = "-xhtml-ewines";
      stringArray0[2] = "";
      stringArray0[3] = "-xhtml-ewines";
      stringArray0[4] = "bKPF%k_~FV5d;g8";
      stringArray0[6] = "-newlines";
      stringArray0[7] = "bKPF%k_~FV5d;g8";
      stringArray0[8] = "bKPF%k_~FV5d;g8";
      outputFormat0.parseOptions(stringArray0, 1677);
      outputFormat0.parseOptions(stringArray0, 350);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-361));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -361
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.735579510109049
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "-exp3|dEmpEy-ewlines";
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 1;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-exp3|dEmpEy-ewlines";
      stringArray0[1] = "-exp3|dEmpEy-ewlines";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[3];
      String string1 = "-ewines";
      stringArray1[0] = "-ewines";
      String string2 = ")5wG";
      stringArray1[1] = ")5wG";
      stringArray1[2] = "-exp3|dEmpEy-ewlines";
      outputFormat0.parseOptions(stringArray1, 1);
      int int1 = 0;
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 1);
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 6);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-135950621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -135950621
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-exp3|dEpEy-ewines");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expandEmpty-exp3|dEpEy-ewines";
      stringArray0[1] = "-expandEmpty-exp3|dEpEy-ewines";
      int int0 = 1;
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1815198906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1815198906
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlEiM\"[");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setSuppressDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1447204986333115
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlD}bg[c-K+#", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtmlD}bg[c-K+#";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-exp5dEmt";
      stringArray0[3] = "-xhtml-exp35dEmpty";
      stringArray0[4] = "-xhtmlD}bg[c-K+#";
      stringArray0[5] = "-xhtmlD}bg[c-K+#";
      stringArray0[6] = "-xhtmlD}bg[c-K+#";
      stringArray0[7] = "-xhtmlD}bg[c-K+#";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 8);
      assertEquals("-exp5dEmt", outputFormat0.getEncoding());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4169372058999015
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-exp35dEmpty-newlines";
      outputFormat0.setIndentSize((-1984366034));
      outputFormat0.setIndentSize((-1984366034));
      stringArray0[1] = "-exp35dEmpty-newlines";
      outputFormat0.setIndent("-exp35dEmpty-newlines");
      stringArray0[2] = "bK?PF%k_~FV5d;g8";
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("Invalid attribute quote character (");
      outputFormat0.setIndent("dqz|6egP+|L ?");
      assertEquals("dqz|6egP+|L ?", outputFormat0.getIndent());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9299041669155916
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setTrimText(true);
      outputFormat0.setPadText(false);
      outputFormat0.setIndent(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      OutputFormat.createCompactFormat();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-exp3|dEmpEy-ewlines", false, "-exxp5dEmpty-ewlines");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "c2i[U1,@g0fZ>Q(11+";
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[1] = "-exxp5dEmpty-ewlines";
      stringArray0[2] = "c2i[U1,@g0fZ>Q(11+";
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent((String) null);
      outputFormat0.setEncoding("zf.X.|L[JHx{I8P\"H9");
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(1494);
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k:Qj^eGtna:_";
      stringArray0[8] = "k:Qj^eGtna:_";
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("k:Qj^eGtna:_");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isTrimText();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(true);
      assertEquals("k:Qj^eGtna:_", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setXHTML(false);
      outputFormat0.setPadText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndentSize(301);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setPadText(true);
      assertEquals("                                                                                                                                                                                                                                                                                                             ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[gIOr(D ", false, "");
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isNewlines());
      assertEquals("", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(boolean0);
      assertEquals("[gIOr(D ", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("(agUa<");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\\)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
