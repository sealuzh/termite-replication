/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 02:07:57 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CountFuncion");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.jaxen.function.CountFuncion";
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.function.CountFuncion", "");
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/");
      sAXReader0.createDefaultEntityResolver("o&X^FTi");
      String string0 = "http://xml.org/sax/features/use-locator2";
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(true);
          sAXReader0.setEncoding("|z9A");
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor374.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor374.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttributeList");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttributeList");
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      mockFile0.setWritable(true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      mockFile0.setWritable(false);
      mockFile0.setReadOnly();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockFile mockFile1 = new MockFile((String) null, "org.dom4j.bean.BeanAttributeList");
      sAXReader0.setEncoding("org.jaxen.function.FalseFunction");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      mockFile1.mkdir();
      MockFile mockFile2 = new MockFile("//tmp/4C!A\"AnvBKl/!]UtjsY0");
      mockFile1.setReadOnly();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      mockFile1.delete();
      mockFile1.setReadOnly();
      mockFile0.renameTo(mockFile1);
      File file0 = MockFile.createTempFile("org.dom4j.bean.BeanAttributeList", "http://xml.org/sax/features/validation");
      file0.mkdir();
      file0.getCanonicalPath();
      file0.renameTo(mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"ORG.JAXEN.FUNCTION.FALSEFUNCTION\". Nested exception: Invalid encoding name \"ORG.JAXEN.FUNCTION.FALSEFUNCTION\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.getQName("", "Unhandled operator in createEqualityExpr(): ", "//tmp/^n1p:+HJGlt1|N-0U`:{>>");
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack1.getDefaultNamespace();
      namespaceStack1.pop("MO%e");
      QName qName0 = QName.get("", (Namespace) null, "");
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", qName0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttributeList");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      SAXReader sAXReader0 = new SAXReader((String) null);
      mockFile0.setWritable(true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      mockFile0.setWritable(false);
      mockFile0.setReadOnly();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockFile mockFile1 = new MockFile((String) null, "org.dom4j.bean.BeanAttributeList");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("aX^7r>+yqS}pXg|A`3&");
      StringReader stringReader0 = new StringReader("<5-ax\"7.Hm]qVxz");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : The markup in the document preceding the root element must be well-formed. Nested exception: The markup in the document preceding the root element must be well-formed.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3863046904967216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("@-|5");
      String string0 = "SickVQ|2\"v2RLavv6g8";
      try { 
        sAXReader0.read((InputStream) null, "SickVQ|2\"v2RLavv6g8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: SickVQ|2\"v2RLavv6g8 Nested exception: no protocol: SickVQ|2\"v2RLavv6g8
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.xslt.DocumentFunction");
      sAXReader_SAXEntityResolver0.resolveEntity("88`ydI`Lelf", "-$RT 1");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("aX^7r>+yqS}pXg|A`3&");
      StringReader stringReader0 = new StringReader("<5-ax\"7.Hm]qVxz");
      try { 
        sAXReader0.read("aX^7r>+yqS}pXg|A`3&");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: aX^7r>+yqS}pXg|A`3& Nested exception: no protocol: aX^7r>+yqS}pXg|A`3&
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("2qYeQ", "2qYeQ", "#document", (-893), 43);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/M{X;0/tmp/4C!A\"AnvBKl/!]UtjsY0", locator2Impl2, sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("$,mD[xY!ugD`!qC$x", "//tmp/M{X;0", "$,mD[xY!ugD`!qC$x", 39, (-893), sAXParseException1);
      xMLFilterImpl1.warning(sAXParseException2);
      sAXReader0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl1);
      DefaultDocument defaultDocument0 = new DefaultDocument("#document");
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      String string0 = "org.dom4j.io.SAXReader$SAXEntityResolver";
      try { 
        sAXReader0.read((Reader) null, "org.dom4j.io.SAXReader$SAXEntityResolver");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.dom4j.io.SAXReader$SAXEntityResolver (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.dom4j.io.SAXReader$SAXEntityResolver (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CouatFunction");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createPattern("org.jaxen.function.CouatFunction");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      StringReader stringReader0 = new StringReader("org.jaxen.function.CouatFunction");
      DOMDocument dOMDocument0 = new DOMDocument();
      sAXReader0.isMergeAdjacentText();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      // Undeclared exception!
      try { 
        attributes2Impl0.isDeclared(8400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No attribute at index: 8400
         //
         verifyException("org.xml.sax.ext.Attributes2Impl", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("java.lang.String");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CountFunction");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("ERBG)h;", "");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespace-prefixes");
      attributes2Impl0.getType((-1280));
      String string1 = "http://xml.org/sax/features/use-locator2";
      DefaultDocument defaultDocument0 = new DefaultDocument("http://xml.org/sax/features/use-locator2");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.007081920694827
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      sAXReader0.resetHandlers();
      sAXReader0.getXMLReader();
      xMLReaderAdapter0.startDocument();
      sAXReader0.createXMLReader();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "Validation not supported for XMLReader: ";
      sAXReader0.isIncludeInternalDTDDeclarations();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("Validation not supported for XMLReader: ");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Validation not supported for XMLReader:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7f2f3c5c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      MockURL.getFtpExample();
      try { 
        sAXReader0.setFeature("ENTITY_NODE", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'ENTITY_NODE' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("6y&)4=N_du2%~");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(":", ":");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      mockFile0.setExecutable(true, false);
      mockFile0.getAbsolutePath();
      mockFile0.setWritable(true, false);
      mockFile0.setWritable(false);
      mockFile0.setExecutable(false, true);
      mockFile0.setExecutable(true, true);
      mockFile0.setWritable(false);
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile("//tmp/4C!A\"AnvBKl/!]UtjsY0");
      mockFile0.delete();
      mockFile0.setReadOnly();
      mockFile0.renameTo(mockFile0);
      File file0 = MockFile.createTempFile("org.dom4j.bean.BeanAttributeList", "Q:rg9");
      file0.mkdir();
      file0.mkdir();
      File file1 = file0.getAbsoluteFile();
      file0.getAbsoluteFile();
      File file2 = file0.getCanonicalFile();
      file2.mkdir();
      file1.mkdirs();
      MockFile mockFile2 = new MockFile("/home/ubuntu/termite/projects/62_dom4j/~YT}X[F}K #Fk7$j", "~YT}X[F}K #Fk7$j");
      mockFile2.getCanonicalPath();
      try { 
        sAXReader0.read((File) mockFile2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("//tmp/FC'S?x!v~/pq#S1%'**#4BLzO", "$*Gx7~yV,`L^,An-Z|L");
      defaultHandler2_0.notationDecl("D,O!Oe.51mPdW", "$|+EP{rYM>[@UI5K", "G/,R;ou\".");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.startEntity("org.dom4j.io.SAXReader$SAXEntityResolver");
      defaultHandler2_1.resolveEntity((String) null, "D,O!Oe.51mPdW", "$|+EP{rYM>[@UI5K", "//tmp/Invalid node type. Cannot add node: 0org.jaxen.function.CountFunction");
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5876170593402499
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CountFunction");
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.function.CountFunction", "//tmp/mP4.I<d0/tmp/org.dom4j.bean.BeanAttributeList0http:/xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/mP4.I<d0/tmp/org.dom4j.bean.BeanAttributeList0http:/xml.org/sax/features/validation", "//tmp/mP4.I<d0/tmp/org.dom4j.bean.BeanAttributeList0http:/xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/M{X;0/tmp/4C!A\"AnvBKl/!]UtjsY0", "");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.createDefaultEntityResolver("//org.jaxen.function.CountFunction/@k>Im-MMmfh#&mhK0@k>Im-MMmfh#&mhK");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("//tmp/M{X;0");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3671774230734823
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CountFunction");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/^n1p:+HJGlt1|N-0U`:{>>", "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.attributeDecl("org.jaxen.saxpath.helpers.XPathReaderFactory", "I,o9", "//tmp/^n1p:+HJGlt1|N-0U`:{>>", "org.jaxen.function.CountFunction", (String) null);
      String string0 = "Nq";
      defaultHandler2_0.getExternalSubset("Nq", "&>!\"$!3Bd7,1`V[5");
      String string1 = "Cause cannot be reset";
      StringReader stringReader0 = new StringReader("Cause cannot be reset");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader0, "/I");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///I : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.442229142430409
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      QName qName0 = namespaceStack0.getQName("4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY", "org.dom4j.util.UserDataAttribute");
      DocumentFactory documentFactory1 = qName0.getDocumentFactory();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName.get("org.dom4j.util.UserDataAttribute", namespace0, "G<}");
      SAXReader sAXReader0 = new SAXReader(documentFactory1, true);
      namespaceStack0.getAttributeQName("org.dom4j.util.UserDataAttribute", "org.dom4j.util.UserDataAttribute", "org.dom4j.util.UserDataAttribute");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.createXMLReader();
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.createDefaultEntityResolver("org.dom4j.util.UserDataAttribute");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      sAXReader0.setEncoding("7X?|l+(+`A; Y*-");
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"7X?|L+(+`A; Y*-\". Nested exception: Invalid encoding name \"7X?|L+(+`A; Y*-\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CountFunction");
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.function.CountFunction", "//tmp/mP4.I<d0/tmp/org.dom4j.bean.BeanAttributeList0http:/xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/mP4.I<d0/tmp/org.dom4j.bean.BeanAttributeList0http:/xml.org/sax/features/validation", "//tmp/mP4.I<d0/tmp/org.dom4j.bean.BeanAttributeList0http:/xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/M{X;0/tmp/4C!A\"AnvBKl/!]UtjsY0", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2384, 517);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      pushbackInputStream0.available();
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5bcfccf5 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5bcfccf5 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter1);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      locator2Impl0.getColumnNumber();
      SAXParseException sAXParseException0 = new SAXParseException("name", "No variable context installed", "//tmp/tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []0", (-1), 39);
      SAXParseException sAXParseException1 = new SAXParseException("?1rn _.5A~(eP+n>", locator2Impl0, sAXParseException0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      SAXParseException sAXParseException2 = new SAXParseException("//tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []", " of document ", "//tmp/tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []0", 82, 384);
      xMLFilterImpl2.warning(sAXParseException2);
      sAXReader0.getErrorHandler();
      xMLFilterImpl1.setErrorHandler((ErrorHandler) null);
      try { 
        sAXReader0.read((InputStream) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.getQName("", "", "//tmp/tmp/t[p/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Atack: []00http:/xml.org/sax/features/validation");
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack1.getDefaultNamespace();
      namespaceStack1.pop("//tmp/tmp/t[p/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Atack: []00http:/xml.org/sax/features/validation");
      QName.get("Yprb?5MR95", (Namespace) null, "//tmp/tmp/t[p/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Atack: []00http:/xml.org/sax/features/validation");
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.configureReader(parserAdapter0, (DefaultHandler) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2016318389219833
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      boolean boolean0 = true;
      String string0 = "!q)On['";
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("!q)On['", locator2Impl0);
      locator2Impl0.getXMLVersion();
      sAXParseException0.printStackTrace();
      xMLFilterImpl0.warning(sAXParseException0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "G]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@41c1a610 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@41c1a610 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributes2Impl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.getDocumentFactory();
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl2);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl1);
      attributes2Impl1.getValue(4);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      assertFalse(xMLFilterImpl3.equals((Object)xMLFilterImpl0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(7);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 7);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.addHandler((String) null, pruningDispatchHandler0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/use-locator2");
      InputSource inputSource0 = new InputSource((String) null);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getErrorHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      assertEquals(0, dispatchHandler0.getActiveHandlerCount());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getEntityResolver();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      String string0 = "";
      sAXReader0.resetHandlers();
      sAXReader0.isValidating();
      sAXReader0.getEncoding();
      sAXReader0.isStripWhitespaceText();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "org.dom4j.io.SAXReader");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttributeList");
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      mockFile0.toPath();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.deleteOnExit();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []0");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.bean.BeanAttributeList", "org.dom4j.bean.BeanAttributeList");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6847404375843267
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      sAXReader0.resetHandlers();
      sAXReader0.isValidating();
      sAXReader0.getEncoding();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      MockThrowable mockThrowable0 = new MockThrowable("//tmp/M{X;0");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      MockException mockException0 = new MockException("", mockThrowable1);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl1, mockException0);
      xMLFilterImpl0.warning(sAXParseException0);
      sAXReader0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setErrorHandler(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null, "YeDwdLiG;v");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: YeDwdLiG;v Nested exception: no protocol: YeDwdLiG;v
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.001030622553057
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      sAXReader0.resetHandlers();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.createXMLReader();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sAXReader0.createXMLReader();
      sAXReader0.getXMLReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.createContentHandler(parserAdapter0);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4379012195506835
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      locator2Impl1.getColumnNumber();
      SAXParseException sAXParseException0 = new SAXParseException("Text ods cannot have children", "5(kPAU", "#document", 39, (-893));
      SAXParseException sAXParseException1 = new SAXParseException("5(kPAU", locatorImpl0, sAXParseException0);
      xMLFilterImpl1.warning(sAXParseException1);
      sAXReader0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl1);
      try { 
        sAXReader0.read((InputStream) null, "[X;@=sG?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: [X;@=sG? Nested exception: no protocol: [X;@=sG?
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/ of document 0^n1p:+HJGlt1|N-");
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.getXMLReader();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1, 91);
      int int0 = (-1464);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream((-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j";
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("6qk0c", "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j");
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      StringReader stringReader0 = new StringReader("//tmp/ : 0fXe)2~0lU,3");
      try { 
        sAXReader0.read((Reader) stringReader0, "6qk0c");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@44cebdda Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@44cebdda Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(false);
      String string0 = "hkadeOr";
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1, 91);
      pipedOutputStream1.flush();
      int int0 = (-1464);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream((-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.attributeDecl("L?6yiBESyt%", "//tmp/org.dom4j.bean.BeanAttributeList0Q:rg9", "I,o9", "org.jaxen.XPathSyntaxException", "~:bV\"#NwH4");
      defaultHandler2_0.getExternalSubset("$*Gx97~yV,`L^,An-Z|L", "{%w5/Ti|SW1/&Q");
      defaultHandler2_0.notationDecl("//tmp/org.dom4j.bean.BeanAttributeList0Q:rg9", (String) null, "{%w5/Ti|SW1/&Q");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'v';
      charArray0[2] = 'J';
      defaultHandler2_1.ignorableWhitespace(charArray0, 28, 28);
      defaultHandler2_1.notationDecl("? ", "l#aG{yJVB8^yOxxTV", "?j(`MJX7Naz9F");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_3.startEntity("//tmp/Wdp0Wdp");
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_2.getExternalSubset("(~>~re>_@$\"9 ", "//tmp/tmp/4C!A\"AnvBKl/!]UtjsY00/tmp/tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []1/tmp/^n1p:+HJGlt1|N-0U`:{>>");
      Object object0 = new Object();
      SAXReader sAXReader1 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader1.setProperty((String) null, "I,o9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttributeList");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j", "org.dom4j.bean.BeanAttributeList");
      SAXReader sAXReader0 = new SAXReader((String) null);
      mockFile0.setWritable(true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile((String) null, "org.dom4j.bean.BeanAttributeList");
      MockFile mockFile2 = new MockFile("//tmp4C!A\"nvBKl/!]UtjsY0", "//tmp4C!A\"nvBKl/!]UtjsY0");
      mockFile1.setReadOnly();
      mockFile1.setReadOnly();
      mockFile0.renameTo(mockFile1);
      File file0 = MockFile.createTempFile("org.dom4j.bean.BeanAttributeList", "7k$W}c\u0007!@");
      mockFile0.setExecutable(true, true);
      mockFile0.toPath();
      mockFile0.setReadable(false, false);
      file0.getCanonicalFile();
      file0.renameTo(mockFile0);
      MockFile mockFile3 = new MockFile("IroEo<XmdmoDU#[U/-");
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName((String) null, "yhnkf7K_N/r:oT)\"?'2", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack1.getDefaultNamespace();
      namespaceStack0.pop("~YT}X[F}K #Fk7$j");
      QName.get("3^~h:i#_", (Namespace) null, "9c(");
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      Object object1 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      xMLFilterImpl0.startElement("", "/", "3^~h:i#_", attributesImpl0);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(true);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLReader((XMLReader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.setFeature("ovjo7zb@t/j", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'ovjo7zb@t/j' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("6y&)4=N_du2%~");
      InputSource inputSource0 = new InputSource();
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setMergeAdjacentText(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2545);
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      String string0 = null;
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.addHandler((String) null, pruningDispatchHandler0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        defaultDocumentFactory0.createPattern((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: null
         //
         verifyException("org.dom4j.xpath.XPathPattern", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/M{X;0");
      InputSource inputSource0 = new InputSource();
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "e#zJLyxkq";
      PipedInputStream pipedInputStream0 = new PipedInputStream(1462);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "e#zJLyxkq");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("org.jaxen.XPathSyntaxException", "//tmp/org.dom4j.bean.BeanAttributeList0Q:rg9");
      defaultHandler2_0.notationDecl("//org.jaxen.function.CountFunction/@k>Im-MMmfh#&mhK0@k>Im-MMmfh#&mhK", "//org.jaxen.function.CountFunction/@k>Im-MMmfh#&mhK0@k>Im-MMmfh#&mhK", "org.jaxen.UnresolvableException");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.notationDecl("org.dom4j.tree.DefaultNamespace", "L?6yiBESyt%", "\"G6sxKDa2<_kn5zB");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      defaultHandler2_0.startEntity("//tmp/org.dom4j.bean.BeanAttributeList0Q:rg9");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_4.getExternalSubset("LnZ", "4|@vdX%t_]p");
      MockFile mockFile0 = new MockFile("org.jaxen.UnresolvableException", "/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = mockFile0.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.jaxen.UnresolvableException (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.jaxen.UnresolvableException (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      namespaceStack0.getQName("4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY", "org.dom4j.util.UserDataAttribute");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      namespaceStack0.getAttributeQName("org.dom4j.util.UserDataAttribute", "org.dom4j.util.UserDataAttribute", "org.dom4j.util.UserDataAttribute");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("org.dom4j.tree.NamespaceStack@4 Stack: []", "//tmp/q:Q181@h?STRFAa0org.dom4j.io.SAXReader");
      documentFactory0.createProcessingInstruction("4C!A\"AnvBKl/!]UtjsY", (Map) hashMap0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.installXMLFilter(xMLReader0);
      QName.get("NEEvb6oX1[gf", (Namespace) null);
      sAXReader0.setValidation(true);
      MockFile.createTempFile("org.dom4j.util.UserDataAttribute", "org.dom4j.tree.NamespaceStack@4 Stack: []");
      defaultDocumentFactory0.createDocument("4C!A\"AnvBKl/!]UtjsY");
      try { 
        sAXReader0.setXMLReaderClassName("!Gyu\nxGU");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class !Gyu
         // xGU not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j";
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("6qk0c", "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName((String) null, "yhnkf7K_N/r:oT)\"?'2", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack1.getDefaultNamespace();
      namespaceStack0.pop("~YT}X[F}K #Fk7$j");
      namespaceStack1.getQName("~YT}X[F}K #Fk7$j", (String) null, "~YT}X[F}K #Fk7$j");
      QName.get("3^~h:i#_", (Namespace) null, "9c(");
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      Object object1 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      defaultDocumentFactory0.createComment("(~p[N-Zk=sp1Tx=Pxb");
      MockURL.getFileExample();
      defaultDocumentFactory0.createDocument();
      sAXReader0.setEncoding("http://xml.org/sa/features/validation");
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1, 91);
      pipedOutputStream1.flush();
      int int0 = (-1464);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream((-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "~YT}X[F}K #Fk7$j";
      String string1 = "y#ki#Q]'S%.d9G/R0z";
      MockFile mockFile0 = new MockFile("y#ki#Q]'S%.d9G/R0z");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("org.dom4j.bean.BeanAttributeList", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class org.dom4j.bean.BeanAttributeList loaded but cannot be instantiated (no empty public constructor?)
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      mockFile0.delete();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endPrefixMapping("~YT}X[F}K #Fk7$j");
      int int0 = (-917);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.5213864941505775
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.resetHandlers();
      mockFile0.setExecutable(true, false);
      mockFile0.setWritable(true, false);
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile("~YT}X[F}K #Fk7$j");
      mockFile1.setWritable(false);
      mockFile1.mkdir();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 80);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.function.CountFunction");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/^n1p:+HJGlt1|N-0U`:{>>", "");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" : ");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      mockFile0.setExecutable(true, false);
      mockFile0.getAbsolutePath();
      mockFile0.setWritable(true, true);
      mockFile0.setWritable(false);
      mockFile0.setExecutable(true, true);
      mockFile0.toPath();
      mockFile0.setExecutable(true, true);
      mockFile0.setWritable(false);
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile("//tmp/4C!A\"AnvBKl/!]UtjsY0");
      mockFile0.delete();
      mockFile0.setReadOnly();
      mockFile0.renameTo(mockFile0);
      File file0 = MockFile.createTempFile(" : ", "Q:rg9");
      file0.mkdir();
      file0.mkdir();
      file0.getAbsoluteFile();
      file0.getAbsoluteFile();
      file0.getCanonicalFile();
      file0.mkdir();
      file0.mkdirs();
      MockFile mockFile2 = new MockFile("Q:rg9", "//tmp/4C!A\"AnvBKl/!]UtjsY0");
      file0.getCanonicalPath();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" : ");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.removeHandler("This should never happen. Caught: ");
      mockFile0.setExecutable(true, true);
      String string0 = mockFile0.getAbsolutePath();
      mockFile0.setExecutable(false, true);
      mockFile0.toPath();
      mockFile0.setExecutable(true, true);
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false);
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile("//tmp/4C!A\"AnvBKl/!]UtjsY0");
      mockFile0.delete();
      mockFile0.setReadOnly();
      mockFile0.renameTo(mockFile0);
      MockFile.createTempFile("//tmp/R3Av{{dZ[B5F1vg:t", "//tmp/R3Av{{dZ[B5F1vg:t");
      File file0 = MockFile.createTempFile(" : ", "Q:rg9");
      file0.mkdir();
      file0.mkdir();
      MockFile mockFile2 = new MockFile("/home/ubuntu/termite/projects/62_dom4j/ : ");
      file0.getAbsoluteFile();
      file0.getCanonicalFile();
      file0.mkdir();
      file0.mkdirs();
      MockFile mockFile3 = new MockFile("Q:rg9", "//tmp/4C!A\"AnvBKl/!]UtjsY0");
      String string1 = file0.getCanonicalPath();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      parserAdapter0.setErrorHandler((ErrorHandler) null);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("");
      pruningDispatchHandler0.addHandler("//tmp/q:Q181@h?STRFAa0org.dom4j.io.SAXReader", (ElementHandler) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      try { 
        MockURL.URL("", "X#>'c'N-R@2", "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.getQName("", "", "");
      namespaceStack0.getDefaultNamespace();
      QName.get("", (Namespace) null, "");
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      String string0 = null;
      attributes2Impl0.getValue((String) null);
      StringReader stringReader0 = new StringReader("HQCf)c?cdM.");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reader reader0 = null;
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = null;
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.unparsedEntityDecl("//tmp/ : 1Q:rg9", (String) null, "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j", "L?6yiBESyt%");
      defaultHandler2_0.attributeDecl("//tmp/ : 1Q:rg9", "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j", "b.sx&|4k|pk;?l", "//tmp/ : 1Q:rg9", (String) null);
      defaultHandler2_0.getExternalSubset("//tmp/ : 1Q:rg9", (String) null);
      defaultHandler2_0.notationDecl("9po5G", "1", "McMW'&j6`L6EgeJ\"");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      defaultHandler2_2.notationDecl("//tmp/^n1p:+HJGlt1|N-1'`,}6VI@u%L8l?rjDo5", "//tmp/^n1p:+HJGlt1|N-1'`,}6VI@u%L8l?rjDo5", "McMW'&j6`L6EgeJ\"");
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_5 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_6 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_7 = new DefaultHandler2();
      defaultHandler2_7.startEntity("2Xp)x");
      DefaultHandler2 defaultHandler2_8 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_9 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_10 = new DefaultHandler2();
      defaultHandler2_8.getExternalSubset("//tmp/ : 1Q:rg9", "org.dom4j.tree.AbstractCharacterData");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<WBKVr/Ni4`P");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1, 91);
      pipedOutputStream1.flush();
      int int0 = (-1464);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream1, (-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.createDefaultEntityResolver("]tbj|O");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("z(},4=");
      sAXReader_SAXEntityResolver0.resolveEntity("~YT}X[F}K #Fk7$j", "z(},4=");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      String string0 = "last() requires no arguments.";
      StringReader stringReader0 = new StringReader("last() requires no arguments.");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "HQCf)c?cdM.";
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getValue("HQCf)c?cdM.");
      StringReader stringReader0 = new StringReader("HQCf)c?cdM.");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader0, "HQCf)c?cdM.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/HQCf)c?cdM. : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttributeList");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile mockFile0 = new MockFile("~YT}X[F}K #Fk7$j");
      SAXReader sAXReader0 = new SAXReader((String) null);
      mockFile0.setWritable(true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      mockFile0.setWritable(false);
      mockFile0.setReadOnly();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile1 = new MockFile((String) null, "org.dom4j.bean.BeanAttributeList");
      MockFile.createTempFile("//tmp/M{X;0/tmp/4C!A\"AnvBKl/!]UtjsY0", "//tmp/4C!A\"AnvBKl/!]UtjsY0");
      mockFile1.setReadOnly();
      mockFile1.delete();
      mockFile1.setReadOnly();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      File file0 = MockFile.createTempFile("org.dom4j.bean.BeanAttributeList", "http://xml.org/sax/features/validation");
      file0.renameTo(mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.elementDecl("Error on line ", "org.dom4j.tree.AbstractText");
      defaultHandler2_0.notationDecl("//org.jaxen.function.CountFunction/@k>Im-MMmfh#&mhK0@k>Im-MMmfh#&mhK", "//org.jaxen.function.CountFunction/@k>Im-MMmfh#&mhK0@k>Im-MMmfh#&mhK", "org.jaxen.UnresolvableException");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.elementDecl("child", "qY<L{.r0?Xzj(");
      defaultHandler2_1.notationDecl("{%w5/Ti|SW1/&Q", "L?6yiBESyt%", "\"G6sxKDa2<_kn5zB");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_4.getExternalSubset("LnZ", "4|@vdX%t_]p");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read("4|@vdX%t_]p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 4|@vdX%t_]p Nested exception: no protocol: 4|@vdX%t_]p
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xn02.");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " value \"");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEntityResolver(sAXReader_SAXEntityResolver0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)14;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object object0 = new Object();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.unparsedEntityDecl(";S?VCK", (String) null, "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j", "L?6yiBESyt%");
      defaultHandler2_0.attributeDecl(";S?VCK", "//tmp/org.dom4j.bean.BeanAttributeList0~YT}X[F}K #Fk7$j", "b.sx&|4k|pk;?l", ";S?VCK", (String) null);
      defaultHandler2_0.getExternalSubset(";S?VCK", (String) null);
      defaultHandler2_0.notationDecl("9po5G", "1", "McMW'&j6`L6EgeJ\"");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.notationDecl((String) null, "JLoE5X\u0002nQ{M", "9po5G");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_4.startEntity("McMW'&j6`L6EgeJ\"");
      DefaultHandler2 defaultHandler2_5 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_6 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_7 = new DefaultHandler2();
      defaultHandler2_7.getExternalSubset("L?6yiBESyt%", (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createElement("psPJJc%uF<BDtf-Mg", ".I+@ZuzqfK");
      defaultDocumentFactory0.createElement("psPJJc%uF<BDtf-Mg", "//tmp/org.dom4j.bean.BeanAttributeList1/tmp/4C!A\"AnvBKl/!]UtjsY0");
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.getDefaultNamespace();
      defaultDocumentFactory0.createQName("x6*)Qw1", (Namespace) null);
      defaultDocumentFactory0.createDocType("psPJJc%uF<BDtf-Mg", ".I+@ZuzqfK", " : ");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setProperty(" : ", defaultDocumentFactory0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ' : ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }
}
