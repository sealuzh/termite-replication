/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 01:05:39 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.294461551279555
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean.valueOf("IQ}(DZu)Yn");
      Integer integer0 = new Integer((-28746867));
      Integer integer1 = new Integer((-2962));
      Integer.sum(432, 1);
      Integer integer2 = new Integer(2638);
      Integer integer3 = new Integer(114);
      Integer integer4 = Integer.getInteger("IQ}(DZu)Yn", 125);
      Integer.getInteger("WJ&A7yG4L,r'{wN", 433);
      Integer.getInteger("*;tzW{,", integer1);
      Integer.getInteger("{}", integer4);
      Integer integer5 = new Integer((-18603944));
      Integer integer6 = new Integer(0);
      Double double0 = new Double((-803.86347087346));
      Integer integer7 = new Integer((-268));
      JSONObject.getNames((Object) integer7);
      Float float0 = new Float((-502.4489F));
      Double.valueOf((-683.3));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.accumulate("8J7*,!`PvSr#", short0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", true);
      jSONObject1.optBoolean("JSON does not allow non-finite numbers.");
      Integer integer0 = new Integer((-1417));
      Integer integer1 = Integer.getInteger("l2re3<e3@q(Wz!3I#4=", integer0);
      Integer.getInteger("l2re3<e3@q(Wz!3I#4=", integer1);
      Integer.getInteger("", integer0);
      Integer integer2 = new Integer((-1417));
      Integer integer3 = new Integer((-1417));
      Integer integer4 = new Integer(589);
      Integer.compare((-1417), (-997));
      Integer integer5 = new Integer(36);
      Boolean.compare(true, true);
      try { 
        Long.parseUnsignedLong("", 684);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.038828562053211
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.spliterator();
      JSONObject jSONObject1 = jSONObject0.put("istoHexString", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject2.optLong("IQ}(DZu)Yn");
      Short short0 = new Short((short) (-1747));
      JSONObject jSONObject3 = jSONObject2.putOpt("istoHexString", linkedList0);
      jSONObject0.optDouble("istoHexString");
      int int0 = (-2082);
      String string0 = null;
      jSONObject3.optBoolean((String) null);
      Boolean.compare(false, false);
      jSONObject1.toString((-2082), (int) (short) (-1747));
      jSONObject2.optBoolean("isoptJSONArray");
      jSONObject3.optInt(",r\u00029/-!");
      jSONObject3.toString(0);
      Boolean.compare(false, true);
      long long0 = new Long((-2082));
      jSONObject2.opt("istoHexString");
      try { 
        jSONObject2.getDouble("istoHexString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoHexString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3965282388804896
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float.isFinite(1663.0F);
      JSONObject.valueToString("Sbs9riMg bounds rror");
      JSONObject jSONObject0 = new JSONObject((Object) "Sbs9riMg bounds rror");
      jSONObject0.put("\"java.lang.String@0000000001\"", 931L);
      jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.697837806647755
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer((-28746850));
      Float.sum((-28746850), 20);
      Integer integer3 = new Integer((-28746850));
      Integer.max(9, 9);
      Integer.getInteger("wheel.json.JSONTokener", integer2);
      linkedList0.add(integer3);
      Integer.sum(20, (-2962));
      Integer integer4 = new Integer(480);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer5 = new Integer(20);
      linkedList1.add(integer5);
      linkedList1.add(integer3);
      Integer integer6 = new Integer((-28746850));
      Integer integer7 = new Integer(128);
      Integer integer8 = new Integer((-2942));
      linkedList1.offer(integer8);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("N&uMgg%zFPTwDPgZ:X", float0);
      jSONObject1.put("N&uMgg%zFPTwDPgZ:X", 0.0);
      jSONObject0.isNull("N&uMgg%zFPTwDPgZ:X");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toString(91, 9);
      long long0 = jSONObject0.getLong("N&uMgg%zFPTwDPgZ:X");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(44, 44);
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer((short)34);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.sum(193, (-2962));
      Integer.max((-1659), 1131);
      boolean boolean0 = linkedList1.add(integer2);
      Integer integer3 = new Integer((-3259));
      linkedList1.offer(integer2);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject1 = new JSONObject("{}");
      Integer integer4 = new Integer(585);
      boolean boolean1 = linkedList1.add(integer2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1032121672658874
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject0.optString("not", "g+jr");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      Boolean.compare(true, false);
      jSONObject1.toString((-1325), 4040);
      jSONObject0.remove("o&bQ4.aY");
      jSONObject1.optBoolean("TC{");
      jSONObject1.optInt("getputOpt");
      // Undeclared exception!
      jSONObject2.toString(8192);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4752173811529237
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter0.close();
      stringWriter0.flush();
      UnaryOperator.identity();
      Function<Float, Float> function0 = Function.identity();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aK";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.accumulate("getappend", jSONArray0);
      jSONObject1.optJSONObject("aK");
      JSONObject jSONObject2 = jSONObject1.putOpt("5?", function0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.pollLast();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      Short short0 = new Short((short)578);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      Float float0 = new Float((float) (short)578);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6432937573580655
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(Double.NaN);
      Long long0 = new Long(32L);
      long long1 = new Long((-1L));
      Long.compare(1L, (-1L));
      long long2 = new Integer(1);
      Short short0 = new Short((short)623);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2599854553098107
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.entrySet();
      Float float0 = new Float((-2226.1F));
      Byte byte0 = new Byte((byte)123);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Byte byte1 = hashMap0.merge(float0, byte0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getoptLong", (Map) hashMap0);
      Float float1 = new Float((-2226.1F));
      hashMap0.put(float1, byte1);
      Boolean boolean0 = Boolean.valueOf("3=.G");
      JSONObject jSONObject2 = jSONObject1.put("getget", (Object) boolean0);
      Boolean.compare(true, false);
      Integer integer0 = new Integer(1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "3=.G");
      Writer writer0 = jSONObject2.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3806633608886565
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("ym>Z", (Map) hashMap0);
      Long long0 = new Long(807L);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(long0, boolean0);
      JSONObject jSONObject3 = jSONObject0.put("_Q^ p]", true);
      String string0 = JSONObject.valueToString(jSONObject3, 2073, 2073);
      // Undeclared exception!
      jSONObject2.getJSONObject(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter0.flush();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("@VQHgJX", stringWriter1);
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4321933815924597
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optLong("'");
      jSONArray0.put((Collection) linkedList1);
      jSONObject0.put("{7g3alsf~6<.9X3v\" m", false);
      linkedList0.add("'");
      jSONObject0.optBoolean("{7g3alsf~6<.9X3v\" m", false);
      String string0 = "] not found.";
      JSONTokener jSONTokener0 = new JSONTokener("] not found.");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.192676476237851
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(1.0F);
      Float.min(0.0F, 873.962F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", float0);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.append("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\",\"java.lang.String@0000000008\":java.lang.Float@0000000009}", float0);
      Float.isFinite((-1.0F));
      jSONObject1.getInt(",\n");
      jSONObject0.opt(" at character ");
      Float.sum(1.0F, 0.0F);
      jSONObject0.has("y`Xf<1)_|?z;x+rV");
      Long long0 = new Long(1);
      JSONObject.quote("y`Xf<1)_|?z;x+rV");
      JSONObject jSONObject3 = jSONObject1.accumulate(" at character ", long0);
      jSONObject3.optLong("JSONArray initial value should be a string or collection or array.", (long) 1);
      JSONObject jSONObject4 = jSONObject0.put("Uqc;-", (double) 1.0F);
      jSONObject2.names();
      JSONObject jSONObject5 = jSONObject0.putOpt("c2", ",\n");
      jSONObject5.toString(1);
      jSONObject2.has("c2");
      Float.isFinite(1.0F);
      jSONObject4.keys();
      jSONObject1.optLong("CJSqq'DOk{n");
      jSONObject0.append("tIMg(", "Uqc;-");
      jSONObject4.toString(1);
      assertEquals(9, jSONObject4.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4057327767835663
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "\\u";
      JSONObject jSONObject3 = jSONObject2.accumulate(string0, jSONObject0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put("get", (Collection) linkedList0);
      Integer integer0 = new Integer(55);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer1 = new Integer(55);
      Integer integer2 = new Integer(55);
      int int0 = 16;
      Integer integer3 = new Integer(16);
      linkedList2.add(integer0);
      Integer integer4 = new Integer((-2962));
      linkedList0.offer(integer0);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject4 = new JSONObject();
      JSONObject jSONObject5 = jSONObject0.append("get", "N&uMgg%zFPTwDPgZ:X");
      jSONObject3.isNull("Unterminated string");
      try { 
        jSONObject5.getLong("getlowestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlowestOneBit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8277262557294063
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.optLong("in");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      short short0 = (short) (-1747);
      Short short1 = new Short((short)2734);
      Integer integer0 = new Integer((short)2734);
      JSONArray jSONArray1 = jSONArray0.put((Object) integer0);
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", jSONArray1);
      jSONObject0.optDouble("istoHexString");
      linkedList0.toArray();
      Boolean.compare(false, false);
      // Undeclared exception!
      jSONObject1.toString((int) (short)2734, 193);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8099928208558462
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer((-2279));
      linkedList0.add(integer0);
      Integer.sum(20, (-1601));
      Integer integer3 = new Integer(8);
      linkedList0.add(integer3);
      Integer integer4 = new Integer((-2962));
      Integer integer5 = new Integer(65);
      linkedList0.offer(integer5);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray("H5NB");
      JSONObject jSONObject1 = jSONObject0.put("H5NB", 1L);
      jSONObject1.optDouble("H5NB", 0.0);
      jSONObject1.put("ishashCode", (Map) null);
      JSONObject jSONObject2 = jSONObject1.put("TH=", (Collection) linkedList0);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9715592645603914
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "wheel.json.JSONObject$1";
      Boolean.valueOf("wheel.json.JSONObject$1");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put(":/t,8J+jT^b_e!d", 32);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.optString((String) null, "wheel.json.JSONObject$1");
      Object object0 = new Object();
      Integer integer0 = new Integer(123);
      JSONObject jSONObject2 = jSONObject1.accumulate("wheel.json.JSONObject$1", integer0);
      jSONObject2.optBoolean("wheel.json.JSONObject$1", true);
      JSONArray jSONArray1 = jSONObject1.names();
      jSONObject0.optInt(":/t,8J+jT^b_e!d", 123);
      jSONArray1.toJSONObject(jSONArray0);
      String string1 = "wheel.json.JSONObject$1";
      jSONObject2.optLong(" at character ");
      jSONObject1.optDouble("wheel.json.JSONObject$1");
      try { 
        jSONObject2.getInt("isputIfAbsent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isputIfAbsent\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optLong((String) null, 373L);
      jSONObject0.optLong((String) null);
      String string1 = "pus";
      try { 
        jSONObject0.put((String) null, (-262L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.365937875312406
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-990));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-990));
      linkedList1.spliterator();
      Integer integer2 = new Integer(2073);
      Integer.divideUnsigned((-542), (-38758282));
      Integer.sum((-542), (-990));
      linkedList1.add(integer2);
      String string0 = JSONObject.valueToString(linkedList1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.022937966134841
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("IQ}(DZu)Yn");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.spliterator();
      JSONObject jSONObject1 = jSONObject0.put("istoHexString", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject2.optLong("IQ}(DZu)Yn");
      Short short0 = new Short((short) (-1747));
      JSONObject jSONObject3 = jSONObject2.putOpt("istoHexString", linkedList0);
      jSONObject0.optDouble("istoHexString");
      int int0 = (-2090);
      String string0 = null;
      jSONObject3.optBoolean((String) null);
      Boolean.compare(false, false);
      jSONObject1.toString((-2090), (int) (short) (-1747));
      jSONObject3.remove("istoHexString");
      jSONObject2.optBoolean("isoptJSONArray");
      jSONObject3.optInt(",r\u00029/-!");
      jSONObject3.toString(0);
      Boolean.compare(false, true);
      try { 
        jSONObject3.getLong("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean.valueOf("IQ}(DZu)Yn");
      int int0 = (-28746867);
      Integer integer0 = new Integer((-28746867));
      Integer integer1 = new Integer((-2962));
      Integer.sum((-18603935), (-126));
      Integer integer2 = new Integer(2638);
      Integer integer3 = new Integer(2638);
      Integer integer4 = Integer.getInteger("*;tzW{,", 0);
      Integer.getInteger("IQ}(DZu)Yn", integer4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.retainAll(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(42);
      stringWriter1.flush();
      String string0 = "rZV.#i)";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.accumulate("@VQHgJX", (Object) null);
      String string1 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.775512371193965
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("[]");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject2.optLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      Double double0 = new Double(3457.902);
      jSONObject1.put("wheel.json.JSONArray", (Map) hashMap0);
      jSONObject2.put("pa", true);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(hashMap0, 8448, 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4503032277039147
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(332L);
      Boolean boolean0 = new Boolean("1zC4");
      Boolean boolean1 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 43, 43);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.append("=DA:l,?l{`'Z6~'v", hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ym>Z");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3913);
      linkedList0.add(integer0);
      Integer.getInteger("get");
      Integer integer1 = new Integer((-2073));
      Boolean boolean0 = new Boolean("get");
      JSONObject jSONObject1 = jSONObject0.put("get", (Collection) linkedList0);
      Integer integer2 = new Integer(35);
      Integer integer3 = new Integer((-2516));
      Integer integer4 = new Integer(604);
      Integer.compare(65, 604);
      Integer integer5 = new Integer(604);
      Boolean.compare(true, true);
      Double double0 = new Double((-1));
      Double.min(0, 747.175);
      Double.min(1458.4, 747.175);
      jSONObject1.putOpt("get", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4739205977479104
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(44, 44);
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer((short)34);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.sum(193, (-2962));
      Integer.max((-1659), 1131);
      boolean boolean0 = linkedList1.add(integer2);
      Integer integer3 = new Integer((-3259));
      linkedList1.offer(integer2);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject1 = new JSONObject("{\n                                                                                        \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                            }");
      Integer integer4 = new Integer(585);
      boolean boolean1 = linkedList1.add(integer2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer((-28746850));
      Float.sum((-28746850), 20);
      Integer integer3 = new Integer((-28746850));
      Integer.max(9, 9);
      String string0 = "wheel.json.JSONTokener";
      Integer.getInteger("wheel.json.JSONTokener", integer2);
      linkedList0.add(integer3);
      Integer.sum(20, (-2962));
      Integer integer4 = new Integer(480);
      Integer.getInteger("wheel.json.JSONTokener", (-28746850));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer5 = new Integer(20);
      linkedList1.add((Integer) null);
      Integer.max((-28746850), 0);
      linkedList1.add(integer5);
      linkedList1.add(integer3);
      Integer integer6 = new Integer((-28746850));
      linkedList1.add(integer2);
      Integer integer7 = new Integer((-2942));
      linkedList1.offer(integer7);
      Boolean.compare(true, true);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.334050766088663
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.compare(false, false);
      JSONObject jSONObject1 = jSONObject0.put("+&?O9>P_]HAv", true);
      jSONObject1.put("ke", true);
      JSONObject.valueToString(jSONObject1, (-1412), (-1128));
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5118337006884675
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float0 = new Float((-1285.1152F));
      jSONObject0.accumulate("JSONArray initial value should be a string or collection or array.", float0);
      JSONObject jSONObject1 = jSONObject0.put("rZV.#i)", (Collection) linkedList0);
      Integer integer0 = new Integer((-348));
      Integer integer1 = new Integer((-348));
      linkedList0.add(integer1);
      jSONObject0.isNull("JSONArray initial value should be a string or collection or array.");
      Integer integer2 = new Integer(30);
      linkedList0.offer(integer2);
      Object object0 = new Object();
      jSONObject1.getInt("JSONArray initial value should be a string or collection or array.");
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8057220450963607
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      long long0 = jSONObject0.optLong("'");
      assertEquals(0L, long0);
      
      jSONArray0.put((Collection) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      jSONArray0.put((Collection) linkedList2);
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.toArray();
      jSONObject1.toString(220, 220);
      jSONObject0.remove("K)YdUqM;F>^$RJ");
      jSONObject0.optInt(",r\u00029/-!");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5410027989458976
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iscompareTo", false);
      JSONObject jSONObject1 = jSONObject0.put("ZjK^", false);
      jSONObject1.optString("!t:!'4\")", "!t:!'4\")");
      Object object0 = new Object();
      Long long0 = new Long((-1293L));
      JSONObject jSONObject2 = jSONObject0.accumulate("!t:!'4\")", long0);
      jSONObject1.names();
      long long1 = jSONObject2.getLong("!t:!'4\")");
      assertEquals((-1293L), long1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.269608995431926
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      int int0 = (-1181);
      linkedList0.pollLast();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Long long0 = new Long((-2948L));
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Wc", false);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.getString("Wc");
      String string0 = null;
      linkedList1.add((String) null);
      linkedList0.add("Null key.");
      linkedList1.add((String) null);
      jSONObject1.optJSONObject("8etad}");
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2472194609266114
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(32, 32);
      Short short0 = new Short((short)34);
      JSONObject.quote("{\n                                                                \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                }");
      Short short1 = new Short((short)34);
      Integer integer0 = new Integer((int) short1);
      Integer integer1 = new Integer((-4596));
      Integer integer2 = new Integer(66);
      Integer integer3 = new Integer(0);
      Integer integer4 = Integer.getInteger("[]", integer1);
      Integer integer5 = new Integer(32);
      Integer.getInteger(".", integer5);
      Integer integer6 = new Integer(32);
      Integer.getInteger(".", integer6);
      Integer integer7 = new Integer((-4221));
      Integer integer8 = new Integer((-241));
      Integer integer9 = new Integer((-241));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.valueOf((int) (short)34);
      Integer.getInteger("[]", integer7);
      linkedList1.add(integer4);
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3168665117236973
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>(65);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap0.put((Short) null, jSONArray0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap1.values();
      jSONObject1.put("jIGNv^NDEnO~#Ac)j", (Map) hashMap0);
      Double double0 = new Double(776.6144747791719);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap2.replace(double0, double0);
      Double double1 = new Double(776.6144747791719);
      Double double2 = new Double(1670.5971098098);
      Double.min(1670.5971098098, 2497.5548);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double3 = new Double(Double.NaN);
      Double double4 = new Double(1.0);
      hashMap3.put(double3, double4);
      Float.isFinite((-1.544F));
      String string0 = JSONObject.valueToString(hashMap3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.862651478716261
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8207);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      jSONArray0.optJSONObject(73);
      jSONObject0.put(" of ", (Object) null);
      jSONObject0.optLong("g+jr");
      Integer integer0 = new Integer(8207);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.sum(8207, 8207);
      Integer.max((-1659), (-1659));
      String string0 = "?Rn";
      try { 
        Integer.valueOf("?Rn");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?Rn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6169183001200276
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "[]";
      jSONObject1.optLong("[]");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      Double double0 = new Double(3457.902);
      Double.max((-3677.406718133), 0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      JSONObject jSONObject4 = jSONObject3.put("[]", true);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject5 = new JSONObject(jSONObject0);
      JSONObject jSONObject6 = jSONObject4.putOpt("clF~$rwn? cf_UV#", jSONObject5);
      Double double1 = new Double(2030.685967466);
      jSONObject6.accumulate("[]", double1);
      Long long0 = new Long((-17L));
      byte byte0 = (byte) (-62);
      Float float1 = new Float((float) (byte) (-62));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("e.|e08$AW7%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of e.|e08$AW7%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float((double) 8192);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-990));
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer(39);
      Integer integer3 = new Integer(8192);
      linkedList0.add(integer3);
      Integer.sum(8, 20);
      Integer integer4 = new Integer(93);
      linkedList0.add(integer3);
      Integer integer5 = new Integer(44);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7911998103932196
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean.compare(false, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+&?O9>P_]HAv";
      stringArray0[1] = "+&?O9>P_]HAv";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "+&?O9>P_]HAv";
      stringArray0[4] = "+&?O9>P_]HAv";
      stringArray0[5] = "+&?O9>P_]HAv";
      JSONObject jSONObject0 = new JSONObject("+&?O9>P_]HAv", stringArray0);
      jSONObject0.names();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2548980091271837
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("ym>Z", (Map) hashMap0);
      Double double0 = new Double(1.0);
      jSONObject1.append("=DA:l,?l{`'Z6~'v", double0);
      jSONObject2.optJSONArray("=DA:l,?l{`'Z6~'v");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2920664911374824
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      long long0 = new Integer(8192);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      jSONObject0.put("RcRcT^jsEUbT", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("g+jr", false);
      jSONObject1.getJSONObject("RcRcT^jsEUbT");
      Long.getLong("g+jr");
      JSONObject.valueToString((Object) null, 2073, 8192);
      try { 
        jSONObject1.getLong("'+_m0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'+_m0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0287375017310743
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      JSONObject.valueToString(linkedList0, 2178, 8192);
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.382590679131288
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("BG%8@");
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      JSONObject.valueToString(linkedList0, 2178, 8192);
      JSONTokener jSONTokener0 = new JSONTokener("[\"java.lang.String@0000000003\"]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of [\"java.lang.String@0000000003\"]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8148657896913192
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.flush();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "@VQHgJX";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("@VQHgJX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of @VQHgJX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.809460288608984
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.119426605603026
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject$1", 1491);
      jSONObject1.optLong("wheel.json.JSONObject$1");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g+jr";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "wheel.json.JSONObject$1";
      JSONObject.getNames((Object) jSONObject2);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "[]";
      JSONObject jSONObject4 = jSONObject1.put("val", (-28));
      jSONObject2.names();
      jSONObject3.optString("wheel.json.JSONObject$1", "val");
      Object object1 = new Object();
      JSONObject jSONObject5 = jSONObject1.accumulate("wheel.json.JSONObject$1", jSONObject2);
      jSONObject1.optBoolean("val", false);
      jSONObject4.names();
      jSONObject5.isNull("g+jr");
      JSONObject.testValidity(jSONObject3);
      try { 
        jSONObject0.getLong("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2865071652616695
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] not found.", "");
      Integer integer0 = new Integer((-1417));
      Integer integer1 = Integer.getInteger("l2re3<e3@q(Wz!3I#4=", integer0);
      Integer.getInteger("l2re3<e3@q(Wz!3I#4=", integer1);
      Integer.getInteger("", integer0);
      Integer integer2 = new Integer((-1417));
      Integer integer3 = new Integer((-1417));
      Integer integer4 = new Integer(589);
      Integer.compare((-1417), (-997));
      Integer integer5 = new Integer(36);
      Boolean.compare(true, true);
      Double double0 = new Double(747.175);
      Double.min(36, 589);
      Double.min((-1417), 0.0);
      jSONObject0.putOpt("l2re3<e3@q(Wz!3I#4=", double0);
      long long0 = jSONObject0.getLong("l2re3<e3@q(Wz!3I#4=");
      assertEquals(747L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.583437541968916
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.accumulate("rZV.#i)", boolean0);
      jSONObject0.put("istoHexString", (Collection) linkedList0);
      jSONObject0.isNull("istoHexString");
      assertEquals(2, jSONObject0.length());
      
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1, (-1178), 12);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2431825931589766
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2073));
      linkedList0.add(integer0);
      jSONObject0.put("get", (Collection) linkedList0);
      Integer integer1 = new Integer(65);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer(65);
      Integer integer3 = new Integer(8192);
      linkedList1.add(integer3);
      Integer integer4 = new Integer(65);
      Integer integer5 = new Integer(48);
      Integer integer6 = new Integer(55);
      Integer.getInteger("get");
      linkedList1.add(integer6);
      Integer.sum(55, 8192);
      linkedList1.add(integer5);
      Integer integer7 = new Integer((-2962));
      StringWriter stringWriter0 = new StringWriter(8247);
      Integer integer8 = new Integer((-1888));
      Float.isFinite(8247);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6588757683497626
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 8207;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8207);
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      String string1 = "not";
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[4] = "not";
      String string2 = ":/t,8J+jT^b\\_e!d";
      jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject0.optString("not", stringArray0[3]);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      boolean boolean0 = true;
      try { 
        jSONObject1.getBoolean("g+jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+jr\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("68;bUOj0_daG1&:");
      JSONObject.quote("=~s/ bpvY");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONArray jSONArray1 = new JSONArray();
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, Byte> hashMap1 = new HashMap<Object, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("cle", (Map) hashMap1);
      String string0 = "EH!iOo+";
      Float float1 = new Float(3094.9482F);
      HashMap<Float, Byte> hashMap2 = new HashMap<Float, Byte>();
      hashMap2.put(float0, (Byte) null);
      Boolean.compare(false, true);
      double double0 = new Float(0.0);
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "getwrite";
      stringArray0[2] = "|PFHr>Gvc('DNp9";
      stringArray0[3] = "|PFHr>Gvc('DNp9";
      stringArray0[4] = "getwrite";
      stringArray0[5] = "";
      stringArray0[6] = "Qf:'~'+JNe^W8G7-u4<H";
      Function.identity();
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((-1.5587432F));
      Float.max((-1.5587432F), (-1.5587432F));
      Float.min((-180.3F), (-1577.58F));
      Float.isFinite((-1577.58F));
      Float.sum((-716.1F), 2310.51F);
      Float.isFinite((-1.5587432F));
      JSONObject.numberToString(float0);
      JSONTokener jSONTokener0 = new JSONTokener("|PFHr>Gvc('DNp9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |PFHr>Gvc('DNp9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9509696620959436
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("IQ}(DZu)Yn");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.spliterator();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optLong("IQ}(DZu)Yn");
      Boolean.logicalOr(true, false);
      Short short0 = new Short((short) (-1747));
      JSONObject jSONObject2 = jSONObject1.putOpt("istoHexString", linkedList0);
      jSONObject0.optDouble("istoHexString");
      String string0 = null;
      jSONObject2.optBoolean((String) null);
      Boolean.compare(false, false);
      jSONObject0.toString((-2090), (int) (short) (-1747));
      jSONObject1.optBoolean("isoptJSONArray");
      jSONObject2.optInt(",r\u00029/-!");
      jSONObject2.toString(0);
      Boolean.compare(false, true);
      try { 
        jSONObject2.getLong("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.847314888766523
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      long long0 = (-2999L);
      linkedList0.pollLast();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Integer integer0 = new Integer((-34776646));
      try { 
        jSONObject0.accumulate((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9410068610812892
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ym5Z", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Float.isFinite(1663.0F);
      jSONObject0.opt((String) null);
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      Long long0 = new Long(0L);
      Double double0 = new Double(0.0);
      hashMap1.put(long0, double0);
      try { 
        jSONObject1.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long long0 = new Long((-326L));
      Double double0 = new Double((-326L));
      hashMap0.put(long0, double0);
      Long long1 = new Long((-326L));
      hashMap0.clone();
      Double double1 = new Double(0.0);
      hashMap0.put(long1, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "!_/+X+e+j_-`ltgCc";
      jSONObject0.optDouble("!_/+X+e+j_-`ltgCc");
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.332195828976497
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("Null pointer", (Object) null);
      JSONObject jSONObject1 = jSONObject0.append("getget", "getget");
      jSONObject1.optLong("k u&?k%");
      try { 
        jSONObject0.getJSONObject("getget");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getget\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList2);
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getformat", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("getformat");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7279302101011713
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.getNames((Object) "getlogicalAnd");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)93);
      Byte byte1 = new Byte((byte)93);
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(byte0, byte1, biFunction0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("getlogicalAnd", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2311));
      jSONObject0.getJSONArray("getlogicalAnd");
      Integer integer1 = new Integer((-527));
      Integer integer2 = new Integer((-3555));
      linkedList1.add(integer2);
      Integer.sum(3, (-3555));
      Integer integer3 = new Integer((-3552));
      linkedList1.add(integer3);
      Integer integer4 = new Integer((-2311));
      linkedList1.offer(integer1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray("getlogicalAnd");
      jSONObject1.put("&zUzFC=j}u=_PClI", (long) (-3552));
      JSONTokener jSONTokener0 = new JSONTokener("getlogicalAnd");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getlogicalAnd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.333809616493887
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("n^7/4", false);
      JSONObject.valueToString("n^7/4");
      Float float0 = new Float((-1019.0F));
      jSONObject1.accumulate("n^7/4", float0);
      jSONObject0.getJSONArray("n^7/4");
      try { 
        jSONObject0.getLong("B1eVYZX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B1eVYZX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.855677091034159
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("ym>Z", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.put("ym>Z", (Map) hashMap0);
      Float.isFinite(1663.0F);
      Boolean.compare(true, true);
      try { 
        jSONObject1.getJSONArray("ym>Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ym>Z\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getoptLong", (Map) hashMap0);
      try { 
        jSONObject1.append("getoptLong", "getoptLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getoptLong] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5556350043184555
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Object) linkedList0);
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONArray0.put((Collection) linkedList0);
      String string0 = ":/t,8J+jT^b\\_e!d";
      String string1 = "]E@'1tD `#r!o0+wxU_";
      JSONObject jSONObject1 = jSONObject0.put("]E@'1tD `#r!o0+wxU_", 123);
      JSONArray jSONArray1 = jSONObject1.names();
      jSONObject0.optString(":/t,8J+jT^b_e!d", "]E@'1tD `#r!o0+wxU_");
      jSONArray1.put((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a JSONObject.", "'");
      jSONObject1.optBoolean(":/t,8J+jT^b_e!d", true);
      JSONArray jSONArray2 = jSONObject1.names();
      jSONObject2.optInt("]E@'1tD `#r!o0+wxU_", 123);
      jSONArray1.toJSONObject(jSONArray2);
      JSONTokener jSONTokener0 = new JSONTokener("]E@'1tD `#r!o0+wxU_");
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ]E@'1tD `#r!o0+wxU_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.4411705325812574
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ym>Z", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Float.isFinite(1663.0F);
      JSONObject.valueToString(hashMap0);
      jSONObject1.toJSONArray((JSONArray) null);
      Byte byte0 = new Byte((byte)80);
      JSONObject.valueToString(byte0);
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3289394993915424
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optLong("istoHexString", (-1L));
      jSONObject0.optInt("", 22);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optDouble("2p0baDtg3 ");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.810158027803451
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr", 373L);
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = jSONObject0.put("pus", 0L);
      stringArray0[1] = "nozt";
      stringArray0[2] = "g+jr";
      stringArray0[4] = "nozt";
      JSONObject jSONObject2 = jSONObject0.accumulate("g+jr", "nozt");
      jSONObject1.put("isadd", 60);
      jSONObject2.get("g+jr");
      Integer integer0 = new Integer(60);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('x');
      Writer writer0 = jSONObject2.write(stringWriter1);
      JSONObject jSONObject3 = new JSONObject(writer0, stringArray0);
      jSONObject3.accumulate("w e", "nozt");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "isadd", 3514, 3514);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.418939306669205
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3913);
      linkedList0.add(integer0);
      Integer.getInteger("gt");
      Integer integer1 = new Integer((-2073));
      Boolean boolean0 = new Boolean("gt");
      JSONObject jSONObject1 = jSONObject0.put("gt", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer(65);
      Integer integer3 = new Integer(8192);
      Boolean boolean1 = new Boolean((boolean) boolean0);
      Integer.getInteger("gt", integer0);
      Integer integer4 = new Integer(48);
      Integer integer5 = new Integer(55);
      Integer integer6 = new Integer(8192);
      linkedList1.add(integer5);
      Integer.sum(55, 8192);
      linkedList1.add(integer4);
      Integer integer7 = new Integer(3913);
      Integer integer8 = new Integer((-2962));
      StringWriter stringWriter0 = new StringWriter();
      Integer integer9 = new Integer((-1888));
      Integer integer10 = new Integer(65);
      jSONObject0.write(stringWriter0);
      jSONObject1.accumulate("gt", integer5);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "gt", (-431), (-1531));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8589597511121037
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.names();
      jSONObject0.optString("", "");
      Object object0 = new Object();
      Double double0 = new Double((-3266.772));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("", jSONObject1);
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8080678303288094
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(62);
      stringWriter0.flush();
      stringWriter0.close();
      stringWriter0.close();
      stringWriter0.close();
      stringWriter0.flush();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "istoString";
      stringArray0[1] = "|PFHr>vc=('DNp9";
      stringArray0[2] = "|PFHr>vc=('DNp9";
      stringArray0[3] = "aK";
      stringArray0[5] = "istoString";
      stringArray0[5] = "@";
      stringArray0[6] = "Qf:'~'+JNe^W8G7-u4<H";
      UnaryOperator.identity();
      Function.identity();
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.254217233612245
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("g+jr");
      assertEquals(0L, long0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      Integer.getInteger("ishashCode", 1327);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.append("8GwJ<;", boolean0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1327);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.append("ishashCode", "not");
      double double0 = jSONObject2.optDouble("Null key.", (double) 1327);
      assertEquals(1327.0, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1515952780212544
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float.max(1663.0F, 1663.0F);
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=9";
      stringArray0[1] = "is";
      stringArray0[2] = "get";
      stringArray0[3] = "KJ;a5.Uu.";
      stringArray0[4] = "] is not a JSONArray.";
      stringArray0[5] = "(g)`*#u0l CV2e0'N";
      stringArray0[6] = "<1USFH*";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("is", "] is not a JSONArray.");
      jSONObject1.accumulate("is", "is");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9175503412075572
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or '}'");
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[7];
      linkedList0.add("2oS");
      stringArray0[1] = "getwrite";
      stringArray0[1] = "Qf:'~'+J^W8G7-u4<H";
      stringArray0[2] = "|PFHr>Gvc('DNp9";
      stringArray0[3] = "aK";
      stringArray0[4] = "getwrite";
      stringArray0[5] = "\b";
      stringArray0[6] = "Qf:'~'+J^W8G7-u4<H";
      Boolean.compare(false, true);
      Double double0 = new Double((-1));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.052469921749546
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      JSONObject jSONObject3 = jSONObject2.accumulate("] is not a JSONArray.", jSONObject0);
      Boolean.compare(false, false);
      jSONObject3.put("] is not a JSONArray.", false);
      try { 
        jSONObject0.put((String) null, 2661);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject.doubleToString(3184.61);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("sub");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean("");
      linkedList0.add("gylE)j&I3^0");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sub";
      linkedList3.add("toS");
      stringArray0[1] = "false";
      stringArray0[2] = "3184.61";
      stringArray0[3] = "";
      stringArray0[4] = "gylE)j&I3^0";
      stringArray0[5] = "toS";
      stringArray0[6] = "toS";
      stringArray0[7] = "sub";
      stringArray0[8] = "toS";
      linkedList3.toArray(stringArray0);
      linkedList3.add("isiterator");
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.replaceAll(unaryOperator0);
      Double double0 = new Double(660.6806406905474);
      try { 
        Long.parseUnsignedLong("toS", 120);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 120 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6233517575189436
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt("y,=ogr^Ww'dsAi", 32);
      jSONObject0.optBoolean("y,=ogr^Ww'dsAi");
      jSONObject0.optDouble("F3yl\"> ~n");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("_=", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.5732552414504064
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 8192;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+h4");
      String string0 = ":/t,8J+jT^b\\_e!d";
      JSONObject jSONObject1 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject1.optString(":/t,8J+jT^b_e!d", "7XBR=>w%ZS,F[]Z1C");
      Object object0 = new Object();
      try { 
        jSONObject1.accumulate((String) null, ":/t,8J+jT^b_e!d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4667295266802833
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("[]");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject jSONObject5 = jSONObject0.put("TKK0!TVO:=D%sT;e", (Map) hashMap1);
      JSONObject jSONObject6 = new JSONObject((Map) hashMap0);
      Float.isFinite((-1.0F));
      jSONObject6.optString("[]");
      jSONObject5.opt("[]");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.048418868738241
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer((-28746850));
      Float.sum((-28746850), 20);
      Integer integer3 = new Integer((-28746850));
      Integer.max(9, 9);
      Integer.getInteger("wheel.json.JSONTokener", integer2);
      linkedList0.add(integer3);
      Integer.sum(20, (-2962));
      Integer integer4 = new Integer(480);
      Integer integer5 = Integer.getInteger("wheel.json.JSONTokener", (-28746850));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer6 = new Integer(20);
      Integer.max((-28746850), 0);
      linkedList1.add(integer6);
      linkedList1.add(integer3);
      Integer integer7 = new Integer((-28746850));
      linkedList1.add(integer2);
      Integer integer8 = new Integer((-2942));
      linkedList1.offer(integer8);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("N&uMgg%zFPTwDPgZ:X", float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((double) (-2942));
      jSONObject0.toJSONArray(jSONArray0);
      linkedList0.add(integer5);
      try { 
        jSONObject0.getJSONArray("~IfkWm~>C{IZ7OU=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~IfkWm~>C{IZ7OU=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Float float0 = new Float((-1680.1));
      byte byte0 = (byte)58;
      hashMap0.keySet();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.31845882294045
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Object) linkedList0);
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONArray0.put(false);
      String string0 = "'";
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("'", (Collection) linkedList0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{7g3alsf~6<.9X3v\" m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 17 of {7g3alsf~6<.9X3v\" m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.036312532364688
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#?'JW@";
      stringArray0[1] = "&i";
      stringArray0[2] = "\n";
      stringArray0[3] = "8ZZdm($:\"4h8)i#c3";
      stringArray0[4] = "getdescendingIterator";
      stringArray0[5] = ");]7!<CQAo?F";
      stringArray0[6] = "uo";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.max(1663.0F, 1663.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("islogicalOr", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = new Boolean("islogicalOr");
      String string0 = jSONObject0.optString("Re?hWj~80", "Unclosed comment");
      assertEquals("Unclosed comment", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.5464234722911843
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Boolean.valueOf("uIa-G^YU05rO");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = "Unterminated string";
      Long.getLong("Unterminated string");
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>();
      Long long0 = new Long(0);
      String string1 = "g9m";
      Boolean boolean0 = Boolean.valueOf("g9m");
      Float float0 = new Float((float) 0);
      Byte byte0 = new Byte((byte) (-101));
      hashMap0.put(float0, byte0);
      hashMap1.put(long0, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.add((Boolean) null);
      JSONObject jSONObject1 = jSONObject0.put("@8}", (Collection) linkedList1);
      jSONObject0.optBoolean("Unterminated string", true);
      jSONObject0.names();
      jSONObject1.optInt("uIa-G^YU05rO", 0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3856836476243553
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 8192;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "ot";
      jSONObject0.optInt("ot", (-1));
      JSONObject.quote("~`mP\"Gd");
      JSONObject jSONObject1 = jSONObject0.putOpt("~`mP\"Gd", "ot");
      jSONObject1.optDouble("hwLDbIdP", (-1996.9516736935407));
      jSONObject0.optDouble("g+jr");
      try { 
        jSONObject0.getInt("akUB;*-TpdO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"akUB;*-TpdO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1684637249913927
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.compare(false, false);
      JSONObject jSONObject1 = jSONObject0.put("+&?O9>P_]HAv", false);
      JSONObject jSONObject2 = jSONObject1.put("", 1510);
      jSONObject0.accumulate("+&?O9>P_]HAv", "+&?O9>P_]HAv");
      jSONObject2.get("+&?O9>P_]HAv");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9632800269699417
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("isjoin", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      int int0 = 12;
      Integer integer0 = new Integer(12);
      Integer.compare(12, 0);
      hashMap0.put(object0, integer0);
      try { 
        jSONObject1.getInt("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer(24);
      Integer.compareUnsigned(20, 160);
      Integer integer3 = new Integer(97);
      Integer integer4 = new Integer((-2293));
      Integer integer5 = new Integer((-2962));
      String string0 = Integer.toUnsignedString(20);
      linkedList0.add(integer5);
      Integer.sum((-2962), 24);
      Integer integer6 = new Integer(20);
      Integer.toUnsignedLong(299);
      Integer.toUnsignedString(299);
      Integer integer7 = new Integer(97);
      Integer integer8 = new Integer(102);
      Integer.max((-2293), 4);
      Integer integer9 = new Integer(40);
      linkedList0.offer(integer0);
      Float float1 = new Float((float) 4);
      String string1 = JSONObject.numberToString(integer2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1778153663960604
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Double>) function0);
      Function.identity();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.replaceAll(unaryOperator0);
      Long long0 = new Long(0L);
      try { 
        Long.parseUnsignedLong("getnames", (-628));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -628 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Double>) function0);
      Function.identity();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.replaceAll(unaryOperator0);
      Long long0 = new Long(45L);
      try { 
        Long.parseUnsignedLong("{}", (-2392));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2392 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(751);
      stringWriter0.flush();
      stringWriter0.close();
      stringWriter0.close();
      stringWriter0.flush();
      UnaryOperator.identity();
      Function.identity();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\b", 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-990));
      Integer integer1 = new Integer(20);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-990));
      Integer.toUnsignedLong((-990));
      Integer integer3 = new Integer(2073);
      Integer.toUnsignedLong(2073);
      Integer.toUnsignedString((-990));
      Integer integer4 = new Integer((-990));
      linkedList1.add(integer3);
      Integer.sum(12, 12);
      Integer integer5 = new Integer(12);
      Integer integer6 = new Integer(12);
      Boolean boolean0 = new Boolean(true);
      Integer[] integerArray0 = new Integer[6];
      Integer integer7 = new Integer((-235));
      integerArray0[0] = integer7;
      integerArray0[3] = integer0;
      integerArray0[2] = integer1;
      Integer integer8 = new Integer((-238));
      integerArray0[3] = integer8;
      Integer integer9 = new Integer(13);
      integerArray0[4] = integer9;
      integerArray0[5] = integer5;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer10 = new Integer((-990));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer11 = new Integer((-990));
      Boolean boolean1 = new Boolean("4294966306");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0676032882216056
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(62);
      stringWriter0.close();
      stringWriter0.flush();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Expected a ',' or '}'");
      Boolean boolean0 = new Boolean(true);
      linkedList0.add("qvC");
      String[] stringArray0 = new String[8];
      linkedList0.add("2oS");
      stringArray0[1] = "getwrite";
      stringArray0[1] = "Qf:'~'+J^W8G7-u4<H";
      stringArray0[2] = "|PFHr>Gvc('DNp9";
      stringArray0[3] = "aK";
      stringArray0[4] = "getwrite";
      stringArray0[5] = "MQwD1HFMnlH-";
      stringArray0[6] = "Qf:'~'+J^W8G7-u4<H";
      linkedList0.toArray(stringArray0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Double>) function0);
      Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      JSONObject.doubleToString(0.0);
      Double double0 = new Double(0.0);
      Double.min(62, (-1183.1899323619));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.4515830463315043
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.compare(false, false);
      JSONObject jSONObject1 = jSONObject0.put("+&?O9>P_]HAv", false);
      jSONObject0.optLong("+&?O9>P_]HAv", (long) 0);
      jSONObject1.put("", 1510);
      JSONObject jSONObject2 = jSONObject0.accumulate("+&?O9>P_]HAv", "+&?O9>P_]HAv");
      jSONObject2.append(" -z,wc.", " -z,wc.");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.771294323446676
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONArray(".2|L2{Y[a_2J7wMJ");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.840385976849197
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer((-28746850));
      Float.sum((-28746850), 20);
      Integer integer3 = new Integer((-28746850));
      Integer.max(9, 9);
      Integer.getInteger("wheel.json.JSONTokener", integer2);
      Boolean boolean0 = new Boolean("wheel.json.JSONTokener");
      Integer.sum(20, (-2962));
      Integer integer4 = new Integer(480);
      Integer integer5 = Integer.getInteger("wheel.json.JSONTokener", (-28746850));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer6 = new Integer(20);
      Integer.compare(480, (-104));
      Integer.max((-28746850), 0);
      linkedList1.add(integer6);
      linkedList1.add(integer3);
      Integer integer7 = new Integer((-28746850));
      Integer integer8 = new Integer(128);
      linkedList1.add(integer8);
      Integer integer9 = new Integer((-2942));
      linkedList1.offer(integer9);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("N&uMgg%zFPTwDPgZ:X", float0);
      boolean boolean1 = new Boolean("wheel.json.JSONTokener");
      linkedList0.add(integer5);
      try { 
        jSONObject1.getJSONObject("L(&QI4u0LBd$?,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L(&QI4u0LBd$?,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&RhwkXE))NV31V";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.5510906601882013
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr", 373L);
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      String string1 = "nozt";
      JSONObject jSONObject1 = jSONObject0.put("pus", 0L);
      stringArray0[1] = "nozt";
      jSONObject0.remove("nozt");
      stringArray0[2] = "g+jr";
      stringArray0[4] = "nozt";
      JSONObject jSONObject2 = jSONObject0.accumulate("g+jr", "nozt");
      int int0 = 60;
      jSONObject1.put("isadd", 60);
      jSONObject2.get("g+jr");
      try { 
        jSONObject2.getBoolean("g+jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+jr\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      JSONObject.valueToString(jSONObject0);
      stringArray0[0] = "wheel.json.JSONObject@0000000001";
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.pollLast();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9314830515574797
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getoptLong", (Map) hashMap0);
      Boolean.valueOf("3=.G");
      jSONObject1.put("getget", (Object) null);
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.9678593488156242
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>();
      Long long0 = new Long(0L);
      hashMap1.putIfAbsent(long0, (Boolean) null);
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ym>Z", (Map) hashMap0);
      jSONObject0.put("_Q^ p]", false);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.4357444548047438
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iswait";
      stringArray0[1] = "Null key.";
      stringArray0[2] = "Null key.";
      stringArray0[3] = "Null key.";
      stringArray0[4] = "Null key.";
      stringArray0[5] = "iswait";
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject((Object) "Ft-FwWOkv#zf;R,0r");
      jSONObject0.toString(10);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("aEUXxAXrNJ]O");
      linkedList0.sort((Comparator<? super String>) null);
      linkedList0.listIterator();
      linkedList0.add((String) null);
      linkedList0.clear();
      linkedList0.stream();
      linkedList0.add("aEUXxAXrNJ]O");
      linkedList0.add("aEUXxAXrNJ]O");
      linkedList0.clone();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Short short0 = new Short((short)9);
      JSONObject.getNames((Object) null);
      Float float0 = new Float((float) (short)9);
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer(24);
      Integer.compareUnsigned(20, 160);
      Integer integer3 = new Integer(97);
      Integer integer4 = new Integer((-2293));
      Integer integer5 = new Integer((-2962));
      Integer.toUnsignedString(20);
      linkedList0.add(integer5);
      Integer.sum((-2962), 24);
      Integer integer6 = new Integer(20);
      Integer.toUnsignedLong(299);
      Integer.toUnsignedString(299);
      Integer integer7 = new Integer(97);
      Integer integer8 = new Integer(102);
      Integer.max((-2293), 4);
      Integer integer9 = new Integer(40);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.flush();
      JSONObject.quote(":/t,8j+jtb_ed");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.toArray(stringArray0);
      linkedList1.add("\":/t,8j+jtb\\_ed\"");
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList1.replaceAll(unaryOperator0);
      Double double0 = new Double(0.0);
      try { 
        Long.parseUnsignedLong("", 120);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.071184179748359
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.put("[]", (Map) hashMap0);
      Long long0 = new Long(807L);
      Boolean.valueOf(true);
      Long long1 = new Long(807L);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(long1, boolean0);
      jSONObject0.put("[]", true);
      assertEquals(3, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-1061), 105);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      String string0 = JSONObject.valueToString(byte0, 2086, (byte)1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.3186688736829693
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("ym>Z", (Map) hashMap0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      JSONObject.valueToString(jSONObject3, 2073, 2073);
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.keySet();
      Set<Map.Entry<Float, Byte>> set0 = (Set<Map.Entry<Float, Byte>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getoptLong";
      JSONObject jSONObject1 = jSONObject0.put("getoptLong", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1L));
      int int0 = 2301;
      jSONObject1.put("ad", (Collection) set0);
      try { 
        Long.parseUnsignedLong("EH!iOo+", 2301);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2301 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("<Eo)MQ{Mc:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<Eo)MQ{Mc:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "X^pq Az";
      stringArray0[1] = "";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "$==H@^qnIbM";
      stringArray0[4] = "istoString";
      stringArray0[5] = "isintern";
      stringArray0[6] = "vN&yh>MjTXuV7/Wa#E";
      stringArray0[7] = ",ySyDJ>a,Yi0";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("Zp}V=*J", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.flush();
      stringWriter1.flush();
      Long long0 = new Long((-165L));
      Short short0 = new Short((short)44);
      JSONObject.getNames((Object) stringWriter1);
      Float float0 = new Float((-2304.2F));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5823133712725188
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.close();
      stringWriter0.flush();
      stringWriter0.flush();
      Long long0 = new Long((-165L));
      Short short0 = new Short((short)10);
      JSONObject.getNames((Object) long0);
      Float float0 = new Float((-1566.0F));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(",(sQp+,^GJp,$8PG5&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,(sQp+,^GJp,$8PG5&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("?Gj:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?Gj:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.048243038386791
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      String string0 = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong("X)#@", 531L);
      jSONObject0.optBoolean("X)#@", false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      jSONObject0.optInt("", 32);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.optInt(32);
      Integer integer0 = new Integer(32);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.552415327827883
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr", 373L);
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      String string1 = "nozt";
      JSONObject jSONObject1 = jSONObject0.put("pus", 0L);
      stringArray0[1] = "nozt";
      stringArray0[2] = "g+jr";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("g+jr", (Collection) linkedList0);
      stringArray0[4] = "nozt";
      JSONObject jSONObject2 = jSONObject0.accumulate("g+jr", "nozt");
      jSONObject1.put("isadd", 60);
      jSONObject2.get("g+jr");
      try { 
        jSONObject2.getBoolean("g+jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+jr\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.pollLast();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      Float float0 = new Float((float) (short)578);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8514553025142866
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("getoptLong", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.put("EH!iOo+", (Map) hashMap0);
      Float.isFinite(4911.076F);
      Boolean.compare(true, false);
      JSONObject jSONObject3 = new JSONObject((Object) "uyu =P6O+[_bASB");
      jSONObject3.put("getoptLong", 125);
      assertEquals(4, jSONObject3.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.2272783162105836
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = new Integer(20);
      Integer integer2 = new Integer((-28746850));
      Float.sum((-28746850), 20);
      Integer integer3 = new Integer((-28746850));
      Integer.max(9, 9);
      Integer.getInteger("wheel.json.JSONTokener", integer2);
      linkedList0.add(integer3);
      Integer.sum(20, 20);
      Integer integer4 = new Integer(480);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer5 = new Integer(20);
      linkedList1.add(integer5);
      linkedList1.add(integer3);
      Integer integer6 = new Integer((-28746850));
      Integer integer7 = new Integer(128);
      linkedList1.add(integer7);
      Integer integer8 = new Integer(40);
      linkedList1.offer(integer8);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("N&uMgg%zFPTwDPgZ:X", float0);
      jSONObject0.isNull("N&uMgg%zFPTwDPgZ:X");
      try { 
        jSONObject0.getLong("N&uMgg%zFPTwDPgZ:X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N&uMgg%zFPTwDPgZ:X\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-990));
      Integer integer1 = new Integer(20);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-990));
      Integer.toUnsignedLong((-990));
      Integer integer3 = new Integer(2073);
      Integer.toUnsignedLong(2073);
      Integer.toUnsignedString((-990));
      Integer integer4 = new Integer((-990));
      linkedList1.add(integer3);
      Integer.sum(12, 13);
      Integer integer5 = new Integer(13);
      linkedList1.add(integer1);
      Integer integer6 = new Integer(12);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Boolean boolean0 = new Boolean(false);
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      linkedList3.parallelStream();
      Integer[] integerArray0 = new Integer[6];
      Integer integer7 = new Integer((-235));
      integerArray0[0] = integer7;
      integerArray0[3] = integer0;
      integerArray0[2] = integer1;
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      try { 
        jSONObject0.getDouble("4294966306");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4294966306\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.2391997573006275
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getBoolean("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8454903338185393
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.entrySet();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getoptLong";
      JSONObject jSONObject1 = jSONObject0.put("getoptLong", (Map) hashMap0);
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, (Byte) null);
      Boolean.compare(true, false);
      try { 
        jSONObject1.getDouble("getoptLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoptLong\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.close();
      stringWriter1.append('+');
      stringWriter1.close();
      stringWriter1.flush();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter0.close();
      stringWriter0.flush();
      UnaryOperator.identity();
      Function.identity();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aK";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.flush();
      JSONObject.quote("");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      JSONArray jSONArray1 = new JSONArray();
      Long long0 = new Long((-1L));
      try { 
        Long.parseUnsignedLong("\"\"", (-628));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -628 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote((String) null);
      HashMap<JSONArray, JSONArray> hashMap1 = new HashMap<JSONArray, JSONArray>();
      HashMap<Double, Byte> hashMap2 = new HashMap<Double, Byte>();
      assertTrue(hashMap2.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean.compare(false, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+&?O9>P_]HAv";
      stringArray0[1] = "+&?O9>P_]HAv";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "+&?O9>P_]HAv";
      stringArray0[4] = "+&?O9>P_]HAv";
      stringArray0[5] = "+&?O9>P_]HAv";
      JSONObject jSONObject0 = new JSONObject("+&?O9>P_]HAv", stringArray0);
      int int0 = jSONObject0.optInt("Substring bounds error");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.6912719034000068
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 2079L);
      jSONObject0.optInt("", 22);
      jSONObject0.optDouble((String) null);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short) (-1502));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+eGJ\u0003nGhVV;be";
      stringArray0[1] = "FX(b}$zq^%AUdV";
      stringArray0[2] = "NmP6*NM`:6";
      stringArray0[3] = "\u0003!O/B*0";
      stringArray0[4] = "W";
      stringArray0[5] = "getgetJSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getInt("NmP6*NM`:6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NmP6*NM`:6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6455022342629488
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("+&?O9>P_]HAv", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      linkedList0.spliterator();
      charArray0[0] = 'B';
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.9777702792397744
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "1rL_]o$";
      stringArray0[2] = ",";
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = "wheel.json.JSONObject$Null";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject0.append("}GfYy@Gqe5YFcRjs", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(62);
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.flush();
      stringWriter0.flush();
      Long long0 = new Long((-165L));
      Short short0 = new Short((short)10);
      JSONObject.getNames((Object) long0);
      Float float0 = new Float((-1566.0F));
      JSONTokener jSONTokener0 = new JSONTokener("false");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of false
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
