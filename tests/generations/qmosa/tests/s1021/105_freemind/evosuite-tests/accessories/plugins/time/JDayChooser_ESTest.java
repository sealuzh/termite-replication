/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 01:23:47 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.TextListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.DataOutputStream;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JTextPane;
import javax.swing.JWindow;
import javax.swing.MenuSelectionManager;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.AttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.dom.events.DOMMutationEvent;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.StylesheetHandler;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xalan.templates.ElemApplyTemplates;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.CountersTable;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xerces.util.SymbolTable;
import org.apache.xml.utils.DefaultErrorHandler;
import org.apache.xml.utils.StringVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.xml.sax.helpers.NamespaceSupport;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.279931664273908
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getContainerListeners();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jDayChooser0.removeFocusListener(basicComboBoxEditor_UIResource0);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.today = calendar0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.isDayBordersVisible();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      calendar0.setTimeZone(timeZone0);
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      int int0 = 913;
      KeyEvent keyEvent0 = new KeyEvent(mockJFileChooser0, 33, 33, 913, 33, '(');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3735078363838182
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setYear(945);
      jDayChooser0.setMaxDayCharacters((-1416));
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      stylesheetHandler0.getSchema();
      jDayChooser0.setMonth(1090);
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(1);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.312042348731498
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster0);
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(textListener0, textListener0);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster0);
      JDayChooser jDayChooser1 = new JDayChooser();
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      stylesheetHandler0.getSchema();
      stylesheetHandler0.processingInstruction("day", "SSWrnv");
      jDayChooser1.setMonth(2042);
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 2, 14, 45, 41, 'Z');
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.keyPressed(keyEvent0);
      jDayChooser2.getDayPanel();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.29863613031986
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane("plugins.map.FreeMindMapController$MoveForwardAction", "1");
      jEditorPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(4);
      jDayChooser0.setMaxDayCharacters(228);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser1.setDayBordersVisible(true);
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 945;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI1.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", propertyChangeListener0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(945, 41, 945, 3736, 945);
      mockGregorianCalendar0.getCalendarType();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.white;
      String[] stringArray0 = new String[3];
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1700536362046745
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1059), (-1059), 1558, (-1059), 'A');
      jDayChooser0.keyTyped(keyEvent0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser0.addListeners(32);
      jDayChooser0.addListeners(16);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.154979859361748
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundVisible(false);
      boolean boolean0 = new Boolean("day");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, rowOutputBinary0, 1, (byte)37);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getInheritsPopupMenu();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D1);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((byte)37);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1338013620262806
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getContainerListeners();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jDayChooser0.removeFocusListener(basicComboBoxEditor_UIResource0);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.today = calendar0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.isDayBordersVisible();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      calendar0.setTimeZone(timeZone0);
      jDayChooser0.setDayBordersVisible(false);
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2771879939334854
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane("day", "29");
      jEditorPane0.getSelectedTextColor();
      jDayChooser0.firePropertyChange("x", (-1735.1575F), 0.24808449F);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setYear(4);
      jDayChooser0.setMaxDayCharacters(4);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      CountersTable countersTable0 = transformerImpl0.getCountersTable();
      NamespaceSupport namespaceSupport0 = new NamespaceSupport();
      stylesheetRoot0.setPrefixes(namespaceSupport0);
      StringVector stringVector0 = new StringVector(4);
      stylesheetRoot0.setExcludeResultPrefixes(stringVector0);
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) countersTable0);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth((-197));
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3211954655131697
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Locale locale0 = new Locale("day", "g')3ycJPh?|2");
      Locale.setDefault(locale0);
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat("day");
      mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser1.setDay(1376);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      Font font0 = styleContext0.getFont((AttributeSet) style0);
      jDayChooser0.setFont(font0);
      jDayChooser1.setMonth((-2684));
      assertEquals(31, jDayChooser1.getDay());
      
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Sh9VG");
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl(true);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(true);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      CountersTable countersTable0 = transformerImpl0.getCountersTable();
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) countersTable0);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setMonth((-2706));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2021902458859617
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI1.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", propertyChangeListener0);
      jDayChooser0.setEnabled(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate();
      Instant instant0 = MockInstant.ofEpochSecond((long) 1558);
      MockInstant.plusSeconds(instant0, (-1L));
      Locale locale0 = Locale.ROOT;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      // Undeclared exception!
      try { 
        jdbcConnection0.getTypeMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getToolkit();
      Locale locale0 = Locale.CANADA_FRENCH;
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.keyReleased((KeyEvent) null);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.207647573613409
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getFocusTraversalPolicy();
      jEditorPane0.getSelectedTextColor();
      jDayChooser0.firePropertyChange("x", (-1735.1575F), 0.24808449F);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxDayCharacters(4);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler();
      jDayChooser0.setDay((-1705));
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.setDayBordersVisible(false);
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.drawDays();
      jDayChooser0.getMaxDayCharacters();
      String string0 = "29";
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("29");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(3574);
      int int0 = 47;
      ActionEvent actionEvent0 = new ActionEvent(symbolTable0, 47, "7`y,)*F,v!6");
      actionEvent0.paramString();
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSundayForeground((Color) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.util.SymbolTable cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.123704841211923
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "day", 388);
      jDayChooser0.isDoubleBuffered();
      actionEvent0.setSource(jDayChooser0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      actionEvent0.setSource(jDayChooser0);
      actionEvent0.setSource(jDayChooser0);
      jDayChooser0.setDay(4);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setDay(4);
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.initDecorations();
      assertFalse(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane();
      jDayChooser0.getY();
      Color color0 = jEditorPane0.getSelectedTextColor();
      float[] floatArray0 = new float[4];
      jDayChooser0.oldDayBackgroundColor = color0;
      floatArray0[0] = (-1.0F);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1609223925836183
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      Instant instant0 = MockInstant.ofEpochMilli(1558);
      Instant instant1 = MockInstant.plusMillis(instant0, 1558);
      Date date0 = Date.from(instant1);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setSelectableDateRange(date0, date1);
      ElemApplyTemplates elemApplyTemplates0 = new ElemApplyTemplates();
      DOMMutationEvent dOMMutationEvent0 = new DOMMutationEvent();
      dOMMutationEvent0.getRelatedNode();
      elemApplyTemplates0.replaceChild((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        elemApplyTemplates0.getParamElem(1900);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.ElemCallTemplate", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      MockCalendar.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.get2DigitYearStart();
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, color0.getRed());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.302559678344369
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.firePropertyChange("freemind.modes.mindmapmode.actions.PasteAction$1", 1633.1364F, 1633.1364F);
      jDayChooser0.setYear(24);
      jDayChooser0.setMaxDayCharacters(1168);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser1.setDayBordersVisible(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3928029893247533
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI1.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", propertyChangeListener0);
      jDayChooser0.setEnabled(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYear(63734);
      jDayChooser1.setMaxDayCharacters((-2230));
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler();
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser1.setYearChooser((JYearChooser) null);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setWeekOfYearVisible(true);
      jDayChooser2.setDayBordersVisible(true);
      Date date0 = jDayChooser2.defaultMaxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser1.updateUI();
      Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      jDayChooser0.setFont(font0);
      Date date2 = jDayChooser1.setMaxSelectableDate(date1);
      assertSame(date2, date0);
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.295765106197407
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener1);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add(hierarchyListener1, (HierarchyListener) null);
      HierarchyListener hierarchyListener3 = AWTEventMulticaster.add(hierarchyListener1, hierarchyListener2);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener2);
      HierarchyListener hierarchyListener4 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener3);
      AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener4);
      HierarchyListener hierarchyListener5 = AWTEventMulticaster.remove(hierarchyListener4, (HierarchyListener) null);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener4);
      jDayChooser0.addHierarchyListener(hierarchyListener5);
      jDayChooser0.setMaxDayCharacters(945);
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      stylesheetHandler0.getSchema();
      jDayChooser0.setMonth(47);
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(1090);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 100, 1090, 47, 64, '<');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S#=!");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2647078000655583
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getDisabledTextColor();
      jDayChooser0.setSundayForeground(color0);
      jEditorPane0.getSelectedTextColor();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1735.1575F);
      jDayChooser0.firePropertyChange("", 0.24808449F, 0.24808449F);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setYear(1131);
      jDayChooser0.setMaxDayCharacters(1131);
      FocusEvent focusEvent0 = new FocusEvent(jEditorPane0, 1131);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Color color0 = Color.white;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Center";
      stringArray0[1] = "Center";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(3574);
      int int0 = (-354);
      ActionEvent actionEvent0 = new ActionEvent(symbolTable0, (-354), "~<4%/+A S+yc");
      actionEvent0.paramString();
      actionEvent0.setSource("unknown type,cmd=~<4%/+A S+yc,when=0,modifiers=");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2000351874353727
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.selectedDay = null;
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = Color.white;
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) propertyChangeListenerProxy0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setDay(48);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1326571690284117
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-87);
      byte byte0 = (byte)100;
      byteArray0[6] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setEnabled(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Timestamp.from(instant0);
      jDayChooser0.addListeners((byte)13);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1041);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(90);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-354);
      jDayChooser0.init();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2326997629411784
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane("menu_bar/format/", ")fW.-a6");
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      jDayChooser0.setBounds(20, 38, 1065, 456);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(38);
      jEditorPane0.scrollRectToVisible(rectangle0);
      KeyEvent keyEvent0 = new KeyEvent(jEditorPane0, 48, 48, 48, 48, 'I');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      SystemColor systemColor0 = SystemColor.menu;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Locale locale0 = new Locale("menu_bar/format/", "menu_bar/format/");
      Locale.setDefault(locale0);
      Locale locale1 = new Locale("RZuoy", "4");
      MockSimpleDateFormat mockSimpleDateFormat1 = null;
      try {
        mockSimpleDateFormat1 = new MockSimpleDateFormat("menu_bar/format/", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI1.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", propertyChangeListener0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getSelectedDay();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("29");
      MockSimpleDateFormat mockSimpleDateFormat1 = null;
      try {
        mockSimpleDateFormat1 = new MockSimpleDateFormat((String) null, (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.224896857839376
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster0);
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(textListener0, textListener0);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster0);
      JDayChooser jDayChooser1 = new JDayChooser();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.getSelectedDay();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDay(8971);
      JDayChooser jDayChooser3 = new JDayChooser();
      boolean boolean0 = jDayChooser2.isDayBordersVisible();
      jDayChooser2.setDayBordersVisible(false);
      jDayChooser2.setMonth(8971);
      assertEquals(31, jDayChooser2.getDay());
      
      jDayChooser1.getDaysInMonth();
      boolean boolean1 = jDayChooser1.isDecorationBackgroundVisible();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis((-2660L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getContainerListeners();
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.08675805622068
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundVisible(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, rowOutputBinary0, 1, (byte)37);
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      boolean boolean0 = jDayChooser1.isDecorationBackgroundVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1699419390281314
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 65610);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.repaint((-1134L));
      jDayChooser0.getInheritsPopupMenu();
      Color color0 = new Color(0);
      Color.getColor((String) null, color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 65610, (-1429L), 42, 134217728, 'a');
      KeyEvent.getExtendedKeyCodeForChar(210);
      jDayChooser0.keyTyped(keyEvent0);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("unknown type,permanent,opposite=null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.list();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      GraphicsConfiguration graphicsConfiguration0 = pDFDocumentGraphics2D0.getDeviceConfiguration();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDecorationBackgroundColor();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow(graphicsConfiguration0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.256597331080911
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMaxDayCharacters((-1416));
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      stylesheetHandler0.getSchema();
      stylesheetHandler0.processingInstruction("accessories.plugins.time.JDayChooser", "%Y>V,;D3^M");
      jDayChooser0.setMonth((-1039));
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(1);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1090, 0L, 2, 43, 'Z');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      Cursor cursor0 = JSVGViewerFrame.WAIT_CURSOR;
      System.setCurrentTimeMillis(2287L);
      jDayChooser0.isDecorationBordersVisible();
      try { 
        Cursor.getSystemCustomCursor("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 777;
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.224899283973695
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 945, 945, 1558, 945, 'A');
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI metalComboBoxUI1 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI1.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("day", propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", propertyChangeListener0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(945, 41, 945, 3736, 945);
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getSelectedDay();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDay(31);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser2.setMonth(8971);
      int int0 = jDayChooser2.getDaysInMonth();
      assertEquals(31, jDayChooser2.getDay());
      assertEquals(31, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
