/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 19:01:06 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.io.DataOutputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.StylesheetHandler;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XIncludeAwareParserConfiguration;
import org.apache.xerces.parsers.XIncludeParserConfiguration;
import org.apache.xerces.parsers.XML11Configuration;
import org.apache.xerces.parsers.XML11DTDConfiguration;
import org.apache.xerces.parsers.XMLGrammarCachingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xerces.xni.grammars.XMLGrammarPool;
import org.apache.xerces.xni.parser.XMLComponentManager;
import org.apache.xml.serializer.ToHTMLStream;
import org.apache.xpath.XPathContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6521158596065777
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(2, (-2263), 3241);
      jDayChooser2.setSelectableDateRange(mockDate0, mockDate1);
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.801064484785414
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.locale;
      TimeZone.getAvailableIDs();
      jDayChooser0.setDay(128);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3181), (-3181), (-3181), 905, '}', (MenuElement[]) null, menuSelectionManager0);
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, '}', 1961L, '}', (-4), '7', (MenuElement[]) null, menuSelectionManager1);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.WORD_SPACING;
      menuKeyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyPressed(menuKeyEvent1);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(100);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.736270028811289
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = SwingConstants.HORIZONTAL;
      Locale locale0 = Locale.CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      jDayChooser0.getMinSelectableDate();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getAccessibleContext();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      System.setCurrentTimeMillis(0);
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      cachingParserPool_ShadowedGrammarPool1.retrieveInitialGrammarSet("day");
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl(10);
      SymbolTable symbolTable1 = new SymbolTable(2065);
      cachingParserPool_ShadowedGrammarPool0.clear();
      XIncludeParserConfiguration xIncludeParserConfiguration0 = new XIncludeParserConfiguration();
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool1, xIncludeParserConfiguration0);
      jDayChooser0.setDay((-1955));
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser2.isDayBordersVisible();
      jDayChooser2.setDayBordersVisible(false);
      assertFalse(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.801064484785414
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = SwingConstants.HORIZONTAL;
      Locale.getISOCountries();
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 966, 0, 9999, 9999, '}', (MenuElement[]) null, menuSelectionManager0);
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 228, 0L, 966, 9999, '7', (MenuElement[]) null, menuSelectionManager1);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.WORD_SPACING;
      menuKeyEvent1.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      Color color0 = Color.magenta;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7002451362094457
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((byte)4);
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getDockingColor();
      System.setCurrentTimeMillis(0L);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree0 = null;
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, (DefaultTreeCellRenderer) null);
      defaultTreeCellEditor0.cancelCellEditing();
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor((JTree) null, (DefaultTreeCellRenderer) null, defaultTreeCellEditor0);
      defaultTreeCellEditor1.getBorderSelectionColor();
      defaultTreeCellEditor1.getBorderSelectionColor();
      int int0 = 1057;
      jDayChooser1.setDay(1057);
      jDayChooser0.isDayBordersVisible();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = null;
      try {
        menuKeyEvent0 = new MenuKeyEvent((Component) null, 18, 0L, (-3846), (-3846), '\'', (MenuElement[]) null, menuSelectionManager0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      JMenu jMenu0 = new JMenu("R{Em^k");
      JMenu jMenu1 = new JMenu("7", false);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      menuElementArray0[0] = (MenuElement) jMenu0;
      jMenu1.repaint((-611L), 49, 49, 48, 49);
      menuElementArray0[0] = (MenuElement) jMenu1;
      menuElementArray0[2] = (MenuElement) jMenu0;
      menuElementArray0[3] = (MenuElement) jMenu0;
      menuElementArray0[4] = (MenuElement) jMenu0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      menuSelectionManager0.getSelectedPath();
      KeyEvent.getKeyModifiersText(49);
      // Undeclared exception!
      try { 
        jDayChooser2.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("accessories.plugins.time.JDayChooser$1", 1740.419F, (-339.91F));
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8275382208687905
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(18);
      jDayChooser0.setMaxDayCharacters(8333);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.setSelectedPath((MenuElement[]) null);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 18, 1451L, 2740, 18, 'c', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyModifiersText(8333);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7017652912416006
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = SwingConstants.HORIZONTAL;
      Locale locale0 = Locale.CHINESE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.getISOCountries();
      locale0.clone();
      Locale.setDefault(locale0);
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getDockingColor();
      System.setCurrentTimeMillis(0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.cancelCellEditing();
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0, defaultTreeCellEditor0);
      defaultTreeCellEditor1.getBorderSelectionColor();
      defaultTreeCellEditor1.getBorderSelectionColor();
      jDayChooser0.setDay(887);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMonth(1057);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      Locale.getISOCountries();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale1 = Locale.FRANCE;
      locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8319682670485906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.setYear(1354);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.setDayBordersVisible(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDecorationBordersVisible(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/BBox [0 0 1000 1000]\n");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BrowseMode browseMode0 = new BrowseMode();
      Locale locale0 = jDayChooser2.locale;
      locale0.getExtensionKeys();
      jDayChooser2.setLocale(locale0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser2.isDecorationBordersVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDaysInMonth();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.674770277471316
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((byte)4);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDay((-3106));
      jDayChooser0.isDayBordersVisible();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.initDecorations();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.760874871072829
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(18);
      jDayChooser0.setMaxDayCharacters(8333);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser0.setSundayForeground(color0);
      menuSelectionManager0.setSelectedPath((MenuElement[]) null);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(2740);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      cachingParserPool_ShadowedGrammarPool0.retrieveInitialGrammarSet("day");
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarCachingConfiguration xMLGrammarCachingConfiguration0 = new XMLGrammarCachingConfiguration(symbolTable0);
      Locale locale0 = xMLGrammarCachingConfiguration0.getLocale();
      locale0.clone();
      Locale.setDefault(locale0);
      jDayChooser0.setDay(2740);
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.62408265354619
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = SwingConstants.HORIZONTAL;
      Locale.getISOCountries();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      cachingParserPool_ShadowedGrammarPool0.retrieveInitialGrammarSet(",");
      SymbolTable symbolTable0 = new SymbolTable();
      XML11Configuration xML11Configuration0 = new XML11Configuration(symbolTable0, xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool1, xML11Configuration0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setMonth(944);
      jDayChooser0.setDay(944);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getSelectedTextColor();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.setYear(1354);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser1.setDayBordersVisible(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDecorationBordersVisible(true);
      jDayChooser2.isDecorationBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7973625502868638
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(18);
      jDayChooser0.setMaxDayCharacters(8333);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 18, 1451L, 2740, 18, 'c', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyModifiersText(8333);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.updateUI();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      Color color0 = Color.red;
      JTextField jTextField0 = new JTextField("HBtTeTP$6AH");
      jTextField0.setCaretColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jTextField0, 41, 2003, 265, 21, ']');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.isDecorationBordersVisible();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(21, 2003, 21, ']', 2003);
      jDayChooser0.initDecorations();
      System.setCurrentTimeMillis(0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Color color1 = Color.PINK;
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      Locale.getISOCountries();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = SwingConstants.HORIZONTAL;
      Locale locale0 = Locale.FRANCE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.getISOCountries();
      locale0.clone();
      Locale.setDefault(locale0);
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7085325293656215
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((byte)4);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDay((-3106));
      jDayChooser0.isDayBordersVisible();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      Color color0 = Color.red;
      JTextField jTextField0 = new JTextField("HBtTeTP$6AH");
      jTextField0.setCaretColor(systemColor0);
      SymbolTable symbolTable0 = new SymbolTable(265);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(21, (-750), (-750));
      JDayChooser jDayChooser2 = new JDayChooser();
      Date date0 = jDayChooser2.setMaxSelectableDate((Date) null);
      jDayChooser2.setSelectableDateRange((Date) null, date0);
      Locale locale0 = Locale.TAIWAN;
      Locale.setDefault(locale0);
      assertEquals("zho", locale0.getISO3Language());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYear(8);
      jDayChooser0.setMaxDayCharacters((-433));
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1256), (-433), 1490, (byte)4, ',', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyModifiersText(18);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 394, (-1089L), 18, 55296, ',', 394);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.804506987817414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setYear(961);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 8901, (-1700L), 13, 8, '`', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyModifiersText(13);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getAsynchronousLoadPriority();
      jDayChooser1.drawDays();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((Action) null);
      jCheckBoxMenuItem0.getAccelerator();
      menuKeyEvent0.setSource((Object) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser1.setFocus();
      jDayChooser0.setMonth(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.723470183627356
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.updateUI();
      System.setCurrentTimeMillis((-821L));
      jDayChooser0.getWeekdayForeground();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      HsqlProperties.argArrayToProps(stringArray0, (String) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.799517964535027
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.getISOCountries();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(128, 128, 128);
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      boolean boolean1 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(boolean1 == boolean0);
      
      jDayChooser1.getMinSelectableDate();
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.62408265354619
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = SwingConstants.HORIZONTAL;
      Locale.getISOCountries();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 966, 600000L, 10, 966, 16, 9999, true);
      menuSelectionManager0.processMouseEvent(mouseEvent0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 966, 0, 9999, 9999, '}', (MenuElement[]) null, menuSelectionManager0);
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 228, 0L, 966, 9999, '7', (MenuElement[]) null, menuSelectionManager1);
      assertEquals(1, jDayChooser0.getDay());
      
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool((XMLGrammarPool) null);
      cachingParserPool_ShadowedGrammarPool0.retrieveInitialGrammarSet("IK5");
      SymbolTable symbolTable0 = new SymbolTable();
      symbolTable0.addSymbol("0");
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, (XMLGrammarPool) null, (XMLComponentManager) null);
      jDayChooser0.setDay(289);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      JMenu jMenu0 = new JMenu("");
      JMenu jMenu1 = new JMenu("org.hsqldb.lib.HashMappedList", true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenu1;
      JMenuItem jMenuItem0 = jMenu1.add((JMenuItem) jMenu0);
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jMenu0;
      menuElementArray0[4] = (MenuElement) jMenu1;
      menuElementArray0[5] = (MenuElement) jMenu1;
      menuElementArray0[6] = (MenuElement) jMenu0;
      menuElementArray0[7] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu1, 49, (-1706L), 128, 28, 'B', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8091943779309343
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.repaint((-1134L));
      jDayChooser0.getInheritsPopupMenu();
      Color color0 = new Color(0);
      Color.getColor((String) null, color0);
      Color.getColor("day", color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getHeight();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null);
      FocusEvent focusEvent0 = new FocusEvent(jInternalFrame0, 7, false, jInternalFrame0);
      jDayChooser0.setMinSelectableDate(date1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getSelectedTextColor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager2 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTextPane0, (byte)4, (-3811L), 8901, (byte)4, '\"', (MenuElement[]) null, menuSelectionManager2);
      KeyEvent.getKeyModifiersText(7);
      defaultStyledDocument0.getAsynchronousLoadPriority();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-1015), 31, (-1015), (-1015), 'T', (MenuElement[]) null, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      Object object0 = new Object();
      menuKeyEvent1.setSource(object0);
      jDayChooser1.keyPressed(menuKeyEvent1);
      jDayChooser1.setFocus();
      jDayChooser1.setMonth((-1015));
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7843661639240915
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((byte)4);
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.FRANCE;
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getDockingColor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JInternalFrame jInternalFrame0 = new JInternalFrame("  /Registry (Adobe) def\n", true, false, true, false);
      BasicInternalFrameUI basicInternalFrameUI0 = new BasicInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = basicInternalFrameUI0.getPreferredSize(jInternalFrame0);
      jDayChooser2.getSize(dimension0);
      MockDate mockDate0 = new MockDate(12, (-395), 3);
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser1.setSelectableDateRange(date0, mockDate0);
      Locale.setDefault(locale0);
      jDayChooser0.getDayPanel();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 65610);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.repaint((-1134L));
      jDayChooser0.getInheritsPopupMenu();
      Color color0 = new Color(0);
      Color.getColor((String) null, color0);
      Color.getColor("day", color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getHeight();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setYear(2496);
      jDayChooser0.isDecorationBackgroundVisible();
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null);
      FocusEvent focusEvent1 = new FocusEvent(jInternalFrame0, (-619), true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent1);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6558715339526153
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setDay(43);
      jDayChooser1.createImage(43, 25);
      jDayChooser1.isDayBordersVisible();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDayBordersVisible(false);
      jDayChooser0.getWeekdayForeground();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.757689330507757
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 65610);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.repaint((-1134L));
      jDayChooser0.getInheritsPopupMenu();
      Color color0 = new Color(0);
      Color.getColor((String) null, color0);
      Color.getColor("day", color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getHeight();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      Color color1 = Color.yellow;
      jDayChooser0.setMaxSelectableDate(date0);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      FocusEvent focusEvent1 = new FocusEvent(jInternalFrame0, 20, false, jInternalFrame0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("(^ Py:<<AD]}yR>S", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle1);
      Style style0 = jTextPane0.addStyle("(^ Py:<<AD]}yR>S", styleContext_NamedStyle2);
      Color color0 = styleContext0.getBackground(style0);
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 34);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.FLOW_REGIONS;
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "]jFmT:$ixH>c";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, (-258), "Metal", 10);
      actionEvent0.paramString();
      actionEvent0.setSource("Metal");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.selectedDay = null;
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = Color.white;
      String string0 = "";
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) propertyChangeListenerProxy0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getSelectedDay();
      int int0 = (-981);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-981));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1059), (-1059), 1558, (-1059), 'A');
      jDayChooser0.keyTyped(keyEvent0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.addListeners(14);
      jDayChooser0.getSundayForeground();
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.updateUI();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      Color color0 = Color.red;
      JTextField jTextField0 = new JTextField("HBtTeTP$6AH");
      jTextField0.setCaretColor(systemColor0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(21);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XML11Configuration xML11Configuration0 = new XML11Configuration((SymbolTable) null, xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      cachingParserPool_ShadowedGrammarPool1.retrieveInitialGrammarSet("HBtTeTP$6AH");
      SymbolTable symbolTable0 = new SymbolTable();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.801064484785414
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = JComponent.UNDEFINED_CONDITION;
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      Locale locale0 = jDayChooser0.locale;
      TimeZone.getAvailableIDs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDay((-1));
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3181), (-3181), (-1364), (-1), '}', (MenuElement[]) null, menuSelectionManager0);
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager2 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-274), (-1046L), (-2251), 142, '7', (MenuElement[]) null, menuSelectionManager2);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.WORD_SPACING;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(10070, threadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL, timeUnit0);
      menuKeyEvent0.setSource(scheduledFuture0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth((int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO);
      Color color0 = Color.magenta;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.841822986321091
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(985);
      jDayChooser0.setMaxDayCharacters((byte)4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTextPane0, 8901, 0L, 985, 32, '-', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyModifiersText((-1015));
      defaultStyledDocument0.getAsynchronousLoadPriority();
      jDayChooser0.drawDays();
      menuKeyEvent0.setSource(defaultStyledDocument0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(18);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 65610);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.repaint((-1134L));
      jDayChooser0.getInheritsPopupMenu();
      Color color0 = new Color(0);
      Color.getColor((String) null, color0);
      Color.getColor("day", color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getHeight();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setMaxSelectableDate(date0);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null);
      ToHTMLStream toHTMLStream0 = new ToHTMLStream();
      // Undeclared exception!
      try { 
        toHTMLStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8275382208687905
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getSelectedTextColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(13);
      jDayChooser0.setMaxDayCharacters(8333);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      ImageIcon imageIcon0 = new ImageIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(imageIcon0, false);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenuBar jMenuBar0 = new JMenuBar();
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-367), (-367), 14, 8333, ':', menuElementArray0, menuSelectionManager0);
      KeyEvent.getKeyModifiersText(1819);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jEditorPane0, 7, 15L, (-367), (-168), '3', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setSource(imageIcon0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth((-1));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 388;
      Object object0 = new Object();
      int int1 = (-258);
      jDayChooser0.getDay();
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XML11DTDConfiguration xML11DTDConfiguration0 = null;
      try {
        xML11DTDConfiguration0 = new XML11DTDConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // fRecognizedFeatures
         //
         verifyException("org.apache.xerces.parsers.XML11DTDConfiguration", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.getSelectedTextColor();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser1.setDayBordersVisible(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDecorationBordersVisible(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/BBox [0 0 1000 1000]\n");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser2.setDay(1354);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Style style0 = styleContext0.addStyle("c(epIp", styleContext_NamedStyle0);
      assertNotSame(style0, styleContext_NamedStyle0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 777;
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 6, 164, 90, (-90));
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      stylesheetHandler0.getStylesheetRoot();
      XPathContext xPathContext0 = new XPathContext("gregory", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, rowOutputBinary0, (byte)47, 0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
