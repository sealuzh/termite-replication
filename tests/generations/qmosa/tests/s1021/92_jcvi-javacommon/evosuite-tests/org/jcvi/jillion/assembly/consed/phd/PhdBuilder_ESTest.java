/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 02:23:03 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<DefaultPhdWholeReadItem> linkedList0 = new LinkedList<DefaultPhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList1 = new LinkedList<PhdWholeReadItem>(linkedList0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      linkedList1.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList1.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      linkedList1.add((PhdWholeReadItem) defaultPhdWholeReadItem1);
      ArtificialPhd artificialPhd0 = new ArtificialPhd("Adenine", nucleotideSequence0, qualitySequence0, map0, linkedList1, (List<PhdReadTag>) null, 65535, 65535);
      artificialPhd0.getReadTags();
      DefaultPhd defaultPhd0 = new DefaultPhd("id can not be null", nucleotideSequence0, qualitySequence0, (PositionSequence) null, map0, linkedList1, (List<PhdReadTag>) null);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      Predicate<Object> predicate9 = predicate3.negate();
      predicate6.test(predicate7);
      predicate8.test(predicate6);
      Predicate<Object> predicate10 = predicate8.or(predicate4);
      Predicate<Object> predicate11 = predicate9.and(predicate1);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate0.and(predicate12);
      predicate0.or(predicate13);
      Predicate.isEqual((Object) predicate6);
      predicate9.test(predicate0);
      predicate5.or(predicate1);
      predicate5.negate();
      Predicate<Object> predicate14 = predicate1.or(predicate7);
      Predicate<Object> predicate15 = predicate14.negate();
      predicate10.negate();
      Predicate<Object> predicate16 = predicate15.negate();
      predicate5.test(predicate0);
      Predicate<Object> predicate17 = predicate2.and(predicate7);
      Predicate.isEqual(object0);
      predicate17.or(predicate6);
      predicate9.and(predicate16);
      Predicate<Object> predicate18 = predicate17.or(predicate2);
      predicate18.or(predicate7);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("Iy6k|Bj%k", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      hashMap16.putIfAbsent((String) null, "");
      hashMap13.put("", (String) null);
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      hashMap6.put("", " jv)f)h,AX,N%~2");
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      HashMap<String, String> hashMap21 = new HashMap<String, String>();
      hashMap21.put((String) null, (String) null);
      HashMap<String, String> hashMap22 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("#_[GB", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap18);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6815563206157869
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate2.or(predicate4);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Object object2 = new Object();
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      predicate6.or(predicate4);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate9.test(predicate7);
      predicate9.and(predicate7);
      predicate1.and(predicate6);
      predicate1.and(predicate3);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      linkedList0.removeIf(predicate8);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("@]bR", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      phdBuilder0.fakePeaks(65536, 280);
      phdBuilder0.fakePeaks(65536, 280);
      phdBuilder0.build();
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1024, (-146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("~", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put(";\"F4", "~");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      hashMap13.put("qualities can not be null", "f<YG^N?%NHo+ar");
      hashMap1.putIfAbsent("f<YG^N?%NHo+ar", "SXu.'en?VF{");
      hashMap13.put("f<YG^N?%NHo+ar", (String) null);
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap4.put("~", (String) null);
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      HashMap<String, String> hashMap21 = new HashMap<String, String>();
      HashMap<String, String> hashMap22 = new HashMap<String, String>();
      hashMap2.put((String) null, (String) null);
      HashMap<String, String> hashMap23 = new HashMap<String, String>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("~", phd0.getId());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate2.or(predicate4);
      Object object1 = new Object();
      Predicate<Object> predicate8 = Predicate.isEqual(object1);
      Object object2 = new Object();
      Predicate<Object> predicate9 = predicate0.and(predicate3);
      Predicate<Object> predicate10 = predicate4.negate();
      predicate7.test(predicate8);
      predicate9.or(predicate5);
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      Predicate<Object> predicate12 = predicate11.and(predicate7);
      predicate0.or(predicate12);
      Predicate.isEqual((Object) predicate7);
      predicate10.test(predicate0);
      Predicate.isEqual(object2);
      Predicate<Object> predicate13 = predicate6.or(predicate4);
      Predicate<Object> predicate14 = predicate9.negate();
      predicate1.or(predicate8);
      predicate13.negate();
      predicate2.negate();
      Predicate<Object> predicate15 = predicate14.negate();
      predicate6.test((Object) null);
      Predicate<Object> predicate16 = predicate4.and(predicate8);
      Predicate.isEqual(object1);
      predicate10.and(predicate15);
      predicate2.or(predicate12);
      predicate2.and(predicate16);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      Phd phd0 = phdBuilder0.build();
      assertEquals("", phd0.getId());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("~", (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate2.or(predicate4);
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate3);
      Predicate<Object> predicate10 = predicate4.negate();
      predicate7.test(predicate8);
      predicate9.test(predicate7);
      predicate9.or(predicate5);
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate0.and(predicate12);
      Predicate<Object> predicate14 = predicate0.or(predicate13);
      Predicate.isEqual((Object) predicate7);
      predicate10.test(predicate0);
      predicate6.or(predicate4);
      predicate6.negate();
      Predicate<Object> predicate15 = predicate1.or(predicate8);
      Predicate<Object> predicate16 = predicate15.negate();
      Predicate<Object> predicate17 = predicate2.negate();
      Predicate<Object> predicate18 = predicate16.negate();
      predicate6.test(predicate0);
      Predicate<Object> predicate19 = predicate4.and(predicate8);
      Predicate.isEqual(object0);
      predicate19.or(predicate7);
      predicate10.and(predicate18);
      Predicate<Object> predicate20 = predicate19.or(predicate2);
      predicate20.or(predicate8);
      predicate14.and(predicate17);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("Iy6k|Bj%k", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(1, 1);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder(":\"#&b[$7H.%JzJn9", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-1414L));
      System.setCurrentTimeMillis((-1414L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2403L));
      System.setCurrentTimeMillis((-821L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2068L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2068L));
      System.setCurrentTimeMillis(1548L);
      System.setCurrentTimeMillis((-118L));
      System.setCurrentTimeMillis((-1414L));
      System.setCurrentTimeMillis((-1414L));
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder(":\"#&b[$7H.%JzJn9", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-1414L));
      System.setCurrentTimeMillis((-1414L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2403L));
      System.setCurrentTimeMillis((-821L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2068L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2068L));
      System.setCurrentTimeMillis((-2068L));
      System.setCurrentTimeMillis((-118L));
      System.setCurrentTimeMillis((-1414L));
      System.setCurrentTimeMillis((-1414L));
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("~", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      hashMap13.put("qualities can not be null", "f<YG^N?%NHo+ar");
      hashMap16.putIfAbsent("f<YG^N?%NHo+ar", "SXu.'en?VF{");
      hashMap13.put("f<YG^N?%NHo+ar", (String) null);
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      hashMap4.put("~", (String) null);
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      HashMap<String, String> hashMap21 = new HashMap<String, String>();
      HashMap<String, String> hashMap22 = new HashMap<String, String>();
      HashMap<String, String> hashMap23 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate2.or(predicate4);
      Object object1 = new Object();
      Predicate<Object> predicate8 = Predicate.isEqual(object1);
      Object object2 = new Object();
      Predicate<Object> predicate9 = predicate0.and(predicate3);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate11.and(predicate7);
      predicate8.or(predicate11);
      predicate10.test(predicate0);
      Predicate<Object> predicate12 = predicate6.or(predicate4);
      Predicate<Object> predicate13 = predicate9.negate();
      predicate1.or(predicate8);
      predicate12.negate();
      predicate2.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate6.test((Object) null);
      Predicate<Object> predicate15 = predicate4.and(predicate8);
      Predicate.isEqual(object1);
      predicate10.and(predicate14);
      Predicate<Object> predicate16 = predicate15.or(predicate2);
      predicate16.and(predicate15);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("~", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap4.putIfAbsent("Null Range used in range comparison operation.", "~");
      hashMap6.put((String) null, "~");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      hashMap10.put("~", (String) null);
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap14.put((String) null, (String) null);
      hashMap14.put("'", "<nK&h7?MPx&_?P=\"qX");
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      phdBuilder0.peaks((PositionSequence) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap9.put("", "sD*\"|L!C&1U<1<T");
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      assertTrue(hashMap13.equals((Object)hashMap6));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate2.or(predicate4);
      Object object1 = new Object();
      Predicate<Object> predicate8 = Predicate.isEqual(object1);
      Object object2 = new Object();
      Predicate<Object> predicate9 = predicate0.and(predicate3);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate1);
      predicate11.and(predicate7);
      predicate8.or(predicate11);
      predicate10.test(predicate0);
      Predicate<Object> predicate12 = predicate6.or(predicate4);
      Predicate<Object> predicate13 = predicate9.negate();
      predicate1.or(predicate8);
      predicate12.negate();
      predicate2.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate6.test((Object) null);
      Predicate<Object> predicate15 = predicate4.and(predicate8);
      Predicate.isEqual(object1);
      predicate10.and(predicate14);
      Predicate<Object> predicate16 = predicate15.or(predicate2);
      predicate16.and(predicate15);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-146), (-146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2658L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2L);
      System.setCurrentTimeMillis(101L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2181L);
      System.setCurrentTimeMillis((-3075L));
      System.setCurrentTimeMillis(817L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list2);
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list3);
      linkedList0.addFirst(defaultPhdWholeReadItem0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("g+m6cefBkHRe?^}2", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      hashMap15.putIfAbsent((String) null, "");
      hashMap12.put("", (String) null);
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      hashMap5.put((String) null, (String) null);
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap5.put("", " jv)f)h,AX,N%~2");
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      hashMap20.put((String) null, "");
      hashMap20.put((String) null, (String) null);
      HashMap<String, String> hashMap21 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd((String) null, (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      hashMap16.putIfAbsent((String) null, "");
      hashMap13.put("", (String) null);
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      hashMap6.put("", " jv)f)h,AX,N%~2");
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      HashMap<String, String> hashMap21 = new HashMap<String, String>();
      hashMap21.put((String) null, (String) null);
      HashMap<String, String> hashMap22 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, (-1597));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-1979L));
      System.setCurrentTimeMillis((-1979L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1979L));
      System.setCurrentTimeMillis(374L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1979L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(9223372036854775807L);
      System.setCurrentTimeMillis((-3397L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1265L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(32767L);
      System.setCurrentTimeMillis((-2403L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2403L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, 230);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 2192L;
      System.setCurrentTimeMillis(2192L);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
