/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:26:57 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3229433045718286
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = (-4214L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-4102L), (-4102L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.896982759395759
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      long long0 = 9223372036854772737L;
      Range range1 = Range.of(2147483644L, 9223372036854772737L);
      List<Range> list0 = range1.complement(range0);
      range1.equals(range0);
      Long long1 = new Long(9223372036854772737L);
      Long.remainderUnsigned(9223372036854775807L, 4294967295L);
      range0.isSubRangeOf(range1);
      long long2 = 9223364885734231299L;
      Range range2 = Range.of(9223364885734231299L);
      range1.intersects(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst((Range) null);
      linkedList0.addAll((Collection<? extends Range>) list0);
      // Undeclared exception!
      try { 
        range2.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5724926269737174
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(1L, 1L);
      Range range2 = range_Builder1.build();
      range_Builder1.expandBegin(2147485012L);
      range2.equals(range1);
      assertSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.537451876207059
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-1248L), 1L);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1657L), 1L);
      Range.of((-4214L), (-128L));
      Object object3 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object0);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.571283171824627
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1470L), 2147483647L);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range1.equals(range2);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.of((-216L), (-435L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8337651603363403
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(1L, 1L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1L, 65536L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals((Object) null);
      Range range2 = Range.of(1L, 1L);
      range1.equals(range2);
      Range.of(range_CoordinateSystem0, (-4196L), 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3550651224755565
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1L, 9223372036854775807L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(1L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.095276530253698
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range1 = Range.ofLength(1L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder3 = range_Builder0.shift((-331L));
      Range.Builder range_Builder4 = range_Builder3.shift((long) long0);
      range_Builder3.copy();
      range_Builder3.contractBegin(2L);
      range_Builder3.shift((-3368L));
      Range.Builder range_Builder5 = new Range.Builder(range1);
      range2.complement(range0);
      range_Builder3.contractEnd((-599L));
      range_Builder1.shift(244L);
      range1.equals(range_Builder4);
      Range range3 = Range.of((-128L));
      Range.of((-3368L));
      boolean boolean1 = range3.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8094769818552647
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 2147483643L;
      Range.of(2147483643L, 2147483643L);
      long long1 = (-352L);
      Range range0 = Range.of((-352L));
      long long2 = (-1509L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      long long3 = (-2454L);
      Range.of(range_CoordinateSystem0, (-2454L), (-2419L));
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4475395186336675
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals("gS%9zYO");
      assertFalse(boolean0);
      
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long0 = new Long(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5200562543908642
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4040L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range1.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6817900616215
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1470L), 2147483647L);
      range0.intersection(range1);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-2341L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-2426L), 617L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-2341L), (-1470L));
      range_Builder0.contractEnd((-2341L));
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-1L), 2147483647L);
      range_Builder0.expandEnd((-2341L));
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 9223372036854775553L, (-2341L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2342 would make range [9223372036854775552 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.731341792769505
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      range0.complement(range0);
      range0.equals(range0);
      Long long0 = new Long(9223372036854772737L);
      Long.remainderUnsigned(9223372036854775807L, 4294967295L);
      range0.equals(long0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      range0.equals(object1);
      Range range1 = Range.of((-1972L));
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.608263680085794
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1549L;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(1169L, 9223372036854774999L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854774999L, 523L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.360892242309265
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1L, 9223372036854775807L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.803909207952089
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-9223372036854710272L), 1L);
      Object object0 = new Object();
      Object object1 = new Object();
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      range0.intersects(range0);
      range0.equals(list0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4536548947520047
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 809L;
      Range range0 = Range.of(809L);
      Range range1 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.of(809L, 4478L);
      range1.equals(range0);
      Long long1 = new Long(809L);
      Object object0 = new Object();
      Range range2 = Range.of(4478L, 4478L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 809L, 1863L);
      range0.equals(range2);
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8263046422295908
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range range1 = Range.of((-1L), 32767L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range1.equals(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      boolean boolean1 = range2.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals(object7);
      Range range3 = Range.of((-9223372036854775808L));
      Range.of((-9223372036854775808L));
      Range range4 = range2.intersection(range3);
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.988491141947384
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(4294967294L, 9223372032559808512L);
      range1.iterator();
      Range range2 = Range.of(9223372032559808512L);
      range2.toString(range_CoordinateSystem0);
      Range range3 = Range.ofLength(9223372036854775553L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range4 = Range.ofLength(9223372036854775553L);
      Object object0 = new Object();
      List<Range> list0 = range2.complement(range1);
      List<Range> list1 = range4.complementFrom(list0);
      range2.complementFrom(list1);
      range4.intersects(range3);
      range3.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.8315075249831594
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-9223372036854710272L), 1L);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 7129645708039L);
      Range range2 = Range.of((-9223372026117357571L), (-4214L));
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      
      range2.equals(object4);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.085358499107704
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2058L);
      range_Builder0.copy();
      range_Builder1.shift(2058L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3368L), 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(127L);
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      range0.complementFrom(linkedList0);
      range_Builder0.copy();
      range_Builder1.expandEnd(9223372036854775807L);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(127L);
      range0.complement(range1);
      Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range2 = Range.ofLength(1L);
      range1.complement(range2);
      Range.Comparators.values();
      Range.ofLength(127L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.518669871710634
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(809L);
      Range range1 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range range2 = Range.of(809L, 4478L);
      boolean boolean0 = range1.equals(range0);
      Long long0 = new Long(809L);
      Object object0 = new Object();
      Range range3 = Range.of(4478L, 4478L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 809L, 1863L);
      boolean boolean1 = range0.equals(range3);
      assertNotSame(range0, range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range1));
      
      Object object4 = new Object();
      Object object5 = new Object();
      range3.equals(range4);
      Range range5 = Range.of(1863L);
      Range range6 = Range.of(1863L);
      Range range7 = range6.intersection(range5);
      assertSame(range7, range5);
      assertFalse(range7.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4959460837748457
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(2147483647L, 9223372036854774999L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3992360917105295
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854774999L, (-1235L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1235 would make range [9223372036854774999 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5193863631153355
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(809L);
      Range range1 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.of(809L, 4478L);
      range1.equals(range0);
      Long long0 = new Long(809L);
      Object object0 = new Object();
      Range.of(4478L, 4478L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1863L;
      Range.of(range_CoordinateSystem1, 809L, 1863L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1863L, 809L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.947830723893397
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range range1 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 809L, 809L);
      range2.endsBefore(range1);
      range0.equals(range_CoordinateSystem0);
      range1.isSubRangeOf(range0);
      range1.complement(range0);
      Object object0 = new Object();
      range2.spliterator();
      range2.intersects(range1);
      Range range3 = Range.ofLength(809L);
      range3.intersection(range1);
      // Undeclared exception!
      try { 
        range3.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.260291140824428
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(4294967294L, 9223372032559808512L);
      range1.iterator();
      Range range2 = Range.of(9223372032559808512L);
      range2.toString(range_CoordinateSystem0);
      Range range3 = Range.ofLength(9223372036854775553L);
      range3.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range2.startsBefore(range0);
      Range range4 = Range.ofLength(3595L);
      Range.CoordinateSystem.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 0L, 9223372032559808512L);
      range4.isSubRangeOf(range5);
      Range range6 = Range.of(1397L);
      range4.intersects(range6);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.offerFirst(range4);
      linkedList0.addAll((Collection<? extends Range>) linkedList1);
      range4.complementFrom(linkedList0);
      // Undeclared exception!
      range1.split(4294967294L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.82819571779553
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-9223372036854710272L), 1L);
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 1L;
      range_Builder0.expandBegin(1L);
      Range range1 = range_Builder1.build();
      range0.intersects(range1);
      Range range2 = Range.of((-9223372036854710272L));
      range2.complement(range0);
      Range.Builder range_Builder2 = range_Builder1.shift(255L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder5 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("value can not be <0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.value can not be <0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.047044081889267
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-9223372036854710272L), 1L);
      Object object1 = new Object();
      Range range1 = Range.ofLength(1L);
      Object object2 = new Object();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list0));
      //  // Unstable assertion: assertEquals(2, list2.size());
      //  // Unstable assertion: assertTrue(list2.equals((Object)list1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7215284123832095
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-1470L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1470L), 2147483647L);
      range0.complement(range1);
      range0.equals(range1);
      Long long2 = new Long((-408L));
      Long.remainderUnsigned(4294967295L, (-1470L));
      // Undeclared exception!
      try { 
        Range.of(2168L, (-1470L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5057284826127457
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      long long1 = 32767L;
      Range.of((-1L), 32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3034L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5786289156232707
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1L, 9223372036854775807L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(4294967424L);
      range0.equals("");
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7451723480445156
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = (-9223372036854710272L);
      Object object0 = new Object();
      long long1 = 2147483633L;
      long long2 = 9223372036854772737L;
      Range range0 = Range.of(2147483633L, 9223372036854772737L);
      range0.equals((Object) null);
      Object object1 = null;
      Range.of((-9223372036854710272L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1976L), (-9223372036854710272L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.225780433854567
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = (-1L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of((-1L));
      range0.equals(object0);
      Object object5 = new Object();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5313165675777536
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.equals((Object) null);
      Object object1 = new Object();
      range0.equals(range0);
      Range.of(2147483647L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.263155040283282
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-381L), (-381L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.039534362183154
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-352L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 700L, 700L);
      Range range3 = Range.of((-1509L));
      Range range4 = Range.of(range_CoordinateSystem0, (-2454L), (-2419L));
      range3.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      boolean boolean0 = range1.equals(range4);
      assertFalse(boolean0);
      
      Range range5 = Range.of(380L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range5.forEach(consumer0);
      Range range6 = range2.intersection(range4);
      assertNotSame(range2, range5);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9120750226442498
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range range0 = Range.of((-352L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 700L, 700L);
      Range range1 = Range.of((-1509L));
      Range range2 = Range.of(range_CoordinateSystem0, (-2454L), (-2419L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range1.equals(range0);
      Range range3 = Range.of((-1509L), 2147483647L);
      range0.equals(range3);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-352L), (-2454L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.855731257281474
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L), (-1L));
      Long long0 = new Long((-1L));
      Object object1 = new Object();
      Range range1 = Range.of(1L, 1L);
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      Object object4 = new Object();
      range1.equals(object0);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.379012944555068
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(1L);
      range0.equals(range1);
      Object object2 = new Object();
      Range.of(255L, 255L);
      Object object3 = new Object();
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-1810L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.68984730243541
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1498L), 2147483647L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals((Object) null);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6289163516618994
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(1549L, 9223372036854774999L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4607813420345246
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of((-1270L), 4294967295L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2651099209314975
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of(544L, 4294967305L);
      Range.of(4294967305L, 9223372032559808514L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.540272655449458
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1L, 2147483647L);
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of((-2691L), (-1810L));
      range0.getLength();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.609081364650298
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.of(65195L);
      Long long0 = new Long((-2576L));
      Range.of((-128L), 127L);
      // Undeclared exception!
      try { 
        Range.ofLength((-490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9070325613329016
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(809L);
      Range range1 = Range.of(809L, 4478L);
      range0.equals(range0);
      Long long0 = new Long(809L);
      Object object0 = new Object();
      Range range2 = Range.of(4478L, 4478L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.of((-32768L));
      range0.complement(range1);
      long long1 = (-128L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4478L, 809L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.81170840160501
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals(object6);
      assertFalse(boolean0);
      
      Range range1 = Range.of(127L, 2147483647L);
      Range range2 = Range.of(32L);
      assertFalse(range2.isEmpty());
      
      range1.intersection(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.042530924466379
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(1L, 1L);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder4 = range_Builder1.expandBegin((-331L));
      Range range3 = range_Builder0.build();
      range2.intersects(range0);
      Range.of(65535L);
      range3.complement(range1);
      Range.Builder range_Builder5 = range_Builder1.contractEnd((-121L));
      range_Builder5.shift(2334L);
      range_Builder3.shift((-1L));
      range_Builder0.expandBegin(7151120544509L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder5);
      range_Builder6.contractBegin((-1L));
      range_Builder6.contractEnd(255L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder4);
      range_Builder1.contractEnd((-676L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cE|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cE|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.502744204532618
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-32768L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.629776921171306
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 7129645708039L, 7159710479109L);
      Range range1 = Range.of((-9223372026117357571L), (-9223372026117357571L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372026117357571 would make range [7129645708039 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.023201726694442
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1221L;
      Range range1 = Range.of(range_CoordinateSystem0, 1221L, 4294967295L);
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      range2.getLength();
      range0.complement(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem1);
      Range range3 = Range.ofLength(65535L);
      range3.equals(range_CoordinateSystem1);
      Range.ofLength(4294967295L);
      range0.iterator();
      Range.parseRange("[ 4294967295 .. 4294967295 ]/SB");
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range3.getBegin(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.983913366867979
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(3235L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of((-1027L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 0 .. 3234 ]/0B", range_CoordinateSystem2);
      range1.split(2147483674L);
      range1.toString(range_CoordinateSystem1);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("8zDktK`CjHl@_Ux[E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 8zDktK`CjHl@_Ux[E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.8627324898230047
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(65163L);
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      long long1 = 7151120544509L;
      Range range2 = range_Builder0.build();
      Range.of(999L);
      Range.of(65163L);
      range1.complement(range2);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.988901147939154
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223364877144296710L);
      Range range1 = Range.of(9223364877144296710L, 9223364877144296710L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range1.startsBefore(range0);
      Long long0 = new Long(1599L);
      range1.isSubRangeOf(range0);
      range0.complement(range1);
      Range range2 = Range.of((-1170L), 9223364877144296710L);
      range0.intersects(range2);
      long long1 = 941L;
      Range.of(941L);
      long long2 = (-1924L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1924L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.699336539783684
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1235L), 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of(1L, 65535L);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.729015531125496
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(1549L, 9223372036854774999L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3676502363122527
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5351209922528852
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.ofLength(1549L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5615777731028806
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of(544L, 4294967305L);
      Object object4 = new Object();
      Long long0 = new Long(4294967305L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(4294967305L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.364612191229369
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of(1L, 1548L);
      Long long0 = new Long(1L);
      Range range2 = Range.ofLength(3310L);
      range1.equals(range2);
      Object object0 = new Object();
      Range range3 = Range.of(255L, 1548L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range4 = Range.of(1L, 1548L);
      assertFalse(range4.equals((Object)range0));
      assertNotSame(range4, range0);
      
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean0 = range3.equals(object7);
      assertNotSame(range3, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(483L, 9223372036854775807L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5195409146829904
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.of(0L);
      range0.getEnd();
      range0.getLength();
      String string0 = "(\\d+)\\s*-\\s*(\\d+)";
      try { 
        Long.valueOf("(d+)s*-s*(d+)", (-199));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -199 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7398693497707542
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of(562L, 4294967305L);
      Range range1 = Range.of(562L, 562L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range2);
      assertFalse(list0.contains(range0));
      assertSame(range2, range1);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.442500503912396
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 1524L;
      Range range0 = Range.of(1L, 1524L);
      Long long1 = new Long((-32768L));
      Range.ofLength(1524L);
      range0.equals((Object) null);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(1524L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.608814096021101
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.of(9223372036854772737L, 9223372036854772737L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(range2);
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object7);
      assertFalse(boolean0);
      
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      range2.equals(object0);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.328008472112905
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(4294967305L, 4294967305L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.174169117070929
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder3 = range_Builder0.shift((-331L));
      Range.Builder range_Builder4 = range_Builder3.shift((long) long0);
      range_Builder3.copy();
      range_Builder3.contractBegin(2L);
      range_Builder3.shift((-3368L));
      Range.Builder range_Builder5 = new Range.Builder(range1);
      range2.complement(range0);
      range_Builder3.contractEnd((-599L));
      range_Builder1.shift(244L);
      range1.equals(range_Builder4);
      Range.of((-128L));
      Range.of((-3368L));
      Range range3 = Range.of((-4228L));
      Range.ofLength(4294967295L);
      range0.intersection(range3);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.2855456616065446
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1161L, 1161L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Long long0 = new Long(1L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8505419228894615
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(0L);
      boolean boolean2 = range0.startsBefore(range2);
      assertTrue(range0.isEmpty());
      assertFalse(range2.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.719829316413796
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1549L;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 9223372036854774999L;
      long long2 = (-1665L);
      Range range1 = Range.of((-1665L), 1549L);
      range0.complement(range1);
      long long3 = (-1246L);
      long long4 = 3021L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854774999L, 3021L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.985193149843165
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range1 = Range.of((-2561L), 1549L);
      range0.startsBefore(range1);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range2 = Range.ofLength(1549L);
      Range.ofLength(9223372036854774999L);
      Range range3 = range0.intersection(range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range2));
      //  // Unstable assertion: assertNotSame(range3, range2);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6699829460104576
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Range range1 = Range.of(1L);
      range0.equals(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals(object6);
      Range range2 = Range.of(1L, 9223372036854775553L);
      Range.of(2461L);
      Range range3 = range0.intersection(range1);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range2));
      assertSame(range3, range0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.517696500984776
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-59L), (-59L));
      Range range1 = Range.of((-59L));
      List<Range> list0 = new LinkedList<Range>();
      range0.intersects(range1);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.068910803836612
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.8682593508966807
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.spliterator();
      range1.startsBefore(range0);
      Range range2 = Range.of(4294967295L);
      range2.endsBefore(range0);
      range0.intersects(range2);
      range2.isSubRangeOf(range2);
      Range range3 = Range.of(4294967295L, 4294967295L);
      range0.complement(range1);
      range3.isSubRangeOf(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 3279L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.323506266372055
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854775807L);
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.691913759133874
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.toString();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range0.complement(range1);
      Range range2 = Range.of((-3257L), (-1235L));
      range0.intersects(range0);
      Long long1 = new Long((-3257L));
      Long.remainderUnsigned((-1235L), (-1235L));
      Range.of((-1745L));
      // Undeclared exception!
      try { 
        range1.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1235 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.83235077333545
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483647L), (-2147483647L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.of((-2147483647L), (-2147483647L));
      Range range1 = Range.of((-2147483647L));
      Range range2 = Range.of((-2147483647L), (-2147483647L));
      range2.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.658403667297264
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      Range range1 = Range.of(2147483644L, 9223372036854772737L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      range1.equals(range0);
      Long long0 = new Long(9223372036854772737L);
      Long.remainderUnsigned(9223372036854775807L, 4294967295L);
      Range range2 = Range.of(2147483647L, 9223372036854772737L);
      Range range3 = range1.intersection(range0);
      Long long1 = new Long(1413L);
      range3.equals(long1);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=4.165311140322825
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(143L, 143L);
      Range range1 = Range.ofLength(143L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-518L), (-518L));
      long long0 = 4294967295L;
      Range range3 = Range.of(range_CoordinateSystem0, 700L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 700L, 785L);
      range1.endsBefore(range3);
      range1.equals(range0);
      range1.isSubRangeOf(range4);
      range4.complement(range0);
      Object object0 = new Object();
      range0.spliterator();
      Range range5 = Range.of(143L);
      range5.intersects(range2);
      // Undeclared exception!
      try { 
        Range.of(143L, (-518L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.379012944555068
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(1L);
      range0.equals(range1);
      Object object2 = new Object();
      Range.of(255L, 255L);
      Object object3 = new Object();
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-1810L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.085091664483793
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(36L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=4.125836839082834
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2058L);
      range_Builder0.copy();
      range_Builder1.shift(2058L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3368L), 2058L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range_Builder0.copy();
      range_Builder0.expandBegin(2251L);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-3368L));
      range0.complement(range1);
      Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range2 = Range.ofLength(1L);
      Range.Comparators.values();
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(2058L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-1L));
      range_Builder0.build();
      long long1 = 1993L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.191960957702376
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2120L);
      range_Builder0.expandBegin(2328L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.4866557654829595
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      Long long1 = new Long((-32L));
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(range0);
      Range range2 = Range.of((-9223372036854775808L));
      Range range3 = Range.of((-128L));
      range1.startsBefore(range3);
      range2.startsBefore(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(long0);
      range1.isSubRangeOf(range2);
      Range range4 = range2.asRange();
      assertSame(range2, range4);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.6874117164631603
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(4294967262L);
      Range range1 = Range.ofLength(4294967262L);
      range1.spliterator();
      Range range2 = Range.ofLength(4294967262L);
      boolean boolean0 = range2.endsBefore(range0);
      Range range3 = Range.of(4294967262L, 4294967262L);
      boolean boolean1 = range1.startsBefore(range3);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      range1.isEmpty();
      range2.isSubRangeOf(range2);
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.765606862717168
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      range0.isEmpty();
      Range range1 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      range1.complement(range0);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-423L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=4.014293583166991
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      range0.spliterator();
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range range2 = Range.of(0L, 4294967295L);
      range1.spliterator();
      range1.endsBefore(range2);
      boolean boolean1 = range1.intersects(range0);
      boolean boolean2 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 153L, 4294967295L);
      Range range4 = Range.of(9223372032559808513L);
      range3.equals(range4);
      Range range5 = Range.of((-1L));
      boolean boolean3 = range5.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      
      range5.isSubRangeOf(range0);
      Range range6 = range2.intersection(range3);
      //  // Unstable assertion: assertSame(range3, range6);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.465200003481608
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854772737L, 9223372036854772737L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.of(2766L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854772737L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=4.075053862070333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range range0 = Range.of((-352L));
      long long0 = (-1509L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 700L, 700L);
      Range.of((-1509L));
      range1.intersects(range0);
      Range.of(255L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(2050L);
      range_Builder0.shift(2147483649L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = range_Builder0.contractEnd(1294L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      range_Builder4.contractEnd((-1L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cE|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cE|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3346959524909843
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.228541593541635
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = (-1L);
      Range.of(0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-4677L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4678 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=4.126485034427558
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      long long0 = 9223372036854772737L;
      Range range1 = Range.of(2147483647L, 9223372036854772737L);
      range1.complement(range0);
      Range range2 = Range.of((-1269L));
      Range range3 = range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(2147483647L);
      Range range4 = Range.of((-2308L), 2147483647L);
      range4.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem1);
      Range.of(997L, 3796L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, 3597L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1010759194340936
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(36L);
      range_Builder0.expandBegin(36L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.728719296683266
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1470L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(0L, 0L);
      //  // Unstable assertion: assertNotSame(range3, range2);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.909638713266145
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1269L);
      Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1470L), 65535L);
      Range range1 = Range.of(65535L);
      range1.intersection(range0);
      Range range2 = Range.of((-1470L));
      range2.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 3845L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5308340531334736
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483647L), (-2147483647L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      String string0 = "max cluster distance can not be negative";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.max cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.634333401877392
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(1549L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1781L, 4849L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.3538605180052596
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(686L);
      Range range1 = Range.ofLength(686L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = range1.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.8819231451484466
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range.of((-352L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 700L, 700L);
      Range range0 = Range.of((-1509L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2454L), (-2419L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-352L), (-2454L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.293746051980492
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(1972L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1972L);
      range_Builder1.contractEnd(45L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.734846457799908
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(36L);
      range_Builder0.expandBegin(36L);
      range_Builder0.expandBegin(36L);
      Range range0 = Range.of((-1L), 2766L);
      Range range1 = Range.of((-1040L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.408275726120369
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.5888559380366565
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of((-1L), 2147483647L);
      Long long1 = new Long((-1L));
      range0.intersection(range0);
      range0.equals(range0);
      long long2 = 9223372036854775807L;
      long long3 = (-2341L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=4.039169040639649
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      range1.spliterator();
      Range range2 = Range.of(4294967295L, 4294967295L);
      range2.endsBefore(range0);
      range0.intersects(range2);
      range2.isSubRangeOf(range2);
      range1.equals(range0);
      Range range3 = Range.ofLength(4294967295L);
      Range range4 = Range.of(4294967295L);
      List<Range> list0 = range4.complement(range0);
      //  // Unstable assertion: assertSame(range4, range0);
      
      List<Range> list1 = range4.complementFrom(list0);
      List<Range> list2 = range2.complementFrom(list1);
      //  // Unstable assertion: assertEquals(4, list2.size());
      
      Range range5 = Range.of((-2174L));
      range5.intersects(range3);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      range_Builder0.expandBegin(1L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=4.149964764162725
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of((-352L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 700L, 700L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1387L), (-22L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483647L);
      Range range3 = range_Builder0.build();
      Range range4 = Range.of((-1270L), 2147483647L);
      range4.intersects(range2);
      range3.complement(range1);
      Range.of(0L);
      range3.complement(range0);
      range_Builder0.contractEnd((-1246L));
      long long0 = (-9223372036854775808L);
      range_Builder0.shift((-9223372036854775808L));
      range_Builder1.expandBegin((-1509L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.contractEnd(2147483647L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.654910801438511
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      range1.spliterator();
      Range range2 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.of(1850L);
      Range range3 = null;
      // Undeclared exception!
      try { 
        range2.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=4.201412513100786
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      range0.complement(range0);
      Range.of((-3257L), (-1235L));
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-1846L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(65163L);
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      range2.intersects(range1);
      long long0 = 7151120544509L;
      Range range3 = range_Builder0.build();
      Range.of(7151120544509L);
      range1.complement(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder1.shift((-3257L));
      range_Builder3.expandBegin((-3257L));
      range3.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1089L), 65163L);
      Range.ofLength(65163L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1846L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of(2260L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4926022300064097
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(3080L, 4294967295L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372034707289082L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1846L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = (-1023L);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, (-1023L), 255L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder1.copy();
      range_Builder4.expandBegin(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.9436448223085745
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      Range range1 = Range.of((-9223372036854775783L), (-9223372036854775783L));
      range0.complement(range1);
      Range range2 = Range.of((-3257L), (-1235L));
      range1.isSubRangeOf(range0);
      Range range3 = Range.of((-1846L));
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(65163L);
      Range range4 = range_Builder0.build();
      range4.intersects(range3);
      Range.of((-1846L));
      range3.complement(range2);
      range_Builder0.shift((-9223372036854775783L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd(32767L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.690570567638441
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      Range range1 = Range.of(2147483647L, 9223372036854772737L);
      range1.complement(range0);
      Long long0 = new Long(9223372036854772737L);
      Range range2 = Range.ofLength(2147483647L);
      range0.intersection(range2);
      assertTrue(range0.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.177532272612745
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483659L;
      Range.of(range_CoordinateSystem0, 2147483659L, 2147483659L);
      long long1 = 181L;
      long long2 = (-1717L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(255L, (-1717L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.4248346982479627
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.split(872L);
      Long long0 = new Long(1549L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.145998322976767
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.849331908646823
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range0.complement(range1);
      Range range2 = Range.of((-3257L), (-1235L));
      range0.intersects(range0);
      Range range3 = Range.of((-1846L));
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = 65163L;
      range_Builder1.expandBegin(65163L);
      long long2 = 809L;
      Range.of(809L);
      // Undeclared exception!
      try { 
        range2.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1235 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.80753723883193
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = 4294967329L;
      long long1 = 4294967295L;
      Range.of(4294967295L);
      long long2 = 693L;
      Range range0 = Range.of(693L, 4294967329L);
      Range range1 = Range.ofLength(4294967295L);
      range1.getBegin();
      // Undeclared exception!
      try { 
        range1.complement(range0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.5987457673767045
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 14L, 14L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      long long0 = range0.getEnd();
      assertEquals(14L, long0);
      
      Range range1 = Range.of(14L);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.182525797007716
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=4.228855194790972
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder3 = range_Builder0.shift((-331L));
      Range.Builder range_Builder4 = range_Builder3.shift((long) long0);
      range_Builder3.copy();
      range_Builder3.contractBegin(2L);
      range_Builder3.shift((-3368L));
      Range.Builder range_Builder5 = new Range.Builder(range1);
      List<Range> list0 = range2.complement(range0);
      range_Builder3.contractEnd((-599L));
      range_Builder1.shift(255L);
      range1.equals(range_Builder4);
      Range range3 = Range.of((-128L));
      range3.complementFrom(list0);
      Range.of((-3368L));
      Range range4 = Range.of((-4228L));
      range0.intersection(range4);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      range4.iterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.720002019048041
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-1498L), 2893L);
      range0.intersection(range1);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1097L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.9974982769813447
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      Range range1 = Range.of(range_CoordinateSystem0, (-1269L), 2147483647L);
      range1.complement(range0);
      boolean boolean0 = range1.equals(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      Long long0 = new Long(9223372036854772737L);
      Long.remainderUnsigned(9223372036854775807L, 4294967295L);
      Range.of(2147483647L, 9223372036854772737L);
      Range range2 = Range.of((-1269L), 9223372036854772737L);
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      Range range4 = range1.intersection(range2);
      assertSame(range4, range1);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.814069090787136
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range0.isSubRangeOf(range1);
      range0.complement(range1);
      long long0 = (-1235L);
      Range.of((-3275L), (-1235L));
      range0.intersects(range0);
      long long1 = (-1846L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3275L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.4395056728404345
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1470L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-2341L), (-1470L));
      range_Builder0.contractEnd((-2341L));
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775807L);
      range_Builder0.shift(9223372036854775553L);
      range_Builder0.expandEnd((-2341L));
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775553L, (-2341L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2342 would make range [9223372036854775552 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.822759913407631
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-1248L), 1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 65163L;
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2109L);
      Range range1 = range_Builder1.build();
      range1.intersects(range0);
      Range range2 = Range.of((-1248L));
      range0.complement(range2);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(65163L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.6416242099666314
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 18L, 18L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertSame(range2, range1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.532147042392702
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(2254L);
      Range range1 = Range.of(2254L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range1.split(1L);
      assertTrue(list0.contains(range0));
      assertSame(range1, range2);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.8000017633482095
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(4294967295L);
      range0.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.addAll((Collection<? extends Range>) linkedList1);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range0.split((-2853L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.773652485732989
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      range0.complement(range0);
      Range.of((-3257L), (-1235L));
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-1846L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long0 = 65163L;
      range_Builder0.expandBegin(65163L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-2418L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.820705106999691
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-1235L));
      long long0 = (-493L);
      Range.Builder range_Builder2 = range_Builder1.shift((-493L));
      Range.Builder range_Builder3 = range_Builder2.expandBegin((-1753L));
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_Builder3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.797432840570699
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(36L);
      range_Builder0.expandBegin(36L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3390L, 3390L);
      range0.complement(range1);
      long long0 = (-1851L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(36L, (-1851L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.6759440194602493
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483647L), (-2147483647L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of((-2147483647L));
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2100059332964115
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("D2iTt5BNN8[&+NK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.D2iTt5BNN8[&+NK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 785L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.992692878877002
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.getBegin();
      range0.complement(range1);
      Range range2 = Range.of((-3257L), (-1235L));
      range1.isSubRangeOf(range0);
      Range range3 = Range.of((-1846L));
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(65163L);
      Range range4 = range_Builder1.build();
      range4.intersects(range3);
      Range.of((-1846L));
      range3.complement(range2);
      range_Builder1.shift(9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      long long0 = 32767L;
      range_Builder2.contractEnd(32767L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=4.048830471929021
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      long long1 = (-128L);
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(693L, 4294967295L);
      range0.getBegin();
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of((-128L), 4294967295L);
      range2.isSubRangeOf(range1);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1436L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.628608466521213
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-9223372036854710272L), 1L);
      Object object2 = new Object();
      long long0 = (-9223372026117357572L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.360208914853392
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      range0.spliterator();
      Range.of((-1L));
      range0.getLength();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1973L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.431087320806741
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-2752L), (-263L));
      range0.split(1727L);
      Range.Comparators.valueOf("LONGEST_TO_SHORTEST");
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.299224376350122
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(1284L);
      long long0 = range0.getLength();
      assertEquals(1284L, long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.572778202351342
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1993L);
      long long0 = (-1L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder2.expandBegin(1L);
      range0.getEnd(range_CoordinateSystem0);
      range_Builder0.build();
      range_Builder2.shift(1953L);
      Long long1 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 1170L;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem1, 2737L, 1170L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.541840373565085
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(36L);
      range_Builder0.expandBegin(36L);
      range_Builder0.build();
      Range range0 = Range.of(36L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.263155040283282
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.7034811541566897
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3080L, 4294967295L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1844L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 1846L, 3080L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = range_Builder3.copy();
      range_Builder4.expandBegin(2543L);
      range0.getEnd(range_CoordinateSystem0);
      range_Builder3.build();
      range_Builder5.shift(1993L);
      Long long0 = new Long((-1L));
      Range.Builder range_Builder6 = new Range.Builder(range_CoordinateSystem0, 1832L, 1953L);
      range_Builder3.shift(814L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.5790229647557448
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-9223372036854775783L));
      range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(1993L);
      Range.Builder range_Builder2 = new Range.Builder();
      long long0 = 2147483645L;
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(2147483645L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long1 = 255L;
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.618145623384811
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-9223372036854710272L), 1L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-1851L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=4.040743982659329
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2058L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(2058L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3368L), 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range_Builder0.copy();
      range_Builder0.expandBegin(2251L);
      range_Builder1.expandEnd(9223372036854775807L);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(127L);
      range0.complement(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.4528437656354645
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of((-1L), 1L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range1 = Range.of(1L, 1L);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("must be >=0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1170L);
      range_Builder0.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774640 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.283868512759584
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775552L, (-588L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -588 would make range [9223372036854775552 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967263L, 4294967263L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.301615576732714
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(1L, 9223372036854775807L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.of(974L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.301215416668689
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-1L), 1L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.3536274010794576
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of((-16L));
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2274L, (-16L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.7418652692524446
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483607L), (-2147483607L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 346L, 346L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of((-231L), 812L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.408641287701287
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1270L), 4294967295L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
  }
}
