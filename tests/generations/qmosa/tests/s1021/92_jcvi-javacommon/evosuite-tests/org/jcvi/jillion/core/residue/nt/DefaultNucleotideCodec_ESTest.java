/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 02:24:03 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      byte byte0 = (byte) (-11);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-11), (Iterator<Nucleotide>) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3591645029053696
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultNucleotideCodec0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.test(defaultNucleotideCodec1);
      predicate0.and(predicate2);
      predicate0.or(predicate2);
      predicate0.negate();
      predicate0.negate();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2057);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 2057);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 2509);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 671);
      assertEquals(670, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray0);
      int int1 = defaultNucleotideCodec5.getNumberOfGaps(byteArray0);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, 1);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec6.getGappedOffsetFor(byteArray0, 341);
      assertFalse(int2 == int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGapOffsets(byteArray0);
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, (-1529));
      int int3 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1529));
      assertEquals((-1529), int3);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3752739200291573
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultNucleotideCodec0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.test(defaultNucleotideCodec1);
      predicate0.and(predicate2);
      predicate0.or(predicate2);
      predicate0.negate();
      predicate0.negate();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2057);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, 2057);
      assertEquals(2056, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 2509);
      assertEquals(0, int1);
      
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, 0);
      assertTrue(boolean0);
      
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) linkedList1);
      assertEquals(4, byteArray1.length);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.toString(byteArray0);
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("-", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5134024482728456
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 843);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, 2509);
      assertEquals(2508, int0);
      
      int int1 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 2509);
      defaultNucleotideCodec0.isGap(byteArray0, 5421);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.toString(byteArray0);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 1493967103);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec5.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec6.getUngappedOffsetFor(byteArray0, 0);
      assertFalse(int2 == int1);
      
      defaultNucleotideCodec5.iterator(byteArray1);
      assertEquals(5, byteArray1.length);
      
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec7.getUngappedLength(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.088850419083402
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 825);
      defaultNucleotideCodec0.isGap(byteArray2, 824);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1175849131);
      byteArray0[0] = (byte)102;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, 5785);
      byte byte0 = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte byte1 = (byte) (-97);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5400585777026716
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      linkedList0.add(nucleotide1);
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide2 = Nucleotide.NotAdenine;
      nucleotideArray0[1] = nucleotide2;
      Nucleotide nucleotide3 = Nucleotide.Amino;
      Nucleotide nucleotide4 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide4);
      linkedList0.removeLast();
      nucleotideArray0[2] = nucleotide3;
      Nucleotide nucleotide5 = Nucleotide.NotThymine;
      nucleotideArray0[3] = nucleotide5;
      Nucleotide nucleotide6 = Nucleotide.Adenine;
      nucleotideArray0[4] = nucleotide6;
      linkedList0.toArray(nucleotideArray0);
      linkedList0.addFirst(nucleotide0);
      Nucleotide nucleotide7 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide7.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (byte)2);
      defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(nucleotideArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = null;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6250905601093946
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      nucleotideArray0[1] = nucleotide1;
      Nucleotide nucleotide2 = Nucleotide.Amino;
      Nucleotide nucleotide3 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide3);
      linkedList0.removeLast();
      nucleotideArray0[2] = nucleotide2;
      Nucleotide nucleotide4 = Nucleotide.NotThymine;
      nucleotideArray0[3] = nucleotide4;
      Nucleotide nucleotide5 = Nucleotide.Adenine;
      nucleotideArray0[4] = nucleotide5;
      linkedList0.toArray(nucleotideArray0);
      linkedList0.addFirst(nucleotide0);
      Nucleotide nucleotide6 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide6.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (byte)2);
      Nucleotide nucleotide7 = Nucleotide.Unknown;
      byte[] byteArray2 = defaultNucleotideCodec1.encode(nucleotide7);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray2, (byte)2);
      Range range0 = Range.of((long) 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.042141810852304
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotideArray0[1] = nucleotide1;
      Nucleotide nucleotide2 = Nucleotide.Amino;
      Nucleotide nucleotide3 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide3);
      nucleotideArray0[2] = nucleotide2;
      Nucleotide nucleotide4 = Nucleotide.Adenine;
      nucleotideArray0[4] = nucleotide4;
      linkedList0.toArray(nucleotideArray0);
      linkedList0.addFirst(nucleotide0);
      Nucleotide nucleotide5 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide5.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("GT", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (-507));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-10)}, byteArray1);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1247));
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      byte byte0 = (byte) (-5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-147L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (long) (byte) (-5), (-147L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (-1725));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-59);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-1099825403L), long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3744287378605162
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)12;
      Range.ofLength((byte)15);
      byteArray0[1] = (byte) (-79);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = null;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (-2257));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1256562263262744
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.addFirst(nucleotide0);
      linkedList0.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate0.or(predicate5);
      Predicate<Object> predicate6 = predicate5.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate0.test("must be >=0");
      predicate1.or(predicate0);
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      predicate9.negate();
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      predicate5.negate();
      Byte byte0 = new Byte((byte)77);
      predicate8.test(byte0);
      Predicate<Object> predicate10 = predicate5.or(predicate4);
      predicate10.and(predicate7);
      predicate8.negate();
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)77);
      Integer.valueOf((-1057));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 5);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-35)}, byteArray0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0593985424843484
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-53));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-843));
      byteArray0[4] = (byte)10;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte) (-40);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte) (-40);
      byteArray2[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.453339125826352
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList0.addFirst(nucleotide0);
      linkedList0.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.negate();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1493967103);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      nucleotideArray0[0] = nucleotide0;
      nucleotideArray0[1] = nucleotide1;
      nucleotideArray0[3] = nucleotide0;
      linkedList0.toArray(nucleotideArray0);
      Nucleotide nucleotide2 = Nucleotide.Adenine;
      linkedList0.addFirst(nucleotide2);
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide3 = Nucleotide.Keto;
      defaultNucleotideCodec4.encode(nucleotide3);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getUngappedOffsetFor(byteArray0, (-2146573310));
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-38);
      byteArray2[1] = (byte)114;
      byteArray2[2] = (byte)11;
      byteArray2[3] = (byte)13;
      byteArray2[4] = (byte) (-113);
      byteArray2[5] = (byte)91;
      Range range0 = Range.of((long) (byte)91);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.iterator(byteArray2, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4460780376549276
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 2509);
      assertFalse(boolean0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      int int2 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      assertTrue(int2 == int0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide1);
      linkedList0.removeLast();
      linkedList0.toArray(nucleotideArray0);
      Nucleotide nucleotide2 = Nucleotide.NotGuanine;
      linkedList0.addFirst(nucleotide2);
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray1);
      assertEquals("AC", string0);
      assertEquals(5, byteArray1.length);
      
      int int3 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, 16);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-112)}, byteArray2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.46196313812398
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.addFirst(nucleotide0);
      linkedList0.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-35)}, byteArray0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.test(predicate2);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      predicate0.test("must be >=0");
      Predicate<Object> predicate5 = predicate1.or(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate3.and(predicate2);
      predicate0.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate1);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate.isEqual((Object) predicate7);
      Byte byte0 = new Byte((byte)77);
      predicate6.test(byte0);
      Predicate<Object> predicate11 = predicate2.or(predicate1);
      Predicate<Object> predicate12 = predicate0.and(predicate8);
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate13 = predicate6.negate();
      predicate13.or(predicate10);
      predicate11.and(predicate7);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) linkedList0);
      predicate12.and(predicate14);
      predicate1.or(predicate9);
      predicate11.and(predicate12);
      predicate11.and(predicate2);
      predicate13.negate();
      Integer integer0 = new Integer((-1078));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList1.descendingIterator();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((-1), iterator0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0}, byteArray1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.041881215988314
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray1);
      
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)29}, byteArray2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-111);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[5];
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-13));
      assertEquals(0, int0);
      
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 2);
      assertEquals(2, int1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0951889557099985
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotideArray0[1] = nucleotide1;
      UnaryOperator<Nucleotide> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Nucleotide nucleotide2 = Nucleotide.Amino;
      Nucleotide nucleotide3 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide3);
      nucleotideArray0[2] = nucleotide2;
      Nucleotide nucleotide4 = Nucleotide.Adenine;
      nucleotideArray0[4] = nucleotide4;
      linkedList0.toArray(nucleotideArray0);
      linkedList0.addFirst(nucleotide0);
      Nucleotide nucleotide5 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide5.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (-507));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2 corresponds to encodedIndex 5  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[9];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 8);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      int int0 = 1073741824;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7420307956890797
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)46;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-226));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5065595170407526
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)12;
      Range.ofLength((byte)15);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Integer integer0 = new Integer(2702);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-109);
      Integer integer1 = new Integer((byte) (-109));
      Range range0 = Range.ofLength(774L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) 0, (long) (byte)68);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 773 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.157440404345143
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate0.test(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      predicate0.test("must be >=0");
      Predicate<Object> predicate6 = predicate1.or(predicate0);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate2);
      predicate0.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate.isEqual((Object) predicate8);
      Byte byte0 = new Byte((byte)77);
      predicate7.test(byte0);
      Predicate<Object> predicate12 = predicate3.or(predicate1);
      Predicate<Object> predicate13 = predicate0.and(predicate9);
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate14 = predicate7.negate();
      predicate14.or(predicate11);
      predicate12.and(predicate8);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) linkedList0);
      predicate13.and(predicate15);
      predicate1.or(predicate10);
      predicate12.and(predicate13);
      predicate12.and(predicate2);
      predicate14.negate();
      Integer integer0 = new Integer((-1078));
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-48)}, byteArray0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4060288023805514
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-1063));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.808463885562474
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)2;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotideArray0[1] = nucleotide1;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2509, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4628897520185378
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      assertTrue(int1 == int0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotideArray0[1] = nucleotide1;
      Nucleotide nucleotide2 = Nucleotide.Amino;
      Nucleotide nucleotide3 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide3);
      nucleotideArray0[2] = nucleotide2;
      linkedList0.toArray(nucleotideArray0);
      Nucleotide nucleotide4 = Nucleotide.Pyrimidine;
      linkedList0.addFirst(nucleotide4);
      Set<Nucleotide> set0 = nucleotide2.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray0);
      assertEquals("", string0);
      
      int int2 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 0);
      assertEquals(0, int2);
      
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.of(0L, 0L);
      defaultNucleotideCodec1.iterator(byteArray2, range0);
      String string1 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("AC", string1);
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.581908534707136
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Integer integer0 = new Integer(2702);
      int int0 = (-507);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[3] = (byte)118;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 11);
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-109);
      Integer integer1 = new Integer((byte) (-109));
      Range range0 = Range.of(range_CoordinateSystem0, 270L, 774L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) 0, (long) (byte)68);
      range0.getLength();
      range1.getLength();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)116;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1183));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2072293802278047
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-128);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray0[2] = (byte)84;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)15;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[6] = (byte) (-39);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)112;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Integer integer0 = new Integer(2702);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-109);
      Integer integer1 = new Integer((byte) (-109));
      Range range0 = Range.of((long) (-507), (long) (byte) (-109));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) 0, (long) (byte)68);
      Range.ofLength(0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -507 .. -109 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Integer integer0 = new Integer(2702);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-109);
      Integer integer1 = new Integer((byte) (-109));
      Range range0 = Range.of(range_CoordinateSystem1, 270L, 774L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (long) 0, (long) (byte)68);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 270 .. 773 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(8);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 87);
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      byte byte0 = (byte) (-5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      int int0 = 84;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      Integer integer0 = new Integer(2702);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-109);
      Integer integer1 = new Integer((byte) (-109));
      Range range0 = Range.of(range_CoordinateSystem1, 270L, 774L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 270 .. 773 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.addFirst((Nucleotide) null);
      linkedList0.add(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-88);
      defaultNucleotideCodec0.decode(byteArray0, 3L);
      byte[] byteArray1 = new byte[5];
      defaultNucleotideCodec0.isGap(byteArray1, 2509);
      byte byte0 = (byte)13;
      Integer integer0 = new Integer((-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (long) (byte)13, (-147L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.364626802986374
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)109;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-26));
      byteArray0[6] = (byte)12;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)116;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.decode(byteArray0, 9223372036854775807L);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2332);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2005402885, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(87, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7322147613056647
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)9;
      defaultNucleotideCodec0.decode(byteArray0, (byte)1);
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[4] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 114 corresponds to encodedIndex 61  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.090752872955738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.addFirst(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate0.test(predicate2);
      Predicate<Object> predicate6 = predicate0.or(predicate5);
      predicate5.or(predicate0);
      predicate0.test("must be >=0");
      Predicate<Object> predicate7 = predicate1.or(predicate0);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate2);
      predicate5.negate();
      Predicate<Object> predicate11 = predicate0.and(predicate1);
      predicate4.and(predicate9);
      Predicate.isEqual((Object) predicate9);
      Byte byte0 = new Byte((byte)77);
      Byte.toUnsignedInt((byte)77);
      predicate8.test(byte0);
      Predicate<Object> predicate12 = predicate5.or(predicate4);
      Predicate<Object> predicate13 = predicate0.and(predicate10);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate14 = predicate8.negate();
      predicate12.and(predicate9);
      predicate4.or(predicate11);
      predicate12.and(predicate13);
      predicate12.and(predicate2);
      predicate14.negate();
      Integer integer0 = new Integer((-1078));
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-48)}, byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.267907755298219
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.addFirst(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Byte byte0 = new Byte((byte)87);
      Byte byte1 = new Byte((byte)77);
      Byte byte2 = new Byte((byte)77);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.parallelStream();
      linkedList0.poll();
      linkedList1.parallelStream();
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (int) byte2);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 32);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.267907755298219
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList0.addFirst(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      String string0 = "must be >=0";
      Byte byte0 = new Byte((byte)87);
      Byte byte1 = new Byte((byte)77);
      Byte byte2 = new Byte((byte)77);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.parallelStream();
      linkedList0.poll();
      linkedList1.parallelStream();
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (int) byte2);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 32);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.509604213180078
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)92;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-99);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 8);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-126);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-473L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -473
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5396658432893187
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 2509);
      assertFalse(boolean0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-507));
      assertTrue(int1 == int0);
      
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotideArray0[1] = nucleotide1;
      Nucleotide nucleotide2 = Nucleotide.Amino;
      Nucleotide nucleotide3 = Nucleotide.NotCytosine;
      linkedList0.add(0, nucleotide3);
      nucleotideArray0[2] = nucleotide2;
      Nucleotide nucleotide4 = Nucleotide.NotThymine;
      nucleotideArray0[3] = nucleotide4;
      Nucleotide nucleotide5 = Nucleotide.Adenine;
      nucleotideArray0[4] = nucleotide5;
      linkedList0.toArray(nucleotideArray0);
      linkedList0.addFirst(nucleotide0);
      Nucleotide nucleotide6 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide6.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      int int2 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (byte)0);
      assertEquals(0, int2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray1);
      
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide6);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)80}, byteArray2);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte byte0 = (byte) (-5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-147L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (long) (byte) (-5), (-147L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-70);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[5];
      defaultNucleotideCodec0.isGap(byteArray1, 2509);
      byte byte0 = (byte)13;
      Integer integer0 = new Integer((-507));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (long) (byte)13, (-147L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 2509);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 5;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)113;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6286003732844097
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)25;
      defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)0);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)2;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 2509);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (-507));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte byte0 = (byte)42;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-408), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2752032110439444
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[1] = (byte)33;
      byteArray0[1] = (byte)1;
      byteArray0[0] = (byte)114;
      byteArray0[3] = (byte)9;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)1);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[4] = (byte)15;
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      assertSame(nucleotide1, nucleotide0);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-350));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1073741823), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)50;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2101, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }
}
