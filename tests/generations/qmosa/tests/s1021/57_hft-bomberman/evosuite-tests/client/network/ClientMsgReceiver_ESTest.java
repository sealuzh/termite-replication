/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:26:09 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import client.view.GameCanvas;
import java.awt.AWTEventMulticaster;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.InputMethodListener;
import java.awt.event.WindowListener;
import java.net.Socket;
import java.sql.ClientInfoStatus;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.util.HashMap;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.Box;
import javax.swing.JInternalFrame;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import messages.global.GlobalStateMsg;
import messages.round.BombMoveMsg;
import messages.session.SessionParticipationMsg;
import messages.session.SessionStateMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import server.ExplosionBounds;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ActionListener) aWTEventMulticaster0, (ActionListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, false);
      JInternalFrame jInternalFrame1 = new JInternalFrame();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame1.getDesktopIcon();
      jInternalFrame_JDesktopIcon0.transferFocusDownCycle();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      SessionStateMsg sessionStateMsg0 = new SessionStateMsg(1510);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(sessionStateMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Integer integer0 = new Integer((-665));
      Box.createVerticalBox();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalStateMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      int int0 = 1510;
      GameCanvas gameCanvas0 = new GameCanvas(1510, 603);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      ExplosionBounds explosionBounds0 = new ExplosionBounds(603, 0, 3048, 603);
      Vector<Integer> vector0 = new Vector<Integer>();
      MockThread mockThread0 = new MockThread("Unknown message type: ");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Unknown message type: ");
      Thread[] threadArray0 = new Thread[5];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, threadArray0[1], "Unknown message type: ");
      threadArray0[3] = (Thread) mockThread2;
      threadArray0[4] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockThread.interrupted();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      String string0 = "";
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(false, (-1942), "Unknown message type: ");
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(sessionParticipationMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.session.SessionParticipationMsg", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BomberClient bomberClient0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, (BomberClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      int int0 = 603;
      GameCanvas gameCanvas0 = new GameCanvas(1510, 603);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.setItem(gameCanvas0);
      AWTEventMulticaster.add((FocusListener) metalComboBoxEditor_UIResource0, (FocusListener) metalComboBoxEditor_UIResource0);
      gameCanvas0.getLocation();
      Box.createVerticalBox();
      System.setCurrentTimeMillis(1L);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      mockSocket0.getSendBufferSize();
      GameCanvas gameCanvas0 = new GameCanvas(1510, 131072);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ActionListener) aWTEventMulticaster0, (ActionListener) aWTEventMulticaster0);
      gameCanvas0.removeInputMethodListener(aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) aWTEventMulticaster7);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.getLayoutOrigin();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Z>&4t_k)!khV");
      BombMoveMsg bombMoveMsg0 = new BombMoveMsg((-1), (int[]) null, (int[]) null, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLNonTransientConnectionException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.getLayoutOrigin();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "m8H [D>@Jk&&f");
      sQLNonTransientConnectionException0.setNextException((SQLException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Could not read configuration file from URL [", "1%s':0b`ZHV1", 0, (Throwable) null);
      sQLTransactionRollbackException0.getSuppressed();
      sQLNonTransientConnectionException0.getStackTrace();
      int int0 = (-2837);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "-database.0", (-2837), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("-database.0", "", (-2837));
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionException2.setNextException(sQLTransactionRollbackException1);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("RY5^%?2(4|>C", "");
      sQLNonTransientConnectionException3.getSuppressed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("bottom: ", "bottom: ", sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException1);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }
}
