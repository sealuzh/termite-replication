/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:24:09 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.Sourcable;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("???");
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3081.613407857;
      doubleArray1[1] = 1029.3357588819865;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3081.613407857;
      doubleArray2[1] = 3081.613407857;
      doubleArray2[2] = 1029.3357588819865;
      doubleArray2[3] = 3081.613407857;
      doubleArray2[4] = 3081.613407857;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-476.053);
      doubleArray3[1] = 3081.613407857;
      doubleArray3[2] = 3081.613407857;
      doubleArray3[3] = 1029.3357588819865;
      doubleArray3[4] = 3081.613407857;
      doubleArray3[5] = 1029.3357588819865;
      doubleArray3[6] = 3081.613407857;
      doubleArray3[7] = 3081.613407857;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1029.3357588819865;
      doubleArray4[1] = 1029.3357588819865;
      doubleArray4[2] = 3081.613407857;
      doubleArray4[3] = 3081.613407857;
      doubleArray4[4] = (-476.053);
      doubleArray4[5] = (-476.053);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 501.8976029296857;
      doubleArray5[3] = 1029.3357588819865;
      doubleArray5[4] = (-476.053);
      doubleArray5[5] = 1601.4119;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 3081.613407857;
      doubleArray5[8] = 1029.3357588819865;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1601.4119;
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(2.0, (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance2 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance3 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance4 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance5 = new DenseInstance((-2232), (double[]) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      Properties properties5 = new Properties();
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.814720189023951
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance((-1994091956), (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance((-1994091956), (double[]) null);
      DenseInstance denseInstance2 = new DenseInstance(denseInstance1);
      DenseInstance denseInstance3 = new DenseInstance(2.0, (double[]) null);
      denseInstance0.copy();
      DenseInstance denseInstance4 = new DenseInstance(0.0, (double[]) null);
      denseInstance4.setWeight(995.3427360113);
      DenseInstance denseInstance5 = new DenseInstance((-957.321253), (double[]) null);
      denseInstance5.setWeight((-1994091956));
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      discretize0.listOptions();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      boolean boolean0 = discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize(":Qj^eGtna:_");
      Discretize discretize1 = new Discretize();
      discretize1.m_UseBinNumbers = true;
      discretize1.setMakeBinary(true);
      discretize1.getCapabilities();
      discretize1.getUseBinNumbers();
      assertTrue(discretize1.getMakeBinary());
      assertTrue(discretize1.getUseBinNumbers());
      
      discretize0.getAttributeIndices();
      discretize0.getBinRangesString((-2122219132));
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.460877603278201
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("Bin number optimization in conjunction with equal-frequency binning not implemented.");
      SystemInUtil.addInputLine("Bin number optimization in conjunction with equal-frequency binning not implemented.");
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      discretize0.setUseEqualFrequency(true);
      discretize0.listOptions();
      discretize0.getBinRangesString(70);
      discretize0.listOptions();
      discretize0.getBins();
      discretize0.getUseEqualFrequency();
      discretize0.binsTipText();
      discretize0.getOptions();
      discretize0.m_MakeBinary = true;
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2013265917));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4136684253933156
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("[$pdC");
      discretize0.setMakeBinary(true);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setUseEqualFrequency(true);
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getBinRangesString((-1322));
      discretize0.setOutputFormat();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      Discretize discretize1 = new Discretize();
      discretize1.setMakeBinary(true);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties8);
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("v@#0Y:Za82*}");
      discretize0.m_MakeBinary = true;
      discretize0.setInvertSelection(true);
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[7];
      int int0 = (-2021161078);
      intArray0[0] = (-2021161078);
      intArray0[2] = (-1908874351);
      intArray0[3] = 7;
      String[] stringArray0 = new String[8];
      stringArray0[1] = "No input instance format defined";
      stringArray0[1] = "v@#0Y:Za82*}";
      stringArray0[2] = "v@#0Y:Za82*}";
      stringArray0[4] = "8_";
      stringArray0[5] = "v@#0Y:Za82*}";
      stringArray0[6] = "v@#0Y:Za82*}";
      stringArray0[7] = "v@#0Y:Za82*}";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      properties0.replace((Object) protectedProperties0, (Object) properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 2281);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.close();
      properties0.load((InputStream) byteArrayInputStream0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a:xg5g+xU5PnRku");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Discretize discretize0 = new Discretize("7rA}4k");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D?bz0\"(`9--QOi$";
      stringArray0[1] = "7rA}4k";
      stringArray0[2] = "a:xg5g+xU5PnRku";
      stringArray0[3] = "-";
      stringArray0[4] = "a:xg5g+xU5PnRku";
      stringArray0[5] = "7rA}4k";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-21);
      doubleArray0[1] = (double) (byte) (-21);
      doubleArray0[2] = (-262.4250218735039);
      Discretize discretize0 = new Discretize("bKc[5RVF}");
      discretize0.setBins((byte) (-21));
      discretize0.setFindNumBins(true);
      discretize0.getUseBinNumbers();
      discretize0.getCapabilities();
      discretize0.setUseEqualFrequency(true);
      Discretize discretize1 = new Discretize("test");
      discretize1.invertSelectionTipText();
      Discretize discretize2 = new Discretize();
      discretize2.setUseBinNumbers(false);
      discretize1.setUseBinNumbers(true);
      discretize0.getBins();
      assertEquals((-21), discretize0.getBins());
      
      discretize2.setUseEqualFrequency(false);
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)120;
      StringReader stringReader0 = new StringReader("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)120;
      doubleArray1[1] = (double) (byte)6;
      doubleArray1[2] = (double) (byte) (-21);
      doubleArray1[1] = (double) (byte)111;
      doubleArray1[4] = (double) (byte)111;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (byte)111;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) (byte)111;
      doubleArray3[1] = (double) (byte) (-21);
      doubleArray3[2] = (double) (byte) (-21);
      doubleArray3[3] = (double) (byte)120;
      doubleArray3[4] = (double) (byte)120;
      doubleArray3[5] = (double) 3547;
      doubleArray3[6] = (double) (byte) (-21);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[1] = (double) (byte)6;
      doubleArray4[2] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray1[2] = 2.0;
      doubleArray6[1] = (double) (byte)120;
      doubleArray6[2] = 2.0;
      doubleArray6[3] = (double) (byte)6;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (double) (byte)120;
      doubleArray7[1] = (double) (byte)111;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (double) (byte)6;
      doubleArray8[1] = (double) (byte)111;
      doubleArray8[2] = (double) (byte)111;
      doubleArray8[3] = (double) (byte)120;
      doubleArray8[4] = (double) (byte)6;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (double) (byte)111;
      doubleArray9[1] = (double) (byte)111;
      doubleArray9[2] = (double) (byte)6;
      doubleArray9[3] = (double) (byte)6;
      doubleArray9[4] = (double) (byte) (-21);
      doubleArray9[5] = (double) (byte)111;
      doubleArray9[6] = (double) 3547;
      doubleArray9[7] = (double) (byte)120;
      doubleArray9[8] = (double) (byte)120;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(3547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3547
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5158519776570625
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "thXgy@xd");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringReader stringReader0 = new StringReader("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)120;
      doubleArray1[1] = (double) (byte)6;
      doubleArray1[2] = (double) (byte) (-21);
      doubleArray1[1] = (double) (byte)111;
      doubleArray1[4] = (double) (byte)111;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (byte)111;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) (byte)111;
      doubleArray3[1] = (double) (byte) (-21);
      doubleArray3[2] = (double) (byte) (-21);
      doubleArray3[3] = (double) (byte)120;
      doubleArray3[4] = (double) (byte)120;
      doubleArray3[5] = (double) (byte)111;
      doubleArray3[6] = (double) (byte) (-21);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[1] = (double) (byte)6;
      doubleArray4[2] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray1[2] = 2.0;
      doubleArray6[1] = (double) (byte)120;
      doubleArray6[2] = 2.0;
      doubleArray6[3] = (double) (byte)6;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (double) (byte)120;
      doubleArray7[1] = (double) (byte)111;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (double) (byte)6;
      doubleArray8[1] = (double) (byte)111;
      doubleArray8[2] = (double) (byte)111;
      doubleArray8[3] = (double) (byte)120;
      doubleArray8[4] = (double) (byte)6;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (double) (byte)111;
      doubleArray9[1] = (double) (byte)111;
      doubleArray9[2] = (double) (byte)6;
      doubleArray9[3] = (double) (byte)6;
      doubleArray9[4] = (double) (byte) (-21);
      doubleArray9[5] = 2513.561465051374;
      doubleArray9[6] = (double) (byte)111;
      doubleArray9[7] = (double) (byte)120;
      doubleArray9[8] = (double) (byte)120;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)6);
      assertEquals(10, discretize0.getBins());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5158519776570625
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)111;
      byteArray0[3] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      StringReader stringReader0 = new StringReader("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is s&t then;the KB option wi3l be ignored.");
      Discretize discretize0 = new Discretize("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is s&t then;the KB option wi3l be ignored.");
      double[][] doubleArray0 = new double[24][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte) (-21);
      doubleArray1[1] = (double) (byte)111;
      doubleArray1[2] = (double) (byte) (-21);
      doubleArray1[4] = (double) (byte)111;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[20];
      doubleArray2[1] = (double) (byte) (-21);
      doubleArray2[2] = (double) (byte) (-21);
      doubleArray2[3] = (double) (byte) (-21);
      doubleArray2[4] = (double) (byte) (-21);
      doubleArray2[13] = (double) (byte)120;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[1] = (double) (byte)6;
      doubleArray3[2] = (double) (byte)6;
      doubleArray0[3] = doubleArray2;
      doubleArray0[4] = doubleArray2;
      double[] doubleArray4 = new double[4];
      doubleArray4[2] = 2.0;
      doubleArray0[5] = doubleArray4;
      double[] doubleArray5 = new double[2];
      double[] doubleArray6 = new double[5];
      doubleArray1[0] = (double) (byte) (-21);
      doubleArray6[1] = (double) (byte)111;
      doubleArray6[2] = (double) (byte)111;
      doubleArray6[3] = (double) (byte)120;
      doubleArray6[4] = (double) (byte)120;
      doubleArray0[7] = doubleArray1;
      double[] doubleArray7 = new double[9];
      doubleArray7[1] = (double) (byte)111;
      doubleArray7[2] = (double) (byte) (-21);
      doubleArray2[0] = (double) (byte)6;
      doubleArray7[4] = (double) (byte) (-21);
      doubleArray7[6] = (double) (byte)111;
      doubleArray6[0] = (double) (byte) (-21);
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)6);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'B1of2'";
      stringArray0[1] = "not found";
      stringArray0[2] = "\nOriginal dataset:\n";
      stringArray0[3] = "'B1of2'";
      stringArray0[4] = "9";
      stringArray0[5] = "|H";
      String string0 = "q/cM";
      stringArray0[6] = "q/cM";
      stringArray0[7] = "-B";
      stringArray0[8] = "V9aspB_#Oy?k u&?k%";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"V9aspB_#Oy?k u&?k%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("[$pdu^C");
      Filter.makeCopy(discretize0);
      discretize0.setMakeBinary(true);
      discretize0.getRevision();
      discretize0.getAttributeIndices();
      discretize0.setUseEqualFrequency(false);
      discretize0.getBinRangesString((-1310));
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2063.172;
      doubleArray0[1] = 2063.172;
      doubleArray0[2] = (double) (-1310);
      doubleArray0[1] = (double) (-1310);
      doubleArray0[4] = 250.4063;
      doubleArray0[5] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(250.4063, doubleArray0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-526.9426762496), intArray0, (-2232));
      binarySparseInstance0.dataset();
      binarySparseInstance0.setWeight((-2232));
      SystemInUtil.addInputLine((String) null);
      Discretize discretize1 = new Discretize("@data");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(2.0, (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance(2.0, (double[]) null);
      DenseInstance denseInstance2 = new DenseInstance(denseInstance1);
      DenseInstance denseInstance3 = new DenseInstance((-2232), (double[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2232);
      doubleArray0[2] = (double) (-2232);
      DenseInstance denseInstance4 = new DenseInstance(2.0, doubleArray0);
      DenseInstance denseInstance5 = new DenseInstance(0.0, (double[]) null);
      denseInstance1.setWeight((-2232.0));
      DenseInstance denseInstance6 = new DenseInstance((-21.340941349743645), (double[]) null);
      DenseInstance denseInstance7 = new DenseInstance(denseInstance3);
      Discretize discretize0 = new Discretize("\tInvert matching sense of column indexes.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("Capacity has to be positive!", arrayList0, (-2232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2232
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = new Range();
      Range range2 = new Range();
      range0.toString();
      Range range3 = new Range("N]oyN'J*p5=");
      range2.toDisplay();
      Range range4 = new Range("$%*r/tBNu[{p7;.R@4");
      Range range5 = new Range();
      Range range6 = new Range("%[E)4bo7ZNZMnv,[r|Q");
      Range range7 = new Range();
      Range range8 = new Range();
      int[] intArray0 = new int[4];
      intArray0[0] = 3101;
      Range.indicesToRangeList(intArray0);
      range6.getInvert();
      Range range9 = new Range();
      range9.getRanges();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(19);
      Discretize discretize0 = new Discretize(";L]RO9::@X!;");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.898696687918302
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.setOutputFormat();
      discretize0.setInvertSelection(false);
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3166.6576179806;
      SparseInstance sparseInstance0 = new SparseInstance(3166.6576179806, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2232);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, intArray0, (-2232));
      binarySparseInstance1.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(241L);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.162650153405063
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = true;
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      Sourcable sourcable0 = null;
      String string0 = "Y'P3KEIqcCg-W7/,,";
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.PotentialClassIgnorer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("k6j.myD");
      discretize0.setOutputFormat();
      Discretize discretize1 = new Discretize("k6j.myD");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "oB1qy]o/abqtCh";
      stringArray0[1] = "not found";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "7J:p>>#_g0A";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "-R";
      stringArray0[6] = "MZDqsO_#5ch)6;'9";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: oB1qy]o/abqtCh not found weka/core/Capabilities.props 7J:p>>#_g0A weka/core/Capabilities.props 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7828802543858893
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance((-1994091956), (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      DenseInstance denseInstance2 = new DenseInstance(0.0, (double[]) null);
      DenseInstance denseInstance3 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance4 = new DenseInstance((-2232), (double[]) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-B";
      stringArray0[1] = "not found";
      stringArray0[2] = "52\"(5SC";
      stringArray0[3] = "=&g G:u}/JcQTV,i=*";
      stringArray0[4] = "sgBR=5|WC\"RW`";
      stringArray0[5] = "T";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1232);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties19);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties10);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties20);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties19);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(241L);
      System.setCurrentTimeMillis(539L);
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(280L);
      String[] stringArray0 = new String[4];
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) (-1);
      discretize0.attributeIndicesTipText();
      System.setCurrentTimeMillis(280L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(use -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n");
      String[] stringArray0 = new String[0];
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      Discretize discretize0 = new Discretize("[$pdC");
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setDesiredWeightOfInstancesPerInterval(4.5);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getCutPoints(3547);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(280L);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, (String[]) null);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-B <num>";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-B <num>");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{kPFI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-490L));
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      properties0.replace((Object) protectedProperties0, (Object) properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 2281);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.close();
      properties0.load((InputStream) byteArrayInputStream0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      BiFunction<Object, Object, DataInputStream> biFunction0 = (BiFunction<Object, Object, DataInputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      protectedProperties9.compute(protectedProperties5, biFunction0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties10);
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance(2281);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      protectedProperties2.elements();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties7);
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      denseInstance0.setWeight(0.0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("-2013265916");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range("D");
      range0.toString();
      range0.getInvert();
      range0.getRanges();
      Range range1 = new Range("Strings: D \nInvert: false\nUpper limit has not been specified");
      Range range2 = new Range();
      range1.toDisplay();
      range2.toString();
      Range range3 = new Range("Strings: D \nInvert: false\nUpper limit has not been specified");
      range1.getInvert();
      range3.toDisplay();
      int[] intArray0 = new int[5];
      Range.indicesToRangeList(intArray0);
      Range range4 = new Range();
      Range range5 = new Range();
      Range range6 = new Range();
      Range range7 = new Range("Strings: D \nInvert: false\nUpper limit has not been specified");
      Range range8 = new Range("]KAG/");
      Range range9 = new Range();
      Range.indicesToRangeList(intArray0);
      Range range10 = new Range();
      range10.getInvert();
      Range range11 = new Range("Strings: D \nInvert: false\nUpper limit has not been specified");
      Range range12 = new Range();
      range11.getInvert();
      Range.indicesToRangeList(intArray0);
      range11.getInvert();
      Range range13 = new Range();
      Range range14 = new Range();
      range14.getRanges();
      Range range15 = new Range();
      Range range16 = new Range();
      range8.getRanges();
      Discretize discretize0 = new Discretize("[WekaPackageManager] weka.core.WekaPackageRepositoryURL = ");
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties1);
      BiFunction<Object, Object, DataInputStream> biFunction0 = (BiFunction<Object, Object, DataInputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "thXgy@xd");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "thXgy@xd");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("thXgy@xd");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range("0");
      range0.getInvert();
      range0.getInvert();
      range0.getInvert();
      int[] intArray0 = new int[0];
      Range.indicesToRangeList(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      range0.getInvert();
      range0.getRanges();
      Range range1 = new Range("0");
      range1.getRanges();
      Discretize discretize0 = new Discretize(" ");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(2.0, (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      DenseInstance denseInstance2 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance3 = new DenseInstance(1931.38246063, (double[]) null);
      Range range0 = new Range("    return (in t.numInstances() >10);i");
      range0.getRanges();
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties17);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties13);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties22);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties23);
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      ProtectedProperties protectedProperties26 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties27 = new ProtectedProperties(protectedProperties24);
      ProtectedProperties protectedProperties28 = new ProtectedProperties(protectedProperties27);
      ProtectedProperties protectedProperties29 = new ProtectedProperties(protectedProperties22);
      ProtectedProperties protectedProperties30 = new ProtectedProperties(protectedProperties25);
      int int0 = 1024;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties16);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties21);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties12);
      Range range0 = new Range();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize1.setBins((-809));
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning((-809));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range("(");
      range0.getInvert();
      range0.getRanges();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2616);
      intArray0[1] = (-1363);
      range0.setUpper((-1216));
      Range.indicesToRangeList(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Range range1 = new Range();
      range0.toString();
      range1.setRanges("07C0r2-uWX@KV.5\"");
      Range range2 = new Range("Strings: ( \nInvert: false\nUpper limit has not been specified");
      range2.toDisplay();
      range2.getInvert();
      range0.getRanges();
      Range range3 = new Range("_");
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties21);
      ProtectedProperties protectedProperties26 = new ProtectedProperties(protectedProperties17);
      Discretize discretize0 = new Discretize("?`~=FuQKN x+ah9=T");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties1);
      BiFunction<Object, Object, DataInputStream> biFunction0 = (BiFunction<Object, Object, DataInputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      protectedProperties12.compute(protectedProperties8, biFunction0);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties4);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties6.forEach(biConsumer1);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties21);
      ProtectedProperties protectedProperties26 = new ProtectedProperties(protectedProperties17);
      Discretize discretize0 = new Discretize("?`~=FuQKN x+ah9=T");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(2.0, (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance2 = new DenseInstance((-2232), (double[]) null);
      DenseInstance denseInstance3 = new DenseInstance((-2232), (double[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2232);
      doubleArray0[1] = (double) (-2232);
      doubleArray0[2] = (double) (-2232);
      DenseInstance denseInstance4 = new DenseInstance(2.0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 63;
      intArray0[1] = (-2232);
      intArray0[2] = (-2232);
      intArray0[3] = (-2232);
      denseInstance0.s_numericAfterDecimalPoint = denseInstance0.s_numericAfterDecimalPoint;
      intArray0[6] = (-2232);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2232.0), intArray0, (-2232));
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("@relation");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties16);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties17);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties26 = new ProtectedProperties(protectedProperties12);
      Discretize discretize0 = new Discretize();
      ProtectedProperties protectedProperties27 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties28 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties29 = new ProtectedProperties(protectedProperties28);
      ProtectedProperties protectedProperties30 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties31 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties32 = new ProtectedProperties(protectedProperties13);
      Properties properties2 = new Properties();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2120));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^b'oT?qWr!M>c||");
      Discretize discretize0 = new Discretize("");
      Range range0 = new Range();
      range0.getInvert();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 34.7368868619;
      doubleArray0[1] = (double) 600;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 34.7368868619;
      discretize0.setUseBinNumbers(false);
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 34.7368868619;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(34.7368868619, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance2.toString((-2232));
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-2275.043175560671);
      doubleArray0[1] = (-2275.043175560671);
      doubleArray0[2] = (-2275.043175560671);
      doubleArray0[3] = (-2275.043175560671);
      doubleArray0[4] = (-2275.043175560671);
      doubleArray0[5] = (-2275.043175560671);
      doubleArray0[6] = (-2275.043175560671);
      doubleArray0[7] = (-2275.043175560671);
      doubleArray0[8] = (-2275.043175560671);
      DenseInstance denseInstance0 = new DenseInstance((-2275.043175560671), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      DenseInstance denseInstance2 = new DenseInstance(0.0, doubleArray0);
      DenseInstance denseInstance3 = new DenseInstance((-2275.043175560671), doubleArray0);
      denseInstance2.setWeight(3795.253665);
      DenseInstance denseInstance4 = new DenseInstance((-2232), doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-2232);
      doubleArray1[1] = 3795.253665;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-2275.043175560671);
      DenseInstance denseInstance5 = new DenseInstance(Double.NaN, doubleArray1);
      denseInstance2.setWeight(Double.NaN);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties(protectedProperties23);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties11);
      Discretize discretize0 = new Discretize();
      ProtectedProperties protectedProperties26 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties27 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties28 = new ProtectedProperties(protectedProperties27);
      ProtectedProperties protectedProperties29 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties30 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties31 = new ProtectedProperties(protectedProperties12);
      Properties properties3 = new Properties();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2120));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("*e!#E.P?\"/ly-LGr!QF");
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      stringArray0[1] = "07C0r2-uWX@KV.5\"";
      stringArray0[2] = "07C0r2-uWX@KV.5\"";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      stringArray0[5] = "07C0r2-uWX@KV.5\"";
      stringArray0[6] = "07C0r2-uWX@KV.5\"";
      stringArray0[7] = "07C0r2-uWX@KV.5\"";
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 77);
      Filter.runFilter(multiFilter0, stringArray0);
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(1491);
      SparseInstance sparseInstance2 = null;
      try {
        sparseInstance2 = new SparseInstance((-2232));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Discretize discretize0 = new Discretize("F4O,=kGpZVGFQ.");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize("\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(use -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n");
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(280L);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][1];
      discretize0.binsTipText();
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 26;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize("yVXI=@HYhZzD");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yVXI=@HYhZzD";
      stringArray0[1] = "yVXI=@HYhZzD";
      stringArray0[2] = "yVXI=@HYhZzD";
      stringArray0[3] = "";
      stringArray0[4] = "yVXI=@HYhZzD";
      stringArray0[5] = "yVXI=@HYhZzD";
      stringArray0[6] = "yVXI=@HYhZzD";
      stringArray0[0] = "$3>(NqA|";
      int[] intArray0 = new int[3];
      intArray0[0] = (-1879048189);
      intArray0[1] = (-1649);
      intArray0[2] = (-1952257859);
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }
}
