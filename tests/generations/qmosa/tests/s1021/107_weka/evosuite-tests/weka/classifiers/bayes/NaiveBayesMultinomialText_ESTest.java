/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 02:29:08 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.net.BIFReader;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.KernelEstimator;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.476501985688589
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Yk~t");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      MockFile mockFile0 = new MockFile(".bsi", ".bsi");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), (int[]) null, (-1));
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      naiveBayesMultinomialText0.useStopListTipText();
      capabilities0.getAttributeCapabilities();
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2274385143865634
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      Instances instances0 = testInstances0.generate("RX-.J");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      MockFile mockFile0 = new MockFile(".arff");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      String string1 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string1);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1543.60611, (int[]) null, (-568));
      naiveBayesMultinomialText0.normTipText();
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      assertArrayEquals(new double[] {0.5454545454545454, 0.4545454545454546}, doubleArray1, 0.01);
      
      naiveBayesMultinomialText0.useStopListTipText();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      String string2 = naiveBayesMultinomialText0.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The tokenizing algorithm to use on the strings.", string2);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3594345688312144
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      testInstances1.setNumRelationalDate((byte) (-98));
      testInstances0.assign(testInstances1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
      testInstances1.setNumRelationalDate(1109);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("tYk~t");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      
      System.setCurrentTimeMillis(672L);
      MockFile mockFile0 = new MockFile("@relation");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      String string1 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string1);
      
      String string2 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string2);
      
      String string3 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string3);
      
      naiveBayesMultinomialText0.m_useStopList = true;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), (int[]) null, (-1));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1), (int[]) null, (-1));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, false);
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.normTipText();
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      assertArrayEquals(new double[] {0.3750000000000001, 0.16666666666666669, 0.29166666666666663, 0.16666666666666669}, doubleArray0, 0.01);
      
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getCapabilities();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.356732498204905
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      MockFile mockFile0 = new MockFile("Weu?/_4h96h");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, (int[]) null, (-2));
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      naiveBayesMultinomialText1.useStopListTipText();
      capabilities0.getAttributeCapabilities();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Random.setNextRandom(422);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      TestInstances testInstances0 = new TestInstances();
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.0);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      TestInstances testInstances2 = new TestInstances();
      testInstances2.assign(testInstances0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[2] = (double) (byte) (-88);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "further";
      stringArray0[1] = "further";
      stringArray0[2] = "further";
      stringArray0[3] = "-norm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -norm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1022160748189687
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[2] = (double) (byte) (-88);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("rd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rd");
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = new Instances(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.buildClassifier(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.toString();
      Random.setNextRandom((-92));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9603496546361194
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">TY>h");
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">TY>h";
      stringArray0[1] = ">TY>h";
      stringArray0[2] = ">TY>h";
      stringArray0[3] = ">TY>h";
      naiveBayesMultinomialText0.m_lnorm = 3373.0876267;
      stringArray0[4] = ">TY>h";
      stringArray0[5] = ">TY>h";
      naiveBayesMultinomialText0.setPeriodicPruning(276);
      stringArray0[6] = ">TY>h";
      naiveBayesMultinomialText0.getCapabilities();
      NaiveBayesMultinomialText.main(stringArray0);
      String[] stringArray1 = new String[1];
      naiveBayesMultinomialText0.m_lnorm = (-6.78214234);
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray1);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(276, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1337.0;
      doubleArray0[1] = 5.55555;
      doubleArray0[2] = 15.0;
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.298292239933377
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      DenseInstance denseInstance0 = new DenseInstance(266.27, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 88;
      intArray0[1] = (-1);
      intArray0[2] = 88;
      intArray0[3] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 88);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.710541608738982
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      naiveBayesMultinomialText0.setStopwords((File) null);
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertFalse(boolean0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(72);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(1198.6238113142, doubleArray0);
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      capabilities0.getRevision();
      naiveBayesMultinomialText1.m_wordFrequencies = true;
      naiveBayesMultinomialText1.buildClassifier(instances0);
      naiveBayesMultinomialText1.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.212642568235007
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText1.getUseWordFrequencies();
      int int0 = 2006;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2006);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2736);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tSpecify L-norm to use (default 2.0)");
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      instances0.add((Instance) binarySparseInstance2);
      try { 
        naiveBayesMultinomialText1.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.515311682382683
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-98));
      File file0 = MockFile.createTempFile("The norm of the instances after normalization.", "Failed to instantiate class for classificJtie- output: ");
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.setStopwords(file0);
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2006);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 88;
      doubleArray0[1] = (double) 88;
      SparseInstance sparseInstance0 = new SparseInstance(2006, doubleArray0);
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      testInstances1.setNumRelationalDate(2006);
      testInstances0.assign(testInstances1);
      testInstances0.setNumRelationalDate(10000);
      Instances instances0 = testInstances0.generate("\nThe probability of a word given the class\n");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      System.setCurrentTimeMillis(10000);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals((-98), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.551628905166927
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      naiveBayesMultinomialText0.setMinWordFrequency((-1));
      doubleArray0[7] = (double) (-2);
      testInstances0.setRelation("rd");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      sMO0.getFilterType();
      Instances instances0 = testInstances1.generate("");
      instances0.attributeStats(2);
      Instances instances1 = new Instances(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance.main(testInstances1.DEFAULT_WORDS);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3805843174563894
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      testInstances2.assign(testInstances0);
      testInstances2.assign(testInstances0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      
      System.setCurrentTimeMillis(2788L);
      naiveBayesMultinomialText0.getStopwords();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String string1 = naiveBayesMultinomialText1.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string2 = naiveBayesMultinomialText2.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string2);
      
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText2.toString();
      naiveBayesMultinomialText2.normTipText();
      naiveBayesMultinomialText2.stopwordsTipText();
      String string3 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("If true, ignores all words that are on the stoplist.", string3);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9078421864662154
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.setNorm((-2));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals((-2.0), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[3] = (double) (byte) (-88);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "jurther";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063979934228759
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " ");
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("tYk~t");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      MockFile mockFile0 = new MockFile("@relation");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), (int[]) null, (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("If true then document length is normalized according to the settings for norm and lnorm", arrayList0, 425);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.194996186179526
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[2] = (double) (byte) (-88);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-------------\t";
      stringArray0[1] = "lnorm";
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      stringArray0[2] = "-------------\t";
      stringArray0[3] = "-M";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(12, stringArray1.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 951.2107511513206;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelational(6);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5253662644954065
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-98));
      File file0 = MockFile.createTempFile("The norm of the instances after normalization.", "Failed to instantiate class for classification output: ");
      naiveBayesMultinomialText0.m_stemmer = null;
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/The norm of the instances after normalization.0Failed to instantiate class for classification output: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Failed to instantiate class for classification output: ");
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-98), naiveBayesMultinomialText0.getPeriodicPruning());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.globalInfo();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.setNorm(0.0);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.stemmerTipText();
      naiveBayesMultinomialText3.lowercaseTokensTipText();
      assertEquals(2.0, naiveBayesMultinomialText3.getLNorm(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)8;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("    double Fsum;\n");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.tartarus.snowball.ext");
      snowballStemmer0.setStemmer("of9**z;w.O");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.457799839880436
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      testInstances1.setNumRelationalDate((-160));
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances2);
      testInstances0.setNumRelationalDate((-1));
      testInstances2.setNumInstancesRelational(640);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("Invalid tokenizer specification string");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      
      System.setCurrentTimeMillis((-1));
      naiveBayesMultinomialText0.getStopwords();
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      String string2 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t9.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nbrown\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\ndog\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string2);
      
      String string3 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string3);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0572842263622997
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-82);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[3] = (double) (byte) (-82);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "`z/Z]!#'+T");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-82), (int[]) null, (byte) (-82));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(13.0, (int[]) null, (byte) (-35));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.tokenizeInstance(binarySparseInstance1, false);
      try { 
        naiveBayesMultinomialText1.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4411366634350875
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-98));
      File file0 = MockFile.createTempFile("The norm of the instances after normalization.", "Failed to instantiate class for classification output: ");
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#s0\"<hth!~");
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.globalInfo();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setNorm(651.4956700914711);
      naiveBayesMultinomialText2.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals((-98), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "`z/Z]!#'+T");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`z/Z]!#'+T";
      stringArray0[1] = "`z/Z]!#'+T";
      stringArray0[2] = "`z/Z]!#'+T";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.030743293531888
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-98));
      File file0 = MockFile.createTempFile("The norm of the instances after normalization.", "Failed to instantiate class for classification output: ");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.getOptions();
      BIFReader bIFReader0 = new BIFReader();
      naiveBayesMultinomialText0.m_minWordP = (double) (-98);
      naiveBayesMultinomialText0.LNormTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(114);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9596566539431186
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 951.2107511513206;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j=KY";
      stringArray0[1] = "-W";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.globalInfo();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.getMinWordFrequency();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText2.getLNorm();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(951.2107511513206, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.setMinWordFrequency(362.5);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.toString();
      naiveBayesMultinomialText1.setPeriodicPruning(6445);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.getLNorm();
      KDTree kDTree0 = new KDTree();
      int[] intArray0 = new int[1];
      intArray0[0] = 6445;
      Instances instances0 = naiveBayesMultinomialText1.m_data;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.100503315136106
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      naiveBayesMultinomialText0.setMinWordFrequency((-1));
      doubleArray0[7] = (double) (-2);
      testInstances0.setRelation(" ");
      testInstances0.setNumInstances((-35));
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(" ");
      testInstances0.setNumRelationalString((-2));
      instances0.attributeStats(2);
      Instances instances1 = new Instances(instances0);
      sMO0.getOptions();
      MockRandom mockRandom0 = new MockRandom(9);
      Instances.test(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.toString();
      Random.setNextRandom(0);
      System.setCurrentTimeMillis((-1L));
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4017117864132844
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      File file0 = MockFile.createTempFile("Failed to instantiate class for classificJtie- output: ", "The norm of the instances after normalization.");
      file0.toPath();
      naiveBayesMultinomialText0.setStopwords(file0);
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.assign(testInstances0);
      testInstances0.setNumRelationalDate((-2));
      testInstances1.assign(testInstances0);
      TestInstances testInstances2 = new TestInstances();
      testInstances0.setNumRelationalDate(0);
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities0);
      testInstances3.setNumRelationalDate(1290);
      TestInstances testInstances4 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances4.generate(" ");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText1.periodicPruningTipText();
      System.setCurrentTimeMillis((-2));
      naiveBayesMultinomialText1.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      DenseInstance denseInstance1 = new DenseInstance(88, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[3] = "lnorm";
      String string0 = "oY+zf5|+\\uW";
      stringArray0[4] = string0;
      stringArray0[5] = "1977";
      stringArray0[6] = "\tPerformance evaluation measure to use for selecting attributes.\n\t(Default = accuracy for discrete class and rmse for numeric class)";
      stringArray0[7] = "-------------\t";
      stringArray0[8] = "-M";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6716319559396164
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      naiveBayesMultinomialText0.setMinWordFrequency((-1));
      doubleArray0[7] = (double) (-2);
      testInstances0.setRelation("rd");
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setPeriodicPruning((-1836));
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("(TtQ$5_9vd}z");
      instances0.attributeStats(2);
      Instances instances1 = new Instances(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Instances instances2 = instances0.resample(mockRandom0);
      naiveBayesMultinomialText0.buildClassifier(instances2);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.toString();
      Random.setNextRandom((-801));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.356877615880714
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      testInstances0.setNumRelationalDate((byte) (-88));
      Instances instances0 = testInstances1.generate(" ");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      MockFile mockFile0 = new MockFile("p_L'Uv_/S}5)Bp", "p_L'Uv_/S}5)Bp");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      System.setCurrentTimeMillis(2877L);
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      sGDText1.getStopwords();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText3.useWordFrequenciesTipText();
      System.setCurrentTimeMillis((-3672L));
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText2.normalizeDocLengthTipText();
      String string0 = naiveBayesMultinomialText4.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      String string1 = naiveBayesMultinomialText2.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string1);
      
      naiveBayesMultinomialText1.getStopwords();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText6.LNormTipText();
      String string2 = naiveBayesMultinomialText3.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string2);
      
      naiveBayesMultinomialText5.getStopwords();
      assertEquals(1.0, naiveBayesMultinomialText5.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText5.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText5.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText5.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText5.getNormalizeDocLength());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1207991139990185
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      precomputedKernelMatrixKernel0.setKernelMatrixFile(file0);
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_normalize = false;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getPeriodicPruning();
      precomputedKernelMatrixKernel0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2297.833;
      doubleArray0[1] = 12.0;
      doubleArray0[2] = 12.0;
      doubleArray0[3] = 12.0;
      doubleArray0[4] = 12.0;
      doubleArray0[5] = 12.0;
      doubleArray0[6] = 12.0;
      doubleArray0[7] = 12.0;
      naiveBayesMultinomialText0.m_useStopList = false;
      doubleArray0[8] = 12.0;
      SparseInstance sparseInstance0 = new SparseInstance(12.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_lnorm = 1.0;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[5] = 1745.3535;
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.42308152226448
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      naiveBayesMultinomialText0.m_leplace = (double) (-1);
      testInstances0.setNumRelationalDate(3226);
      testInstances1.assign(testInstances0);
      testInstances0.setNumRelationalDate(2000);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("tYk~t");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      System.setCurrentTimeMillis((byte) (-88));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getStopwords();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setLowercaseTokens(true);
      naiveBayesMultinomialText2.useWordFrequenciesTipText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText1.getStopwords();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.LNormTipText();
      assertTrue(naiveBayesMultinomialText1.getLowercaseTokens());
      
      naiveBayesMultinomialText2.stopwordsTipText();
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[8];
      testInstances0.clone();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      testInstances0.generate("yU");
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm((-88.0));
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((byte) (-88));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses((-2214));
      double[] doubleArray0 = new double[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      DenseInstance denseInstance1 = new DenseInstance((-2660.2982435633153), doubleArray0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      try { 
        naiveBayesMultinomialText0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 381;
      intArray0[1] = (-1830);
      intArray0[2] = 1;
      intArray0[3] = 14;
      intArray0[4] = 1482;
      intArray0[5] = 2681;
      intArray0[6] = 10000;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-116));
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (-2.0);
      doubleArray0[5] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = 2.147483647E9;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (double) (byte) (-88);
      doubleArray0[4] = (double) (byte) (-35);
      DenseInstance denseInstance0 = new DenseInstance(2.147483647E9, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      double double0 = 3.0;
      DenseInstance denseInstance1 = new DenseInstance((byte) (-88), doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5010693989799213
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      MockFile mockFile0 = new MockFile("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), (int[]) null, (-1));
      naiveBayesMultinomialText1.normTipText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 3024.72233726;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.classifiers.bayes.NaiveBayesMultinomialText$Count";
      stringArray0[1] = "ppEC";
      stringArray0[2] = "awfully";
      stringArray0[3] = "{Q G_5U6_,";
      stringArray0[4] = "z";
      stringArray0[5] = "O9*";
      stringArray0[6] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification";
      stringArray0[7] = "#\"a0*tQ.E;HNT";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(3024.72233726);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getUseStopList();
      wordTokenizer0.setDelimiters("");
      naiveBayesMultinomialText0.setNorm(3024.72233726);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      assertEquals(3024.72233726, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-35);
      doubleArray0[1] = (double) (byte) (-88);
      doubleArray0[2] = (double) (byte) (-88);
      doubleArray0[3] = (double) (byte) (-35);
      doubleArray0[4] = (double) (byte) (-35);
      doubleArray0[5] = (double) (byte) (-35);
      DenseInstance denseInstance0 = new DenseInstance(2384.9703384, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("2001-04-04 14:13:55");
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1631.85640192762;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      naiveBayesMultinomialText0.m_useStopList = true;
      DenseInstance denseInstance1 = new DenseInstance((-2660.2982435633153), doubleArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      try { 
        naiveBayesMultinomialText0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(1573);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2722146523459616
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-88);
      doubleArray0[3] = (double) (byte) (-88);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jurther";
      naiveBayesMultinomialText0.m_norm = 815.45123137445;
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.getOptions();
      assertEquals(815.45123137445, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.m_normalize = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[3] = (double) (byte) (-88);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jurther";
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals(12, stringArray1.length);
      
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(boolean0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.267887675168178
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-82);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[3] = (double) (byte) (-82);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "`z/Z]!#'+T");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "`z/Z]!#'+T");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals("/home/ubuntu/termite/projects/107_weka", file0.toString());
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray1.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-88);
      doubleArray0[1] = (double) (byte) (-35);
      doubleArray0[2] = (double) (byte) (-88);
      doubleArray0[3] = (double) (byte) (-88);
      doubleArray0[4] = (double) (byte) (-88);
      doubleArray0[5] = (double) (byte) (-88);
      doubleArray0[6] = (double) (byte) (-88);
      doubleArray0[7] = 3.0;
      doubleArray0[8] = (double) (byte) (-88);
      DenseInstance denseInstance0 = new DenseInstance((byte) (-88), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (-88.0);
      naiveBayesMultinomialText0.getStopwords();
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2212853964804276
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-4000.852847350727), doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      DenseInstance denseInstance1 = new DenseInstance((-2660.2982435633153), doubleArray0);
      int int0 = 124;
      SparseInstance sparseInstance0 = new SparseInstance(124);
      DenseInstance denseInstance2 = new DenseInstance(88, doubleArray0);
      String string0 = "CV77>{B~iy9]`i/MK%!";
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2723278385372465
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-35);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      URI uRI1 = MockURI.aFileURI;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ?q n=)");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.m_t = 13.0;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1633.514055644189;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      mockFile0.toURL();
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String string1 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string1);
      
      String string2 = naiveBayesMultinomialText0.globalInfo();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string2);
      
      String string3 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string3);
      
      String string4 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string4);
      
      String string5 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("Use word frequencies rather than binary bag of words representation", string5);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.334944107380624
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-98));
      File file0 = MockFile.createTempFile("The norm of the instances after normalization.", "Failed to instantiate class for classification output: ");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/The norm of the instances after normalization.0Failed to instantiate class for classification output: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Failed to instantiate class for classification output: ");
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      System.setCurrentTimeMillis(42L);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.329598143656796
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      naiveBayesMultinomialText0.setMinWordFrequency((-1));
      doubleArray0[7] = (double) (-2);
      testInstances0.setRelation("rd");
      naiveBayesMultinomialText0.periodicPruningTipText();
      MockFile mockFile0 = new MockFile("");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText1.m_minWordP = (-1.0);
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals((-1.0), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText3.toString();
      naiveBayesMultinomialText3.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.stopwordsTipText();
      naiveBayesMultinomialText4.useStopListTipText();
      naiveBayesMultinomialText2.periodicPruningTipText();
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      
      String string0 = naiveBayesMultinomialText1.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
  }
}
