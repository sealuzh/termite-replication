/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:50:25 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Evaluation.handleCostOption("", 3895);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8243999440679435
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = testInstances0.generate("@relation");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setCharSet("_sY,hvu-8Ct,sH#M}W");
      evaluation0.kappa();
      evaluation0.getHeader();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3307102464186924
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractClassifier.makeCopies(logitBoost0, 1218);
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setNumFolds(0);
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      AbstractClassifier.makeCopies(randomSubSpace0, 0);
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[4];
      evaluation0.areaUnderROC(0);
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 2096.194967;
      doubleArray0[2] = 591.822844787222;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("LogitBoost: No model built yet.");
      evaluation0.kappa();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.setCharSet("@relation");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2701.756, doubleArray0);
      evaluation0.confusionMatrix();
      evaluation0.getDiscardPredictions();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.406326914639118
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Object object0 = new Object();
      evaluation0.weightedFalsePositiveRate();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "seedTipText");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@data");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-931));
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.583148069094682
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UnaryOperator.identity();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.globalInfo();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) 1;
      MockRandom mockRandom0 = new MockRandom(0L);
      Object object0 = new Object();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.makeDistribution(0.17499999701976776);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFEntropyGain();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      evaluation0.truePositiveRate((-1312));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".bsi");
      evaluation0.numFalsePositives(115);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.173258941848183
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      textDirectoryLoader0.setCharSet("trimTipText");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getCustomPropsFile();
      LWL lWL0 = new LWL();
      lWL0.enumerateMeasures();
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.equals(evaluation1);
      evaluation1.numTrueNegatives(5);
      evaluation0.rootMeanSquaredError();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.graph();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Classifier: weka.classifiers.rules.ZeroR  cannot be graphed
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.m_SumClass;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      evaluation0.updateMargins(doubleArray0, 3, Double.NaN);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.498093611062008
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation1.weightedAreaUnderPRC();
      evaluation0.precision((-2));
      evaluation1.toMatrixString(".arff");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(simpleLinearRegression0, 50);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.setPriors(instances1);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.823960443549483
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W!\"X");
      evaluation0.truePositiveRate(4);
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 108);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances1);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedTruePositiveRate();
      DenseInstance denseInstance0 = new DenseInstance(23);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-1466.6774184027918), doubleArray0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7995749966735852
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      evaluation0.m_TotalSizeOfRegions = (-1247.7712762357382);
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.recall((-2571));
      double double1 = evaluation0.m_ClassPriorsSum;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.sizeOfPredictedRegions();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.31128814303217
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 1218);
      LogitBoost logitBoost1 = new LogitBoost();
      LogitBoost logitBoost2 = new LogitBoost();
      logitBoost1.setNumFolds(0);
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      AbstractClassifier.makeCopies(randomSubSpace0, 0);
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 2096.194967;
      doubleArray0[2] = 591.822844787222;
      doubleArray0[3] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      evaluation0.confusionMatrix();
      evaluation0.getDiscardPredictions();
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.587013481555683
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation1.weightedAreaUnderPRC();
      evaluation0.precision((-2));
      evaluation1.toClassDetailsString("@data");
      textDirectoryLoader0.reset();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      evaluation1.falseNegativeRate((-2));
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 124, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.449830060728387
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      evaluation0.trueNegativeRate((-1));
      evaluation0.SFSchemeEntropy();
      evaluation0.toClassDetailsString();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      double double0 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-1));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.m_TrainClassWeights = null;
      evaluation0.falsePositiveRate((-1));
      evaluation0.toMatrixString();
      MockRandom mockRandom0 = new MockRandom((-2582L));
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLinearRegression1, instances0, (-1), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7820670509842635
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("\tThe number of classes to generate (for nominal classes only)\n\t(default 2).");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      evaluation0.falseNegativeRate(2);
      evaluation0.fMeasure(1);
      evaluation0.weightedPrecision();
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.8;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      evaluation0.areaUnderPRC(1);
      doubleArray0[5] = (double) 2;
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UnaryOperator.identity();
      int int0 = (-1669);
      Version.MINOR = (-1669);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.globalInfo();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Class for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.848191844325075
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      AbstractClassifier.makeCopies(randomSubSpace0, 2391);
      Evaluation.makeOptionString((Classifier) null, true);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      evaluation0.weightedTruePositiveRate();
      evaluation0.numInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      LogitBoost logitBoost0 = new LogitBoost();
      boolean boolean0 = evaluation0.equals(logitBoost0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4078086940879238
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      evaluation0.trueNegativeRate((-1));
      evaluation0.SFSchemeEntropy();
      evaluation0.toClassDetailsString();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      double double0 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-1));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.m_TrainClassWeights = null;
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-1994981129));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.addNumericTrainClass((-141.0), 0.0);
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) simpleLinearRegression1, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5540139501830628
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">w(hFw}kSOwuWGv=<");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toClassDetailsString();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6192814239442748
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("#.PD_F4E_j^ R");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      testInstances0.generate("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.numFalsePositives(500);
      evaluation1.weightedAreaUnderROC();
      evaluation1.falseNegativeRate((-2));
      double double1 = new Integer((byte)56);
      evaluation1.addNumericTrainClass((-1466.6774184027918), (byte) (-36));
      evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation1.weightedPrecision();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.59993757544101
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation1.weightedAreaUnderPRC();
      evaluation0.precision((-2));
      evaluation1.toClassDetailsString("@data");
      textDirectoryLoader0.reset();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      evaluation1.falseNegativeRate((-2));
      evaluation0.weightedTrueNegativeRate();
      evaluation1.addNumericTrainClass(2.0, (-2454.356722606893));
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2077484134701266
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrx given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation1.m_SumPredicted;
      evaluation1.numFalsePositives((-1));
      evaluation1.weightedAreaUnderPRC();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Object object0 = new Object();
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      MockRandom mockRandom0 = new MockRandom((-1L));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[0] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) evoSuiteFile0;
      objectArray0[4] = (Object) textDirectoryLoader0;
      objectArray0[5] = object0;
      try { 
        evaluation0.crossValidateModel((Classifier) adaBoostM1_0, instances1, 1210, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.528851986194942
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_MaxTarget;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 13);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      evaluation0.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.993060047172526
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("metaClassifierTipText");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("n<AYQ;.9W%nV9K-,rjW");
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("metaClassifierTipText");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation1.weightedAreaUnderPRC();
      evaluation0.precision(14);
      evaluation0.toMatrixString("n<AYQ;.9W%nV9K-,rjW");
      textDirectoryLoader0.reset();
      evaluation1.falseNegativeRate((-1));
      evaluation1.weightedTrueNegativeRate();
      evaluation0.addNumericTrainClass(0.0, (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-815.20374969));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.pctCorrect();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1953962975));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1953962975
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5876554123164754
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumAbsErr = 0.0;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Instances instances1 = new Instances(instances0, 3);
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable0);
      LogitBoost logitBoost0 = new LogitBoost();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      simpleLinearRegression0.listOptions();
      Evaluation.main((String[]) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.trueNegativeRate(0);
      evaluation0.SFSchemeEntropy();
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.rootRelativeSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMicroFmeasure();
      double double0 = evaluation0.recall(3);
      assertEquals(0.0, double0, 0.01);
      
      evaluation2.rootMeanPriorSquaredError();
      evaluation0.SFMeanSchemeEntropy();
      evaluation2.meanAbsoluteError();
      assertEquals(Double.NaN, evaluation2.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 65);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.19573086861625
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double1 = evaluation0.recall((-1));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.weightedAreaUnderPRC();
      evaluation0.precision((-2));
      String string0 = evaluation1.toMatrixString(".arff");
      assertEquals(".arff\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      textDirectoryLoader0.reset();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      evaluation0.numFalsePositives((byte) (-22));
      evaluation1.weightedAreaUnderROC();
      evaluation1.falseNegativeRate(4);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.addNumericTrainClass((-4029.5), 591.1630936);
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.unweightedMacroFmeasure();
      assertEquals(double4, double2, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.682609824697067
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("metaClassifierTipText");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = '}';
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Classifier classifier0 = lWL1.getClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2391);
      Evaluation.makeOptionString(classifier0, true);
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.pctUnclassified();
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8501349548823622
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      evaluation0.truePositiveRate(1354);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setSource(file0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = null;
      stringArray0[2] = "seedTipText";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[5] = null;
      Evaluation.main(stringArray0);
      evaluation0.matthewsCorrelationCoefficient((-1070));
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.120229424503213
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".arff");
      SparseInstance sparseInstance0 = new SparseInstance(15);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate((String) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances1 = new TestInstances();
      textDirectoryLoader0.setCharSet((String) null);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-2));
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedFMeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation0.precision(15);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6, doubleArray0);
      evaluation0.setPriors(instances0);
      double double2 = evaluation1.unweightedMicroFmeasure();
      double double3 = evaluation1.weightedAreaUnderROC();
      assertEquals(double3, double0, 0.01);
      
      evaluation1.weightedMatthewsCorrelation();
      double double4 = evaluation0.matthewsCorrelationCoefficient(6);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.252737708783281
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation1 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.trueNegativeRate(4344);
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1922842295324427
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.setCharSet("anyone");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("8;z]gGS-K");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setCharSet("@data");
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.falseNegativeRate(0);
      evaluation1.weightedTrueNegativeRate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.937243624704172
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".bsi");
      SparseInstance sparseInstance0 = new SparseInstance(1514);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      testInstances0.setNumRelationalNominal(6);
      TestInstances testInstances1 = new TestInstances();
      textDirectoryLoader0.setCharSet(".bsi");
      evaluation1.m_SumPriorAbsErr = (double) 1514;
      testInstances1.generate(".bsi");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedFMeasure();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.unweightedMicroFmeasure();
      evaluation1.unweightedMicroFmeasure();
      // Undeclared exception!
      try { 
        evaluation1.precision(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1341141835099666
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      instances0.resample(mockRandom0);
      double double0 = evaluation0.trueNegativeRate((-2));
      String string0 = evaluation2.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression2 = new SimpleLinearRegression();
      double double1 = evaluation2.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      evaluation1.numFalsePositives((-2));
      evaluation1.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-2));
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation2.numTrueNegatives((-2));
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      textDirectoryLoader0.setCharSet("u0");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1002.270381926);
      doubleArray0[1] = (double) 2189;
      doubleArray0[2] = (-1002.270381926);
      doubleArray0[3] = (double) 2200;
      doubleArray0[4] = (-1002.270381926);
      int[] intArray0 = new int[7];
      intArray0[0] = 2200;
      intArray0[1] = 2189;
      intArray0[2] = 46;
      intArray0[3] = 2189;
      intArray0[4] = 2189;
      intArray0[5] = 2200;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      intArray0[6] = (-448);
      SparseInstance sparseInstance0 = new SparseInstance((-1002.270381926), doubleArray0, intArray0, 2200);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, sparseInstance0, (-2515.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4467638249304984
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      evaluation0.weightedPrecision();
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      evaluation0.m_DiscardPredictions = false;
      textDirectoryLoader0.reset();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.134631643813234
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "n{)^k<{{e");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2282.5608605191483);
      doubleArray0[1] = (-2282.5608605191483);
      doubleArray0[2] = (-2282.5608605191483);
      doubleArray0[3] = (-2282.5608605191483);
      doubleArray0[4] = (-2282.5608605191483);
      doubleArray0[5] = (-2282.5608605191483);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2282.5608605191483));
      double double0 = evaluation1.m_MaxTarget;
      DenseInstance denseInstance0 = new DenseInstance(9);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5924577421490578
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet(".bsi");
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation2 = new Evaluation(instances2);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation2.m_SumSchemeEntropy;
      CostMatrix costMatrix0 = null;
      Evaluation evaluation3 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.m_NumClasses = 1;
      evaluation3.priorEntropy();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        evaluation4.toClassDetailsString(".bsi");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6482215460304457
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("getTechnicalInformation");
      TestInstances testInstances1 = new TestInstances();
      Instances instances2 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances2);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      instances1.resample(mockRandom1);
      evaluation3.trueNegativeRate((-435));
      double double0 = Evaluation.MIN_SF_PROB;
      instances1.delete();
      String string0 = evaluation3.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression2 = new SimpleLinearRegression();
      double double1 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      evaluation2.numFalsePositives((-1));
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-435));
      evaluation1.weightedTrueNegativeRate();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.falsePositiveRate((-893));
      double double2 = evaluation3.rootMeanSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2661562982021493
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("metaClassifierTipText");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "metaClassifierTipText");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      char[] charArray0 = new char[7];
      costSensitiveClassifier0.setSeed(105);
      charArray0[1] = '}';
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "oh");
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.getClassifier();
      lWL1.globalInfo();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "setLikelihoodThreshold");
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2391);
      evaluation0.toMatrixString("oh");
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      evaluation0.toClassDetailsString(".bsi");
      evaluation0.rootMeanPriorSquaredError();
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      evaluation0.weightedFMeasure();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
      SparseInstance sparseInstance0 = new SparseInstance((-6.78214234), doubleArray0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.943052917634059
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.relativeAbsoluteError();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2282.5608605191483));
      double double0 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 6;
      intArray0[8] = 6;
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1380736879282445
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1167.228405;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      Instances instances2 = testInstances0.generate("\tOnly outputs the graph representation of the classifier.\n");
      Evaluation evaluation2 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation2.recall(2);
      Evaluation evaluation3 = new Evaluation(instances2, (CostMatrix) null);
      evaluation3.weightedAreaUnderPRC();
      double double0 = evaluation1.precision(84);
      double double1 = evaluation2.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double1, 0.01);
      
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 922);
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation2.weightedAreaUnderPRC();
      evaluation3.setPriors(instances0);
      double double2 = evaluation3.KBRelativeInformation();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedTruePositiveRate();
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.019971002086976
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("numRunsTipText");
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives((-1765));
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_MaxTarget;
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      LogitBoost logitBoost2 = new LogitBoost();
      logitBoost2.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost2, 108);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      evaluation0.setPriors(instances1);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedTruePositiveRate();
      evaluation1.useNoPriors();
      assertEquals(Double.NaN, evaluation1.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.677018125225026
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.m_SumSqrClass = 1565.4;
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.m_SumSqrErr = 0.0;
      double double4 = evaluation0.recall((-2571));
      evaluation0.SFMeanSchemeEntropy();
      double double5 = evaluation0.numFalsePositives((-2493));
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.549615299725952
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrx given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double1 = evaluation1.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation1.falseNegativeRate((-1));
      double double3 = evaluation0.weightedTrueNegativeRate();
      evaluation1.addNumericTrainClass(Double.NaN, (-1));
      double double4 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.524024921731799
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UnaryOperator.identity();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.globalInfo();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("Class for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.");
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) 1;
      MockRandom mockRandom0 = new MockRandom(0L);
      Object object0 = new Object();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double2 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.961069878046279
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setCharSet((String) null);
      evaluation0.kappa();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      testInstances0.generate("Class has to be nominal if cost matrix given!");
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1764386937883486
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      MockRandom mockRandom0 = new MockRandom(42L);
      Object object0 = new Object();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      Classifier[] classifierArray0 = AbstractClassifier.makeCopies(serializedClassifier0, 4);
      Evaluation.makeOptionString(lWL0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      lWL0.enumerateMeasures();
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation1.equals(naiveBayesMultinomialUpdateable0);
      evaluation0.numTrueNegatives(3);
      evaluation1.rootMeanSquaredError();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      try { 
        evaluation1.evaluateModel((Classifier) naiveBayesUpdateable0, instances1, (Object[]) classifierArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.misc.SerializedClassifier cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) mockRandom0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 1210;
      doubleArray0[4] = 6.0;
      doubleArray0[5] = (-2854.7069716683027);
      doubleArray0[6] = (double) 1210;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2854.7069716683027), doubleArray0);
      evaluation0.equals((Object) null);
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 6);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      textDirectoryLoader0.getDataSet();
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable0);
      LogitBoost logitBoost0 = new LogitBoost();
      KDTree kDTree0 = new KDTree();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4.0), intArray0, 41);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1916.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7758772221764683
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.relativeAbsoluteError();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2282.5608605191483));
      double double0 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 6;
      intArray0[8] = 6;
      try { 
        evaluation0.evaluateModelOnce(986.883, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 986
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.089726710098197
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.m_MaxTarget;
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      String string1 = evaluation0.num2ShortID(15, charArray0, 15);
      assertEquals("           \\\\\\\\", string1);
      
      evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SparseInstance sparseInstance0 = new SparseInstance(39);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ",10*{F%rEuI");
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.sort((-1516));
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.setCharSet("getNumIterations");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getCustomPropsFile();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.getHeader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      try { 
        textDirectoryLoader2.setSource((File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source directory object is null!
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3111728731896575
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("metaClassifierTipText");
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (double) 'u';
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (double) 'u';
      doubleArray0[6] = (double) 'u';
      doubleArray0[7] = 1.7976931348623157E308;
      doubleArray0[8] = (double) 'u';
      DenseInstance denseInstance0 = new DenseInstance(1.7976931348623157E308, doubleArray0);
      instances0.add((Instance) denseInstance0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9261165301683625
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.toSummaryString(true);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = ".arff";
      stringArray0[3] = "\tThe number of classes to generate (for nominal classes only)\n\t(default 2).";
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(simpleLinearRegression0, 2);
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.362981630010431
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setCharSet((String) null);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.KBInformation();
      evaluation0.numFalseNegatives(20);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.toClassDetailsString();
      double double0 = evaluation0.m_MaxTarget;
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 20);
      Evaluation.makeOptionString(logitBoost0, false);
      evaluation0.precision(6);
      evaluation0.numTruePositives(10);
      double[] doubleArray1 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(20, doubleArray1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      try { 
        evaluation0.evaluateModelOnce((Classifier) logitBoost0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      ArffLoader arffLoader0 = new ArffLoader();
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.makeCopies(sGDText0, 0);
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) votedPerceptron0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      textDirectoryLoader0.setCharSet(".arff");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2200;
      doubleArray0[1] = (double) 2189;
      doubleArray0[2] = (double) 2200;
      doubleArray0[3] = (double) 2200;
      doubleArray0[4] = (double) 2189;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Attribute attribute0 = new Attribute("getTechnicalInformation");
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2200;
      intArray0[3] = 1;
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(870.99, intArray0, (-1456206972));
      binarySparseInstance0.isMissing(attribute0);
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9784724942075065
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1167.228405;
      doubleArray0[1] = 2407.3376337539044;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-793.4);
      doubleArray0[4] = 3693.60989716263;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-330.0);
      doubleArray0[7] = 1000.0;
      doubleArray0[8] = 1822.4777158305;
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.listOptions();
      String[] stringArray0 = null;
      Evaluation.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) findWithCapabilities0);
      instances0.removeIf(predicate0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8947181526408912
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SparseInstance sparseInstance0 = new SparseInstance(39);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(39, charArray0, 553);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalCoverage = 1000.0;
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = 5.7;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      evaluation0.unweightedMacroFmeasure();
      try { 
        evaluation0.updateStatsForPredictor(2, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.375117265526805
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet((String) null);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      textDirectoryLoader0.getOptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      instances0.lastIndexOf(costMatrix0);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      AbstractClassifier.makeCopies(classifier0, 9);
      evaluation1.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.677653559417036
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      LogitBoost logitBoost0 = new LogitBoost();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(98);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_MaxTarget;
      LogitBoost logitBoost1 = new LogitBoost();
      LogitBoost logitBoost2 = new LogitBoost();
      LogitBoost logitBoost3 = new LogitBoost();
      logitBoost3.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      lWL0.getCapabilities();
      AbstractClassifier.makeCopies(classifier0, 614);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[0];
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.4015777085439196
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      Object object0 = new Object();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      AbstractClassifier.makeCopies(serializedClassifier0, 4);
      Evaluation.makeOptionString(lWL0, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      lWL0.enumerateMeasures();
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation1.equals(naiveBayesMultinomialUpdateable0);
      evaluation0.numTrueNegatives(3);
      evaluation1.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedFalseNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1983);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1983
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.698860868780919
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      double double0 = evaluation0.truePositiveRate((-1312));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "W((");
      evaluation0.numFalsePositives(115);
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances1);
      double double3 = evaluation1.numTruePositives((-1312));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.numFalsePositives((-1312));
      assertEquals(double4, double0, 0.01);
      
      evaluation0.rootMeanPriorSquaredError();
      double double5 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.619085894695714
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object object0 = new Object();
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.weightedAreaUnderROC();
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.weightedFalseNegativeRate();
      double double5 = evaluation0.SFEntropyGain();
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6851287363978404
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SparseInstance sparseInstance0 = new SparseInstance(39);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.KBMeanInformation();
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.setCharSet("@relation");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getCustomPropsFile();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      try { 
        textDirectoryLoader1.setSource((File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source directory object is null!
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.3152097116596204
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.setCharSet((String) null);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(3);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(false);
      double double1 = evaluation0.numFalseNegatives(20);
      assertEquals(0.0, double1, 0.01);
      
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      instances0.getRevision();
      evaluation0.falsePositiveRate(2383);
      evaluation0.numFalsePositives(6);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1592720529128537
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("@relation");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      textDirectoryLoader0.getDataSet();
      String string0 = Evaluation.getGlobalInfo(multiClassClassifierUpdateable0);
      assertEquals("\nSynopsis for weka.classifiers.meta.MultiClassClassifierUpdateable:\n\nA metaclassifier for handling multi-class datasets with 2-class classifiers. This classifier is also capable of applying error correcting output codes for increased accuracy. The base classifier must be an updateable classifier", string0);
      
      LogitBoost logitBoost0 = new LogitBoost();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      instances0.remove((Object) textDirectoryLoader0);
      simpleLinearRegression0.listOptions();
      String string1 = evaluation0.num2ShortID(3, (char[]) null, 0);
      assertEquals("", string1);
      
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation evaluation1 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation1.priorEntropy();
      evaluation0.recall((-852));
      BallNode ballNode0 = new BallNode((-852), 1, 21);
      BallNode ballNode1 = ballNode0.m_Right;
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0829906738453343
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      int int0 = (-1953962975);
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1953962975));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1953962975
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.578585650382899
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      Evaluation.k_MarginResolution = 185;
      evaluation1.m_Correct = (-409.89700995);
      String string0 = evaluation1.toClassDetailsString("%C@^G6V@kJ");
      assertEquals("%C@^G6V@kJ\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.weightedFalsePositiveRate();
      evaluation1.kappa();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'e';
      charArray0[2] = '4';
      charArray0[3] = 'i';
      charArray0[4] = 'j';
      String string1 = evaluation0.num2ShortID(114, charArray0, 185);
      assertEquals("                                                                                                                                                                                      iej", string1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 1218);
      LogitBoost logitBoost1 = new LogitBoost();
      LogitBoost logitBoost2 = new LogitBoost();
      logitBoost1.setNumFolds(0);
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      AbstractClassifier.makeCopies(randomSubSpace0, 0);
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 2096.194967;
      try { 
        evaluation0.crossValidateModel((String) null, instances0, 112, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3255708431535274
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      instances0.resample(mockRandom0);
      double double0 = evaluation2.trueNegativeRate((-557));
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      double double1 = evaluation2.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use explicit cost matrix");
      evaluation1.numFalsePositives((-197112209));
      evaluation1.weightedAreaUnderROC();
      double double2 = evaluation1.falseNegativeRate(12);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.numTrueNegatives((-197112209));
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Object object0 = new Object();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      DenseInstance denseInstance0 = new DenseInstance(763.0, (double[]) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("&D@V");
      evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-505.8163464431), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.5165218427460303
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation1.weightedAreaUnderPRC();
      evaluation0.precision(868);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Ul<6");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-114);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      boolean boolean0 = false;
      textDirectoryLoader0.setOutputFilename(false);
      int int0 = 2217;
      try { 
        Evaluation.handleCostOption("Ul<6", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFFD\u0006\uFFFD\uFFFD\uFFFD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.635922092265969
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet((String) null);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(20);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.setNumericPriorsFromBuffer();
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '=';
      charArray0[2] = 'Y';
      charArray0[3] = '8';
      charArray0[4] = 'q';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1206), charArray0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.726450754808067
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Object object0 = new Object();
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      int int0 = (-817);
      evaluation0.recall((-817));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.errorRate();
      evaluation0.sizeOfPredictedRegions();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.885539615988383
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet((String) null);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      evaluation0.setPriors(instances1);
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.weightedFalsePositiveRate();
      LogitBoost logitBoost0 = new LogitBoost();
      textDirectoryLoader0.getOptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      instances0.lastIndexOf(costMatrix0);
      textDirectoryLoader0.reset();
      evaluation1.falseNegativeRate(1);
      evaluation0.weightedTrueNegativeRate();
      evaluation1.addNumericTrainClass(494.0, 1);
      evaluation0.SFMeanEntropyGain();
      evaluation1.trueNegativeRate(2166);
      evaluation0.correct();
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'U';
      charArray0[2] = 'F';
      charArray0[3] = '!';
      charArray0[4] = '\\';
      charArray0[5] = 'i';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(182, charArray0, (-373));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("metaClassifierTipText");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      StringBuffer stringBuffer0 = new StringBuffer(2);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      evaluation0.num2ShortID(2, charArray0, 2);
      pipedWriter0.append((CharSequence) " \u0000");
      int int0 = (-976);
      PipedReader pipedReader1 = new PipedReader(2);
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader1);
      PipedReader pipedReader2 = null;
      try {
        pipedReader2 = new PipedReader(pipedWriter1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.8184200769545007
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.m_MaxTarget;
      textDirectoryLoader0.reset();
      double double2 = evaluation0.avgCost();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.recall(250);
      double double3 = evaluation0.weightedAreaUnderPRC();
      double double4 = evaluation0.precision(312);
      assertNotEquals(double4, double3, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double5 = evaluation1.weightedAreaUnderROC();
      double double6 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SparseInstance sparseInstance0 = new SparseInstance(39);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall(6);
      evaluation0.weightedAreaUnderPRC();
      double[] doubleArray0 = evaluation0.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(39, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7891953156584712
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("@data");
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.getDataSet();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      double double1 = evaluation0.numFalseNegatives((-886));
      assertEquals(0.0, double1, 0.01);
      
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "  public String getRevision() {\n";
      stringArray0[1] = "LM";
      textDirectoryLoader5.reset();
      textDirectoryLoader5.setOptions(stringArray0);
      textDirectoryLoader5.setOutputFilename(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.numFalsePositives(17);
      double double2 = evaluation0.weightedAreaUnderROC();
      double double3 = evaluation0.falseNegativeRate((-206797271));
      assertNotEquals(double3, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double4 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double4, double0, 0.01);
      
      evaluation0.addNumericTrainClass((-2931.00182576006), (-886));
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
      
      evaluation1.weightedFalsePositiveRate();
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.592965132436166
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.recall((-2));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.errorRate();
      evaluation0.sizeOfPredictedRegions();
      int int0 = (-1456206972);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1456206972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      simpleLinearRegression1.setOptions((String[]) null);
      simpleLinearRegression0.getCapabilities();
      simpleLinearRegression1.classifyInstance((Instance) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4838392204971402
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@data");
      Instances instances1 = testInstances0.generate("Class has to be nominal if cost matrix given!");
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.recall((-1));
      evaluation1.weightedAreaUnderPRC();
      evaluation0.precision((-2));
      evaluation1.toClassDetailsString("@data");
      textDirectoryLoader0.reset();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation1.recall(2412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2412
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.599309204382742
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet("@relation");
      TestInstances testInstances1 = new TestInstances();
      Instances instances2 = testInstances1.generate("MckMV~hd:");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation1.weightedAreaUnderPRC();
      evaluation1.weightedFMeasure();
      Evaluation evaluation2 = new Evaluation(instances2);
      evaluation0.weightedTrueNegativeRate();
      evaluation2.addNumericTrainClass((-1), (-105.0));
      double double0 = evaluation2.weightedFalsePositiveRate();
      assertEquals(Double.NaN, evaluation2.weightedFMeasure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.5176594258768725
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("aBS");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet(".bsi");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      textDirectoryLoader1.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      evaluation0.numFalseNegatives((-886));
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9480586250864174
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-13);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[20];
      evaluation0.makeDistribution(Double.NaN);
      Object object0 = new Object();
      objectArray0[0] = (Object) instances0;
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "enumerateMeasures");
      Object[] objectArray1 = new Object[1];
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      evaluation0.matthewsCorrelationCoefficient(1210);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.m_SumPredicted;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives((-1642));
      Stacking stacking0 = new Stacking();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1642);
      intArray0[1] = (-1642);
      intArray0[2] = (-1642);
      intArray0[3] = (-1642);
      intArray0[4] = (-1642);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2058.0, intArray0, (-854));
      instances0.add((Instance) binarySparseInstance0);
      Classifier classifier0 = stacking0.getMetaClassifier();
      textDirectoryLoader0.setOutputFilename(false);
      AbstractClassifier.makeCopy(classifier0);
      Evaluation.getGlobalInfo(classifier0);
      double double1 = evaluation0.m_MaxTarget;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int int0 = (-2484);
      instances0.lastIndexOf(evaluation0);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.138372462280131
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setCharSet((String) null);
      textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("Us2f,>W^H_uQA&']R", 6);
      binarySparseInstance0.isMissing(attribute0);
      evaluation0.KBInformation();
      double double0 = evaluation0.numFalseNegatives(20);
      assertEquals(0.0, double0, 0.01);
      
      Stacking stacking0 = new Stacking();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double1 = evaluation0.m_MaxTarget;
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 20);
      LogitBoost logitBoost1 = new LogitBoost();
      LogitBoost logitBoost2 = new LogitBoost();
      LogitBoost logitBoost3 = new LogitBoost();
      logitBoost3.setNumFolds(0);
      logitBoost3.toString();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      binarySparseInstance0.setMissing(3991);
      AbstractClassifier.makeCopies(stacking0, 6);
      evaluation0.weightedAreaUnderPRC();
      binarySparseInstance0.isMissing(attribute0);
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1792441826361872
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("Us-FtNe{1");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      textDirectoryLoader1.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.numFalseNegatives((-1642));
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      evaluation0.toSummaryString("    while (v < breakpoints.length && \n", true);
      Double double0 = new Double((-1642));
      double double1 = evaluation0.m_TotalCost;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8460449657129647
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(gaussianProcesses0, 100);
      evaluation1.weightedAreaUnderPRC();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.3072857957229758
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.truePositiveRate(1354);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setSource(file0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = null;
      stringArray0[1] = "seedTipText";
      stringArray0[3] = "@relation";
      evaluation0.falseNegativeRate(1);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.addNumericTrainClass(0.0, 0.0);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8902554644248302
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "Regression by discretization";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "@data";
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@data");
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setCharSet("weka/core/Capabilities.props");
      evaluation0.kappa();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.395996400380184
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = 2407.3376337539044;
      double double1 = 0.0;
      evaluation0.kappa();
      evaluation0.areaUnderPRC(2147483645);
      int int0 = 10;
      PipedWriter pipedWriter0 = new PipedWriter();
      evaluation0.toSummaryString(false);
      try { 
        pipedWriter0.append((CharSequence) "=== Summary ===\n\nTotal Number of Instances                0     \n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      evaluation0.SFPriorEntropy();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getCustomPropsFile();
      try { 
        textDirectoryLoader0.setSource((File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source directory object is null!
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.020527277615104
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      evaluation0.falseNegativeRate(2);
      evaluation0.fMeasure(1);
      evaluation0.weightedPrecision();
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      textDirectoryLoader0.reset();
      evaluation0.areaUnderPRC(1);
      doubleArray0[5] = (double) 2;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UnaryOperator.identity();
      Version.MINOR = (-1642);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances2 = new Instances("Average Cost                       ", arrayList0, 10);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8787807120064335
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/J1:v";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(stringArray0[1]);
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression2 = new SimpleLinearRegression();
      simpleLinearRegression2.setOptions(testInstances0.DEFAULT_WORDS);
      simpleLinearRegression1.getCapabilities();
      simpleLinearRegression1.classifyInstance((Instance) null);
      try { 
        Evaluation.evaluateModel((Classifier) simpleLinearRegression2, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLinearRegression:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.6505205333825295
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.truePositiveRate((-1642));
      double double0 = evaluation0.m_MinTarget;
      evaluation1.toMatrixString();
      evaluation1.m_SumPredicted = 0.0;
      evaluation0.correlationCoefficient();
      textDirectoryLoader0.setCharSet("enumerateMeasures");
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation1.weightedAreaUnderPRC();
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-1642);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-736.2445), doubleArray0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      textDirectoryLoader0.listOptions();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      simpleLinearRegression1.setOptions(testInstances0.DEFAULT_WORDS);
      simpleLinearRegression0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression2 = new SimpleLinearRegression();
      simpleLinearRegression2.classifyInstance((Instance) null);
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.toMatrixString("@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.719546829818525
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("\tThe number of classes to generate (for nominal classes only)\n\t(default 2).");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Instance instance0 = null;
      double double0 = 0.8;
      try { 
        evaluation0.updateStatsForPredictor(0.8, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.m_SumSqrClass = 0.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UnaryOperator.identity();
      Version.MINOR = (-1642);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.globalInfo();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.handleCostOption("LogitBoost: No model built yet.", 97);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.3271990656772723
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.setCharSet((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getDataSet();
      evaluation0.KBInformation();
      evaluation0.numFalseNegatives(20);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      evaluation0.toClassDetailsString();
      double double0 = evaluation0.m_MaxTarget;
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(logitBoost0, 20);
      LogitBoost logitBoost1 = new LogitBoost();
      LogitBoost logitBoost2 = new LogitBoost();
      LogitBoost logitBoost3 = new LogitBoost();
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.recall(2042);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.precision(1);
      assertEquals(0.0, double2, 0.01);
      
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedFalsePositiveRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6218445153853693
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numRunsTipText");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji94j C-p!D~a");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{I@=?@");
      textDirectoryLoader0.setCharSet(".arff");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2200;
      doubleArray0[1] = (double) 2189;
      doubleArray0[2] = (double) 2200;
      doubleArray0[3] = (double) 2200;
      doubleArray0[4] = (double) 2189;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Attribute attribute0 = new Attribute("getTechnicalInformation");
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2200;
      double double0 = evaluation0.recall((-4674));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.precision(Integer.MAX_VALUE);
      assertEquals(double2, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double3 = evaluation2.weightedAreaUnderROC();
      double double4 = evaluation2.weightedFalsePositiveRate();
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(498);
      evaluation0.m_Header = instances0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      evaluation0.recall(1138);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.precision(498);
      try { 
        evaluation0.toClassDetailsString("X$l6[WVMTEunBBS,5#_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.4967941443989226
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2282.5608605191483));
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.477543127504883
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      evaluation0.weightedFalsePositiveRate();
      mockRandom0.ints(0L);
      double double0 = evaluation0.m_MaxTarget;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) mockRandom0;
      evaluation0.weightedRecall();
      try { 
        evaluation0.crossValidateModel((Classifier) randomSubSpace0, instances0, 1210, (Random) mockRandom0, objectArray1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockRandom cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5098902915024817
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("copyright");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      evaluation0.falseNegativeRate(2);
      evaluation0.fMeasure(1);
      evaluation0.weightedPrecision();
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      costSensitiveClassifier0.getCostMatrixSource();
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      textDirectoryLoader0.reset();
      evaluation0.areaUnderPRC(1);
      doubleArray0[5] = (double) 2;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "weightThresholdTipText";
      stringArray0[1] = "getRandomWidthFactor";
      stringArray0[2] = ";SrvTumy4iWiJ";
      stringArray0[4] = "])^z$Ch{_bKnd";
      stringArray0[5] = "h]";
      stringArray0[6] = "Class must be nominal for margin distributions";
      stringArray0[7] = "#ssuKCH]l?";
      multiClassClassifier0.getCapabilities();
      stringArray0[8] = "HMD";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6856761338830344
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("@data");
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader3.getDataSet();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      evaluation0.numFalseNegatives((-886));
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "  public String getRevision() {\n";
      stringArray0[1] = "LM";
      textDirectoryLoader5.setOptions(stringArray0);
      textDirectoryLoader5.setOutputFilename(false);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.recall((-5557));
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_ClassPriorsSum;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double3 = evaluation0.numTruePositives((-886));
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.numFalsePositives(2674);
      assertEquals(0.0, double4, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.56398817704143
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      UnaryOperator.identity();
      Version.MINOR = (-1642);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.globalInfo();
      logitBoost0.toString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Class for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.");
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) (-1642);
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = 2.0;
      doubleArray2[7] = (double) (-2);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = (double) 1;
      doubleArray3[3] = (double) (-2);
      doubleArray3[4] = (double) (-2);
      doubleArray3[5] = 1000.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 5.5;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (-1681.65197433);
      doubleArray4[3] = (double) (-2);
      doubleArray4[4] = (double) 1;
      doubleArray4[5] = 5.5;
      doubleArray4[6] = 5.5;
      doubleArray0[3] = doubleArray4;
      gaussianProcesses0.m_L = doubleArray0;
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFalseNegativeRate();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel("0,NR.3\u0000nli$h", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 0,NR.3\u0000nli$h.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.3819475579028357
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.setCharSet("`x");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      evaluation1.m_TotalCoverage = 1172.0;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setCharSet("_sY,hvu-8Ct,sH#M}W");
      testInstances0.setNumRelationalDate(2);
      evaluation0.falseNegativeRate((-2));
      evaluation0.weightedTrueNegativeRate();
      double double0 = (-3325.034081706);
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "/=cdR0gubAWYpu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.710334761064932
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      textDirectoryLoader0.setCharSet(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = testInstances0.generate("getTechnicalInformation");
      TestInstances testInstances1 = new TestInstances();
      Instances instances2 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances2);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      instances1.resample(mockRandom1);
      evaluation3.m_ConfLevel = (double) (-1);
      instances0.parallelStream();
      evaluation3.trueNegativeRate((-435));
      evaluation3.SFSchemeEntropy();
      evaluation3.toClassDetailsString();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression2 = new SimpleLinearRegression();
      double double0 = evaluation0.m_SumClassPredicted;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      evaluation2.numFalsePositives((-1));
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-435));
      evaluation1.weightedTrueNegativeRate();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.falsePositiveRate((-893));
      evaluation3.toMatrixString();
      evaluation2.trueNegativeRate((-1));
      try { 
        evaluation2.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_1, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.3473508904222826
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      evaluation0.m_DiscardPredictions = false;
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_MaxTarget;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      evaluation0.numInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".bsi");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.109606290373814
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging[] baggingArray0 = new Bagging[5];
      Bagging bagging0 = new Bagging();
      baggingArray0[0] = bagging0;
      Bagging bagging1 = new Bagging();
      baggingArray0[1] = bagging1;
      Bagging bagging2 = new Bagging();
      baggingArray0[2] = bagging2;
      Bagging bagging3 = new Bagging();
      baggingArray0[3] = bagging3;
      Bagging bagging4 = new Bagging();
      baggingArray0[4] = bagging4;
      instances0.toArray(baggingArray0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setCharSet("Stemmer");
      evaluation0.toSummaryString();
      String string0 = evaluation1.toSummaryString("globalInfo", false);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals("globalInfo\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
