/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:43:13 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SMO;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      SparseInstance sparseInstance0 = new SparseInstance(100);
      Integer integer0 = new Integer(69);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      sMO0.getTechnicalInformation();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      instances0.indexOf("CVBlP,{zG>Lej:(");
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval2.setClassifier(sMO0);
      Attribute attribute0 = new Attribute(".bsi", instances0, 4);
      wrapperSubsetEval1.getTechnicalInformation();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(100);
      Attribute attribute1 = new Attribute("");
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.8, doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance0);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      System.setCurrentTimeMillis(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 3315.0, (-2160.0));
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      SparseInstance sparseInstance0 = new SparseInstance(100);
      Integer integer0 = new Integer(69);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      sMO0.setNumFolds((-1850));
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval1.getEvaluationMeasure();
      wrapperSubsetEval2.setClassifier(sMO0);
      wrapperSubsetEval1.setFolds((-5));
      ASEvaluation.makeCopies(wrapperSubsetEval1, 2);
      wrapperSubsetEval0.postProcess(intArray0);
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      instances0.equalHeadersMsg(instances1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Attribute attribute0 = new Attribute(".bsi", 5);
      JRip jRip1 = new JRip();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 623.0, 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.333113025675545
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IBk iBk0 = new IBk();
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, 1);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      Attribute attribute0 = new Attribute("J'jVN\"`Tc2'K-f&[j ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = 2220.0;
      jRip_NominalAntd0.cover = (-614.0588112);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(78, doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance4);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      SparseInstance sparseInstance0 = new SparseInstance(100);
      Integer integer0 = new Integer(69);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      sparseInstance0.isMissing(100);
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      sMO0.getTechnicalInformation();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval2.setClassifier(sMO0);
      Attribute attribute0 = new Attribute(".bsi", instances0, 4);
      arrayList0.add(attribute0);
      SelectedTag selectedTag0 = wrapperSubsetEval1.getEvaluationMeasure();
      wrapperSubsetEval0.setEvaluationMeasure(selectedTag0);
      ASEvaluation.makeCopies(wrapperSubsetEval1, 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nrevDL: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      instances0.add((Instance) sparseInstance0);
      Attribute attribute1 = new Attribute("#", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4675368896014644
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.setSeed(932L);
      jRip0.listOptions();
      jRip0.getDebug();
      jRip0.getUsePruning();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "loCqkM";
      stringArray0[1] = "LogScore BDeu: ";
      stringArray0[2] = "Aa;V4_2w\"ebUB?7g";
      stringArray0[3] = "w%vWfA/r\"4<";
      stringArray0[4] = "-:J{I]_N`5Ss4u";
      jRip0.setOptions(stringArray0);
      Random.setNextRandom((-2649));
      jRip0.usePruningTipText();
      System.setCurrentTimeMillis((-1L));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 932L;
      doubleArray0[1] = (double) 932L;
      doubleArray0[2] = (double) 932L;
      doubleArray0[3] = (double) 932L;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = 336.95613713;
      doubleArray0[6] = (double) (-2649);
      doubleArray0[7] = (double) (-2649);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2649), doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ":7)dK<sh_@Om";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":7)dK<sh_@Om");
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      SparseInstance sparseInstance0 = new SparseInstance(100);
      Integer integer0 = new Integer(69);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      sMO0.getTechnicalInformation();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      instances0.indexOf("CVBlP,{zG>Lej:(");
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval2.setClassifier(sMO0);
      Attribute attribute0 = new Attribute(".bsi", instances0, 4);
      wrapperSubsetEval1.getTechnicalInformation();
      arrayList0.add(attribute0);
      SelectedTag selectedTag0 = wrapperSubsetEval1.getEvaluationMeasure();
      wrapperSubsetEval0.setEvaluationMeasure(selectedTag0);
      ASEvaluation.makeCopies(wrapperSubsetEval1, 2);
      wrapperSubsetEval0.postProcess(intArray0);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2464.601295183875;
      doubleArray0[4] = 2464.601295183875;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$S&\\mJV\"-~5pLlT");
      Attribute attribute0 = new Attribute("w)Yz#}P$mg'Ms_=,*W", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BGBA!-Z(9KFqINlQ_y", arrayList0, 4);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)102;
      byteArray0[4] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.add((Instance) binarySparseInstance0);
      arrayList0.iterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 2464.601295183875, 84.879448898602);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList2, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList2.add((Locale) null);
      arrayList1.add((Locale) null);
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) list1, locale_FilteringMode2);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass((-1926.0), (Instances) null, 6.0, 6.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-S <seed>";
      stringArray0[2] = "Dd7.";
      jRip0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[3] = "Stanford University";
      stringArray0[4] = "";
      stringArray0[5] = "-E";
      jRip0.setOptions(stringArray0);
      jRip0.listOptions();
      jRip0.getFolds();
      jRip0.getMinNo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U`4";
      stringArray0[1] = "fqo=M:MaUh31iD";
      stringArray0[2] = ".-Cf`4xXu%(hXqe";
      stringArray0[3] = ":";
      stringArray0[4] = "\n*** Building stage ***";
      stringArray0[5] = "-S";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -S option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      Integer integer0 = new Integer(69);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval2.setClassifier(sMO0);
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      ASEvaluation.makeCopies(wrapperSubsetEval1, 2);
      wrapperSubsetEval0.postProcess(intArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1873.623409));
      jRip_RipperRule0.grow(instances0);
      System.setCurrentTimeMillis(7);
      jRip0.toString();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      doubleArray0[4] = 2427.76;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w)Yz#}P$mg'Ms_=,*W");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("w)Yz#}P$mg'Ms_=,*W", linkedList0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      Instances instances0 = new Instances("BGBA!-Z(9KFqINlQ_y", arrayList0, 2241);
      instances0.add((Instance) binarySparseInstance0);
      arrayList0.iterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      Integer integer0 = new Integer(69);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      sMO0.getTechnicalInformation();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval2.setClassifier(sMO0);
      Attribute attribute0 = new Attribute(".bsi", instances0, 4);
      arrayList0.add(attribute0);
      SelectedTag selectedTag0 = wrapperSubsetEval1.getEvaluationMeasure();
      wrapperSubsetEval0.setEvaluationMeasure(selectedTag0);
      ASEvaluation.makeCopies(wrapperSubsetEval1, 2);
      wrapperSubsetEval0.postProcess(intArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      jRip_RipperRule0.grow(instances0);
      System.setCurrentTimeMillis(5);
      System.setCurrentTimeMillis(7);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 21;
      Instances instances0 = new Instances("*Wp!NG&%gZ&)i", arrayList0, 21);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("S5VWNC C\"iZ9j.)");
      Attribute attribute0 = new Attribute("$Z?x^eMZp", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BayesNet bayesNet0 = new BayesNet();
      jRip_NominalAntd0.splitData(instances0, int0, 0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (double) 1L;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-F";
      jRip0.setOptimizations(69);
      stringArray0[1] = "r:-see]";
      stringArray0[2] = ",\\E1qgk!ThE";
      jRip0.setUsePruning(true);
      stringArray0[3] = " | Accuracy = ";
      Utils.log2 = 1.0;
      stringArray0[4] = "dLhM0_";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = ": ";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r:-see]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setMinNo((-3729.5498455));
      jRip0.getMinNo();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      SparseInstance sparseInstance0 = new SparseInstance(100);
      Integer integer0 = new Integer(33);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CVBlP,{zG>Lej:(", arrayList0, 2363);
      SMO sMO0 = new SMO();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      sMO0.setNumFolds((-1850));
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      arrayList0.ensureCapacity(83);
      wrapperSubsetEval1.getEvaluationMeasure();
      wrapperSubsetEval2.setClassifier(sMO0);
      wrapperSubsetEval0.postProcess(intArray0);
      wrapperSubsetEval2.setThreshold(822.41714768);
      wrapperSubsetEval1.setFolds((-5));
      ASEvaluation.makeCopies(wrapperSubsetEval1, 2);
      wrapperSubsetEval0.postProcess(intArray0);
      instances0.add((Instance) sparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      instances0.equalHeadersMsg(instances1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Attribute attribute0 = new Attribute(".arff", (List<String>) null);
      JRip jRip1 = new JRip();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 623.0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$S&\\mJV\"-~5pLlT");
      Attribute attribute0 = new Attribute("w)Yz#}P$mg'Ms_=,*W", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 1L;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      jRip_NumericAntd0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("!RLcQo8inOG", arrayList0, 0);
      jRip_NumericAntd0.splitData(instances0, 1L, 84.879448898602);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J'jVN\"`Tc2'K-f&[j ";
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      BallTree ballTree0 = new BallTree();
      MockPrintStream mockPrintStream0 = new MockPrintStream("T0tZ0}Q;K09+;");
      MockPrintStream mockPrintStream1 = new MockPrintStream("J'jVN\"`Tc2'K-f&[j ");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("J'jVN\"`Tc2'K-f&[j ");
      Attribute attribute0 = new Attribute("");
      DecimalFormat decimalFormat0 = new DecimalFormat("j>hyfl0&");
      StringBuffer stringBuffer0 = new StringBuffer("@attribute");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      Format.Field format_Field1 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      decimalFormat0.format(42L, stringBuffer0, fieldPosition0);
      mockPrintStream1.append((CharSequence) "@end", 0, 2);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties(properties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        properties4.put(object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 620.36844102118;
      doubleArray0[1] = (double) 3;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) linkedList1);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, linkedList1, 1307);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      attribute0.equalsMsg(object0);
      DenseInstance denseInstance0 = new DenseInstance(20.0, doubleArray0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1307
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) 1L;
      doubleArray0[4] = 2427.76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$S&\\mJV\"-~5pLlT");
      Attribute attribute0 = new Attribute("w)Yz#}P$mg'Ms_=,*W", linkedList0);
      attribute0.addStringValue("numeric");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) (byte)55;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("w)Yz#}P$mg'Ms_=,*W >= NaN", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[4] = (double) (byte)12;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nGrowing and pruning Replace ...");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Attribute attribute0 = new Attribute("\nGrowing and pruning Replace ...", linkedList0);
      attribute0.addStringValue("numeric");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-1.0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\nFinal ruleset: ";
      stringArray0[1] = "[wePCe";
      stringArray0[2] = "g:Mddn";
      stringArray0[3] = "\nNumber of Rules : ";
      stringArray0[4] = "version";
      stringArray0[5] = "";
      stringArray0[6] = "!jyg";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String string0 = jRip0.seedTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 8);
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("@relation", (String) null, 5);
      arrayList0.add(attribute0);
      Instances instances1 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 958.71467812;
      doubleArray0[1] = 958.71467812;
      doubleArray0[2] = 958.71467812;
      doubleArray0[3] = 958.71467812;
      doubleArray0[4] = 958.71467812;
      doubleArray0[5] = 958.71467812;
      doubleArray0[6] = 958.71467812;
      SparseInstance sparseInstance0 = new SparseInstance(958.71467812, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      Utils.log2 = 2539.0468;
      Attribute attribute0 = new Attribute("", 4);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "relational";
      stringArray0[1] = "=_3C";
      stringArray0[2] = "integer";
      stringArray0[3] = "relational";
      stringArray0[4] = "relational";
      stringArray0[5] = "integer";
      Attribute.main(stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0, intArray0, (-364));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(100, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(78);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(100);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-117.0), doubleArray0);
      Attribute attribute0 = new Attribute("$z$lP.ITy]'");
      attribute0.setStringValue("$z$lP.ITy]'");
      attribute0.addStringValue("$z$lP.ITy]'");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance2);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("$z$lP.ITy]' <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      doubleArray0[4] = 2427.76;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$S&\\mJV\"-~5pLlT");
      Attribute attribute0 = new Attribute("w)Yz#}P$mg'Ms_=,*W", linkedList0);
      attribute0.addStringValue("numeric");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      linkedList0.removeIf(predicate3);
      jRip_NumericAntd0.value = (-1.0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("w)Yz#}P$mg'Ms_=,*W >= NaN", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JRip jRip0 = new JRip();
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      jRip0.setUsePruning(false);
      doubleArray0[3] = 2427.76;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance(1L, doubleArray0);
      CostMatrix costMatrix0 = new CostMatrix(63);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      jRip0.setUsePruning(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "One rule found after pruning:";
      jRip0.getOptions();
      stringArray0[1] = ".cost";
      // Undeclared exception!
      costMatrix1.initialize();
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = 78;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0, intArray0, (-364));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(78, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(78);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-117.0), doubleArray0);
      Attribute attribute0 = new Attribute("$z$lP.ITy]'");
      attribute0.setStringValue("$z$lP.ITy]'");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(78, doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      assertEquals("The maximum number of attributes to include in transformed attribute names.", principalComponents0.maximumAttributeNamesTipText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 21;
      Instances instances0 = new Instances("*Wp!NG&%gZ&)i", arrayList0, 21);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(89);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      instances0.toArray(integerArray0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("cHTVVv-Qp#M*wl}$L");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 0, 1);
      String string1 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals("cHTVVv-Qp#M*wl}$L = ", string1);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("VIW%G'*fGA", arrayList0, 21);
      Integer integer0 = new Integer(21);
      Integer integer1 = new Integer(21);
      Integer integer2 = new Integer(1329);
      Integer integer3 = new Integer((-178));
      Integer integer4 = new Integer(21);
      Integer integer5 = new Integer(278);
      Integer integer6 = new Integer((-247));
      Integer integer7 = new Integer(21);
      Integer integer8 = new Integer((-3));
      Integer[] integerArray0 = new Integer[7];
      Integer integer9 = new Integer((-178));
      integerArray0[0] = integer9;
      integerArray0[1] = integer2;
      Integer integer10 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer10;
      Integer integer11 = new Integer((-2863));
      integerArray0[3] = integer11;
      integerArray0[4] = integer8;
      integerArray0[5] = integer7;
      Integer integer12 = new Integer(1329);
      integerArray0[6] = integer12;
      instances0.toArray(integerArray0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      try { 
        jRip0.rulesetForOneClass(1392.8446027399698, instances0, (-911.44219517923), (-571.4910808759));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 21;
      Instances instances0 = new Instances("*WpKNG&%gZ&)i", arrayList0, 21);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer((-247));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-247));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      instances0.toArray(integerArray0);
      SMO sMO0 = new SMO();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 21;
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-247));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(89);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SMO sMO0 = new SMO();
      AbstractClassifier.makeCopies(sMO0, 2);
      wrapperSubsetEval0.setClassifier(sMO0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("cHTVVv-Qp#M*wl}$L");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("8118", string0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("7>D_^)Ayp.-.aZv[", (List<String>) null, 118);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getRevision();
      jRip0.getMinNo();
      jRip1.setMinNo(0.0);
      jRip_NumericAntd0.maxInfoGain = 0.0;
      JRip jRip2 = (JRip)AbstractClassifier.makeCopy(jRip1);
      jRip2.setCheckErrorRate(false);
      jRip0.setCheckErrorRate(true);
      jRip_NumericAntd0.getAttrValue();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(11L);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) 11L;
      doubleArray0[4] = 2427.76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$S&\\mJV\"-~5pLlT");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String string0 = jRip0.minNoTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[4] = (double) (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nGrowing and pruning Replace ...");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      jRip0.globalInfo();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2427.76;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)82;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[4] = (double) (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1L, doubleArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nGrowing and pruning Replace ...");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      jRip0.globalInfo();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_dtInstances;
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Qv7P,Xe");
      mockPrintStream0.println("DZEk}(IB|$qN/ RU");
      mockPrintStream0.println(1645L);
      mockPrintStream0.print((int) (byte)5);
      MockPrintStream mockPrintStream1 = new MockPrintStream("V^");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)5;
      mockPrintStream0.write(byteArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream2.print('');
      mockPrintStream0.print((long) (byte) (-62));
      MockPrintStream mockPrintStream3 = new MockPrintStream("DZEk}(IB|$qN/ RU");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("|Qv7P,Xe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // |Qv7P,Xe not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("iNG~.(t#VZ0y", 0);
      attribute0.copy("iNG~.(t#VZ0y");
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = new IBk(2);
      JRip jRip1 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "numeric";
      stringArray0[1] = "iNG~.(t#VZ0y";
      jRip1.setOptions(stringArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      double double0 = jRip_RipperRule0.getConsequent();
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = 78;
      SparseInstance sparseInstance0 = new SparseInstance((-0.2929703116033031), doubleArray0, intArray0, (-364));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(78, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SparseInstance sparseInstance3 = new SparseInstance(78, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-117.0), doubleArray0);
      Attribute attribute0 = new Attribute("Bz$lP.ITy]'");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(78, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[8];
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      int[] intArray0 = new int[7];
      iBk0.setWindowSize((-559));
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(91);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      String string0 = jRip0.foldsTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList3, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add((Locale) null);
      arrayList1.add((Locale) null);
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      arrayList5.add((Locale) null);
      arrayList3.add((Locale) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList5, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2, locale_FilteringMode3);
      arrayList3.add((Locale) null);
      ArrayList<Locale> arrayList6 = new ArrayList<Locale>(arrayList1);
      arrayList6.add((Locale) null);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CHINA;
      arrayList1.add(locale1);
      ArrayList<Locale> arrayList7 = new ArrayList<Locale>();
      arrayList3.add((Locale) null);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) linkedList0, locale_FilteringMode4);
      ArrayList<Locale> arrayList8 = new ArrayList<Locale>();
      System.setCurrentTimeMillis(2L);
      System.setCurrentTimeMillis(2L);
      System.setCurrentTimeMillis(2L);
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JRip jRip0 = new JRip();
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[4] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 2427.76;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      CostMatrix costMatrix0 = new CostMatrix(63);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "One 0ule f|und after pruning:";
      CoverTree coverTree0 = new CoverTree();
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, long0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = 78;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0, intArray0, (-364));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(78, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(78);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-117.0), doubleArray0);
      jRip0.setFolds(78);
      Attribute attribute0 = new Attribute("$z$lP.ITy]'");
      attribute0.setStringValue("$z$lP.ITy]'");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(78, doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      assertEquals("Retain enough PC attributes to account for this proportion of variance.", principalComponents0.varianceCoveredTipText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("': infoGain = ");
      attribute0.setWeight(0.0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      DecisionTable decisionTable0 = new DecisionTable();
      Hashtable<Object, String> hashtable0 = null;
      // Undeclared exception!
      try { 
        decisionTable0.printFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.DecisionTable", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 21;
      Instances instances0 = new Instances("*Wp!NG&%gZ&)i", arrayList0, 21);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-247));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(89);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      instances0.toArray(integerArray0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("@relation");
      Attribute.typeToString(684);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip0.rulesetForOneClass((-1962.66498264), (Instances) null, int0, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xW>;SC^rO}4C)1gU{");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a4go'}AK/j%Bc93JiHD");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xW>;SC^rO}4C)1gU{");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2864.27579127, doubleArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a4go'}AK/j%Bc93JiHD");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xW>;SC^rO}4C)1gU{");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nGrowing and pruning Replace ...");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nGrowing and pruning Replace ...");
      Attribute attribute0 = new Attribute("\nGrowing and pruning Replace ...", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("*Wp!NG&%gZ&)i", arrayList0, 13);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("", "B%IvBUd+K0H!}%le#+", "hM`-gPhZ~8I@{Qkjn8");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      attribute0.enumerateValues();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances1 = decisionTable0.m_dtInstances;
      jRip_NominalAntd0.splitData(instances0, 64.0, 1);
      assertFalse(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity((-71));
      int int0 = 21;
      Instances instances0 = new Instances("*p!NG&%g7yZ&)i", arrayList0, 21);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(21);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer((-1128));
      Integer integer7 = new Integer(291);
      Integer integer8 = new Integer(int0);
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("eioZ<t^Wo})kjX", arrayList1, 21);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 28.255138769953764, int0);
      jRip_NumericAntd0.splitData(instances0, 2346.019072548129, int0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Numeric att.ib#utes");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      jRip0.getCheckErrorRate();
      protectedProperties0.keySet();
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JRip jRip0 = new JRip();
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 2427.76;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      CostMatrix costMatrix0 = new CostMatrix(63);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      String[] stringArray0 = new String[13];
      stringArray0[1] = "One rule found after pruning:";
      stringArray0[1] = ".cost";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".cost";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList3, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add((Locale) null);
      arrayList1.add((Locale) null);
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      arrayList5.add((Locale) null);
      arrayList3.add((Locale) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList5, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2, locale_FilteringMode3);
      arrayList3.add((Locale) null);
      ArrayList<Locale> arrayList6 = new ArrayList<Locale>(arrayList1);
      arrayList6.add((Locale) null);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CHINA;
      arrayList1.add(locale1);
      arrayList1.add(locale0);
      ArrayList<Locale> arrayList7 = new ArrayList<Locale>();
      arrayList3.add((Locale) null);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) linkedList0, locale_FilteringMode4);
      ArrayList<Locale> arrayList8 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2, locale_FilteringMode5);
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList1);
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("8118", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      Attribute attribute0 = new Attribute("weka.classifiers.rules.JRip", "\t--> ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccuRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-7);
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 0;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList2, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList2.add((Locale) null);
      arrayList1.add((Locale) null);
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) list1, locale_FilteringMode2);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) list2, locale_FilteringMode0);
      arrayList1.add((Locale) null);
      Locale locale0 = Locale.CHINESE;
      arrayList1.add((Locale) null);
      ArrayList<Locale> arrayList4 = new ArrayList<Locale>();
      arrayList4.add((Locale) null);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list3, locale_FilteringMode3);
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) arrayList5, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list2);
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      System.setCurrentTimeMillis((-5374L));
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(" <= NaN", string1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instance instance0 = null;
      jRip0.getDebug();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add((Locale) null);
      Locale locale0 = Locale.ITALIAN;
      arrayList1.add(locale0);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode4);
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) arrayList1);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute("-P <start set>");
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      Utils.SMALL = 0.5;
      jRip0.setUsePruning(false);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w)Yz#}P$mg'Ms_=,*W");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      Instances instances0 = new Instances("BGBA!-Z(9KFqINlQ_y", arrayList0, 2241);
      arrayList0.iterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      SparseInstance sparseInstance0 = new SparseInstance(78);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(78, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(78, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(78);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-117.0), doubleArray0);
      Attribute attribute0 = new Attribute("Bz$lP.ITy]'");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(78, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(" => Bz$lP.ITy]'=", string0);
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BallTree ballTree0 = new BallTree();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("N");
      Attribute attribute0 = new Attribute(">I|]VRrZJ,");
      StringBuffer stringBuffer0 = new StringBuffer("@end");
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ClassOrder classOrder0 = new ClassOrder();
      properties1.put(classOrder0, properties3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties3 = null;
      try {
        protectedProperties3 = new ProtectedProperties(properties1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      jRip0.getCheckErrorRate();
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 477);
      DecimalFormat decimalFormat0 = new DecimalFormat("DcNd$");
      StringBuffer stringBuffer0 = new StringBuffer(2797);
      decimalFormat0.format(0L, stringBuffer0, fieldPosition0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties4);
      Properties properties5 = new Properties();
      Properties properties6 = new Properties(protectedProperties4);
      Properties properties7 = new Properties();
      Properties properties8 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties8);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      assertTrue(protectedProperties6.equals((Object)protectedProperties0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":jX@GNe%";
      stringArray0[1] = "~";
      stringArray0[2] = "The minimum total weight of the instances in a rule.";
      stringArray0[3] = "GdLh{+-x+";
      stringArray0[4] = "";
      stringArray0[5] = "InfoGainAttributeEval :\n\nEvaluates the worth of an attribute by measuring the information gain with respect to the class.\n\nInfoGain(Class,Attribute) = H(Class) - H(Class | Attribute).\n";
      stringArray0[6] = "\tLearning Rate for the backpropagation algorithm.\n\t(Value should be between 0 - 1, Default = 0.3).";
      stringArray0[7] = "45_'C%v";
      stringArray0[8] = "\tWhether NOT use pruning\n\t(default: use pruning)";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String string0 = jRip0.optimizationsTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals("The number of optimization runs.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 620.36844102118;
      doubleArray0[3] = (double) 1;
      doubleArray0[0] = (double) 4;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = 1.5;
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WgTE6tp:*3VjBj";
      stringArray0[1] = "9W$k|j";
      JRip.main(stringArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }
}
