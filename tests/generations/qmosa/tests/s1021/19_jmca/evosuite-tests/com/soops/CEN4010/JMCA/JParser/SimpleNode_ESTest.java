/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 19:39:11 GMT 2020
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.skip((-1075307820));
      pipedInputStream0.close();
      pipedInputStream0.markSupported();
      StringReader stringReader0 = new StringReader("<>AEOF>");
      SimpleNode simpleNode0 = new SimpleNode(63);
      StringReader stringReader1 = new StringReader("<>AEOF>");
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '~';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = 'q';
      charArray0[5] = '5';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1075307820), (-1075307820));
      javaCharStream0.BeginToken();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 63);
      stringReader1.skip(63);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream0.mark(0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<>AEOF>";
      stringArray0[1] = "AndExpression";
      stringArray0[2] = "<>AEOF>";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add("%");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList1.containsAll(linkedList0);
      StringWriter stringWriter0 = new StringWriter(63);
      StringReader stringReader2 = new StringReader("<>AEOF>");
      simpleNode0.dump("FormalParameers", stringWriter0);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ")";
      StringReader stringReader0 = new StringReader(")");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 14);
      simpleNode0.identifiers = null;
      simpleNode0.parser = javaParser0;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.745740170586414
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<=");
      Object object0 = new Object();
      arrayList0.trimToSize();
      arrayList0.ensureCapacity((-2028404874));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "<=";
      objectArray0[1] = object1;
      Object object4 = new Object();
      objectArray0[2] = object4;
      arrayList0.add("<<");
      objectArray0[3] = object1;
      objectArray0[4] = object3;
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "<=";
      arrayList0.ensureCapacity(47);
      arrayList0.toArray(objectArray0);
      Object object5 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      Object object6 = new Object();
      StringWriter stringWriter1 = new StringWriter(32);
      simpleNode0.dump("+NR/)M4a9eR'Y}e", stringWriter1);
      assertEquals("<InstanceOfExpression>\n  <identifier>*le</identifier>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
      
      simpleNode0.toString("\"}\"");
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SimpleNode simpleNode0 = new SimpleNode(57);
      simpleNode0.setIdentifier("<");
      SystemInUtil.addInputLine("Ro\"");
      simpleNode0.setIdentifier(">>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.trimToSize();
      Object object0 = new Object();
      arrayList0.ensureCapacity(10);
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<");
      arrayList0.removeIf(predicate0);
      Object object2 = new Object();
      arrayList0.clear();
      arrayList0.trimToSize();
      arrayList0.ensureCapacity(57);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayList0;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "<";
      arrayList0.toArray(objectArray0);
      Object object4 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      Object object5 = new Object();
      simpleNode0.dump("JyKv9l&`E*iXl4D}f|", stringWriter0);
      assertEquals("<PostfixExpression>\n  <identifier>*lt</identifier>\n  <identifier>*rshft</identifier>\n</PostfixExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0805738483648537
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ReferenceType");
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("{");
      simpleNode0.setIdentifier("}");
      simpleNode0.toString();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2228));
      Integer integer1 = new Integer((-731));
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer2 = new Integer(18);
      arrayList0.add(integer2);
      arrayList0.add((Integer) null);
      Integer integer3 = new Integer(103);
      Integer integer4 = new Integer((-2228));
      arrayList0.add(integer1);
      SystemInUtil.addInputLine("}");
      Integer integer5 = new Integer(18);
      Integer integer6 = new Integer((-120958784));
      Integer integer7 = new Integer((-2228));
      arrayList1.add(integer7);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.containsAll(arrayList1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList2.containsAll(arrayList0);
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("ReferenceType", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("ReferenceType");
      assertEquals("ReferenceTypeCompilationUnit : { : }", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ReferenceT");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.setIdentifier(">=");
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2228));
      Integer integer1 = new Integer((-782));
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer2 = new Integer(18);
      arrayList0.add(integer2);
      arrayList0.removeAll(arrayList1);
      arrayList1.add(integer2);
      arrayList0.add((Integer) null);
      Integer integer3 = new Integer((-782));
      Integer integer4 = new Integer((-2228));
      Integer integer5 = new Integer((-782));
      Integer integer6 = new Integer(18);
      arrayList1.add((Integer) null);
      Integer integer7 = new Integer(18);
      arrayList1.add((Integer) null);
      arrayList0.add((Integer) null);
      Integer integer8 = new Integer(18);
      Integer integer9 = new Integer((-1646));
      Integer integer10 = new Integer(1985);
      arrayList0.add((Integer) null);
      Integer integer11 = new Integer((-1646));
      arrayList1.add(integer11);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("ReferenceT", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9256504262569104
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("2");
      JavaParser javaParser0 = new JavaParser(">");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 44);
      simpleNode0.setIdentifier(">");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.trimToSize();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      StringReader stringReader0 = new StringReader("2");
      JavaParser javaParser1 = new JavaParser("=");
      stringReader0.skip(4518L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>(linkedList1);
      Object object3 = new Object();
      linkedList0.removeFirstOccurrence(object3);
      simpleNode0.toString("{");
      Integer integer0 = new Integer(1);
      arrayList1.add(integer0);
      Integer integer1 = new Integer(44);
      arrayList1.add(integer1);
      arrayList0.containsAll(arrayList1);
      Object object4 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object5 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("D+DE?M{*aC>", stringWriter0);
      assertEquals("<ExclusiveOrExpression>\n  <identifier>*gt</identifier>\n</ExclusiveOrExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 35;
      SimpleNode simpleNode0 = new SimpleNode(35);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.identifiers = null;
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"IK&-kkUUXC8k@G");
      arrayList0.add("5:");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.toString("\"IK&-kkUUXC8k@G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Integer integer0 = new Integer((-1812));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer(18);
      arrayList0.add(integer1);
      Integer integer2 = new Integer(18);
      Integer integer3 = new Integer((-1812));
      arrayList0.add(integer3);
      Integer integer4 = new Integer(1273);
      Integer integer5 = new Integer(18);
      Integer integer6 = new Integer(1273);
      Integer integer7 = new Integer(1630);
      Integer integer8 = new Integer((-1812));
      Integer integer9 = new Integer(18);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("{");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer10 = new Integer(18);
      Integer integer11 = new Integer((-157482134));
      Integer integer12 = new Integer(0);
      Integer integer13 = new Integer(1842);
      Integer integer14 = new Integer((-1953150474));
      arrayList0.add(integer14);
      Integer integer15 = new Integer(0);
      Integer integer16 = new Integer(255);
      arrayList0.add(integer5);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("zzx`:h\"e3]v\"P9>,", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<");
      Object object0 = new Object();
      arrayList0.ensureCapacity((-2979));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      arrayList0.ensureCapacity(0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      arrayList2.add("<");
      arrayList1.add("li");
      arrayList2.add("*gt");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayList1;
      arrayList0.toArray(objectArray0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "<";
      Object object5 = new Object();
      objectArray1[1] = object5;
      objectArray1[2] = (Object) "*gt";
      objectArray1[3] = (Object) arrayList3;
      arrayList3.toArray(objectArray1);
      Object object6 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      Object object7 = new Object();
      simpleNode0.dump("g)0.`LE'mwEa(Onr", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Integer integer0 = new Integer((-1812));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer(18);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("Q_7+bX+7");
      Integer integer2 = new Integer((-1812));
      arrayList0.add(integer2);
      Integer integer3 = new Integer(1273);
      Integer integer4 = new Integer(18);
      Integer integer5 = new Integer(1273);
      Integer integer6 = new Integer(1630);
      Integer integer7 = new Integer((-1812));
      Integer integer8 = new Integer(18);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add(";");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer9 = new Integer((-40));
      Integer integer10 = new Integer(1630);
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      arrayList3.add(integer4);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(0);
      SystemInUtil.addInputLine("MultiplicativeExpression");
      simpleNode0.setIdentifier("&&");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.trimToSize();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      arrayList0.trimToSize();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "&";
      objectArray0[5] = (Object) "&";
      arrayList0.toArray(objectArray0);
      Object object3 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "&&";
      objectArray1[1] = (Object) "&&";
      Object object4 = new Object();
      objectArray1[2] = object4;
      arrayList0.toArray(objectArray1);
      Object object5 = new Object();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("&&", stringWriter1);
      assertEquals("<CompilationUnit>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild(simpleNode0, 0);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      String string0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump("mRh*vp,tScd||W", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      pushbackInputStream0.skip((-1075307820));
      pipedInputStream0.close();
      pipedInputStream0.markSupported();
      StringReader stringReader0 = new StringReader("<>AEOF>");
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringReader stringReader1 = new StringReader("<>AEOF>");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      arrayList0.removeAll(linkedList0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<>AEOF>";
      stringArray0[1] = "<>AEOF>";
      arrayList0.add("}SE2gZW|_q*/");
      stringArray0[2] = "<>AEOF>";
      linkedList0.toArray(stringArray0);
      arrayList0.containsAll(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList0.add("&");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      arrayList0.containsAll(linkedList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      arrayList1.add("<>AEOF>");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("}SE2gZW|_q*/", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>}SE2gZW|_q*/</identifier>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6987829895138007
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4195);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1988));
      StringWriter stringWriter0 = new StringWriter(32);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
      pushbackInputStream1.available();
      pushbackInputStream1.skip((-1075307805));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.replaceAll(unaryOperator0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      SimpleNode simpleNode1 = new SimpleNode((-1988));
      simpleNode1.jjtOpen();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode1.dump("DfS`f6]jjd;B=_", stringWriter1);
      simpleNode0.jjtAddChild(simpleNode1, 840);
      simpleNode0.jjtGetChild(840);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(841, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1274832349932322
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("FFo|_vR+X*V%|V^%bN", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 10);
      StringReader stringReader0 = new StringReader(">>");
      simpleNode0.jjtGetNumChildren();
      int int0 = 529;
      stringWriter0.append((CharSequence) "FFo|_vR+X*V%|V^%bN");
      int int1 = 1219;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 1219, 0, (-152877814));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[3] = (byte)89;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)67;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.write(532);
      SimpleNode simpleNode0 = new SimpleNode((byte)67);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.dump("zw2AK=m?<,", stringWriter0);
      simpleNode0.jjtGetNumChildren();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.peekNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 4195;
      PipedInputStream pipedInputStream0 = new PipedInputStream(4195);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 4195);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
      pushbackInputStream1.available();
      pushbackInputStream1.skip((-1075307805));
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      pushbackInputStream0.available();
      charArray0[1] = '3';
      charArray0[1] = 'B';
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(4195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("80eoOnQ-cR}");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 2595);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2595
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SystemInUtil.addInputLine("2");
      Integer integer0 = new Integer((-1812));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer(18);
      SystemInUtil.addInputLine("Q_7+bX+7");
      Integer integer2 = new Integer(18);
      Integer integer3 = new Integer((-1812));
      arrayList0.add(integer3);
      simpleNode0.identifiers = null;
      Integer integer4 = new Integer(1273);
      Integer integer5 = new Integer(18);
      Integer integer6 = new Integer(1273);
      arrayList0.add(integer6);
      Integer integer7 = new Integer(1630);
      Integer integer8 = new Integer((-1812));
      Integer integer9 = new Integer(18);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer10 = new Integer((-40));
      Integer integer11 = new Integer(1630);
      arrayList0.add(integer4);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("AssertStatement", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-4184));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      arrayList0.removeAll(linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xv2w6Pj*3OZ]HA-";
      stringArray0[1] = "xv2w6Pj*3OZ]HA-";
      stringArray0[2] = "xv2w6Pj*3OZ]HA-";
      stringArray0[3] = "xv2w6Pj*3OZ]HA-";
      stringArray0[4] = "xv2w6Pj*3OZ]HA-";
      stringArray0[5] = "xv2w6Pj*3OZ]HA-";
      linkedList0.toArray(stringArray0);
      arrayList0.containsAll(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList0.add("xv2w6Pj*3OZ]HA-");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      arrayList0.containsAll(linkedList1);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        simpleNode0.dump("xv2w6Pj*3OZ]HA-", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4184
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(";");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-958));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump(";", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -958
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(286);
      StringReader stringReader0 = new StringReader("ja8MCd");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 14);
      simpleNode0.id = 14;
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetChild(14);
      assertEquals(15, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.skip((-1075307820));
      pipedInputStream0.close();
      pipedInputStream0.markSupported();
      StringReader stringReader0 = new StringReader("<>AEOF>");
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringReader stringReader1 = new StringReader("<>AEOF>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 18, 18);
      javaCharStream0.BeginToken();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 18);
      stringReader1.skip(18);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream0.mark(0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      String[] stringArray0 = new String[8];
      arrayList0.removeAll(linkedList0);
      stringArray0[0] = "<>AEOF>";
      stringArray0[1] = "RRFC+_\"J";
      stringArray0[2] = "<>AEOF>";
      linkedList0.toArray(stringArray0);
      arrayList0.containsAll(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList0.add("=");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      arrayList1.containsAll(linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader2 = new StringReader("<>AEOF>");
      simpleNode0.dump("FormalParameers", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>=</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtOpen();
      simpleNode0.parent = (Node) simpleNode0;
      simpleNode0.id = 0;
      simpleNode0.parent = (Node) simpleNode0;
      simpleNode0.jjtAddChild(simpleNode0, 0);
      Node node0 = simpleNode0.jjtGetParent();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(0, "&");
      simpleNode0.toString();
      simpleNode0.jjtSetParent(simpleNode0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = simpleNode0.parent;
      nodeArray0[1] = simpleNode0.parent;
      nodeArray0[2] = simpleNode0.parent;
      nodeArray0[3] = simpleNode0.parent;
      nodeArray0[4] = simpleNode0.parent;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtAddChild(simpleNode0, 1);
      simpleNode0.jjtGetParent();
      Node node1 = simpleNode0.jjtGetChild(1);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString("CompilationUnit");
      node0.jjtGetChild(1);
      // Undeclared exception!
      try { 
        node1.jjtGetChild((-1250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1250
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9035282968222415
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetParent();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(" f0Z2,-;6#+ef");
      arrayList0.add(0, "/0");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("n+IP7fa5m WA");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function0);
      Function<SimpleNode, String> function2 = unaryOperator0.compose((Function<? super SimpleNode, ? extends String>) function1);
      unaryOperator2.compose((Function<? super SimpleNode, ? extends String>) function2);
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, Integer> function3 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function<Integer, String> function6 = unaryOperator4.andThen((Function<? super Integer, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function6);
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function3);
      arrayList1.replaceAll(unaryOperator0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtOpen();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "n+IP7fa5m WA");
      simpleNode0.dump("n+IP7fa5m WA", stringWriter0);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-2004664120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2004664120
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Integer integer0 = new Integer((-1812));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer1 = new Integer(18);
      arrayList0.add(integer1);
      Integer integer2 = new Integer(18);
      Integer integer3 = new Integer((-1812));
      arrayList0.add(integer3);
      Integer integer4 = new Integer(1273);
      Integer integer5 = new Integer(18);
      Integer integer6 = new Integer(1273);
      Integer integer7 = new Integer(1613);
      Integer integer8 = new Integer(1667);
      Integer integer9 = new Integer((-1078));
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("rV");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer10 = new Integer((-1078));
      Integer integer11 = new Integer(18);
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer12 = new Integer(0);
      arrayList0.add(integer12);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(" ", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>rV</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("^");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(10);
      stringWriter1.close();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      Integer integer0 = new Integer((-2228));
      Integer integer1 = new Integer((-2228));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.add(integer0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-117644756));
      Integer integer5 = new Integer((-150));
      Integer integer6 = new Integer((-2228));
      arrayList2.add(integer6);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      arrayList4.containsAll(arrayList3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList4.containsAll(arrayList2);
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("^", stringWriter1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<=");
      Object object0 = new Object();
      arrayList0.trimToSize();
      arrayList0.ensureCapacity((-2028404874));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "<=";
      objectArray0[1] = object1;
      Object object4 = new Object();
      objectArray0[2] = object4;
      objectArray0[3] = object1;
      objectArray0[4] = object3;
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "<=";
      arrayList0.ensureCapacity(47);
      arrayList0.toArray(objectArray0);
      Object object5 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      Object object6 = new Object();
      simpleNode0.dump("1", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*le</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1274832349932322
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("FFo|_vR+X*V%|V^%bN", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 10);
      StringReader stringReader0 = new StringReader(">>");
      simpleNode0.jjtGetNumChildren();
      int int0 = 529;
      int int1 = 1219;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 1219, 0, (-152877814));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4195);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1988));
      StringWriter stringWriter0 = new StringWriter(32);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
      pushbackInputStream1.available();
      pushbackInputStream1.skip((-1075307805));
      SimpleNode simpleNode1 = new SimpleNode(4195);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '\u001A';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '3';
      charArray0[4] = 'l';
      stringWriter0.write(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1075307805));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1075307805
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode1 = new SimpleNode(0);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(10);
      stringWriter1.close();
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '+';
      charArray0[2] = '=';
      charArray0[4] = '{';
      charArray0[4] = '+';
      stringWriter1.write(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter2 = stringWriter1.append('H');
      CharBuffer charBuffer0 = CharBuffer.allocate(919);
      charBuffer0.limit(10);
      char[] charArray1 = new char[6];
      charArray1[0] = '+';
      charArray1[1] = '=';
      charArray1[2] = 'n';
      charArray1[3] = '{';
      charArray1[4] = 'H';
      charArray1[5] = 'H';
      stringWriter1.write(charArray1);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0);
      StringWriter stringWriter4 = new StringWriter('H');
      stringWriter3.close();
      stringWriter2.write("");
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter5 = stringWriter0.append('y');
      stringWriter0.append((CharSequence) "");
      stringWriter5.close();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = new StringWriter();
      simpleNode0.dump("", stringWriter7);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter7.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream(4195);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
      pushbackInputStream1.skip((-1075307805));
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = '3';
      charArray0[4] = 'l';
      SimpleNode simpleNode0 = new SimpleNode((-1888));
      // Undeclared exception!
      try { 
        simpleNode0.toString("<<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1888
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode((-3072));
      StringReader stringReader0 = new StringReader("RUNSIGNEDSHIFT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3072), 2996);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 2996);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1994780515));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-111);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "-=";
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (byte) (-111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream(4195);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pipedInputStream0, 4195);
      pushbackInputStream1.skip(0L);
      SimpleNode simpleNode0 = new SimpleNode(1061);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("L9(B2XxpG*o#zb6");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 10.  Encountered: *
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}
