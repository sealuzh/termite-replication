/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 00:31:51 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.ZoneOffset;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.function.Predicate;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.AbstractConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.value.CompareMode;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.h2.value.ValueDecimal;
import org.h2.value.ValueLob;
import org.h2.value.ValueNull;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".[wu*!6[[Ai#tQCtvW");
      SQLUtil.isDML("truncate");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.setStatementType(214);
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      // Undeclared exception!
      try { 
        isc_stmt_handle_impl1.ensureCapacity((-1611393448));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2651842916268956
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = "v4gM_uyy";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.equals(dBPrimaryKeyConstraint0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.normalize("v4gM_uyy", true);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "random()");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(0);
      stringBuilder0.append((CharSequence) "random()", 0, 0);
      stringBuilder1.delete(0, 0);
      SQLUtil.addRequiredCondition("/Wq\"?$^d{V)", stringBuilder1);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "v4gM_uyy");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint("H'X~Q~");
      assertNull(dBUniqueConstraint1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long((-774L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-597696530), "&3>Q:I\"aC8Pl");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , , ", string0);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add(dBColumnArray0[1]);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7245948325421776
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      SQLUtil.join("bFv", "execp;ocuqlg9jlup", stringArray0, (String) null, "bFv", stringArray0);
      SQLUtil.isQuery("bFv");
      SQLUtil.normalize("", false);
      SQLUtil.normalize("", true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "bFv join null as bFv on execp;ocuqlg9jlup.null = bFv.null and execp;ocuqlg9jlup.null = bFv.null and execp;ocuqlg9jlup.null = bFv.null", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint1, nameSpec1);
      dBPrimaryKeyConstraint1.isIdentical(dBPrimaryKeyConstraint0);
      SQLUtil.renderColumnListWithTableName("renamerandom()", stringArray0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("3?Z=z)S!l9sHu", defaultDBTable0, (-146), "UNIQUE (, , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3287099228098516
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "execupdate stateent returned resuts.";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execupdate stateent returned resuts.");
      assertNull(boolean0);
      
      Random.setNextRandom((-1031));
      Boolean boolean1 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("delete_7[:dyw`tb$x");
      Csv.getInstance();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl5 = new isc_stmt_handle_impl();
      GDSException gDSException0 = new GDSException("token 123");
      GDSException gDSException1 = new GDSException("esq");
      // Undeclared exception!
      try { 
        isc_stmt_handle_impl3.addWarning(gDSException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("FUY$viv\"V}sIF`", (DBTable) null, 9, "&3>Q:I\"aC8Pl");
      Integer integer0 = RawTransaction.COMMIT;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.92780366767783
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.join("bFv", "execp;ocuqlg9jlup", stringArray0, (String) null, "bFv", stringArray0);
      SQLUtil.normalize("", false);
      SQLUtil.normalize("", true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "bFv join null as bFv on execp;ocuqlg9jlup.null = bFv.null and execp;ocuqlg9jlup.null = bFv.null and execp;ocuqlg9jlup.null = bFv.null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      dBPrimaryKeyConstraint0.isIdentical(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setDoc("UNIQUE (, , )");
      SQLUtil.renderColumnListWithTableName("renamerandom()", stringArray0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition(" 1bCtKcGhyrCyvktud", stringBuilder0);
      System.setCurrentTimeMillis((-146));
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.join("SELECT * FROM ", "PRIMARY KEY (, , )", stringArray0, "PRIMARY KEY (, , )", "", stringArray0);
      SQLUtil.mutatesStructure("create materialized view");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5788449127168476
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UNIN", (DBTable) null, 4101, "&3>Q:I\"aC8Pl");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.pollLast();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.normalize("&3>Q:I\"aC8Pl", true);
      assertEquals("& 3 > Q : I \"aC8Pl\"", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-774L));
      Long.toUnsignedString((-4911L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "18446744073709546705";
      stringArray0[2] = "18446744073709546705";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "m+f>m]L5yRJ^<\"";
      stringArray1[1] = "tXmB4";
      stringArray1[2] = "tXmB4";
      stringArray1[3] = "18446744073709546705";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("callrenamqe", stringArray0, "{QR){vF'Im(8", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.215085321227878
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      assertEquals("/*.null, /*.null, /*.null, /*.null", string0);
      
      String string1 = SQLUtil.join("/*", "r2sv'h]=Z7;pj&f+R;q", stringArray0, "#jtLd)o}Ys92CL7", "", stringArray0);
      assertEquals("/* join #jtLd)o}Ys92CL7 as  on r2sv'h]=Z7;pj&f+R;q.null = .null and r2sv'h]=Z7;pj&f+R;q.null = .null and r2sv'h]=Z7;pj&f+R;q.null = .null and r2sv'h]=Z7;pj&f+R;q.null = .null", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u):_2S/g'");
      StringBuilder stringBuilder0 = new StringBuilder(495);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) "#jtLd)o}Ys92CL7";
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "#rth+&[C*n}Of";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "u):_2S/g'";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.isQuery("select into");
      DBCatalog dBCatalog0 = new DBCatalog("select into");
      String string1 = "renamerandom()";
      dBCatalog0.getSchema("renamerandom()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") c wher");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" = ", 10);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Long long0 = new Long((-803L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", (DBTable) null, 1966, "&3>Q:I\"aC8Pl");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add(dBColumnArray0[6]);
      linkedList0.add(dBColumnArray0[4]);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "&3>Q:I\"aC8Pl");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      linkedList0.removeIf(predicate2);
      linkedList0.add(dBColumnArray0[6]);
      linkedList0.pollLast();
      linkedList0.add(dBColumnArray0[6]);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("select, select, select", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      defaultDBTable0.getForeignKeyConstraints();
      pGConnectionPoolDataSource1.setPrepareThreshold(47);
      pGConnectionPoolDataSource1.setTcpKeepAlive(false);
      pGConnectionPoolDataSource1.getLogWriter();
      System.setCurrentTimeMillis((-1438L));
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " or ", false, stringArray0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = " as ";
      stringArray1[1] = "/*";
      stringArray1[2] = " as ";
      stringArray1[3] = " as ";
      stringArray1[4] = "delete";
      stringArray1[6] = "/*";
      stringArray1[7] = "/*";
      stringArray1[8] = "/*";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "piCD~J~'", false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" as ", false, dBPrimaryKeyConstraint1);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", false, dBTable0, stringArray1, defaultDBTable1, stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") c wher");
      Long long0 = new Long((-803L));
      Long.compare((-803L), (-803L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ") c wher";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-2062));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-1114));
      streamTokenizer2.resetSyntax();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      streamTokenizer4.whitespaceChars((-4), (-2062));
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".[wu*!6[[Ai#tQCtvW");
      Long long0 = new Long((-803L));
      Long.compare((-803L), (-803L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ".[wu*!6[[Ai#tQCtvW";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-2062));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      streamTokenizer3.parseNumbers();
      streamTokenizer2.parseNumbers();
      ValueNull valueNull0 = ValueNull.DELETED;
      Value value0 = valueNull0.copyToTemp();
      Value[] valueArray0 = new Value[8];
      valueArray0[0] = (Value) valueNull0;
      valueArray0[1] = (Value) valueNull0;
      valueArray0[2] = value0;
      streamTokenizer0.slashSlashComments(true);
      valueArray0[3] = (Value) valueNull0;
      BigDecimal bigDecimal0 = new BigDecimal((-2182.11));
      ValueDecimal valueDecimal0 = ValueDecimal.get(bigDecimal0);
      valueArray0[4] = (Value) valueDecimal0;
      valueArray0[5] = value0;
      valueArray0[6] = (Value) valueNull0;
      valueArray0[7] = value0;
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      valueArray1.getObject();
      valueNull0.toString();
      valueNull0.convertScale(false, 0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", (DBTable) null, 1966, "&3>Q:I\"aC8Pl");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add(dBColumnArray0[6]);
      linkedList0.add(dBColumnArray0[4]);
      linkedList0.add(dBColumnArray0[6]);
      linkedList0.pollLast();
      linkedList0.add(dBColumnArray0[6]);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("select, select, select", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      SQLUtil.join("/*", "r2sv'h]=Z7;prj&f+R;q", stringArray0, "#jtLd)o}Ys92CL7", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u):_2S/g'");
      int int0 = 495;
      StringBuilder stringBuilder0 = new StringBuilder(495);
      SQLUtil.addRequiredCondition("", stringBuilder0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = object0;
      objectArray0[2] = (Object) "/* join #jtLd)o}Ys92CL7 as  on r2sv'h]=Z7;prj&f+R;q.null = .null and r2sv'h]=Z7;prj&f+R;q.null = .null and r2sv'h]=Z7;prj&f+R;q.null = .null and r2sv'h]=Z7;prj&f+R;q.null = .null";
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "#rth+&[C*n}Of";
      Object object1 = new Object();
      objectArray0[6] = object1;
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*.null, /*.null, /*.null, /*.null");
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      boolean boolean0 = false;
      dBCatalog0.getTable("executexelecteere*te u~qu inex", false);
      int int0 = (-1695);
      String string0 = "\u0001\u01AB";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("executexelecteere*te u~qu inex", (DBTable) null, (-1695), "\u0001\u01AB");
      defaultDBColumn0.setOwner(dBCatalog0);
      defaultDBColumn0.isEquivalent((DBObject) null);
      defaultDBColumn0.isEquivalent((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBDataType dBDataType0 = DBDataType.getInstance((-2713), "into");
      Integer integer0 = new Integer((-2713));
      Integer.toUnsignedString(493);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      Integer.getInteger((String) null, integer3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".x(lkYJ:QCr]J,>", defaultDBTable0, dBDataType0, integer2);
      Integer.remainderUnsigned((-1662), (-3));
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("sInVON", defaultDBTable0, dBDataType0, integer2);
      defaultDBColumn1.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sInVON : INTO(3)");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder1);
      System.setCurrentTimeMillis((-1726L));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[21];
      stringArray0[0] = "INDEXES";
      stringArray0[1] = "*>GhrX>8`bTBD";
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("INDEXES", false, dBUniqueConstraint0);
      dBUniqueIndex0.setName("bC{*O5h3Y?=QBN");
      int int0 = (-2713);
      DBDataType dBDataType0 = DBDataType.getInstance((-2713), "W[");
      Integer integer0 = new Integer((-2713));
      Integer.toUnsignedString((-2034670385));
      dBUniqueIndex0.toString();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Hx%LrL'J8!v&{.", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("ALTER TABLE ");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.innerJoin("delete", stringArray0, stringArray0[2], "n}", stringArray0);
      Boolean.valueOf("n}");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "J";
      String string0 = "##}'";
      stringArray0[1] = "##}'";
      stringArray0[2] = "J";
      stringArray0[3] = "J";
      stringArray0[4] = "J";
      stringArray0[5] = "J";
      stringArray0[6] = "J";
      stringArray0[7] = "J";
      stringArray0[8] = "J";
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("J", stringArray0, "J", "J", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[8] = "v4gM_uyy";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      SQLUtil.join("inner", "alter tablera", stringArray0, "ZV6S^X8!H:m8I7\"Pnq[", "PROJECTION", stringArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2802), 0, (-2802), 1211255123, 34);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getActualMinimum((-1442));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1442
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("eeceate", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@|dt";
      stringArray0[1] = "execb";
      stringArray0[2] = "execupdate statement returned results.";
      String string0 = SQLUtil.join("execb", "randm()", stringArray0, "je", "@|dt", stringArray0);
      assertEquals("execb join je as @|dt on randm().@|dt = @|dt.@|dt and randm().execb = @|dt.execb and randm().execupdate statement returned results. = @|dt.execupdate statement returned results.", string0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "execb join je as @|dt on randm().@|dt = @|dt.@|dt and randm().execb = @|dt.execb and randm().execupdate statement returned results. = @|dt.execupdate statement returned results.";
      String string1 = SQLUtil.renderWhereClause(stringArray1, stringArray1);
      assertEquals("execb join je as @|dt on randm().@|dt = @|dt.@|dt and randm().execb = @|dt.execb and randm().execupdate statement returned results. = @|dt.execupdate statement returned results. = 'execb join je as @|dt on randm().@|dt = @|dt.@|dt and randm().execb = @|dt.execb and randm().execupdate statement returned results. = @|dt.execupdate statement returned results.'", string1);
      
      Character character0 = Character.valueOf('K');
      Character.isSurrogate('K');
      String string2 = SQLUtil.renderValue(character0);
      assertEquals("'K'", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("eeceate", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execb";
      stringArray0[1] = "randm()";
      stringArray0[2] = " #g<'I<s310T?";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "selectxelecteece*te u~iqu inex";
      stringArray1[1] = "execb";
      stringArray1[2] = "drop table";
      stringArray1[3] = "r";
      stringArray1[4] = "r";
      stringArray1[5] = "U`isQrMR>/";
      stringArray1[6] = "randm()";
      stringArray1[7] = "r";
      String string0 = SQLUtil.normalize("selectxelecteece*te u~iqu inex", true);
      assertEquals("selectxelecteece * te u ~ iqu inex", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5723881867892913
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("execupdate stateent returned resuts.");
      stringReader0.skip((-2869L));
      stringReader0.skip(0L);
      SQLUtil.isQuery("u:]K)o_2hW9:j P0jM");
      SQLUtil.isProcedureCall("execupdate stateent returned resuts.");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter indexddlhl011e", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.mutatesDataOrStructure("execupdate stateent returned resuts.");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("u:]K)o_2hW9:j P0jM", (String[]) null, "X0zDX75IA_v%#P\"#", "selecth\"si!.>h1y`zc0gmxl", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Long.sum(3401L, 3401L);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Ju", false, "updatexelecteece*te u~qu inex", "6");
      dBCheckConstraint0.toString();
      Long.getLong("Lb9v]g<rGcAeN");
      Long.max(6802L, 6802L);
      dBCheckConstraint0.equals("m+f>m]L5yRJ^<\"");
      Long.toUnsignedString(6802L);
      dBCheckConstraint0.equals("6");
      dBCheckConstraint0.setName("create materialized view");
      dBCheckConstraint0.equals((Object) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized view\" CHECK 6", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getDescription();
      pGConnectionPoolDataSource0.getLogWriter();
      SQLUtil.isQuery("IXJVm[&DSOG>n");
      SQLUtil.normalize("1-Hd", false);
      SQLUtil.normalize("FiqFZnX%}!b)", false);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      // Undeclared exception!
      try { 
        fBManagedConnectionFactory1.getGDS();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified GDS type PURE_JAVA is unknown.
         //
         verifyException("org.firebirdsql.gds.impl.GDSFactory", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.TransactionMapFactory");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/*");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5952005879881312
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = "xelecteece*te u~iqu inex";
      SQLUtil.mutatesDataOrStructure("xelecteece*te u~iqu inex");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uV;uXc[");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "uV;uXc[";
      stringArray0[1] = "xelecteece*te u~iqu inex";
      stringArray0[2] = "xelecteece*te u~iqu inex";
      stringArray0[3] = "xelecteece*te u~iqu inex";
      stringArray0[4] = "=}*]6=D'2/UXH*w!tt";
      stringArray0[5] = "uV;uXc[";
      stringArray0[6] = "NOV}Ek+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("xelecteece*te u~iqu inex", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "/*";
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLogWriter();
      SQLUtil.join("/*", "/*", stringArray0, "/*", "/*", stringArray0);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "bfv";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bfv");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String string1 = "C!m\\-}!P";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("C!m-}!P", compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.564452465266273
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      SQLUtil.join("#0(*|HD@`eWw>~hlz>", "selecteece", stringArray0, "null", "EQUAL ", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("constraint");
      StringBuilder stringBuilder0 = new StringBuilder(3);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("v4gM_uyy", stringBuilder0);
      Object object0 = new Object();
      Object object1 = new Object();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "Mj@!,lRBE", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("v4gM_uyyCONSTRAINT Mj@!,lRBE ", stringBuilder1.toString());
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("random() = 'random()' AND v4gM_uyy = 'v4gM_uyy' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.114303550370824
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execcreate unique index");
      String[] stringArray0 = new String[9];
      stringArray0[2] = "execcreate unique index";
      stringArray0[2] = "execcreate unique index";
      stringArray0[7] = "random()";
      stringArray0[4] = "execcreate unique index";
      stringArray0[5] = "execcreate unique index";
      stringArray0[6] = "execcreate unique index";
      stringArray0[7] = "execcreate unique index";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("eeceate", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop table", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "execcreate unique index");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("renamerandob()", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      stringBuilder2.append((-2292L));
      SQLUtil.addRequiredCondition("", stringBuilder0);
      Object object0 = new Object();
      Object object1 = new Object();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null AND null = null AND execcreate unique index = 'execcreate unique index' AND null = null AND execcreate unique index = 'execcreate unique index' AND execcreate unique index = 'execcreate unique index' AND execcreate unique index = 'execcreate unique index' AND execcreate unique index = 'execcreate unique index' AND null = null", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "{GRw5^$%`&O.:8", true, stringArray0);
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder0, nameSpec1);
      assertEquals("execcreate unique index or renamerandob()-2292 and CONSTRAINT {GRw5^$%`&O.:8 ", stringBuilder0.toString());
      assertEquals("execcreate unique index or renamerandob()-2292 and CONSTRAINT {GRw5^$%`&O.:8 ", stringBuilder3.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4557945536730268
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLogWriter();
      SQLUtil.join("/*", "/*", stringArray0, "/*", "/*", stringArray0);
      SQLUtil.normalize("/*", false);
      SQLUtil.removeComments("/*");
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("/* join /* as /* on /*.null = /*.null and /*.null = /*.null and /*.null = /*.null and /*.null = /*.null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ValueNull valueNull0 = ValueNull.DELETED;
      valueNull0.convertTo(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("IFe{)", true);
      assertEquals("IFe {)", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9059680379909656
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selecteeceate u~iqu inex");
      SQLUtil.isQuery("isc_info_sql_sub_type ");
      SQLUtil.normalize("'", false);
      SQLUtil.normalize("selecteeceate u~iqu inex", false);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      // Undeclared exception!
      try { 
        fBManagedConnectionFactory1.getGDS();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified GDS type PURE_JAVA is unknown.
         //
         verifyException("org.firebirdsql.gds.impl.GDSFactory", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "deleteeeceate u~iqu inex");
      SQLUtil.normalize("q.P|nL`T'SQa@NTv", false);
      jdbcClob jdbcClob0 = new jdbcClob("FOREIGN KEY ");
      jdbcClob0.getCharacterStream();
      // Undeclared exception!
      try { 
        jdbcClob0.setAsciiStream((-429L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Csv.getInstance();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl4.unregisterTransaction();
      isc_stmt_handle_impl4.getRsr_rdb();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[3], compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[2], (DBSchema) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      SQLUtil.typeAndName(tableContainer0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" on ", "", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("*/", defaultDatabase0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2171557146026193
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      SQLUtil.join("/*", "r2sv'h]=Z7;pj&f+R;q", stringArray0, "#jtLd)o}Ys92CL7", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u):_2S/g'");
      StringBuilder stringBuilder0 = new StringBuilder(495);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) "#jtLd)o}Ys92CL7";
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "<?xml version=\"1.0\"?>\n";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "u):_2S/g'";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".[wu*!6[[Ai#tQCtvW");
      Long long0 = new Long((-803L));
      Long.compare((-803L), (-803L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ".[wu*!6[[Ai#tQCtvW";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-2062));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer1.nextToken();
      streamTokenizer3.parseNumbers();
      streamTokenizer2.parseNumbers();
      streamTokenizer2.resetSyntax();
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer3.whitespaceChars((-765), 1562);
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-2292), (-2));
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("E(Y|oe>T'6/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: E(Y|oe>T'6/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "alter indexrandom()";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter indexrandom()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1179251883779973
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execcreate unique index");
      String[] stringArray0 = new String[9];
      stringArray0[2] = "execcreate unique index";
      stringArray0[2] = "execcreate unique index";
      stringArray0[7] = "random()";
      stringArray0[4] = "execcreate unique index";
      stringArray0[5] = "execcreate unique index";
      stringArray0[6] = "execcreate unique index";
      stringArray0[7] = "execcreate unique index";
      stringArray0[8] = "random()";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("eeceate", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT random() UNIQUE (, , execcreate unique index, , execcreate unique index, execcreate unique index, execcreate unique index, execcreate unique index, random())", string0);
      
      dBUniqueConstraint0.setTable(defaultDBTable0);
      dBUniqueConstraint0.setDoc("execcreate unique index");
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , execcreate unique index, , execcreate unique index, execcreate unique index, execcreate unique index, execcreate unique index, random())", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3336573563287137
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("seleteecee u~iqu inex");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      SQLUtil.mutatesDataOrStructure("|w-%xb)Q9/1t\"hA]");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5018933087347706
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLogWriter();
      pGConnectionPoolDataSource1.getLogWriter();
      boolean boolean0 = SQLUtil.isQuery("ze!-Nj=WTjB-:3");
      String string0 = SQLUtil.normalize("/a", false);
      assertEquals("/ a", string0);
      
      String string1 = SQLUtil.normalize("A%Lczzvjin@2!893", true);
      assertEquals("A % Lcz  zvjin @ 2 ! 893", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      jdbcClob jdbcClob0 = new jdbcClob("ze!-Nj=WTjB-:3");
      StringReader stringReader0 = new StringReader("A%Lczzvjin@2!893");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Boolean boolean1 = SQLUtil.mutatesStructure(" Lj7;");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0423155215734763
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLUtil.normalize("--", false);
      SQLUtil.mutatesDataOrStructure("W");
      String string0 = null;
      // Undeclared exception!
      try { 
        VersionNumber.valueOf("--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("_Fn}|'Zk] t>-");
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2713), "into");
      Integer integer0 = new Integer((-2713));
      dBDataType0.isAlpha();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionexecupdate stateent returned resuts.");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add(dBColumnArray0[6]);
      linkedList0.add(dBColumnArray0[4]);
      linkedList0.add(dBColumnArray0[6]);
      linkedList0.pollLast();
      linkedList0.add(dBColumnArray0[6]);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a--L52U%1lq?~!NG");
      DBDataType dBDataType0 = DBDataType.getInstance(580, "SELECT * FROM ");
      dBDataType0.isNumber();
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, dBDataType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.renderColumn(defaultDBColumn0);
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("e#e~");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("e#e~", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      int int0 = 44;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(44, (CharSequence) stringBuilder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 44
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.432553284919671
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execupdate statement returned results.");
      assertNull(boolean0);
      
      Boolean boolean1 = new Boolean((String) null);
      Boolean boolean2 = SQLUtil.mutatesStructure("5`kDN8fEkhip{tc");
      assertFalse(boolean2);
      
      String string0 = SQLUtil.renderValue("5`kDN8fEkhip{tc");
      assertEquals("'5`kDN8fEkhip{tc'", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.821253596520654
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("rename");
      assertTrue(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.isDML("Internal error");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("Internal error");
      assertNull(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Internal error";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      stringArray0[1] = "rename";
      stringArray0[2] = "Internal error";
      stringArray0[3] = "rename";
      stringArray0[4] = "create materialized view";
      stringArray0[5] = "drop table";
      stringArray0[6] = null;
      stringArray0[7] = "renamerename";
      stringArray0[8] = "rename";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("rename", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.setDoc("Internal error");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized view", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized view\" FOREIGN KEY (Internal error, rename, Internal error, rename, create materialized view, drop table, , renamerename, rename) REFERENCES null(Internal error, rename, Internal error, rename, create materialized view, drop table, , renamerename, rename)", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[4];
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      DBSchema dBSchema0 = new DBSchema("/*");
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") c wher");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean.valueOf(") c wher");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("alter tableseleteec");
      Csv.getInstance();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl5 = new isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl5.getRsr_rdb();
      assertNull(isc_db_handle_impl0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[5];
      DBSchema dBSchema0 = new DBSchema((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SQLUtil.isQuery("select into]^t");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("primar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'primar' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[3], compositeDBObject0);
      DBDataType.getInstance((-2654), "-b1ePiVhJK");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vs c!FR_LP`m&*yL");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)93;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("U__*}<*n6, F-|^X'0/", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "&3>Q:I\"aC8Pl";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", (DBTable) null, 1966, "&3>Q:I\"aC8Pl");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "&3>Q:I\"aC8Pl");
      dBDataType0.isNumber();
      Integer integer0 = new Integer(4);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.firebirdsql.jdbc.FBDriverNotCapableException", (DBTable) null, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("cannot ", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn2.toString();
      GDSType.getType("&3>Q:I\"aC8Pl");
      GDSType.getType(" DEFAULT ");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7643242724108226
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "execupdate stateent returned resuts.";
      SQLUtil.mutatesDataOrStructure("execupdate stateent returned resuts.");
      Random.setNextRandom((-1031));
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      Boolean.logicalOr(false, true);
      objectArray0[0] = object0;
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("encryptionProvider", 516);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "execupdate stateent returned resuts.";
      // Undeclared exception!
      try { 
        SQLUtil.join("execupdate stateent returned resuts.", "execupdate stateent returned resuts.", (String[]) null, "execupda", "internal", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.444218872945764
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = "v4gM_uyy";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "random()");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(0);
      stringBuilder0.append((CharSequence) "random()", 0, 0);
      stringBuilder1.delete(0, 0);
      SQLUtil.addRequiredCondition("/Wq\"?$^d{V)", stringBuilder1);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "v4gM_uyy");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("H'X~Q~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "selectg0";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Csv.getInstance();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMAN;
      Locale locale2 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale2);
      SimpleResultSet simpleResultSet1 = new SimpleResultSet();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.519443886242135
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") c wher");
      Long long0 = new Long((-803L));
      Long.compare((-803L), (-803L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ") c wher";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-2062));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.ttype = (-2062);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer3.whitespaceChars((-765), 1562);
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = ") c wher";
      stringArray0[3] = "r";
      stringArray0[4] = null;
      stringArray0[5] = null;
      SQLUtil.join(") c wher", (String) null, stringArray0, "r", (String) null, stringArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "r";
      objectArray0[2] = (Object) stringArray0[5];
      objectArray0[3] = (Object) stringReader0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.198557461680363
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLogWriter();
      pGConnectionPoolDataSource0.setPrepareThreshold(130);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      pGConnectionPoolDataSource0.setTcpKeepAlive(false);
      pGConnectionPoolDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("42Z09.U");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(130);
      System.setCurrentTimeMillis((-1L));
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY (, , , ) REFERENCES null(, , , )", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(0L);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("NF:", "KrgI(sz{:)FEL", "drop table");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      TableContainer tableContainer0 = new TableContainer("execdate");
      tableContainer0.getTable((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " NULL");
      StringReader stringReader0 = new StringReader("");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6697400802886095
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " on ";
      stringArray0[1] = " on ";
      stringArray0[2] = " on ";
      stringArray0[3] = " on ";
      stringArray0[4] = " on ";
      stringArray0[5] = " on ";
      stringArray0[6] = " on ";
      String string0 = SQLUtil.renderColumnListWithTableName(" on ", stringArray0);
      assertEquals(" on . on ,  on . on ,  on . on ,  on . on ,  on . on ,  on . on ,  on . on ", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " on ", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE  on  = ' on ' AND  on  = ' on ' AND  on  = ' on ' AND  on  = ' on ' AND  on  = ' on ' AND  on  = ' on ' AND  on  = ' on '", string1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long((-815L));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      stringReader0.read(charBuffer0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, "16", "callrename");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '}';
      charArray0[2] = '6';
      charArray0[3] = '[';
      charArray0[4] = '%';
      charArray0[5] = '[';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(9, 1.0F);
      SQLUtil.addRequiredCondition("updateRef(String,Ref)", stringBuilder3);
      assertEquals("0.0U}6[%[1.0e@ and updateRef(String,Ref)", stringBuilder1.toString());
      assertEquals("0.0U}6[%[1.0e@ and updateRef(String,Ref)", stringBuilder2.toString());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "deleteeeceate u~iqu inex");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6066699893655365
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long.sum(3401L, 3401L);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Ju", false, "callrenamqe", "callrenamqe");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.toString();
      dBCheckConstraint0.toString();
      Long.getLong("Lb9v]g<rGcAeN");
      dBCheckConstraint0.setDoc("6");
      dBCheckConstraint0.toString();
      Long.max(6802L, 6802L);
      dBCheckConstraint0.equals("m+f>m]L5yRJ^<\"");
      dBCheckConstraint0.equals("CONSTRAINT JuCHECK callrenamqe");
      dBCheckConstraint0.setName("create materialized view");
      dBCheckConstraint0.equals("Ju");
      dBCheckConstraint0.setName("W:!Ak5S+xi %o.#M_Y");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      Random.setNextRandom((-203));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "ROLLBACK TO SAVEPOINT ");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("ROLLBACK TO SAVEPOINT ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("t6ZwPD", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Long long0 = new Long((-774L));
      SQLUtil.isDDL("");
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      GDSType.getType("Internal error");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      // Undeclared exception!
      try { 
        fBManagedConnectionFactory0.getDefaultConnectionRequestInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown GDS type PURE_JAVA
         //
         verifyException("org.firebirdsql.jdbc.FBConnectionProperties", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("bki6}^>,#9tt]exiV");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setName((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint1.setTable(defaultDBTable1);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("ResultSet type: ");
      dBPrimaryKeyConstraint0.setName("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBPrimaryKeyConstraint0.setTable(defaultDBTable1);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter materialized viewprimary key");
      SQLUtil.typeAndName(tableContainer0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicUUID basicUUID0 = new BasicUUID("container alter materialized viewprimary key");
      columnDescriptorList0.getColumnDescriptor((UUID) basicUUID0, (-68));
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      VersionNumber versionNumber1 = VersionNumber.valueOf("x7D_?;,#DLZsjk+@$iX");
      Object object0 = new Object();
      VersionNumber versionNumber2 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      versionNumber1.compareTo(versionNumber0);
      Object object1 = new Object();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long(2748L);
      Long.compare((-544L), 2748L);
      byte[] byteArray0 = new byte[0];
      ValueLob.createSmallLob((-1), byteArray0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getTable(")", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("create ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DBDataType.getInstance((-2713), "W[");
      Integer integer0 = new Integer((-52709252));
      Integer.toUnsignedString(48);
      DBUniqueIndex dBUniqueIndex2 = new DBUniqueIndex("CONSTRAINT ", false, dBUniqueConstraint0);
      dBUniqueIndex2.toString();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create ", dBTable0, (DBDataType) null, integer1);
      Integer integer2 = new Integer((-193));
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create ", dBTable0, (DBDataType) null, integer2, integer3);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "deleteeeceate u~iqu inex");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x@t[x&8ivw\"B";
      stringArray0[1] = "@|dt";
      stringArray0[2] = "je";
      stringArray0[3] = "@|dt";
      stringArray0[4] = "deleteeeceate u~iqu inex";
      stringArray0[5] = "deleteeeceate u~iqu inex";
      stringArray0[6] = "qfy0HL";
      stringArray0[7] = "qfy0HL";
      stringArray0[8] = "deleteeeceate u~iqu inex";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "je";
      stringArray1[1] = "je";
      stringArray1[2] = "deleteeeceate u~iqu inex";
      stringArray1[3] = "qfy0HL";
      // Undeclared exception!
      try { 
        SQLUtil.join("deleteeeceate u~iqu inex", "je", stringArray0, "deleteeeceate u~iqu inex", "qfy0HL", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1871705644479302
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLUtil.normalize("drop materialized view", true);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(0, "drop materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Js<c*Mu)$E,F$0p0$k", (DBTable) null, 0, "Js<c*Mu)$E,F$0p0$k");
      defaultDBColumn0.setNullable(true);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn1.setFractionDigits(integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("truncate", (DBTable) null, 205, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      SQLUtil.mutatesStructure(".");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".";
      stringArray0[1] = "drop materialized view, Js<c*Mu)$E,F$0p0$k";
      stringArray0[2] = "Js<c*Mu)$E,F$0p0$k";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "";
      stringArray0[5] = "truncate";
      stringArray0[6] = "drop materialized view";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "drop materialized view";
      stringArray1[3] = "truncate";
      stringArray1[4] = "org.h2.expression.ExpressionVisitor";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "gC<Gl=35", stringArray0, "truncate", "drop materialized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLUtil.normalize("C,&q{cx(iYr1", true);
      SQLUtil.normalize("C, & q { cx (iYr1", true);
      jdbcClob jdbcClob0 = new jdbcClob("C, & q { cx (iYr1");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.whitespaceChars(3639, 1075);
      streamTokenizer0.ordinaryChar(1075);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", (DBTable) null, 1966, "&3>Q:I\"aC8Pl");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = VersionNumber.valueOf("P@d");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("P@d", (String) null, versionNumber0);
      DBSchema dBSchema0 = new DBSchema("tgbleame");
      DBSchema dBSchema1 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zk&y9", dBSchema1);
      MockFile.createTempFile("Zk&y9", "");
      SQLUtil.isQuery("LOCALE");
      defaultDBTable0.getColumnNames();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rename";
      stringArray0[1] = "rename";
      stringArray0[2] = "rename";
      stringArray0[3] = "rename";
      stringArray0[4] = "exec";
      stringArray0[5] = "rename";
      stringArray0[6] = "rename";
      stringArray0[7] = "rename";
      stringArray0[8] = "rename";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("rename", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "callih;@qzvie5edp`rc");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", dBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "43X12.U";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "43X12.U";
      stringArray0[4] = "43X12.U";
      stringArray0[5] = "SQLCOLUMNS";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "43X12.U";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "43X12.U", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SQLCOLUMNS", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  FOREIGN KEY (43X12.U, , , 43X12.U, 43X12.U, SQLCOLUMNS, , , 43X12.U) REFERENCES null(43X12.U, , , 43X12.U, 43X12.U, SQLCOLUMNS, , , 43X12.U)", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("eeceate", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[5];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      stringArray0[0] = "execb";
      stringArray0[1] = "randm()";
      stringArray0[2] = " #g<'I<s310T?";
      stringArray0[3] = "randm()";
      stringArray0[4] = "xo>?L}?,ge\"|6pdh7";
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator0.getConnection();
      InternalTransactionCoordinator.ManagedTransactionCoordinator internalTransactionCoordinator_ManagedTransactionCoordinator0 = new InternalTransactionCoordinator.ManagedTransactionCoordinator((AbstractConnection) null);
      DBCatalog dBCatalog0 = new DBCatalog("randm()");
      DBSchema dBSchema0 = new DBSchema("randm()", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(2", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      stringArray0[2] = "$";
      stringArray0[3] = "$";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-92);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "insertseleteecee u~iqu inex";
      stringArray1[1] = "$";
      stringArray1[2] = "insertseleteecee u~iqu inex";
      stringArray1[3] = "insertseleteecee u~iqu inex";
      stringArray1[4] = "";
      String string0 = SQLUtil.innerJoin("$", stringArray0, "", "insertseleteecee u~iqu inex", stringArray1);
      assertEquals(" as insertseleteecee u~iqu inex on $.$ = insertseleteecee u~iqu inex.insertseleteecee u~iqu inex and $.$ = insertseleteecee u~iqu inex.$ and $.$ = insertseleteecee u~iqu inex.insertseleteecee u~iqu inex and $.$ = insertseleteecee u~iqu inex.insertseleteecee u~iqu inex", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execb";
      stringArray0[4] = "'?6O4.FBtXi~=ZNB$F|";
      boolean boolean0 = SQLUtil.isProcedureCall("9{^");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      String string1 = "wbf 3oGZ^";
      SQLUtil.substituteMarkers("", "wbf 3oGZ^", "");
      SQLUtil.isDML("");
      VersionNumber versionNumber0 = VersionNumber.valueOf("P@d");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("EXECUTE STATEMENT", "EXECUTE STATEMENT", versionNumber0);
      String string2 = "]EE[k=h#X::;";
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'EXECUTE STATEMENT'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ValueNull valueNull0 = ValueNull.DELETED;
      Value value0 = valueNull0.convertTo(3);
      Value[] valueArray0 = new Value[3];
      valueArray0[0] = value0;
      valueArray0[1] = value0;
      valueArray0[2] = (Value) valueNull0;
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      ValueArray valueArray2 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray2.getReader();
      valueNull0.copyToTemp();
      Object object0 = valueArray1.getObject();
      CompareMode compareMode0 = CompareMode.getInstance(" on ", 4);
      value0.compareTo(valueNull0, compareMode0);
      valueNull0.toString();
      valueNull0.convertScale(false, 17);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("OFF", (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Character character0 = new Character('p');
      String string0 = SQLUtil.substituteMarkers("--", "--", character0);
      assertEquals("'p'", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter index";
      stringArray0[1] = "alter index";
      stringArray0[2] = "alter index";
      stringArray0[3] = "alter index";
      SQLUtil.leftJoin("alter index", stringArray0, "alter index", "alter index", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) nameSpec0;
      objectArray0[1] = (Object) "left join alter index as alter index on alter index.alter index = alter index.alter index and alter index.alter index = alter index.alter index and alter index.alter index = alter index.alter index and alter index.alter index = alter index.alter index and alter index.null = alter index.null";
      objectArray0[2] = (Object) "alter index";
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "pending:";
      stringArray0[1] = "renameselecteeceate u~iqu inex";
      stringArray0[2] = "renameselecteeceate u~iqu inex";
      stringArray0[3] = "renameselecteeceate u~iqu inex";
      stringArray0[4] = "renameselecteeceate u~iqu inex";
      stringArray0[5] = "renameselecteeceate u~iqu inex";
      stringArray0[6] = "renameselecteeceate u~iqu inex";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "CHECK ";
      stringArray1[1] = "CHECK ";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("renameselecteeceate u~iqu inex", stringArray0, "CHECK ", "pending:", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "seleteecee u~iqu inex";
      Boolean boolean0 = new Boolean("seleteecee u~iqu inex");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "njy=gD4O|ch ";
      stringArray0[2] = "";
      stringArray0[3] = "njy=gD4O|ch ";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("njy=gD4O|ch ", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals(".njy=gD4O|ch ", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\u0000&@");
      Long long0 = new Long((-803L));
      Long.compare((-2292L), (-1389L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-1), (-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      streamTokenizer0.parseNumbers();
      streamTokenizer2.parseNumbers();
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-394568178), (-1));
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(92, 10);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create table ");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "execcreate unique index";
      stringArray0[2] = "execcreate unique index";
      stringArray0[7] = "random()";
      stringArray0[4] = "execcreate unique index";
      stringArray0[5] = "execcreate unique index";
      stringArray0[6] = "execcreate unique index";
      stringArray0[7] = "execcreate unique index";
      stringArray0[8] = "random()";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("eeceate", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "p(ybESr[oV)f8LIDA";
      stringArray1[1] = "alter materialized view@|dt`%ys.b.lieujl";
      stringArray1[2] = "truncate@|dt`%ys.b.lieujl";
      stringArray1[3] = "execcreate unique index";
      stringArray1[4] = "random()";
      stringArray1[5] = "@|dt";
      stringArray1[6] = "alter materialized view@|dt`%ys.b.lieujl";
      stringArray1[7] = "";
      String string0 = SQLUtil.join("_PI", "alter materialized view@|dt`%ys.b.lieujl", stringArray1, "alter materialized view@|dt`%ys.b.lieujl", "je", stringArray0);
      assertEquals("_PI join alter materialized view@|dt`%ys.b.lieujl as je on alter materialized view@|dt`%ys.b.lieujl.p(ybESr[oV)f8LIDA = je.null and alter materialized view@|dt`%ys.b.lieujl.alter materialized view@|dt`%ys.b.lieujl = je.null and alter materialized view@|dt`%ys.b.lieujl.truncate@|dt`%ys.b.lieujl = je.execcreate unique index and alter materialized view@|dt`%ys.b.lieujl.execcreate unique index = je.null and alter materialized view@|dt`%ys.b.lieujl.random() = je.execcreate unique index and alter materialized view@|dt`%ys.b.lieujl.@|dt = je.execcreate unique index and alter materialized view@|dt`%ys.b.lieujl.alter materialized view@|dt`%ys.b.lieujl = je.execcreate unique index and alter materialized view@|dt`%ys.b.lieujl. = je.execcreate unique index", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[18];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "execupdate stateent returned resuts.";
      String string0 = SQLUtil.join((String) null, "execupdate stateent returned resuts.", stringArray0, "DELETE FROM INFORMATION_SCHEMA.LOB_MAP WHERE LOB = ?", "aGA4x_J=a", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-v?edfee*.CO0aM");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1006), "-v?edfee*.CO0aM");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-v?edfee*.CO0aM", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("C&jH7g", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Illegal column type format: ";
      stringArray0[1] = "UNION";
      stringArray0[2] = "PROJECTION";
      stringArray0[3] = "yJwg':xT?L0fD>';7P@";
      stringArray0[4] = "Illegal column type format: ";
      stringArray0[5] = "alter tablera";
      stringArray0[6] = "Illegal column type format: ";
      stringArray0[7] = "ZV6S^X8!H:m8I7\"Pnq[";
      stringArray0[8] = "PROJECTION";
      SQLUtil.join("UNION", "Illegal column type format: ", stringArray0, "2<~", "Illegal column type format: ", stringArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-761), 0, 2546, 10, (-761));
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours((-1683));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -1683 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("seleteecee u~iqu inex", stringBuilder0);
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "seleteecee u~iqu inex");
      Csv.getInstance();
      DBDataType dBDataType0 = DBDataType.getInstance(335544694, "updateseleteecee u~iqu inex");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",dMx7=Qlf)]7s+Jp", (DBTable) null, dBDataType0, integer1);
      defaultDBColumn0.toString();
      FBManagedConnection fBManagedConnection0 = null;
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long(673L);
      SQLUtil.isDML("Internal error");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Internal error");
      Csv.getInstance();
      DBDataType dBDataType0 = DBDataType.getInstance(4851, "Internal error");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Internal error", (DBTable) null, dBDataType0, (Integer) null);
      defaultDBColumn0.toString();
      FBManagedConnection fBManagedConnection0 = null;
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2654), "c*{}1G'jPTW[lnW$Z");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c*{}1G'jPTW[lnW$Z", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("C*{}1G'JPTW[LNW$Z(3)", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long.sum(3401L, 3401L);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Ju", false, "updatexelecteece*te u~qu inex", "callrenamqe");
      dBCheckConstraint0.toString();
      Long.getLong("Lb9v]g<rGcAeN");
      dBCheckConstraint0.setDoc("6");
      Long.max(6802L, 6802L);
      dBCheckConstraint0.equals("m+f>m]L5yRJ^<\"");
      Long.toUnsignedString(6802L);
      dBCheckConstraint0.equals("callrenamqe");
      dBCheckConstraint0.setName("create materialized view");
      dBCheckConstraint0.equals((Object) null);
      dBCheckConstraint0.setName("]<#b>h),EIDT+(");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ]<#b>h),EIDT+( CHECK callrenamqe", string0);
  }
}
