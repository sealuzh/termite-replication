/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 22:56:02 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.202203742700343
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(429.00902);
      Double.min(429.00902, 429.00902);
      Double double2 = new Double((-1.0));
      linkedList0.offer(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double2);
      Double double3 = new Double((-1251.6));
      linkedList2.add(double3);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.addFirst(double3);
      Double double4 = new Double(0.0);
      Double double5 = new Double(Double.NaN);
      linkedList0.add(double2);
      Double.isFinite((-1251.6));
      Double double6 = new Double(0.0);
      linkedList4.add(double3);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double7 = new Double(Double.NaN);
      Double double8 = new Double((-3443.47822055));
      LinkedList<Byte> linkedList6 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList7 = new LinkedList<Byte>(linkedList6);
      Byte byte0 = new Byte((byte)4);
      linkedList7.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList7);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        JSONObject.valueToString(double5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-105355879);
      Integer integer0 = new Integer((-105355879));
      Integer integer1 = new Integer((-105355879));
      String string0 = "fd6=/+-Y\"YTTg2?";
      JSONObject.doubleToString((-105355879));
      Integer.compare((-3632), 2032);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('8');
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ": ", (-105355879), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4450171278659245
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(1.0F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(429.00902);
      Double double1 = new Double((-1.0));
      linkedList0.offer(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double2 = new Double((-1152.0697783828823));
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double3 = new Double((-1.0));
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.addFirst(double3);
      Double double4 = new Double(1.0F);
      Double.isFinite((-1.0));
      Double double5 = new Double((-1.0));
      linkedList4.add(double5);
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double6 = new Double(429.00902);
      Double double7 = new Double(429.00902);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("s*#HZSSFOD-fWPw", true);
      boolean boolean0 = jSONObject0.optBoolean("s*#HZSSFOD-fWPw");
      assertEquals(5, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4453265188560627
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1193.5F);
      linkedList0.offer(double0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      linkedList0.clone();
      Float float1 = new Float(1193.5F);
      String string0 = jSONObject0.toString((-275));
      String string1 = JSONObject.quote("{\n\"java.lang.String@0000000008\": java.lang.Double@0000000007,\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000006\": java.lang.Double@0000000007,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\";
      jSONObject0.isNull("");
      String string1 = "%OBo{I2Y";
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      jSONObject0.optDouble("%OBo{I2Y");
      String string2 = null;
      int int0 = 59;
      try { 
        jSONObject0.put((String) null, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.009768064693688
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("JW'f`'^[bXjfTb");
      String[] stringArray0 = new String[4];
      int int0 = 125;
      Float float0 = new Float((float) 125);
      jSONObject0.toString(125, 125);
      JSONObject jSONObject1 = jSONObject0.accumulate("JW'f`'^[bXjfTb", float0);
      String string0 = "s]o^zVxm7QpJG+ve";
      float float1 = 0.0F;
      Float.min(125, 0.0F);
      JSONObject jSONObject2 = jSONObject1.put("s]o^zVxm7QpJG+ve", (double) 0.0F);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      JSONObject.getNames((Object) boolean0);
      jSONObject2.toString();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.accumulate("{\"java.lang.String@0000000002\":java.lang.Float@0000000003,\"java.lang.String@0000000004\":java.lang.Double@0000000005}", jSONArray0);
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Float@0000000003,\"java.lang.String@0000000004\":java.lang.Double@0000000005}");
      String string1 = "Expected a ',' or '}'";
      try { 
        jSONObject4.getJSONObject("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3436065590566386
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1193.5F);
      linkedList0.offer(double0);
      linkedList0.add(double0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optLong("A JSONArray text must start with '['", 0L);
      Float.min(1193.5F, (-3186.641F));
      Float.max((-3186.641F), 1.0F);
      Float.max(0.0F, 1193.5F);
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = new JSONArray();
      Float.sum(1193.5F, 2697.128F);
      jSONObject0.put("java.lang.Float@000000001", true);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.998587878542509
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedInt((byte)2);
      Byte.toUnsignedLong((byte)0);
      Byte.toUnsignedLong((byte)59);
      Integer integer1 = new Integer(59);
      Byte byte1 = new Byte((byte)59);
      Byte.toUnsignedInt((byte)2);
      Byte.toUnsignedLong((byte)59);
      Integer.toUnsignedLong(148);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      Integer.divideUnsigned(76, 66);
      Integer.divideUnsigned((byte)0, 2);
      Integer integer2 = new Integer(66);
      Integer integer3 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1134279001855996
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-105355879);
      JSONObject jSONObject1 = jSONObject0.accumulate("o}G6GjW4A!\"^1c@XsbJ", "o}G6GjW4A!\"^1c@XsbJ");
      jSONObject1.remove("o}G6GjW4A!\"^1c@XsbJ");
      try { 
        jSONObject1.getBoolean("o}G6GjW4A!\"^1c@XsbJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o}G6GjW4A!\\\"^1c@XsbJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.866456702245458
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("D2+");
      Boolean boolean0 = new Boolean("P`;5*sX\".y");
      JSONObject jSONObject3 = jSONObject1.accumulate("_7^}q+u,yLXF=-vf=", boolean0);
      jSONObject3.optBoolean("[]");
      jSONObject0.toString(123, (-845));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.optDouble((-1932), (double) (-1932));
      Integer.sum((-2257), 4);
      jSONObject2.optJSONObject((String) null);
      try { 
        jSONObject0.getString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "{49QP\\MR<I5F$%h";
      JSONTokener jSONTokener0 = new JSONTokener("{49QPMR<I5F$%h");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {49QPMR<I5F$%h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add("000");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONArray0.put(false);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray2 = new JSONArray();
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8765181960730604
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("JW'f`'^[bXjfTb");
      String[] stringArray0 = new String[1];
      Float float0 = new Float((float) 125);
      jSONObject0.toString(125, 125);
      Float.min(125, 0.0F);
      JSONObject jSONObject1 = jSONObject0.put("s]o^zVxm7QpJG+ve", 0.0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      Float.sum(125, 40.736706F);
      Float.isFinite((-1261.326F));
      Float.sum(0.0F, 0.0F);
      Float.max((-3355.0F), 0.0F);
      JSONObject jSONObject4 = new JSONObject();
      double double0 = jSONObject0.getDouble("s]o^zVxm7QpJG+ve");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.058909994634681
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0LNu@?Xp", (-20684708));
      double double0 = jSONObject0.getDouble("0LNu@?Xp");
      assertEquals((-2.0684708E7), double0, 0.01);
      
      String string0 = JSONObject.quote("0LNu@?Xp");
      assertEquals("\"0LNu@?Xp\"", string0);
      
      double double1 = jSONObject0.optDouble("|PxI+h45ty");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3397420572771295
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-105355879));
      Integer.divideUnsigned((-105355879), 60);
      StringWriter stringWriter0 = new StringWriter(51);
      jSONObject0.append("\",w", "\",w");
      String string0 = "wVXJ?";
      jSONObject0.isNull("wVXJ?");
      jSONObject0.optDouble("pE=W!j_$J1U");
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Object) "put");
      jSONObject1.optJSONArray("\",w");
      try { 
        jSONObject0.getJSONObject("ad");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ad\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5109278133095951
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 1944.0707F);
      Float.sum((-1527.7599F), 1944.0707F);
      Float.isFinite(1944.0707F);
      Float.max(1955.0502F, 2775.7627F);
      Float.sum(1.0F, 1193.5F);
      Float.max(0.0F, 0.0F);
      Float.isFinite((-2201.9497F));
      Float.sum(1.0F, (-1237.536F));
      Float.max(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.840135260769348
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(5869.99806378);
      Double.isFinite(Double.NaN);
      linkedList0.offer(double0);
      Double double1 = new Double(5869.99806378);
      linkedList0.add(double1);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double2 = new Double(1.0);
      linkedList1.add(double2);
      Boolean boolean0 = Boolean.valueOf("isaddFirst");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isaddFirst";
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      Object object1 = jSONObject1.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.042762628004796
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float float1 = new Float(0.0F);
      Float.min(0.0F, 1863.7026F);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.putOpt("vfMc(N+jsm", float1);
      jSONObject0.optDouble("vfMc(N+jsm", (double) 0.0F);
      Object object1 = new Object();
      int int0 = jSONObject0.length();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7310583317959272
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(120.31754F);
      Float float1 = new Float((-856.26F));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double2 = new Double(1.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.addFirst(double0);
      Double double3 = new Double(0.0);
      Double double4 = new Double(120.31754F);
      Double double5 = new Double(1.0);
      Double.isFinite((-856.26F));
      Double double6 = new Double(120.31754F);
      Double double7 = new Double((-1.0));
      linkedList0.add(double7);
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double8 = new Double((-1.0));
      Double double9 = new Double((-1.0));
      linkedList2.add(double7);
      Float float2 = new Float(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      jSONObject0.putOpt("'", double3);
      jSONObject0.putOpt(".,^xRf^PzSI", double3);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.021569481260394
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = Float.valueOf((-3050.41F));
      Float.min((-3050.41F), (-3050.41F));
      float float1 = new Float((-3050.41F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("", 1354L);
      Short short0 = new Short((short)87);
      Integer integer0 = new Integer(47);
      jSONObject1.putOpt("", integer0);
      jSONObject0.optString("", "");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.058909994634681
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      String string1 = "0SL/p_Q=n";
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      int int0 = (-880);
      Integer integer0 = new Integer((-880));
      String string2 = "{";
      jSONObject0.optString("");
      try { 
        jSONObject1.get("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7522934708786475
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      Boolean boolean0 = new Boolean("P`;5*sX\".y");
      JSONObject jSONObject2 = jSONObject1.accumulate("_7^}q+u,yLXF=-vf=", boolean0);
      jSONObject2.optBoolean("[]");
      jSONObject0.toString(123, (-845));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>(linkedList2);
      Integer integer0 = new Integer(2288);
      linkedList2.add(integer0);
      Integer integer1 = new Integer((-1));
      Integer.max((-1606), (-1));
      Integer integer2 = new Integer(24);
      linkedList2.add(integer0);
      JSONObject jSONObject3 = new JSONObject();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject1.put("", (Collection) linkedList0);
      try { 
        jSONObject1.getJSONArray("_7^}q+u,yLXF=-vf=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_7^}q+u,yLXF=-vf=\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5764082587002846
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float(2139.88426879);
      Float.max(1804.3F, 0.0F);
      Float.max(1973.2532F, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(24);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      Integer integer1 = new Integer(24);
      linkedList1.add(integer1);
      Integer integer2 = new Integer(24);
      Integer.max((-103), (-4589));
      Integer integer3 = new Integer((-40561581));
      linkedList1.add(integer3);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("", (Collection) linkedList1);
      jSONObject1.getJSONArray("");
      JSONObject jSONObject2 = jSONObject1.accumulate("", integer1);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(1250L);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f|EHngx#Cgn";
      stringArray0[1] = "f|EHngx#Cgn";
      stringArray0[2] = null;
      stringArray0[3] = "f|EHngx#Cgn";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "f|EHngx#Cgn";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = jSONObject0.optString("Expected a ',' or ']'", (String) null);
      StringWriter stringWriter0 = new StringWriter(123);
      try { 
        Long.parseUnsignedLong(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2828423949675667
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float(2139.88426879);
      Float.max(1804.3F, 0.0F);
      Float.sum(1804.3F, 1955.0502F);
      Float.isFinite(3208.9255F);
      Float.max(1804.3F, 1955.0502F);
      Float.sum((-2400.65F), 1955.0502F);
      Float.isFinite((-1706.82F));
      Float.sum((-1981.67F), (-1981.67F));
      Float.max(0.0F, (-3678.369F));
      Float.max(1.0F, (-1981.67F));
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float float1 = new Float(1804.3F);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (Object) float1);
      jSONObject1.getLong("java.lang.Float@0000000001");
      Object object0 = new Object();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float float1 = new Float(1.0F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(429.00902);
      Double double1 = new Double((-1.0));
      linkedList0.offer(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double2 = new Double(1193.5F);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double3 = Double.valueOf(1892.639);
      linkedList2.addFirst(double3);
      Double double4 = new Double((-1.0));
      Double.isFinite(1892.639);
      Double double5 = new Double(0.0);
      Double.max((-306.351469353), (-1061.690125));
      linkedList1.add(double5);
      boolean boolean0 = new Boolean(true);
      Float.max(0.0F, (-1495.8448F));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('F');
      stringWriter1.close();
      JSONTokener jSONTokener0 = new JSONTokener("{Gw*^\"qjc\"T T1,yc");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {Gw*^\"qjc\"T T1,yc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.355936192521724
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 1944.0707F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pQ5!@l", (-1L));
      JSONObject jSONObject2 = jSONObject1.put(";:*p~)s0K4~", 0L);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject2.accumulate(";:*p~)s0K4~", boolean0);
      jSONObject0.getString("pQ5!@l");
      jSONObject0.optDouble("pQ5!@l");
      String string0 = "jw^ATx?]Ix";
      Double double0 = new Double(0.0);
      jSONObject1.optLong("o$:w/C$$\"C9h}}");
      try { 
        jSONObject2.getLong("rfCDbF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rfCDbF\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "fLje";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Byte byte0 = new Byte((byte)7);
      JSONObject jSONObject1 = jSONObject0.putOpt(stringArray0[0], byte0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8521361080536072
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float float1 = new Float(0.0F);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.accumulate("[", float0);
      jSONObject0.opt("[");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.713707967990168
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1534L);
      jSONObject1.append("z:e", "z:e");
      jSONObject0.optLong("");
      jSONObject0.accumulate("] is not a Boolean.", "");
      Byte byte0 = new Byte((byte) (-32));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.isNull("getintBitsToFloat");
      String string0 = "if!<PF$q`3zP";
      jSONObject1.optLong("if!<PF$q`3zP");
      Long long0 = new Long(0L);
      Short short0 = new Short((short)992);
      JSONObject.quote("if!<PF$q`3zP");
      jSONObject2.optInt("isnumberToString", (int) (byte) (-32));
      jSONObject0.length();
      jSONObject1.optInt("");
      JSONObject jSONObject3 = new JSONObject();
      String string1 = "L#zY6i-qsqV)L)";
      boolean boolean0 = false;
      try { 
        jSONObject2.get("aGeCDjs-w0Jf\"eP^~D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aGeCDjs-w0Jf\\\"eP^~D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8736845011761063
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      Boolean boolean0 = new Boolean("P=`;5*CsX\"y");
      JSONObject jSONObject2 = jSONObject1.accumulate("_7^}q+u,yLXF=-vf=", boolean0);
      jSONObject2.optBoolean("[]");
      int int0 = 123;
      jSONObject0.toString(123, (-845));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.toJSONArray((JSONArray) null);
      jSONObject1.getBoolean("_7^}q+u,yLXF=-vf=");
      jSONObject2.keys();
      String string0 = "-q=[<QPCLf]>x_d\\";
      jSONObject1.optJSONObject("-q=[<QPCLf]>x_d");
      try { 
        jSONObject1.append("D2+", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[D2+] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.485948306028736
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1193.5F);
      linkedList0.offer(double0);
      Double double1 = new Double(1193.5F);
      linkedList0.add(double1);
      String string0 = "getdescendingIterator";
      JSONObject jSONObject0 = new JSONObject((Object) "getdescendingIterator");
      jSONObject0.toString((-540), 61);
      Float float1 = new Float((-2622.56F));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("getdescendingIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getdescendingIterator
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float.max(1804.3F, 1.4370301F);
      Float.sum(1804.3F, 1955.0502F);
      Float.isFinite(3208.9255F);
      Float.max(1804.3F, 0.0F);
      Float.min(1804.3F, 0.0F);
      Float.sum((-2400.65F), 1804.3F);
      Float.isFinite((-1706.82F));
      Float.sum((-1981.67F), (-1981.67F));
      Float.max(0.0F, (-3678.369F));
      Float.max(1.0F, (-1981.67F));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(4531);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.put((Collection) linkedList0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4947170779648755
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optInt("'NU#v-dg;eE%k]l", 34);
      String string0 = "E";
      jSONObject0.append("E", float0);
      jSONObject0.isNull("E");
      String string1 = "0Bx_jmj5f/nHo8:MK^";
      int int0 = 34;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.043433081425087
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("-6G@:@p8r`", (Map) hashMap0);
      jSONObject1.put("-6G@:@p8r`", (-704));
      jSONObject1.getLong("-6G@:@p8r`");
      jSONObject1.putOpt("gettoJSONArray", "-6G@:@p8r`");
      jSONObject0.optLong("-6G@:@p8r`");
      Double double0 = new Double((-2919.763367512));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.opt("_)FOA5h");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("(<<!U(k;M=#D @\"8", (Collection) linkedList0);
      double double1 = jSONObject0.optDouble("gettoJSONArray", (-1.0));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1.0), double1, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float((-3050.41F));
      Float.min((-3050.41F), (-3050.41F));
      Float.sum((-3050.41F), (-3050.41F));
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      BiFunction<Double, Object, JSONArray> biFunction0 = (BiFunction<Double, Object, JSONArray>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getcompare";
      stringArray0[1] = "Qtf+yQEJ3B+";
      stringArray0[2] = "] is not a JSONArray.";
      stringArray0[3] = "isvalueOf";
      stringArray0[4] = "V'aa}=8QQ+PhV=";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("28h@EO-,->3*JR[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "{";
      String string1 = null;
      int int0 = (-2093064);
      Float float0 = new Float((float) (-2093064));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{";
      stringArray0[1] = null;
      stringArray0[2] = "0SL/p_Q=n";
      stringArray0[3] = "rfCDbF";
      stringArray0[4] = null;
      stringArray0[5] = "0SL/p_Q=n";
      stringArray0[6] = "rfCDbF";
      stringArray0[7] = null;
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "rfCDbF";
      try { 
        jSONObject0.put(stringArray0[7], (double) (-2093064));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5904483009740513
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("5g@7]Ya\"{s8,!", 0);
      JSONObject jSONObject1 = jSONObject0.accumulate("o}G6GjW4A!\"^1c@XsbJ", "o}G6GjW4A!\"^1c@XsbJ");
      jSONObject1.getString("o}G6GjW4A!\"^1c@XsbJ");
      Integer integer0 = new Integer((-105355879));
      Integer.toUnsignedString((-105355879));
      Integer integer1 = new Integer((-105355879));
      Integer.max((-105355879), (-105355879));
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt(": ", integer0);
      Integer.divideUnsigned((-105355879), 69);
      Long long0 = new Long(0L);
      Integer integer2 = new Integer(13);
      Integer integer3 = new Integer(13);
      Integer integer4 = new Integer(61);
      Integer.compare((-105355879), 60719006);
      Integer integer5 = new Integer(92);
      Integer integer6 = new Integer(12);
      Integer integer7 = new Integer(52);
      assertFalse(integer7.equals((Object)integer3));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7153412507430588
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      String string0 = "[]";
      Boolean boolean0 = new Boolean("P`;5*sX\".y");
      JSONObject jSONObject2 = jSONObject1.accumulate("[]", boolean0);
      jSONObject2.optBoolean("[]");
      jSONObject0.toString(123, (-845));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      int int0 = (-1932);
      jSONArray0.optDouble((-1932), (double) (-1932));
      int int1 = (-2257);
      Integer.sum((-2257), 4);
      jSONObject0.getString("[]");
      try { 
        jSONArray0.getDouble(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5705991060382574
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double.min(0.0, 0.0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.listIterator();
      Double double1 = new Double((-114.053096338));
      Double.min((-356.2786962), 565.227566503397);
      linkedList3.addFirst(double1);
      Double double2 = new Double(0.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      Double double3 = new Double((-2365.531));
      Double double4 = new Double(0.0);
      Double.min((-1.0), (-1003.641));
      linkedList0.add(double4);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList3.offerFirst(double3);
      Double double5 = new Double((-1061.9303713383702));
      Double double6 = new Double(0.0);
      linkedList3.add(double5);
      JSONObject jSONObject0 = new JSONObject(double3);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 1944.0707F);
      Float.sum((-1527.7599F), 1944.0707F);
      Float.isFinite(1944.0707F);
      Byte byte0 = new Byte((byte) (-21));
      JSONObject.quote("");
      Integer integer0 = new Integer(123);
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      Integer integer1 = new Integer(109);
      assertFalse(integer1.equals((Object)integer0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7038528379377897
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", 1534L);
      jSONObject1.append("==e", "==e");
      jSONObject0.optLong("0");
      jSONObject0.accumulate("] is not a Boolean.", "0");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write(writer0);
      stringWriter1.append((CharSequence) "] is not a Boolean.");
      jSONObject0.write(stringWriter1);
      Byte byte0 = new Byte((byte) (-53));
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.815411204089904
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("JW'f`'^[bXjfTb");
      String[] stringArray0 = new String[1];
      Float float0 = new Float((float) 136);
      jSONObject0.toString(136, 136);
      JSONObject jSONObject1 = new JSONObject("{}");
      String string0 = "s]o^zVxm7QpJG+ve";
      float float1 = new Float((float) 136);
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toString();
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000007\":[java.lang.Byte@0000000018,java.lang.Byte@0000000019],\"java.lang.String@0000000014\":\"java.lang.Class@0000000015\",\"java.lang.String@0000000005\":java.lang.Boolean@0000000006}");
      String string1 = "vspected a ',' or '}'";
      try { 
        jSONObject4.getJSONObject("vspected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vspected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9088453182944085
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      jSONObject1.putOpt("getreverseBytes", hashMap0);
      jSONObject0.optBoolean("getreverseBytes", true);
      Boolean boolean0 = new Boolean("[]");
      JSONObject jSONObject2 = jSONObject1.accumulate("_7^}q+u,yLXF=-vf=", boolean0);
      jSONObject2.optBoolean("[]");
      jSONObject0.toString(123, (-845));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optDouble((-1932), (double) (-1932));
      Integer.sum((-2257), 4);
      jSONObject1.optJSONObject((String) null);
      try { 
        jSONObject0.getString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8791457211896438
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float((-3050.41F));
      Float.min((-3050.41F), (-3050.41F));
      Float.min(0.0F, (-3050.41F));
      Float.sum((-3050.41F), (-3050.41F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray("A JSONObject text must begin with '{'");
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.65100396981543
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.testValidity(jSONObject1);
      jSONObject0.optBoolean("Null key.");
      JSONObject jSONObject2 = jSONObject1.put("fl", (Map) null);
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('?');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "fl");
      StringWriter stringWriter3 = stringWriter2.append('?');
      jSONObject2.write(stringWriter3);
      jSONObject0.opt("fl");
      try { 
        jSONObject0.getDouble("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.596232045081796
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      String string0 = JSONObject.valueToString(jSONObject0);
      jSONObject0.optLong("/}V`I2B:K4u:a.]$", (-1430L));
      jSONObject0.toString((-1329), (-1329));
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      Integer integer0 = new Integer(32);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.append("{}", (Object) null);
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject4 = jSONObject0.append("/}V`I2B:K4u:a.]$", jSONObject1);
      jSONObject3.isNull("/}V`I2B:K4u:a.]$");
      StringWriter stringWriter0 = new StringWriter(46);
      jSONObject2.optJSONObject("");
      jSONObject4.remove("getsum");
      Object object1 = new Object();
      String string1 = JSONObject.valueToString(object1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("'", 1.0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7557690270397415
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-105355879));
      Integer.divideUnsigned((-105355879), 60);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(801.9877);
      linkedList0.offer(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(69826856);
      Double double2 = new Double(Double.NaN);
      Double double3 = new Double((-1081.0));
      linkedList0.addFirst(double3);
      JSONObject jSONObject1 = new JSONObject(double3);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double4 = new Double(801.9877);
      Double double5 = new Double(0.0);
      Double double6 = new Double((-194.8866108789));
      Double.isFinite((-1373.654028316533));
      linkedList2.add(double6);
      Float float0 = new Float((float) 51);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.36902858862115
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("])e", jSONArray0);
      String string1 = "2:s1=.\\;rS0}9s3g";
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject$Null", (Object) null);
      jSONObject2.optJSONArray("{}");
      try { 
        jSONObject1.getJSONObject("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.517734194785151
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      Integer integer0 = new Integer((-1149));
      Integer.min(360, 203);
      JSONObject.valueToString(integer0);
      Float float0 = new Float((-1.9F));
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      double double1 = jSONObject0.optDouble("", (double) (-1149));
      assertEquals((-1149.0), double1, 0.01);
      
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("SH{Sx!-D", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8204279183603256
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      jSONObject0.optDouble("zrjTs2g");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "";
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject2 = jSONObject1.put("0SL/p_Q=n", (Map) hashMap0);
      byte byte0 = (byte)62;
      Byte byte1 = new Byte((byte)62);
      JSONObject jSONObject3 = jSONObject2.accumulate("0SL/p_Q=n", "");
      JSONObject jSONObject4 = jSONObject1.append("8", "0SL/p_Q=n");
      jSONObject2.optBoolean("");
      jSONObject3.get("8");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject5 = new JSONObject((Map) hashMap0);
      jSONObject4.append("8", "zrjTs2g");
      try { 
        jSONObject1.getJSONObject("zrjTs2g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zrjTs2g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 1534L);
      try { 
        jSONObject1.append("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4077309982451993
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optInt("'NU#v-dg;eE%k]l", 34);
      jSONObject0.append("v5Mdw", float0);
      jSONObject0.isNull("v5Mdw");
      Integer.divideUnsigned(34, 34);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(160);
      Integer integer1 = new Integer(34);
      Integer integer2 = new Integer(2860);
      Integer.compare((-154), (-881));
      Integer integer3 = new Integer(34);
      Integer integer4 = new Integer(34);
      Integer integer5 = new Integer(2860);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("v5Mdw", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 1944.0707F);
      Float.sum((-1527.7599F), 1944.0707F);
      Float.isFinite(1944.0707F);
      Float.max(1955.0502F, 2775.7627F);
      Float.sum(1.0F, 1193.5F);
      Float.max(0.0F, 0.0F);
      Float.isFinite((-2194.7734F));
      Float.sum(1944.0707F, 0.0F);
      float float1 = new Float((-2194.7734F));
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float.sum((-1.0F), (-3804.5728F));
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";WGBWYinqKi";
      stringArray0[1] = "\"\"";
      stringArray0[2] = "+ Qs?@tpN3@!Ho";
      stringArray0[3] = "+ Qs?@tpN3@!Ho";
      stringArray0[4] = "+ Qs?@tpN3@!Ho";
      stringArray0[5] = "\t";
      stringArray0[6] = "+ Qs?@tpN3@!Ho";
      JSONObject jSONObject0 = new JSONObject("+ Qs?@tpN3@!Ho", stringArray0);
      jSONObject0.put("!}fzo?\"96", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.410835476505104
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      String string0 = ":j3iW=2x,\"\"-2IOP*<";
      stringArray0[0] = ":j3iW=2x,\"\"-2IOP*<";
      String string1 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      JSONObject jSONObject2 = jSONObject1.append(":j3iW=2x,\"\"-2IOP*<", (Object) null);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames(jSONObject2);
      try { 
        jSONObject0.getBoolean(":j3iW=2x,\"\"-2IOP*<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":j3iW=2x,\\\"\\\"-2IOP*<\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8539363213358775
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("JW'f`'^[bXjfTb");
      int int0 = 125;
      Float float0 = new Float((float) 125);
      jSONObject0.toString(125, 125);
      JSONObject jSONObject1 = jSONObject0.accumulate("JW'f`'^[bXjfTb", float0);
      float float1 = 0.0F;
      JSONObject jSONObject2 = jSONObject1.put("s]o^zVxm7QpJG+ve", (double) 0.0F);
      jSONObject0.putOpt("{}", (Object) null);
      jSONObject2.toString();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Float@0000000003,\"java.lang.String@0000000004\":java.lang.Double@0000000005}");
      String string0 = "Expected a ',' or '}'";
      try { 
        jSONObject3.getJSONObject("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.264438751396035
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D2+";
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      jSONObject1.optBoolean("D2+");
      Float.max((-3293.62F), (-1.0F));
      Float.max((-1.0F), 1973.2532F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1676));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      Integer integer1 = new Integer((-1676));
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6160690287481794
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("\b", false);
      jSONObject0.optDouble("");
      Long long0 = new Long(3236L);
      Object object0 = JSONObject.NULL;
      jSONObject0.optDouble("0SL/p_Q=n", Double.NaN);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.317175814512515
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optInt("'NU#v-dg;eE%k]l", 34);
      JSONObject jSONObject1 = jSONObject0.append("v5Mdw", float0);
      jSONObject1.optBoolean((String) null, true);
      boolean boolean0 = new Boolean("v5Mdw");
      Integer.divideUnsigned(34, 34);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(160);
      Integer integer1 = new Integer(34);
      Integer integer2 = new Integer(2860);
      Integer.compare((-154), (-881));
      Integer integer3 = new Integer(34);
      Integer integer4 = new Integer((-2061));
      Integer integer5 = new Integer(2860);
      assertFalse(integer5.equals((Object)integer1));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.659558549669538
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optInt("'NU#v-dg;eE%k]l", 34);
      JSONObject jSONObject1 = jSONObject0.append("E", float0);
      jSONObject0.isNull("E");
      Integer.divideUnsigned(34, 34);
      Long long0 = new Long(34);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(34);
      Integer integer2 = new Integer(2860);
      Integer.compare(34, 11);
      Integer integer3 = new Integer(11);
      Integer integer4 = new Integer(34);
      Integer integer5 = new Integer((-881));
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float(2139.88426879);
      Float.max(1804.3F, 0.0F);
      Float.sum(1804.3F, 1955.0502F);
      Float.isFinite(3208.9255F);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      hashMap0.put(boolean0, "uLx/T@");
      hashMap0.clone();
      Byte byte0 = new Byte((byte)32);
      Integer.remainderUnsigned(861, (-1376));
      Byte byte1 = new Byte((byte)60);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(41);
      String[] stringArray0 = new String[2];
      JSONObject.valueToString((Object) null, (-1376), (-1376));
      stringArray0[1] = "uLx/T@";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1052.7);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      Double double1 = new Double(1052.7);
      int int0 = (-2093064);
      StringWriter stringWriter0 = new StringWriter(4);
      char char0 = '^';
      char char1 = 'B';
      stringWriter0.append('B');
      stringWriter0.append('^');
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-2637), 10);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "[]", 495, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3419408569062177
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("o}G6GjW4A!\"^1c@XsbJ", "o}G6GjW4A!\"^1c@XsbJ");
      Integer integer0 = new Integer((-105355879));
      Integer integer1 = new Integer((-105355879));
      hashMap0.put(integer0, "va");
      jSONObject0.get("o}G6GjW4A!\"^1c@XsbJ");
      jSONObject0.putOpt(": ", integer0);
      hashMap0.values();
      Integer.divideUnsigned(2, (-105355879));
      int int0 = 61;
      Integer.divideUnsigned(61, (-105355879));
      String string0 = "\\u";
      try { 
        Integer.decode(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\\u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3261746435284074
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D2+";
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      jSONObject1.optBoolean("D2+");
      try { 
        jSONObject1.getDouble("D2+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D2+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.977678234755361
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-105355879);
      String string0 = "o}G6Gj4A!\"^1c@XsbJ";
      JSONObject jSONObject1 = jSONObject0.accumulate("o}G6Gj4A!\"^1c@XsbJ", "o}G6Gj4A!\"^1c@XsbJ");
      try { 
        jSONObject1.getBoolean("o}G6Gj4A!\"^1c@XsbJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o}G6Gj4A!\\\"^1c@XsbJ\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.315853451763105
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(float0);
      int int0 = 123;
      StringWriter stringWriter0 = new StringWriter(123);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      int int1 = 160;
      Integer integer0 = new Integer((-1893));
      jSONObject0.accumulate("java.lang.Float@0000000002", stringWriter0);
      try { 
        jSONObject0.getJSONObject("java.lang.Float@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000002\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.2014023220140038
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-105355879);
      jSONObject0.accumulate("o}G6GjW4A!\"^1c@XsbJ", "o}G6GjW4A!\"^1c@XsbJ");
      Integer.toUnsignedString((-105355879));
      Integer integer0 = new Integer((-105355879));
      Integer.max((-105355879), (-105355879));
      jSONObject0.get("o}G6GjW4A!\"^1c@XsbJ");
      Float float0 = new Float(117.7489595389738);
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8512778304952962
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-105355879);
      JSONObject jSONObject1 = jSONObject0.accumulate("o}G6GjW4A!\"^1c@XsbJ", (Object) null);
      try { 
        jSONObject1.getBoolean("o}G6GjW4A!\"^1c@XsbJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o}G6GjW4A!\\\"^1c@XsbJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      byte byte0 = (byte) (-121);
      Byte byte1 = new Byte((byte) (-121));
      Byte.toUnsignedInt((byte)102);
      Byte.toUnsignedLong((byte)2);
      Byte.toUnsignedLong((byte)102);
      Integer integer0 = new Integer(12);
      byte byte2 = (byte)22;
      Byte byte3 = new Byte((byte)22);
      Byte.toUnsignedInt((byte)59);
      Integer.toUnsignedLong((byte)2);
      JSONObject.getNames((Object) null);
      Integer.divideUnsigned((byte)102, 120);
      Integer.divideUnsigned(102, (byte)2);
      try { 
        Integer.decode(".1QM-z_Z4=&a$];(okC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".1QM-z_Z4=&a$];(okC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float(1170.3611F);
      Float float1 = new Float(1170.3611F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Byte.toUnsignedInt((byte)2);
      Byte.toUnsignedLong((byte) (-27));
      Byte.toUnsignedLong((byte)2);
      Byte.toUnsignedInt((byte)52);
      Integer.toUnsignedLong(2);
      JSONObject.getNames((Object) linkedList0);
      Integer.toUnsignedLong(31);
      Integer.divideUnsigned(4, 2551);
      Integer.divideUnsigned((byte)2, (-660));
      int int0 = 69;
      Integer.divideUnsigned(69, 4);
      try { 
        Integer.decode("val");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"val\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1407), (-1407));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[6] = "null";
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.455394993624801
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "issubList";
      stringArray0[1] = "fLje";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Byte byte0 = new Byte((byte)7);
      jSONObject0.append("sp", "fLje");
      jSONObject0.isNull("qTx8q&<g5ZcIE*l");
      Integer.divideUnsigned((-2813), (byte)7);
      Long long0 = new Long(613566354);
      Integer integer0 = new Integer((-24668172));
      Integer integer1 = new Integer((-24668172));
      Integer.compare(88, 711);
      Integer integer2 = new Integer((-2079));
      Integer integer3 = new Integer((-24668172));
      Integer integer4 = new Integer(9);
      assertEquals(9, (int)integer4);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.013709311559073
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(1.0F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(2297.547130409);
      linkedList0.add(double0);
      Double double1 = new Double(429.00902);
      Double double2 = new Double((-1.0));
      linkedList0.offer(double2);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double3 = new Double((-1152.0697783828823));
      linkedList0.add(double1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double4 = new Double((-1.0));
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.addFirst(double4);
      Double double5 = new Double(0.0);
      Double double6 = new Double(1.0F);
      Double.isFinite((-1.0));
      Double double7 = new Double((-1.0));
      linkedList4.add(double7);
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double8 = new Double(429.00902);
      Double double9 = new Double(429.00902);
      linkedList5.add(double9);
      Float float1 = new Float(2769.0F);
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.060649125069464
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "-6G@:@p8r`";
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("-6G@:@p8r`", (Map) hashMap0);
      try { 
        jSONObject1.getLong("-6G@:@p8r`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-6G@:@p8r`\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{(){A|8QoR:|3~Ezn'";
      stringArray0[1] = "lAd6";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("su");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.5254746008830606
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      String string0 = "0SL/p_Q=n";
      jSONObject0.optDouble("");
      stringArray0[0] = "0SL/p_Q=n";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("", (Map) null);
      Integer integer0 = new Integer((-880));
      JSONObject jSONObject2 = jSONObject0.accumulate("", integer0);
      String string1 = "6k0~zDi2FTJqC!0";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      try { 
        jSONObject1.getString("6k0~zDi2FTJqC!0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6k0~zDi2FTJqC!0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.401311666981295
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "issubList";
      stringArray0[1] = "fLje";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Byte byte0 = new Byte((byte)7);
      Float.sum((byte)7, 414.165F);
      JSONObject jSONObject1 = jSONObject0.append("fLje", (Object) null);
      jSONObject1.isNull("getlistIterator");
      int int0 = Integer.divideUnsigned((byte)7, (-249));
      Long long0 = new Long((-249));
      Integer integer0 = new Integer(2475);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-840));
      Integer.compare(160, 70);
      Integer integer3 = new Integer(707);
      Integer integer4 = new Integer(385);
      Integer integer5 = new Integer(26);
      assertFalse(integer5.equals((Object)int0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.693827491834265
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0SL/p_Q=n";
      jSONObject0.put("", (Map) null);
      int int0 = (-880);
      Integer integer0 = new Integer((-880));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      int int1 = (-1893);
      int int2 = 160;
      Integer integer1 = new Integer((-1893));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("", object0);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.4580218635716737
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optInt("'NU#v-dg;eE%k]l", 34);
      jSONObject0.append("E", float0);
      jSONObject0.isNull("E");
      Integer.divideUnsigned(34, 34);
      Float.sum((-2032.78F), 1107.6F);
      Long long0 = new Long(34);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(34);
      Integer integer2 = new Integer(2860);
      Integer.compare(34, 11);
      Integer integer3 = new Integer(11);
      Integer integer4 = new Integer(34);
      Integer integer5 = new Integer((-881));
      Integer.min(12, 26);
      jSONObject0.accumulate("E", integer5);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6665139897568415
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(429.00902);
      Double double2 = new Double((-1.0));
      linkedList0.offer(double0);
      Double.isFinite((-1.0));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double3 = new Double(Double.NaN);
      Double double4 = new Double((-1251.6));
      linkedList2.add(double4);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double5 = new Double(0.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.addFirst(double4);
      Double double6 = new Double(0.0);
      Double double7 = new Double(Double.NaN);
      linkedList0.add(double2);
      Double.isFinite((-1251.6));
      Double double8 = new Double(0.0);
      linkedList4.add(double4);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double9 = new Double(Double.NaN);
      Float.max(1.0F, 1.0F);
      Float.max(1.0F, 366.06F);
      try { 
        JSONObject.numberToString(double9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kJ^E}KM!\"ca b&r";
      stringArray0[1] = "fLje";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.max((byte)7, (-3678.369F));
      float float1 = 2697.128F;
      Float.max(0.0F, (-1.0F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(429.00902);
      Double.min(429.00902, 429.00902);
      Double double2 = new Double((-1.0));
      linkedList0.offer(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double3 = new Double(Double.NaN);
      linkedList2.add(double0);
      Double double4 = new Double((-1251.6));
      linkedList2.add(double4);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double5 = new Double(0.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.addFirst(double4);
      Double double6 = new Double(0.0);
      Double double7 = new Double(Double.NaN);
      linkedList0.add(double2);
      Double.isFinite((-1251.6));
      Double double8 = new Double(0.0);
      linkedList4.add(double4);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean("T*Rlw/h");
      hashMap0.putIfAbsent(boolean0, (String) null);
      hashMap0.clone();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.5223033237643797
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      JSONObject jSONObject1 = jSONObject0.put("0S/p_QIn", 0L);
      jSONObject1.optInt("0S/p_QIn", 46);
      String string1 = "rfCDbF";
      jSONObject1.toString();
      int int0 = (-2093064);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2093064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3949643686802653
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      Integer integer0 = new Integer((-2338));
      JSONObject.valueToString(integer0);
      jSONObject0.optInt("", 2673);
      Integer integer1 = new Integer((-1893));
      jSONObject0.optString("yz~9{", "");
      StringWriter stringWriter0 = new StringWriter(2673);
      StringWriter stringWriter1 = stringWriter0.append('w');
      StringWriter stringWriter2 = stringWriter1.append('?');
      stringWriter2.close();
      stringWriter2.append((CharSequence) "");
      Integer.sum(123, 18);
      try { 
        jSONObject0.getString("pnE0@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pnE0@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6622246422897047
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float float1 = new Float(1193.5F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1193.5F);
      linkedList0.offer(double0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      linkedList0.add((Double) null);
      jSONObject0.opt("is");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(120.31754F);
      Float float1 = new Float((-856.26F));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double((-856.26F));
      Double.max(120.31754F, (-856.26F));
      linkedList1.offer(double1);
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double2 = new Double(0.0);
      linkedList0.add(double2);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double3 = new Double(1.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.addFirst(double0);
      Double double4 = new Double(0.0);
      Double double5 = new Double(120.31754F);
      Double.isFinite(0.0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double6 = new Double(0.0);
      linkedList5.add(double6);
      Float float2 = new Float(1037.6959F);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8567266534724054
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(1170.3611F);
      Float float1 = new Float(1170.3611F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1170.3611F);
      linkedList0.offer(double0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(float1);
      linkedList0.add((Double) null);
      Float float2 = new Float(1170.3611F);
      Short short0 = new Short((short) (-103));
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.815062529505342
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-3050.41F));
      Float.min((-3050.41F), (-3050.41F));
      Float.sum((-3050.41F), (-3050.41F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1244933328771762
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(2412.667);
      Double.min(0.0, 2412.667);
      Double.min(2412.667, 59.533);
      Double.isFinite(2412.667);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getlistIterator";
      stringArray0[1] = "XspeG% +s7#f,.PRy|#";
      stringArray0[2] = "Null pointer";
      stringArray0[3] = "Dj!%aR;{";
      stringArray0[4] = "`qGr\"B)7 Jb?'y#k^";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("A JSONObject text must begin with '{'", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONArray("lC'V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lC'V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7083084125018164
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(1.0F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(429.00902);
      Double double1 = new Double((-1.0));
      linkedList0.offer(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double2 = new Double((-1152.0697783828823));
      linkedList0.add(double0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double3 = new Double((-1.0));
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.addFirst(double3);
      Double double4 = new Double(0.0);
      Double double5 = new Double(1.0F);
      Double.isFinite((-1.0));
      Double double6 = new Double((-1.0));
      linkedList4.add(double6);
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double7 = new Double(429.00902);
      Double double8 = new Double(429.00902);
      linkedList5.add(double8);
      Float float1 = new Float(2769.0F);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 0.0F);
      Float.max(1955.0502F, 0.0F);
      Float.sum(0.0F, 1193.5F);
      Float float1 = new Float(0.0F);
      Float.max((-2485.7444F), (-1779.2487F));
      String[] stringArray0 = new String[6];
      String string0 = "getdescendingIterator";
      stringArray0[0] = "getdescendingIterator";
      String string1 = "Expected a ',' or '}'";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "k6Z^GIK&";
      stringArray0[3] = "getaddFirst";
      stringArray0[4] = "getaddFirst";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7223717598118347
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "!";
      String string1 = "{]T:z/W#%z";
      jSONObject0.put("{]T:z/W#%z", (-1L));
      jSONObject0.optLong("!");
      int int0 = 330;
      Double.sum(0.0, (-1478.44204392));
      Double.min((-1L), 0L);
      int int1 = 3377;
      // Undeclared exception!
      jSONObject0.toString(330, 3377);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (byte)27, (byte)27);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.4217423046465147
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1193.5F);
      linkedList0.offer(double0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(4, 4);
      Double double1 = new Double((-511.73294));
      linkedList0.addLast(double1);
      linkedList0.add((Double) null);
      Float float1 = new Float(1193.5F);
      assertEquals((float)float1, (float)float0, 0.01F);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8451922875218583
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@(B";
      stringArray0[1] = "*SDeI07PA8P&d:Qm{h-";
      stringArray0[2] = "*SDeI07PA8P&d:Qm{h-";
      stringArray0[3] = "ishashCode";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Integer integer0 = new Integer(58);
      JSONObject jSONObject1 = jSONObject0.accumulate("@{^56NjI,z~h.A.+SdA", integer0);
      JSONObject jSONObject2 = jSONObject1.put("T", (double) 58);
      jSONObject2.optLong("Expected a ',' or ']'");
      jSONObject1.optBoolean("ishashCode");
      jSONObject0.optJSONArray("*SDeI07PA8P&d:Qm{h-");
      jSONObject2.putOpt("istoString", jSONObject0);
      jSONObject0.optLong("iV", (long) 58);
      Object object1 = JSONObject.NULL;
      jSONObject1.put("ishashCode", 0.0);
      jSONObject0.put("-xz|p", 0L);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject2.putOpt("A JSONObject text must begin with '{'", boolean0);
      Boolean.logicalOr(false, false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Double double0 = new Double(0L);
      jSONObject2.append("*SDeI07PA8P&d:Qm{h-", double0);
      assertEquals(7, jSONObject2.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.717185783022374
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "D2+";
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("D2+", (Map) hashMap0);
      jSONObject0.optBoolean("getreverseBytes", true);
      Boolean boolean0 = new Boolean("[]");
      String string1 = "_7^\\}q+u,yLXF=-vf=";
      JSONObject jSONObject2 = jSONObject1.accumulate("_7^}q+u,yLXF=-vf=", boolean0);
      jSONObject2.optBoolean("[]");
      int int0 = (-845);
      jSONObject0.toString(123, (-845));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optDouble((-1932), (double) (-1932));
      int int1 = (-2257);
      int int2 = 4;
      Integer.sum((-2257), 4);
      try { 
        jSONObject0.getString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1998047732721755
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject.valueToString(jSONObject0, (byte)27, (byte)27);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.1884181677496533
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(5034, (-246));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.631539578568037
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(1170.3611F);
      Float float1 = new Float(1170.3611F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-498.7568111892534));
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList1.addFirst(double0);
      Byte byte0 = new Byte((byte)12);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add(double0);
      Float float2 = new Float(697.383F);
      jSONObject0.put("pa", 1969);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(1.0F);
      Float.isFinite(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject.doubleToString((-30.35018759982386));
      byte byte0 = (byte) (-121);
      Integer integer0 = new Integer((byte)95);
      int int0 = new Integer((byte) (-121));
      Integer.divideUnsigned((-933), 2925);
      Long long0 = new Long(1468364);
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kJ^E}KM!\"ca b&r";
      stringArray0[1] = "fLje";
      Byte byte0 = new Byte((byte)4);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("DUz<p#SdPx<fm_**");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DUz<p#SdPx<fm_**\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.9871607131314304
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(1955.0502F, 0.0F);
      Float.sum(0.0F, 1193.5F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "etdescendingIterator";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "etdescendingIterator";
      stringArray0[3] = "etdescendingIterator";
      stringArray0[4] = "etdescendingIterator";
      stringArray0[5] = "etdescendingIterator";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite((-3105.0F));
      jSONObject0.optLong("etdescendingIterator", (-1762L));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(48);
      Integer integer2 = new Integer((-111));
      Integer integer3 = new Integer(9);
      Integer integer4 = new Integer(47);
      Integer integer5 = new Integer(47);
      assertFalse(integer5.equals((Object)integer3));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("[]", 0L);
      Float float0 = new Float(148.9F);
      Float.sum(0.0F, 0.0F);
      float float1 = Float.max((-1.0F), (-26.373657F));
      assertEquals((-1.0F), float1, 0.01F);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double((-1773.766385370193));
      Double.max(0.0, 0.0);
      linkedList0.add(double1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList0.removeFirst();
      Double double2 = new Double(Double.NaN);
      linkedList3.offer(double2);
      Double double3 = new Double((-114.053096338));
      linkedList3.addFirst(double3);
      Double double4 = new Double(0.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      Double double5 = new Double(0.0);
      linkedList3.add(double5);
      Double double6 = new Double((-2365.531));
      Double double7 = new Double(0.0);
      Double.isFinite(0.0);
      linkedList0.add(double7);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double8 = new Double(0.0);
      linkedList3.add(double4);
      linkedList3.add(double2);
      Double double9 = new Double((-1465.46530407172));
      Double.isFinite(0.0);
      Double double10 = new Double(0.0);
      linkedList3.add(double10);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 1944.0707F);
      Float.sum((-1527.7599F), 1944.0707F);
      Float.sum(1.0F, 1193.5F);
      Float.max(0.0F, 0.0F);
      Float.sum(1.0F, (-1.0F));
      Float.max((-2201.9497F), 0.0F);
      Float.isFinite(416.3108F);
      Float.sum(0.0F, 1.0F);
      Float.max(1193.5F, 1460.2F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(2139.88426879);
      Float.max(1804.3F, 0.0F);
      Float.min(1804.3F, 1804.3F);
      Float.sum(1830.431F, 1804.3F);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.365697613094951
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 1534L);
      jSONObject1.append("==e", "==e");
      jSONObject0.optLong("");
      jSONObject0.accumulate("] is not a Boolean.", "");
      String string1 = "isnumberToString";
      Byte byte0 = new Byte((byte) (-53));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      String string2 = ",\n";
      try { 
        jSONObject2.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double.min(0.0, 0.0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double1 = new Double((-114.053096338));
      linkedList3.addFirst(double1);
      Double double2 = new Double(0.0);
      Double.isFinite(601.0);
      Double double3 = new Double(0.0);
      linkedList2.iterator();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.add(double2);
      Double double4 = new Double(464.366);
      Double double5 = new Double(0.0);
      linkedList0.add(double5);
      Double double6 = new Double(0.0);
      linkedList3.add(double6);
      Float.max(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.2333674476193686
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-105355879);
      String string0 = "o}G6GjW4A!\"^1c@XsbJ";
      JSONObject jSONObject1 = jSONObject0.accumulate("o}G6GjW4A!\"^1c@XsbJ", "o}G6GjW4A!\"^1c@XsbJ");
      jSONObject1.optLong("o}G6GjW4A!\"^1c@XsbJ");
      Integer integer0 = new Integer((-105355879));
      Integer.toUnsignedString((-105355879));
      Integer integer1 = new Integer((-105355879));
      Integer.max((-105355879), (-105355879));
      jSONObject1.put("gethashCode", (double) 0L);
      try { 
        jSONObject0.get("fd6=/+-Y\"YTTg2?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fd6=/+-Y\\\"YTTg2?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.685598359026393
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0SL/p_Q=n";
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.4959284004610933
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 0.0F);
      Float.max(1955.0502F, 0.0F);
      Float.sum(0.0F, 1193.5F);
      Float float1 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getdescendingIterator";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "k6Z^GIK&";
      stringArray0[3] = "getaddFirst";
      stringArray0[4] = "getaddFirst";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append('O');
      StringWriter stringWriter3 = stringWriter2.append('$');
      stringWriter1.append((CharSequence) "getdescendingIterator", 11, 11);
      StringWriter stringWriter4 = new StringWriter(47);
      stringWriter3.close();
      Byte byte0 = Byte.valueOf((byte)18);
      jSONObject1.append("Expected a ',' or '}'", byte0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.5889885552138514
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      String string0 = "0SL/pKQ=n";
      jSONObject0.optDouble("");
      stringArray0[0] = "0SL/pKQ=n";
      String string1 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      Integer integer0 = new Integer((-880));
      JSONObject jSONObject2 = jSONObject1.append("0SL/pKQ=n", (Object) null);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames(jSONObject2);
      jSONObject0.getString("");
      jSONObject2.length();
      jSONObject1.optDouble("mbMWSP).[`Q(IS\"");
      try { 
        jSONObject0.getString(",{i ohO;!=e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",{i ohO;!=e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.1805270300288773
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-105355879);
      String string0 = "o}G6GQj4A!\"L1c@XsbJ";
      jSONObject0.accumulate("o}G6GQj4A!\"L1c@XsbJ", "o}G6GQj4A!\"L1c@XsbJ");
      jSONObject0.optInt("o}G6GQj4A!\"L1c@XsbJ", (-105355879));
      try { 
        jSONObject0.getJSONArray("S}{iNNTU>zzw(]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S}{iNNTU>zzw(]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer((-2262));
      Integer.sum(47, 47);
      Integer.divideUnsigned((-792), 3238);
      String string0 = Integer.toUnsignedString((-2262));
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.709311193478559
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(59);
      JSONObject.valueToString(integer0);
      StringWriter stringWriter0 = new StringWriter(59);
      int int0 = 160;
      JSONObject.valueToString(linkedList0, 160, 123);
      Integer integer1 = new Integer(123);
      Long long0 = new Long(0L);
      try { 
        Integer.decode("Yq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Yq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double.min(0.0, 0.0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double1 = new Double((-114.053096338));
      linkedList3.addFirst(double1);
      Double double2 = new Double(0.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      Double double3 = new Double((-2365.531));
      Double double4 = new Double(0.0);
      linkedList0.add(double4);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(double3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "issubList";
      stringArray0[1] = "fLje";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Byte byte0 = new Byte((byte)7);
      Float.sum((byte)7, 414.165F);
      Byte byte1 = new Byte((byte)7);
      JSONObject.getNames(jSONObject0);
      Integer.divideUnsigned((byte)7, (byte)69);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-1092));
      Integer integer1 = new Integer((byte)69);
      hashMap0.replace(integer0, "issubList");
      hashMap0.values();
      Integer.divideUnsigned(69, 56);
      Integer.divideUnsigned(61, 69);
      try { 
        Integer.decode("J&f{}&Fpdq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J&f{}&Fpdq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      int int0 = jSONObject0.optInt("false");
      assertEquals(0, int0);
      
      Integer integer0 = new Integer((-105355879));
      Integer.divideUnsigned((-105355879), 60);
      Object object0 = new Object();
      Integer integer1 = new Integer(69826856);
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Long long0 = new Long(0L);
      JSONObject.quote("mFa=$:y@JU");
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(true, true);
      hashMap1.putIfAbsent(boolean0, "j,");
      Float.isFinite(0.0F);
      JSONObject.quote("*/7-$dlX&FQ\":_s%");
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.3309780944634566
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float(1170.3611F);
      Float float1 = new Float(1170.3611F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double((-1.0));
      Double double1 = new Double((-2596.74607864834));
      linkedList0.offer(double1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double2 = new Double((-1.0));
      Double double3 = new Double(1.0);
      linkedList2.addFirst(double3);
      JSONObject jSONObject0 = new JSONObject(double3);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double4 = new Double(2889.4719);
      Double double5 = new Double(0.0);
      linkedList3.add(double1);
      Float float2 = new Float((float) (byte)2);
      jSONObject0.toString((int) (byte)2);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 5, 5);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      jSONTokener0.skipTo('5');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float((-3050.41F));
      Float.min((-3050.41F), (-3050.41F));
      Float.min(0.0F, (-3050.41F));
      Float.sum((-3050.41F), (-3050.41F));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getInt("+ Qs?@(pN3@!Ho");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+ Qs?@(pN3@!Ho\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.next();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.038198852167527
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Long long0 = new Long(0L);
      JSONObject.quote("mFa=$:y@JU");
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(true, true);
      hashMap1.putIfAbsent(boolean0, "T*Rlw/h");
      hashMap1.clone();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Zz.\"s{Z$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Zz.\"s{Z$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.038198852167527
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Long long0 = new Long(0L);
      JSONObject.quote("mFa=$:y@JU");
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = new Boolean(true);
      hashMap1.putIfAbsent(boolean0, "T*Rlw/h");
      hashMap1.clone();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Zz.\"s{Z$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Zz.\"s{Z$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float((-3050.41F));
      Float.min((-3050.41F), (-3050.41F));
      Float.sum((-3050.41F), (-3050.41F));
      Float.min((-6100.82F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove("sp");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 0.0F);
      Float.max(1955.0502F, 0.0F);
      float float1 = Float.sum(0.0F, 1193.5F);
      Float.max(1955.0502F, 2775.7627F);
      Float.max(485.501F, 0.0F);
      Float.isFinite(0.0F);
      Float.sum(1.0F, 1193.5F);
      Float.max((-12.127171F), 1194.5F);
      Float.sum(1955.0502F, 709.5F);
      Float.isFinite((-2201.9497F));
      JSONObject.quote("M7ti<q3-1l6/>");
      Float float2 = new Float(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z-A?B_bb";
      stringArray0[1] = "7\"]8e6h4N&Z";
      stringArray0[2] = "fo";
      stringArray0[3] = "get";
      stringArray0[4] = "to";
      stringArray0[5] = "int";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = jSONObject0.optString("$Qr~=`]", "getreplaceFirst");
      assertEquals("getreplaceFirst", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.2625396183422195
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(0.0F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(3906.2);
      linkedList0.offer(double1);
      linkedList0.add(double1);
      JSONObject jSONObject1 = new JSONObject(float0);
      Float float2 = new Float(102.44224F);
      Float.min(2445.537F, 0.0F);
      String string0 = jSONObject0.optString("Unclosed comment");
      assertEquals("", string0);
      
      boolean boolean0 = jSONObject1.optBoolean("&9Fd(~*");
      assertEquals(3, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.optDouble("vfMc(N+jsm", (double) 0.0F);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.2010005908492167
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double.min(0.0, 0.0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.listIterator();
      Double double1 = new Double((-114.053096338));
      Double.min((-356.2786962), 565.227566503397);
      linkedList3.addFirst(double1);
      Double double2 = new Double(0.0);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      Double double3 = new Double((-2365.531));
      Double double4 = new Double(0.0);
      Double.min((-1.0), (-1003.641));
      linkedList0.add(double4);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList3.offerFirst(double3);
      Double double5 = new Double((-1061.9303713383702));
      Double double6 = new Double(0.0);
      linkedList3.add(double5);
      JSONObject jSONObject0 = new JSONObject(double3);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      Double double7 = new Double(0.0);
      Double double8 = new Double(1.0);
      linkedList0.add(double8);
      Float float0 = new Float((-2201.4699679018));
      assertEquals((-2201.47F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.offer(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double((-1773.766385370193));
      Double.max(0.0, 0.0);
      linkedList0.add(double1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList0.removeFirst();
      Double double2 = new Double(Double.NaN);
      linkedList3.offer(double2);
      Double double3 = new Double((-114.053096338));
      linkedList3.addFirst(double3);
      Double double4 = new Double(0.0);
      String string0 = JSONObject.valueToString(linkedList2);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.3406676157795956
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1193.5F);
      linkedList0.offer(double0);
      linkedList0.add(double0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      linkedList0.add((Double) null);
      Float float1 = new Float(1193.5F);
      String string0 = jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.094169388692814
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      jSONObject0.put("null", (Map) hashMap0);
      Float float0 = new Float((-777.9777660619966));
      Integer integer0 = new Integer((-1193));
      Integer integer1 = new Integer((-1193));
      Integer integer2 = new Integer(5);
      assertEquals(5, (int)integer2);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.9113798545817509
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(1.3462853F);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(429.00902);
      Double double1 = new Double((-1.0));
      linkedList0.offer(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double2 = new Double((-1152.0697783828823));
      linkedList0.add(double0);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double3 = new Double((-1.0));
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.addFirst(double3);
      Double double4 = new Double(0.0);
      Double double5 = new Double(1.3462853F);
      linkedList3.add(double3);
      Double.isFinite((-1.0));
      Double double6 = new Double((-1.0));
      linkedList4.add(double6);
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      Double double7 = new Double(429.00902);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2100));
      double double8 = jSONObject0.optDouble("73QM$)2");
      assertEquals(4, jSONObject0.length());
      assertEquals(Double.NaN, double8, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p%A,rZ5.9Ho~WHYbt>";
      stringArray0[1] = "true";
      String string0 = "\\u";
      stringArray0[2] = string0;
      stringArray0[3] = "Q6@kwPDH*xiK##_{JO7";
      stringArray0[4] = "X&MHX";
      stringArray0[5] = "Unterminated string";
      stringArray0[6] = "toJ";
      stringArray0[7] = "getnumberToString";
      stringArray0[8] = "] is not a number.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.0);
      Integer integer0 = new Integer(2881);
      hashMap0.put(double0, integer0);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.0419615829061306
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(1955.0502F, 0.0F);
      Float.sum(0.0F, 1193.5F);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = stringArray0[0];
      stringArray0[3] = "etdescendingIterator";
      stringArray0[4] = stringArray0[0];
      stringArray0[5] = "etdescendingIterator";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append('O');
      StringWriter stringWriter3 = stringWriter2.append('$');
      stringWriter1.append((CharSequence) "etdescendingIterator", 11, 11);
      StringWriter stringWriter4 = new StringWriter(47);
      stringWriter3.close();
      assertSame(stringWriter3, stringWriter0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 1944.0707F);
      Float.sum((-1527.7599F), 1944.0707F);
      Float.isFinite(416.3108F);
      Float.max(1955.0502F, 2775.7627F);
      Float.sum(1.0F, 1193.5F);
      Float.max(0.0F, 0.0F);
      Float.sum(1.0F, (-1.0F));
      Float.max((-2201.9497F), 0.0F);
      Float.isFinite(2775.7627F);
      Float.sum(0.0F, 1.0F);
      Float.max(1193.5F, 1460.2F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.745002365139427
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Integer integer0 = new Integer((byte)95);
      Integer.divideUnsigned((-933), 2960);
      Long long0 = new Long(1451002);
      Integer integer1 = new Integer((byte)122);
      Integer integer2 = new Integer((byte)122);
      Integer integer3 = new Integer(2860);
      Integer.compare((-881), (-933));
      Integer integer4 = new Integer((byte)95);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(173);
      Float float0 = new Float(0.0);
      Float.sum((-933), (-2268.2546F));
      JSONObject jSONObject0 = new JSONObject(float0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float(1208.3452F);
      String[] stringArray0 = new String[2];
      Double double0 = new Double(1208.3452F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(1193.5F);
      Float.max(0.0F, 0.0F);
      Float.sum(0.0F, 1193.5F);
      Float.min(1955.0502F, 0.0F);
      Float.max(1955.0502F, 2775.7627F);
      Float.isFinite(0.0F);
      float float1 = Float.sum(1.0F, 1193.5F);
      Float.max(0.0F, 0.0F);
      Float.sum(1955.0502F, 709.5F);
      Float.isFinite((-2201.9497F));
      Float.sum(0.0F, 3009.42F);
      Float.min(0.0F, 0.0F);
      Float.sum(1.0F, (-2201.9497F));
      JSONObject.quote("Substring bounds error");
      float float2 = Float.sum(0.0F, (-1.0F));
      assertNotEquals(float2, float1, 0.01F);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.6774351330381498
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("JW'f`'^[bXjfTb");
      String[] stringArray0 = new String[1];
      Float.min((-3802.0F), 0.0F);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      long long0 = jSONObject1.optLong("\"1k@EmA$\"v]]E");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.2213836861256668
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "issubList";
      Boolean boolean0 = new Boolean("getdescendingIterator");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.get("fd6=/+-Y\"YTTg2?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fd6=/+-Y\\\"YTTg2?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }
}
