/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 10:28:39 GMT 2020
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.net.InetAddress;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Predicate;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationException;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.SimpleAuthenticationInfo;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy;
import org.jsecurity.authc.pam.ModularAuthenticationStrategy;
import org.jsecurity.authc.pam.ModularRealmAuthenticator;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.Cache;
import org.jsecurity.cache.CacheManager;
import org.jsecurity.cache.HashtableCache;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.mgt.DefaultSessionManager;
import org.jsecurity.session.mgt.eis.MemorySessionDAO;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.RememberMeManager;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.crypto.hash.Md5Hash");
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      String string0 = DefaultWebSecurityManager.PRINCIPALS_SESSION_KEY;
      Integer integer0 = new Integer(4022);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(integer0, simpleAccountRealm0, "u4MtjK");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("G`ik");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Integer integer1 = new Integer(4022);
      char[] charArray0 = new char[8];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY", charArray0, inetAddress0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      MockThrowable mockThrowable0 = new MockThrowable("u4MtjK");
      AuthenticationException authenticationException0 = new AuthenticationException("u4MtjK", mockThrowable0);
      AuthenticationInfo authenticationInfo0 = firstSuccessfulAuthenticationStrategy2.afterAttempt(simpleAccountRealm1, usernamePasswordToken1, simpleAuthenticationInfo0, simpleAuthenticationInfo0, authenticationException0);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("z2WR", "e]>OQ", true);
      usernamePasswordToken2.clear();
      SimpleAuthenticationInfo simpleAuthenticationInfo2 = new SimpleAuthenticationInfo();
      SimpleAuthenticationInfo simpleAuthenticationInfo3 = new SimpleAuthenticationInfo();
      firstSuccessfulAuthenticationStrategy1.beforeAttempt(simpleAccountRealm1, usernamePasswordToken1, authenticationInfo0);
      firstSuccessfulAuthenticationStrategy0.beforeAttempt(simpleAccountRealm1, usernamePasswordToken2, simpleAuthenticationInfo1);
      Session session0 = null;
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("$tt('TeE6%'8I<-xKM");
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      simpleAccountRealm0.getCacheManager();
      memorySessionDAO0.setCacheManager((CacheManager) null);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      MockInetAddress.getLoopbackAddress();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("' being the default.");
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      modularRealmAuthenticator0.onLogout((PrincipalCollection) null);
      modularRealmAuthenticator0.setModularAuthenticationStrategy((ModularAuthenticationStrategy) null);
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.remove(authenticationListener0);
      modularRealmAuthenticator0.setRealms((Collection<Realm>) null);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("Found existing value stored under name [");
      ModularRealmAuthenticator modularRealmAuthenticator1 = new ModularRealmAuthenticator(simpleAccountRealm1);
      modularRealmAuthenticator1.remove((AuthenticationListener) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((String) null).when(servletRequest0).getLocalName();
      doReturn((BufferedReader) null).when(servletRequest0).getReader();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getAttributeNames();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm2);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      servletRequestWrapper0.getReader();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("Found existing value stored under name [", "org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletRequestWrapper0.getLocalName();
      ServletResponse servletResponse1 = servletResponseWrapper2.getResponse();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, false, inetAddress0, (Session) null, defaultSecurityManager0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper1, servletResponse1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      int int0 = 0;
      Integer integer0 = new Integer((-2298));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermission wildcardPermission0 = new WildcardPermission("N$jIUVod:[q<|$Tn*");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("!< A#gZu7?'pSf.##U");
      wildcardPermission0.implies(permission0);
      AllPermission allPermission0 = new AllPermission();
      wildcardPermission0.implies(allPermission0);
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("jsecurity");
      wildcardPermissionResolver1.resolvePermission("N$jIUVod:[q<|$Tn*");
      Permission permission1 = wildcardPermissionResolver1.resolvePermission("pz");
      wildcardPermission0.implies(permission1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-60);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)41;
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      defaultWebSecurityManager0.getPrincipals((Session) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((PrincipalCollection) null, false, (Session) null, (ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3795824068593738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getParameterNames();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      ServletResponse servletResponse1 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setUsername("http");
      firstSuccessfulAuthenticationStrategy0.beforeAttempt(simpleAccountRealm0, usernamePasswordToken0, simpleAuthenticationInfo0);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", "org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      defaultWebSecurityManager1.setModularAuthenticationStrategy(firstSuccessfulAuthenticationStrategy0);
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      defaultWebSecurityManager1.setSessionMode("http");
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";|Sr`tE\u0005e5F)M");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2396593920543857
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-56);
      defaultWebSecurityManager0.setRememberMeCipherKey(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((BufferedReader) null).when(servletRequest0).getReader();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getAttributeNames();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      servletRequestWrapper1.getReader();
      Integer integer0 = new Integer((-1194));
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(integer0, "{");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper2.getResponse();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, false, inetAddress0, (Session) null, defaultWebSecurityManager0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper1, servletResponseWrapper1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8019511397932635
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      ServletResponse servletResponse1 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY", "org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      firstSuccessfulAuthenticationStrategy0.beforeAttempt(simpleAccountRealm0, usernamePasswordToken0, simpleAuthenticationInfo0);
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      defaultWebSecurityManager1.setSessionIdCookiePath("");
      defaultWebSecurityManager1.setSessionIdCookieName("YzKk7ues[xe?<}");
      defaultWebSecurityManager1.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager1.getSessionMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5481155268740174
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionIdCookiePath("jsecurity");
      System.setCurrentTimeMillis(1048576L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5481155268740174
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      String string0 = DefaultWebSecurityManager.AUTHENTICATED_SESSION_KEY;
      Integer integer0 = new Integer(4011);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("D`ik");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Integer integer1 = new Integer(4011);
      char[] charArray0 = new char[8];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", charArray0, inetAddress0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      MockThrowable mockThrowable0 = new MockThrowable("u4MtjK");
      AuthenticationException authenticationException0 = new AuthenticationException("u4MtjK", mockThrowable0);
      firstSuccessfulAuthenticationStrategy2.afterAttempt(simpleAccountRealm0, usernamePasswordToken1, simpleAuthenticationInfo0, simpleAuthenticationInfo0, authenticationException0);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      authenticationException0.addSuppressed(mockThrowable0);
      SimpleAuthenticationInfo simpleAuthenticationInfo2 = new SimpleAuthenticationInfo();
      SimpleAuthenticationInfo simpleAuthenticationInfo3 = new SimpleAuthenticationInfo();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, true, inetAddress1, (Session) null, defaultWebSecurityManager0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper0, servletResponseWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator(simpleAccountRealm0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      modularRealmAuthenticator0.onLogout(simplePrincipalCollection0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      modularRealmAuthenticator0.setModularAuthenticationStrategy(firstSuccessfulAuthenticationStrategy0);
      modularRealmAuthenticator0.setRealms((Collection<Realm>) null);
      modularRealmAuthenticator0.remove((AuthenticationListener) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((BufferedReader) null).when(servletRequest0).getReader();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getAttributeNames();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm1);
      assertEquals("http", defaultWebSecurityManager1.getSessionMode());
      
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      servletRequestWrapper0.getReader();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper0.getResponse();
      MockInetAddress.anyLocalAddress();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper2);
      assertFalse(subject0.isAuthenticated());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getParameterNames();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.getRealms();
      ServletResponse servletResponse1 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponse1);
      defaultWebSecurityManager0.hasRoles((PrincipalCollection) null, (List<String>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper9);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper6, servletResponseWrapper6);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) null, true, (Session) null, (ServletRequest) servletRequestWrapper7, (ServletResponse) servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper4, servletResponseWrapper11);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(subject0.isAuthenticated());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermission wildcardPermission0 = new WildcardPermission("' being the default.");
      wildcardPermission0.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission1 = new WildcardPermission("' being the default.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("http");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("HQ9? XcE");
      wildcardPermissionResolver0.resolvePermission("QF$M,v0n^?QS6");
      wildcardPermission0.implies(permission0);
      wildcardPermission0.implies((Permission) null);
      wildcardPermission1.implies(permission0);
      Permission permission2 = wildcardPermissionResolver0.resolvePermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      WildcardPermission wildcardPermission2 = new WildcardPermission("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY", false);
      wildcardPermission1.implies(wildcardPermission2);
      WildcardPermission wildcardPermission3 = new WildcardPermission("jsecurity");
      permission2.implies(wildcardPermission0);
      wildcardPermission3.implies(permission0);
      WildcardPermission wildcardPermission4 = new WildcardPermission("' being the default.", false);
      wildcardPermission4.implies(wildcardPermission2);
      wildcardPermission4.implies(wildcardPermission0);
      wildcardPermission4.implies(wildcardPermission3);
      permission2.implies(wildcardPermission3);
      wildcardPermission4.implies(permission0);
      wildcardPermission0.implies(wildcardPermission3);
      permission2.implies(permission1);
      AllPermission allPermission0 = new AllPermission();
      wildcardPermission0.implies(permission2);
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertFalse(boolean0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      delegatingSubject0.isPermitted((String) null);
      delegatingSubject0.isPermitted("org.jsecurity.crypto.hash.Sha384Hash");
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      linkedHashSet0.spliterator();
      delegatingSubject0.isPermittedAll((Collection<Permission>) linkedHashSet0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponse servletResponse1 = null;
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = null;
      try {
        servletResponseWrapper4 = new ServletResponseWrapper((ServletResponse) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&Y*X;+<,A~Go%9X$");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[0] = (byte) (-31);
      byteArray0[2] = (byte)1;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getServerPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getServerPort();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper0.getCharacterEncoding();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper3, servletResponseWrapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((Object) null, (Object) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteAddr();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequest servletRequest1 = servletRequestWrapper2.getRequest();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequest1);
      servletRequestWrapper4.getRemoteAddr();
      servletRequestWrapper4.getParameterNames();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)26;
      byteArray0[6] = (byte)51;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultSecurityManager0);
      Object object0 = new Object();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getParameterValues((String) null);
      servletRequestWrapper2.getParameterValues((String) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequest1);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper1.getCharacterEncoding();
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper4);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper7, servletResponseWrapper2);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      delegatingSubject0.isPermitted((String) null);
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      linkedHashSet0.spliterator();
      delegatingSubject0.isPermittedAll((Collection<Permission>) linkedHashSet0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4019454593787288
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      AuthenticationListener authenticationListener1 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.add(authenticationListener1);
      modularRealmAuthenticator0.add(authenticationListener0);
      AuthenticationListener authenticationListener2 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.remove(authenticationListener2);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6807679837119678
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A3a!Bk7e9e1I&(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      simpleAccountRealm0.isPermitted((PrincipalCollection) null, (List<Permission>) linkedList0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.getRememberMeManager();
      defaultWebSecurityManager0.hasRoles((PrincipalCollection) null, (List<String>) null);
      defaultWebSecurityManager0.setRememberMeManager((RememberMeManager) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultWebSecurityManager0.setSessionIdCookieName("http");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8019511397932635
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getSessionMode();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager1.getRememberMeManager();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieName("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      Boolean boolean0 = new Boolean("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      ServletResponse servletResponse0 = null;
      ServletResponseWrapper servletResponseWrapper0 = null;
      try {
        servletResponseWrapper0 = new ServletResponseWrapper((ServletResponse) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6807679837119678
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.crypto.hash.Md5Hash");
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.toString();
      Integer integer0 = new Integer(4022);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(integer0, simpleAccountRealm0, "u4MtjK");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("G`ik:");
      defaultWebSecurityManager0.destroy();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm1);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Integer.min(1411, 1411);
      char[] charArray0 = new char[1];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", charArray0, inetAddress0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("z2WR", "e]>OQ", true);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      firstSuccessfulAuthenticationStrategy2.afterAllAttempts(usernamePasswordToken2, simpleAuthenticationInfo0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1844942192));
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY";
      delegatingSubject0.isPermitted(stringArray0);
      delegatingSubject0.isPermitted((String) null);
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) usernamePasswordToken0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      linkedHashSet0.removeIf(predicate3);
      linkedHashSet0.spliterator();
      delegatingSubject0.isPermittedAll((Collection<Permission>) linkedHashSet0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("21}'ys3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      AuthenticationListener authenticationListener1 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.add(authenticationListener1);
      modularRealmAuthenticator0.add(authenticationListener0);
      AuthenticationListener authenticationListener2 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.add(authenticationListener2);
      AuthenticationListener authenticationListener3 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.remove(authenticationListener3);
      AuthenticationListener authenticationListener4 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.remove(authenticationListener4);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("@(ew5/XdwZ3TM}Qo9");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKey(byteArray0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("~%.Z");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermission wildcardPermission0 = new WildcardPermission("' being the default.");
      wildcardPermission0.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission1 = new WildcardPermission("' being the default.");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver1.resolvePermission("N$jIUVod:[q<|$Tn*");
      wildcardPermission0.implies(permission0);
      wildcardPermission0.implies((Permission) null);
      wildcardPermission1.implies(permission0);
      wildcardPermissionResolver0.resolvePermission("N$jIUVod:[q<|$Tn*");
      WildcardPermission wildcardPermission2 = new WildcardPermission("jsecurity");
      wildcardPermission2.implies((Permission) null);
      wildcardPermission0.implies(wildcardPermission2);
      WildcardPermission wildcardPermission3 = new WildcardPermission("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY", false);
      wildcardPermission3.implies(wildcardPermission2);
      permission0.implies((Permission) null);
      wildcardPermission1.implies((Permission) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteAddr();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequest servletRequest1 = servletRequestWrapper0.getRequest();
      servletRequestWrapper4.getRemoteAddr();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequest1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper7, (ServletResponse) servletResponseWrapper2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("Deleting file ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.crypto.hash.Md5Hash");
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.toString();
      Integer integer0 = new Integer(4022);
      WildcardPermission wildcardPermission0 = new WildcardPermission("@7]`m1");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      wildcardPermission0.implies(permission0);
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission1 = new WildcardPermission("Ju!CV8ac-n4LV");
      wildcardPermission1.implies(permission0);
      wildcardPermission1.implies(wildcardPermission0);
      wildcardPermission0.implies(wildcardPermission1);
      wildcardPermissionResolver0.resolvePermission("A-QL/,L");
      AllPermission allPermission0 = new AllPermission();
      wildcardPermission0.implies(permission0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      boolean boolean0 = defaultWebSecurityManager1.isAuthenticated((Session) null);
      assertFalse(boolean0);
      assertEquals("http", defaultWebSecurityManager0.getSessionMode());
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermission wildcardPermission0 = new WildcardPermission("N$jIUVod:[q<|$Tn*");
      wildcardPermission0.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission1 = new WildcardPermission("Authenticator argument cannot be null.");
      wildcardPermission1.implies(wildcardPermission0);
      wildcardPermission1.implies(wildcardPermission0);
      wildcardPermission0.implies(wildcardPermission1);
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("pz");
      permission0.implies(wildcardPermission0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-32);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("N$jIUVod:[q<|$Tn*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [N$jIUVod:[q<|$Tn*].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      servletResponseWrapper2.setLocale(locale0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      servletResponseWrapper0.getLocale();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper4.setLocale((Locale) null);
      servletResponseWrapper2.getContentType();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper6);
      servletResponseWrapper3.getContentType();
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper8.setLocale((Locale) null);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponse servletResponse1 = servletResponseWrapper12.getResponse();
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper16);
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponse1);
      ServletResponseWrapper servletResponseWrapper19 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper20 = new ServletResponseWrapper(servletResponseWrapper11);
      assertFalse(servletResponseWrapper20.equals((Object)servletResponseWrapper18));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm((String) null);
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      Cache cache0 = hashtableCacheManager0.getCache("jsecurity-activeSessionCache");
      cache0.clear();
      memorySessionDAO0.setActiveSessionsCache(cache0);
      HashtableCache hashtableCache0 = new HashtableCache("jsecurity-activeSessionCache");
      HashtableCache hashtableCache1 = new HashtableCache("jsecurity-activeSessionCache");
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      simpleAccountRealm0.getCacheManager();
      hashtableCache1.toString();
      HashtableCache hashtableCache2 = new HashtableCache("jsecurity-activeSessionCache");
      HashtableCache hashtableCache3 = new HashtableCache("m");
      HashtableCache hashtableCache4 = new HashtableCache("jsecurity-activeSessionCache");
      hashtableCache1.clear();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertEquals("http", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      int int0 = (-2317);
      Integer integer0 = new Integer((-2317));
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      DefaultSessionManager defaultSessionManager0 = new DefaultSessionManager();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletRequest servletRequest0 = null;
      ServletRequestWrapper servletRequestWrapper0 = null;
      try {
        servletRequestWrapper0 = new ServletRequestWrapper((ServletRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request cannot be null
         //
         verifyException("javax.servlet.ServletRequestWrapper", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      modularRealmAuthenticator0.onLogout((PrincipalCollection) null);
      modularRealmAuthenticator0.setModularAuthenticationStrategy((ModularAuthenticationStrategy) null);
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer(linkedHashSet0);
      Collection<Realm> collection0 = modularRealmAuthorizer0.getRealms();
      modularRealmAuthenticator0.setRealms(collection0);
      modularRealmAuthenticator0.remove(authenticationListener0);
      modularRealmAuthenticator0.setRealms((Collection<Realm>) null);
      AuthenticationListener authenticationListener1 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      modularRealmAuthenticator0.remove(authenticationListener1);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      linkedHashSet1.spliterator();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.crypto.hash.Md5Hash");
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      String string0 = DefaultWebSecurityManager.PRINCIPALS_SESSION_KEY;
      Integer integer0 = new Integer(4022);
      SimpleAuthenticationInfo simpleAuthenticationInfo0 = new SimpleAuthenticationInfo(integer0, simpleAccountRealm0, "u4MtjK");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("G`ik");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Integer integer1 = new Integer(4022);
      char[] charArray0 = new char[8];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY", charArray0, inetAddress0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      MockThrowable mockThrowable0 = new MockThrowable("u4MtjK");
      AuthenticationException authenticationException0 = new AuthenticationException("u4MtjK", mockThrowable0);
      firstSuccessfulAuthenticationStrategy2.afterAttempt(simpleAccountRealm1, usernamePasswordToken1, simpleAuthenticationInfo0, simpleAuthenticationInfo0, authenticationException0);
      SimpleAuthenticationInfo simpleAuthenticationInfo1 = new SimpleAuthenticationInfo();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("z2WR", "e]>OQ", true);
      usernamePasswordToken2.clear();
      SimpleAuthenticationInfo simpleAuthenticationInfo2 = new SimpleAuthenticationInfo();
      SimpleAuthenticationInfo simpleAuthenticationInfo3 = new SimpleAuthenticationInfo();
      SimpleAuthenticationInfo simpleAuthenticationInfo4 = new SimpleAuthenticationInfo();
      firstSuccessfulAuthenticationStrategy2.beforeAttempt(simpleAccountRealm1, usernamePasswordToken1, simpleAuthenticationInfo1);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection1.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      MemorySessionDAO memorySessionDAO1 = new MemorySessionDAO();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      hashtableCacheManager1.getCache("jsecurity-activeSessionCache");
      memorySessionDAO0.getActiveSessionsCache();
      memorySessionDAO0.setActiveSessionsCache((Cache) null);
      HashtableCache hashtableCache0 = new HashtableCache("jsecurity-activeSessionCache");
      HashtableCache hashtableCache1 = new HashtableCache("jsecurity-activeSessionCache");
      HashtableCacheManager hashtableCacheManager2 = new HashtableCacheManager();
      hashtableCache1.values();
      HashtableCache hashtableCache2 = new HashtableCache("jsecurity-activeSessionCache");
      hashtableCache1.clear();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      System.setCurrentTimeMillis(0L);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge(1911);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }
}
