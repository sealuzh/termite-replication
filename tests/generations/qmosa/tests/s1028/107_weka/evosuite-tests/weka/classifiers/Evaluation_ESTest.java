/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 00:16:03 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.estimators.KernelEstimator;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      LinearRegression linearRegression2 = new LinearRegression();
      Capabilities capabilities0 = linearRegression2.getCapabilities();
      byte byte0 = (byte) (-1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toMatrixString(".3G}wu_z1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      testInstances0.generate((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.140224867040049
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      Capabilities capabilities0 = linearRegression1.getCapabilities();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r\nq?[`}34U4");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getMetaClassifier");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("metaClassifierTipText", false);
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.83702463737523
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.setPriors(instances0);
      evaluation0.matthewsCorrelationCoefficient(19);
      double double0 = evaluation0.m_SumSqrClass;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Version.REVISION = 246;
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 159);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 246;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 5.396055804933034E-4;
      doubleArray0[6] = (double) 246;
      evaluation0.updateMargins(doubleArray0, 2, 2);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      LinearRegression linearRegression2 = new LinearRegression();
      Capabilities capabilities0 = linearRegression2.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AbstractClassifier.makeCopies(linearRegression1, 2170);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7081424635992306
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) 98;
      evaluation1.updateMargins(doubleArray0, 3, Double.NaN);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3646123915234463
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6912614808781177
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-357));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double1, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.toSummaryString("ntu)N", true);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      
      double[] doubleArray0 = evaluation1.getClassPriors();
      assertArrayEquals(new double[] {8.74999999627471}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8851077448816969
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.trueNegativeRate(2);
      assertEquals(0.0, double0, 0.01);
      
      CostMatrix costMatrix0 = new CostMatrix(2);
      double double1 = evaluation0.errorRate();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9394181545874047
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      linearRegression0.getCapabilities();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r\nq?[`}34U4");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = '_';
      charArray0[2] = 'A';
      charArray0[3] = 'C';
      String string0 = evaluation0.num2ShortID(16, charArray0, 585);
      assertEqualsi", string0);
      
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.818197230345797
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(19);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      costSensitiveClassifier0.setClassifier(classificationViaRegression0);
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier[] classifierArray0 = AbstractClassifier.makeCopies(costSensitiveClassifier0, 0);
      evaluation0.KBRelativeInformation();
      evaluation0.SFMeanEntropyGain();
      evaluation0.precision(1);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) classifierArray0);
      evaluation0.numTruePositives(124);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5875666177973016
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((-2332));
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumString(3115);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      evaluation0.rootRelativeSquaredError();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = evaluation1.toMatrixString("kr)z;ir[1yng#nDTnFg");
      assertEquals("kr)z;ir[1yng#nDTnFg\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.SFMeanPriorEntropy();
      double double0 = evaluation1.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.m_TotalSizeOfRegions;
      evaluation1.pctCorrect();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.767452917840216
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.matthewsCorrelationCoefficient(19);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrClass;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 19;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 1792.9588190838056;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1582.7);
      evaluation0.setNumericPriorsFromBuffer();
      doubleArray0[8] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(159, doubleArray0);
      instances0.checkInstance(binarySparseInstance0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.trueNegativeRate(1);
      CostMatrix costMatrix0 = new CostMatrix(79);
      evaluation0.falseNegativeRate(1);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4944138632860207
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setRelation("getShrinkage");
      int int0 = 123;
      Instances instances1 = new Instances(instances0, 123);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.matthewsCorrelationCoefficient((-1120078202));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      evaluation1.m_NumClasses = (-1120078202);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation1.weightedPrecision();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3853611807368806
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      double double0 = evaluation0.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier3.listOptions();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      costSensitiveClassifier5.getCostMatrix();
      AbstractClassifier.makeCopies(costSensitiveClassifier5, 335);
      costSensitiveClassifier0.getCostMatrix();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.falsePositiveRate(1);
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.falseNegativeRate((-2550));
      assertEquals(Double.NaN, evaluation1.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.616877112246646
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = (-527.53039862);
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_ClassPriorsSum;
      evaluation2.weightedPrecision();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation1.m_MinTarget = (-1846.4612606);
      evaluation2.equals(evaluation1);
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getCapabilities();
      naiveBayesMultinomialUpdateable1.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation1.weightedAreaUnderROC();
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate((-1708));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1708
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.55919347526176
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.pctCorrect();
      double double2 = evaluation0.m_Incorrect;
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation1.m_SumKBInfo = 1.7976931348623157E308;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double4 = evaluation1.m_SumSchemeEntropy;
      evaluation1.numTrueNegatives(516);
      double double5 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7178226500302984
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      double double0 = 1909.69976;
      DenseInstance denseInstance0 = new DenseInstance(1909.69976, doubleArray0);
      byte byte0 = (byte)99;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)40;
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7022972524919604
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.matthewsCorrelationCoefficient(19);
      double double1 = evaluation0.m_SumSqrClass;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Version.REVISION = 246;
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 159);
      double double2 = evaluation0.numTrueNegatives((-5298));
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4092847159802617
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = (-1504);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      DenseInstance denseInstance0 = new DenseInstance(6);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      byte byte0 = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      int int0 = (-140);
      evaluation0.matthewsCorrelationCoefficient((-140));
      evaluation0.numFalsePositives(1);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      DenseInstance denseInstance1 = null;
      try {
        denseInstance1 = new DenseInstance((-1504));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.916937949585641
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumSqrPredicted = 1867.4280850341;
      evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      evaluation0.m_NumClasses = (-1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8045888578642764
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.m_SumPriorSqrErr;
      double double2 = evaluation0.m_MinTarget;
      double double3 = evaluation0.weightedPrecision();
      double double4 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double4, double3, 0.01);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getCapabilities();
      evaluation0.toMatrixString("getNumIterations");
      evaluation0.SFMeanPriorEntropy();
      double double5 = evaluation1.SFEntropyGain();
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation0.truePositiveRate(195225789);
      assertEquals(double6, double5, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8565651443687616
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.matthewsCorrelationCoefficient(19);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.m_SumSqrClass;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Version.REVISION = 246;
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 159);
      evaluation0.numTrueNegatives(137);
      evaluation0.numTruePositives(2);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), (char[]) null, 4104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.222808126098609
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedFalseNegativeRate();
      evaluation2.weightedFMeasure();
      evaluation2.weightedTruePositiveRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.relativeAbsoluteError();
      evaluation1.weightedAreaUnderROC();
      DenseInstance denseInstance0 = new DenseInstance(1412);
      boolean boolean0 = evaluation2.m_DiscardPredictions;
      double double0 = evaluation2.m_TotalSizeOfRegions;
      try { 
        evaluation2.evaluateModelOnce(Double.NaN, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.149995515347843
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.relativeAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      evaluation1.numTrueNegatives(516);
      evaluation1.SFSchemeEntropy();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2112755420623653
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1225);
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient((-709));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0529631250020954
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.m_SumPriorSqrErr;
      double double3 = evaluation0.m_MinTarget;
      double double4 = evaluation0.weightedPrecision();
      double double5 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double5, double4, 0.01);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.1000000014901161;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 1.1000000014901161;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = (double) (-1);
      doubleArray3[2] = (double) (-1);
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (double) (-1);
      doubleArray3[5] = 1.1000000014901161;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      evaluation1.m_ConfusionMatrix = doubleArray0;
      naiveBayesMultinomialUpdateable0.getCapabilities();
      Option option0 = new Option("4y_W", ".arff", (-1459), "setLikelihoodThreshold");
      SGDText sGDText0 = new SGDText();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation1.equals(globalInfoJavadoc0);
      evaluation0.KBInformation();
      double[] doubleArray5 = evaluation0.makeDistribution(0.0);
      assertEquals(2, doubleArray5.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      try { 
        evaluation0.crossValidateModel(".arff", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9160175838494788
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      evaluation0.sizeOfPredictedRegions();
      int int0 = (-2035173461);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2035173461));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5453929420108388
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(13);
      evaluation0.numFalseNegatives(1320);
      evaluation0.sizeOfPredictedRegions();
      int int0 = (-1970);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1970));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4313438932829745
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setOptions(stringArray0);
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      costSensitiveClassifier1.getCostMatrix();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("?Wj'", arrayList0, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1294903225109705
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setUseResampling(true);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.falseNegativeRate((-3553));
      evaluation1.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      M5P m5P0 = new M5P();
      Object object0 = new Object();
      evaluation1.unweightedMicroFmeasure();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      try { 
        evaluation0.evaluateModel((Classifier) logitBoost0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.783369267121916
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.m_MinTarget;
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getCapabilities();
      evaluation0.toMatrixString("@relation");
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFEntropyGain();
      evaluation0.truePositiveRate((-2075));
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2075), charArray0, (-2075));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1594067831080466
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedAreaUnderROC();
      evaluation1.numTrueNegatives(1261);
      evaluation2.SFSchemeEntropy();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = ']';
      charArray0[2] = '\'';
      charArray0[3] = '7';
      charArray0[4] = '4';
      // Undeclared exception!
      try { 
        evaluation2.num2ShortID((-2559), charArray0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.475783620734262
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ?  ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ";3/IUqy2*";
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.035013970979799
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setRelation("getShrinkage");
      Instances instances1 = new Instances(instances0, 123);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1120078202));
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double1 = evaluation1.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      double double2 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.SFMeanEntropyGain();
      assertEquals(double3, double1, 0.01);
      
      evaluation1.precision(1);
      evaluation1.weightedMatthewsCorrelation();
      double double4 = evaluation1.numTruePositives(123);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.630973629563845
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(19);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      costSensitiveClassifier0.setClassifier(classificationViaRegression0);
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 0);
      double double0 = evaluation0.KBRelativeInformation();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.precision(1);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation0.equals(classificationViaRegression0);
      double double3 = evaluation0.KBInformation();
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6550022886219156
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(16);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setMaxBoostingIterations");
      Evaluation.getGlobalInfo(logitBoost0);
      logitBoost0.listOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      C45Loader c45Loader0 = new C45Loader();
      Instance instance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.121067093936096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.matthewsCorrelationCoefficient(19);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.equals(naiveBayesMultinomialUpdateable0);
      evaluation0.KBInformation();
      String string0 = evaluation0.toSummaryString(true);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3942990814569223
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_ClassPriorsSum;
      evaluation2.weightedPrecision();
      double double1 = evaluation2.m_SumErr;
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      try { 
        evaluation2.evaluateModel((Classifier) attributeSelectedClassifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.459399970913326
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrClass;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[2] = stringArray0[1];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2791);
      double double2 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTruePositives(2409);
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.889829216334171
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      double double1 = evaluation1.m_SumPriorSqrErr;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.m_MinTarget;
      double double3 = evaluation1.weightedPrecision();
      double double4 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double4, double3, 0.01);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)3;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Option option0 = new Option(".arff", "@data", 2628, ".TwoT]05^0");
      SGDText sGDText0 = new SGDText();
      evaluation0.equals(sGDText0);
      evaluation0.KBInformation();
      double double5 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8440743214427378
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.delete();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.listOptions();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      AbstractClassifier.makeCopies(costSensitiveClassifier2, 2);
      costSensitiveClassifier1.getCostMatrix();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.falsePositiveRate(2);
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.644451872782757
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = null;
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9327708175949825
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.m_MinTarget;
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getCapabilities();
      evaluation0.toMatrixString("@relation");
      evaluation0.SFMeanPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.m_TotalSizeOfRegions;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.354014863543308
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderPRC();
      double double1 = evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation1.m_SumKBInfo = 1.7976931348623157E308;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation1.numTrueNegatives(516);
      assertEquals(0.0, double4, 0.01);
      
      evaluation1.SFSchemeEntropy();
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
      
      Evaluation.makeOptionString((Classifier) null, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1187.8425621;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 148.6258123;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.17499999701976776);
      double double5 = evaluation0.pctUnclassified();
      assertEquals(double5, double3, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1445007154739835
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.weightedFMeasure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double double1 = evaluation0.matthewsCorrelationCoefficient(46);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E}PV|:.t(Q");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.pctIncorrect();
      assertEquals(double2, double0, 0.01);
      
      evaluation1.addNumericTrainClass(0.0, (-1));
      double double3 = evaluation0.meanAbsoluteError();
      assertNotEquals(double3, double1, 0.01);
      
      evaluation0.avgCost();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1424118130091325
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderPRC();
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      evaluation1.m_SumKBInfo = 1.7976931348623157E308;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double2, 0.01);
      
      evaluation1.numTrueNegatives(516);
      double double4 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation1.meanAbsoluteError();
      assertEquals(double5, double3, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6420267994249063
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Instances instances0 = testInstances0.generate("globalInfo");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1782.0;
      evaluation0.m_SumAbsErr = (-520.454789343);
      doubleArray0[1] = (double) (-17);
      doubleArray0[2] = 1782.0;
      evaluation0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[3] = (double) (-1);
      testInstances0.getRevision();
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = new SparseInstance(1782.0, doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sparseWeights");
      instances0.parallelStream();
      evaluation0.areaUnderPRC(21);
      testInstances0.setNumRelational(21);
      evaluation0.priorEntropy();
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.meanAbsoluteError();
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.399840863807599
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.matthewsCorrelationCoefficient((byte)48);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives((-1));
      double double1 = evaluation0.m_TotalSizeOfRegions;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(14, true, true);
      AbstractClassifier.makeCopies(simpleLogistic0, 14);
      double double2 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.numTruePositives((byte)48);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      KernelEstimator kernelEstimator0 = new KernelEstimator(2);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.893821150744582
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = new Float((double) (-2));
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.equals(naiveBayesMultinomialUpdateable0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      AbstractClassifier.makeCopies(naiveBayesMultinomialUpdateable0, 2);
      evaluation0.incorrect();
      double double3 = evaluation0.recall(1);
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.weightedMatthewsCorrelation();
      double double5 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4540494674494036
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      int int0 = 27;
      testInstances0.setNumRelational(27);
      evaluation0.priorEntropy();
      evaluation0.weightedTruePositiveRate();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.weightedFalseNegativeRate();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1045));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2586654506282136
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_ConfLevel;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_ConfLevel = Double.NaN;
      evaluation1.areaUnderPRC(3350);
      evaluation1.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.lnFactorial(3222);
      naiveBayesMultinomialUpdateable0.getCapabilities();
      BallTree ballTree0 = new BallTree(instances0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ballTree0);
      DecisionStump decisionStump0 = new DecisionStump();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) decisionStump0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.or(predicate2);
      predicate1.and(predicate2);
      Logistic logistic0 = new Logistic();
      Predicate.isEqual((Object) logistic0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.test(ballTree0);
      predicate0.or(predicate3);
      evaluation0.weightedMatthewsCorrelation();
      DenseInstance denseInstance0 = new DenseInstance(3222);
      // Undeclared exception!
      try { 
        denseInstance0.setClassMissing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7522265859844643
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.matthewsCorrelationCoefficient(86);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 86;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 86;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(86, doubleArray1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      linearRegression0.getCapabilities();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-65);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-2);
      doubleArray0[1] = (double) (byte) (-65);
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.trueNegativeRate((-1));
      MultiFilter multiFilter0 = new MultiFilter();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-26.22), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        denseInstance0.isMissing(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0046537677840317
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (double) (-1);
      String string0 = evaluation0.toSummaryString(".bsi", true);
      assertEquals(".bsi\nUnClassified Instances                   0              NaN      %\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setDebug(false);
      instances0.lastIndexOf("result");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      M5P m5P0 = new M5P();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-763.631993813324));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -763
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(19);
      MockRandom mockRandom0 = new MockRandom(289L);
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom1);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.evaluateModelOnce((double) 289L, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 289
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9715305505841285
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_ConfLevel;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_ConfLevel = Double.NaN;
      evaluation1.weightedPrecision();
      double double3 = evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.lnFactorial(3222);
      naiveBayesMultinomialUpdateable0.getCapabilities();
      BallTree ballTree0 = new BallTree(instances0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ballTree0);
      DecisionStump decisionStump0 = new DecisionStump();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.or(predicate2);
      predicate1.and(predicate2);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.test(ballTree0);
      predicate0.or(predicate3);
      predicate1.and(predicate0);
      predicate0.negate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(3222);
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom(2);
      instances0.randomize(mockRandom0);
      AbstractClassifier.makeCopies(adaBoostM1_0, 1);
      double double4 = evaluation1.SFMeanEntropyGain();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation1.incorrect();
      assertEquals(Double.NaN, evaluation1.SFMeanEntropyGain(), 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ?  ";
      stringArray0[1] = "";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "?eX]x!:eXKa";
      stringArray1[1] = "listOptions";
      stringArray1[2] = "?eX]x!:eXKa";
      stringArray1[3] = "";
      Evaluation.main(stringArray1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", 27);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "  ?  ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(14);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.m_MaxTarget = (double) 1;
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      costSensitiveClassifier1.getCostMatrix();
      LWL lWL0 = new LWL();
      AbstractClassifier.makeCopies(lWL0, 907);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6, intArray0, 4);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) filteredClassifier0, (Instance) binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.043260183605108
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      AbstractClassifier.runClassifier(costSensitiveClassifier0, stringArray0);
      costSensitiveClassifier2.setOptions(stringArray0);
      costSensitiveClassifier2.getCostMatrix();
      costSensitiveClassifier1.getCostMatrix();
      AbstractClassifier.makeCopies(costSensitiveClassifier1, 2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) costSensitiveClassifier2, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5739632337508085
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = (-527.53039862);
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_ClassPriorsSum;
      evaluation2.weightedPrecision();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation1.m_MinTarget = (-1846.4612606);
      evaluation2.equals(evaluation1);
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getCapabilities();
      naiveBayesMultinomialUpdateable1.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation1.weightedAreaUnderROC();
      M5P m5P0 = new M5P();
      Object object0 = new Object();
      evaluation2.getHeader();
      System.setCurrentTimeMillis((-3360L));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1265884730586513
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.weightedFMeasure();
      double double2 = evaluation0.m_ConfLevel;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_ConfLevel = Double.NaN;
      evaluation1.areaUnderPRC(3350);
      double double3 = evaluation1.weightedPrecision();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double4, double1, 0.01);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.lnFactorial(3222);
      naiveBayesMultinomialUpdateable0.getCapabilities();
      BallTree ballTree0 = new BallTree(instances0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ballTree0);
      DecisionStump decisionStump0 = new DecisionStump();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) decisionStump0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.or(predicate2);
      predicate1.and(predicate2);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.test(ballTree0);
      predicate0.or(predicate3);
      predicate1.and(predicate0);
      predicate0.negate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(3222);
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopies(adaBoostM1_0, 1);
      double double5 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation1.SFMeanEntropyGain();
      assertEquals(double6, double4, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.070637938214314
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumString(7);
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)41;
      AbstractClassifier.runClassifier((Classifier) null, testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      AbstractClassifier.makeCopies(costSensitiveClassifier1, 2);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.057722152265225
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      evaluation2.m_Incorrect = (double) 6;
      evaluation2.weightedTruePositiveRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.relativeAbsoluteError();
      evaluation2.weightedAreaUnderROC();
      M5P m5P0 = new M5P();
      Object object0 = new Object();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.0338729475871817
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      double double1 = evaluation1.m_SumPriorSqrErr;
      double double2 = evaluation0.m_MinTarget;
      double double3 = evaluation1.weightedPrecision();
      assertEquals(double3, double0, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      evaluation0.getRevision();
      Option option0 = new Option("getCostMatrix", "@data", 2628, ".TwoT]05^0");
      SGDText sGDText0 = new SGDText();
      evaluation0.equals(sGDText0);
      double double4 = evaluation0.KBInformation();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(14);
      MockRandom mockRandom0 = new MockRandom(6);
      instances0.resampleWithWeights((Random) mockRandom0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9075513058328735
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1717986935));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives((-1));
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.setDiscardPredictions(false);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Vote vote0 = new Vote();
      evaluation0.equals(vote0);
      evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      evaluation0.equals(instances0);
      evaluation0.KBInformation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9907867545761528
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0;
      doubleArray0[5] = (double) 6;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      evaluation0.setDiscardPredictions(true);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, denseInstance0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.859741192299697
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.matthewsCorrelationCoefficient((-1225));
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-781.27221);
      doubleArray0[1] = (double) 98;
      doubleArray0[2] = (double) (-4089);
      doubleArray0[3] = (-781.27221);
      doubleArray0[4] = (double) (-4089);
      doubleArray0[5] = (double) (-4089);
      doubleArray0[6] = (-781.27221);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-781.27221);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 3, 1.2000000029802322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -195068
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      Capabilities capabilities0 = linearRegression1.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 3, 1.2000000029802322);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0099922935754155
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal((-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9844929072134705
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      testInstances0.setNumRelational(27);
      evaluation0.priorEntropy();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation1.unclassified();
      evaluation0.KBRelativeInformation();
      M5P m5P0 = new M5P();
      Object object0 = new Object();
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.783369267121916
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      double double1 = evaluation0.weightedFMeasure();
      double double2 = evaluation0.m_SumPriorSqrErr;
      double double3 = evaluation0.m_MinTarget;
      double double4 = evaluation0.weightedPrecision();
      assertEquals(double4, double1, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getCapabilities();
      evaluation0.toMatrixString("@relation");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      textDirectoryLoader0.setDebug(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@relation\n   <-- classified as\n";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "weka/core/Capabilities.props";
      naiveBayesMultinomialUpdateable0.setOptions(stringArray0);
      double double5 = evaluation1.weightedAreaUnderROC();
      assertEquals(double5, double0, 0.01);
      
      M5P m5P0 = new M5P();
      Object object0 = new Object();
      evaluation0.weightedFalsePositiveRate();
      double double6 = evaluation0.totalCost();
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.5426710375594004
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_ClassPriorsSum;
      evaluation1.weightedPrecision();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation2.equals((Object) null);
      evaluation2.weightedPrecision();
      evaluation1.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      naiveBayesMultinomialUpdateable0.setOptions(testInstances0.DEFAULT_WORDS);
      int int0 = 2420;
      Option option0 = new Option("@data", "Yu]L'uX?{t->9 *qPe", 2420, "maxBoostingIterationsTipText");
      evaluation0.equals(capabilities0);
      try { 
        CostMatrix.parseMatlab("@relation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)109;
      try { 
        evaluation0.updateStatsForPredictor(1586.4535700997744, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(636L);
      mockRandom0.doubles();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = null;
      try { 
        evaluation0.updateStatsForPredictor(636L, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0300561834887123
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.setDebug(false);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.unweightedMicroFmeasure();
      evaluation0.weightedMatthewsCorrelation();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.0299354934064424
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.weightedFalseNegativeRate();
      double double0 = evaluation0.weightedFMeasure();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate((byte)22);
      double double1 = evaluation1.weightedRecall();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.pctUnclassified();
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0338729475871813
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedFMeasure();
      double double0 = evaluation1.m_SumPriorSqrErr;
      double double1 = evaluation0.m_MinTarget;
      evaluation1.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option0 = new Option("getCostMatrix", "@data", 2628, ".TwoT]05^0");
      SGDText sGDText0 = new SGDText();
      evaluation0.equals(sGDText0);
      evaluation0.KBInformation();
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "}M{>T<,sQc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.113244493476845
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation1.equals(inputMappedClassifier0);
      evaluation0.KBInformation();
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&\"5W");
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.971728832820674
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      testInstances0.setNumRelational(27);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      String string0 = evaluation1.toSummaryString("@data", false);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8601859167442463
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("weka/core/Capabilities.props");
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.KBMeanInformation();
      evaluation1.falseNegativeRate(92);
      evaluation0.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom(1005);
      M5P m5P0 = new M5P();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) capabilities0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) logitBoost0;
      objectArray0[5] = (Object) instances1;
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = (-527.53039862);
      instances0.delete();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.listOptions();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      try { 
        evaluation1.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ?  ";
      String string0 = "";
      stringArray0[1] = "";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "?eX]x!:eXKa";
      SGDText sGDText0 = new SGDText();
      try { 
        Evaluation.evaluateModel((Classifier) sGDText0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.9929575864441516
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedFMeasure();
      double double2 = evaluation1.m_SumPriorSqrErr;
      double double3 = evaluation0.m_MinTarget;
      double double4 = evaluation0.weightedPrecision();
      assertEquals(double4, double0, 0.01);
      
      evaluation1.weightedAreaUnderPRC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      double double5 = evaluation0.KBMeanInformation();
      assertEquals(double5, double1, 0.01);
      
      evaluation0.falseNegativeRate(3326);
      evaluation0.confusionMatrix();
      MockRandom mockRandom0 = new MockRandom((-2));
      M5P m5P0 = new M5P();
      Object object0 = new Object();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextDouble();
      Evaluation evaluation2 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation2.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.858620199410213
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      costSensitiveClassifier0.costMatrixSourceTipText();
      testInstances0.setRelation(".arff");
      double double0 = evaluation0.matthewsCorrelationCoefficient(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrix();
      evaluation0.falseNegativeRate((-1087));
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      org.evosuite.runtime.Random.setNextRandom((-206797271));
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      instances0.delete();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-781.27221);
      textDirectoryLoader0.getDirectory();
      MockRandom mockRandom0 = new MockRandom(3467L);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 1, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed((-667));
      evaluation0.setNumericPriorsFromBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "result");
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      LinearRegression linearRegression2 = new LinearRegression();
      Capabilities capabilities0 = linearRegression2.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.6268065607435327
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.toClassDetailsString(" ");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.getRevision();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation0.m_MissingClass;
      double[] doubleArray0 = new double[0];
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.9866570820077527
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(9);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setOptions(testInstances0.DEFAULT_WORDS);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      Classifier classifier0 = AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      try { 
        AbstractClassifier.makeCopies(classifier0, (-370));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.6784775202211
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 5127.29258048409;
      // Undeclared exception!
      try { 
        evaluation2.updateNumericScores((double[]) null, doubleArray0, 1.1447298858494002);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      logitBoost0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",Rj(y");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, (byte)76);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.701349401826568
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(" ");
      Instances instances1 = null;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Vote vote0 = new Vote();
      MultiFilter multiFilter0 = new MultiFilter();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      CSVLoader cSVLoader0 = new CSVLoader();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureMDLScore();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[2] = ".libsvm";
      try { 
        Evaluation.evaluateModel("lfMx<7{I\"J!", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name lfMx<7{I\"J!.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.842345486040718
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) multilayerPerceptron0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      Enumeration enumeration0 = new NGramTokenizer();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sMOreg0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",Rj(y");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      try { 
        Evaluation.handleCostOption(",Rj(y", 88);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",Rj(y");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "TP^#g]mq8B/\"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      try { 
        Evaluation.handleCostOption(",Rj(y", 88);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"TP^#g]mq8B/\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8Tu(f<V";
      stringArray0[1] = "}$]NP`hpLO";
      stringArray0[2] = "}";
      stringArray0[3] = "  std. dev.";
      stringArray0[4] = "[:=";
      try { 
        Evaluation.evaluateModel((Classifier) filteredClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.FilteredClassifier:
         // 
         // -F <filter specification>
         // \tFull class name of filter to use, followed
         // \tby filter options.
         // \teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.listOptions();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier3.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(2L);
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 2, (Random) mockRandom1, (Object[]) costSensitiveClassifier3.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getOptions();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "\tUse noothed preditions");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.makeOptionString(naiveBayesMultinomialUpdateable0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.setUseAIC(false);
      Evaluation.makeOptionString(simpleLogistic0, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrix();
      costSensitiveClassifier1.getCostMatrix();
      try { 
        AbstractClassifier.makeCopies((Classifier) null, 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model classifier set
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4031416180176828
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setNumIterations(19);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I`<?=%u@W]";
      stringArray0[1] = "getNumRuns";
      stringArray0[2] = "// Timestamp: ";
      stringArray0[3] = "-kDC+:Zx+80=4nFf)B";
      AbstractClassifier.runClassifier(logitBoost0, stringArray0);
      SMOreg sMOreg0 = new SMOreg();
      logitBoost0.getCapabilities();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ? ";
      String string0 = "";
      stringArray0[1] = "";
      IBk iBk0 = new IBk(4);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      iBk0.pruneToK((Instances) null, doubleArray0, 4);
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
