/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 22:59:44 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.trees.DecisionStump;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1075623306007105
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("+3vL%");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      chebyshevDistance0.globalInfo();
      linkedList0.add(chebyshevDistance0);
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      linkedList1.offer(chebyshevDistance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Random.setNextRandom(1952257861);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t15.0\nclass2\t7.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\nover\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t\nThe\t20.085536923187668\t2.718281828459045\t\nquick\t20.085536923187668\t7.38905609893065\t\nlazy\t20.085536923187668\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t\nbrown\t7.38905609893065\t7.38905609893065\t\ndog\t20.085536923187668\t2.718281828459045\t\nfox\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2013);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-287.9939630942);
      doubleArray0[4] = (double) (-2013);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-387.8609), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(binarySparseInstance1);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(instance0);
      assertArrayEquals(new double[] {0.6770310932798396, 0.3229689067201605}, doubleArray1, 0.01);
      
      naiveBayesMultinomialText0.toString();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      AlphabeticTokenizer[] alphabeticTokenizerArray0 = new AlphabeticTokenizer[2];
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[0] = alphabeticTokenizer0;
      alphabeticTokenizer0.getRevision();
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[1] = alphabeticTokenizer1;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[3];
      SparseInstance sparseInstance0 = new SparseInstance(2402.25372301767, doubleArray0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      instances0.iterator();
      instance0.setClassMissing();
      Random.setNextRandom((-1552));
      naiveBayesMultinomialText0.updateClassifier(instance0, true);
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      bufferedWriter0.write("41", 2, (-1));
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      DecisionStump decisionStump0 = new DecisionStump();
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1583024504088817
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("+3vL%");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      LinkedList<ChebyshevDistance> linkedList2 = new LinkedList<ChebyshevDistance>();
      linkedList2.add(chebyshevDistance0);
      ChebyshevDistance chebyshevDistance2 = new ChebyshevDistance();
      chebyshevDistance2.globalInfo();
      linkedList2.add(chebyshevDistance2);
      LinkedList<ChebyshevDistance> linkedList3 = new LinkedList<ChebyshevDistance>();
      linkedList2.offer(chebyshevDistance1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Random.setNextRandom((-2013));
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t15.0\nclass2\t7.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\nover\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t\nThe\t20.085536923187668\t2.718281828459045\t\nquick\t20.085536923187668\t7.38905609893065\t\nlazy\t20.085536923187668\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t\nbrown\t7.38905609893065\t7.38905609893065\t\ndog\t20.085536923187668\t2.718281828459045\t\nfox\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-287.9939630942);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2492.12122322, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(binarySparseInstance0);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(instance0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertArrayEquals(new double[] {0.6770310932798396, 0.3229689067201605}, doubleArray1, 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1752000626800085
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      SGDText sGDText0 = new SGDText();
      Instances instances0 = testInstances0.generate("+3vL%");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-526.2259065535336);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-526.2259065535336), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      linkedList0.retainAll(instances0);
      double[] doubleArray1 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2402.25372301767, doubleArray1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is NaN.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.68082764903455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(V00'5tdw");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(V00'5tdw");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_tokenizer = null;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3365032543764457
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      SGDText sGDText0 = new SGDText();
      Instances instances0 = testInstances0.generate("+3vL%");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      AlphabeticTokenizer[] alphabeticTokenizerArray0 = new AlphabeticTokenizer[2];
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[0] = alphabeticTokenizer0;
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[1] = alphabeticTokenizer1;
      linkedList0.toArray(alphabeticTokenizerArray0);
      linkedList0.retainAll(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2402.25372301767, doubleArray0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      Random.setNextRandom(2028179000);
      naiveBayesMultinomialText0.toString();
      DecisionStump decisionStump0 = new DecisionStump();
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2458473814062927
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = false;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Gr'x})3*g,wSg`";
      stringArray0[1] = "Gr'x})3*g,wSg`";
      stringArray0[2] = "Gr'x})3*g,wSg`";
      stringArray0[3] = "Gr'x})3*g,wSg`";
      stringArray0[4] = "Gr'x})3*g,wSg`";
      stringArray0[5] = "Gr'x})3*g,wSg`";
      stringArray0[6] = "Gr'x})3*g,wSg`";
      stringArray0[7] = "-P <# instances>";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("Gr'x})3*g,wSg`");
      snowballStemmer0.getOptions();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray1.length);
      
      naiveBayesMultinomialText0.listOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.10893980259848
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("P");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      linkedList0.add(chebyshevDistance0);
      linkedList1.listIterator();
      LinkedList<ChebyshevDistance> linkedList2 = new LinkedList<ChebyshevDistance>();
      linkedList1.addAll((Collection<? extends ChebyshevDistance>) linkedList0);
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance((-62.2524), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      linkedList0.listIterator();
      linkedList1.add(chebyshevDistance0);
      LinkedList<ChebyshevDistance> linkedList3 = new LinkedList<ChebyshevDistance>();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.108906772045218
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute("AUPRC (area under the precision-recall curve - discrete class only)");
      double[] doubleArray0 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[1] = (double) 2;
      naiveBayesMultinomialText0.m_t = (-1011.218);
      SparseInstance sparseInstance0 = new SparseInstance((-1449.742059007029), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("integer");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      linkedList0.add(chebyshevDistance0);
      linkedList0.listIterator();
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      linkedList0.add(chebyshevDistance1);
      linkedList0.retainAll(instances0);
      instances0.add((Instance) sparseInstance0);
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2895660493407477
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.clone();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1132.70500233, doubleArray0);
      naiveBayesMultinomialText0.m_leplace = (double) (-2);
      instances0.remove((Object) sparseInstance0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      ArrayList<CheckOptionHandler> arrayList0 = new ArrayList<CheckOptionHandler>();
      naiveBayesMultinomialText0.listOptions();
      instances0.containsAll(arrayList0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setOptions(testInstances0.DEFAULT_WORDS);
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText2.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText2.getUseStopList());
      
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7841713697849697
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[0] = 'h';
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      linkedList0.retainAll(instances0);
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      LinkedList<GlobalInfoJavadoc> linkedList2 = new LinkedList<GlobalInfoJavadoc>();
      instances0.containsAll(linkedList0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 'h';
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      instances0.iterator();
      naiveBayesMultinomialText0.updateClassifier(instance0, false);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      double[] doubleArray0 = new double[4];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("integer");
      instances0.setClass(attribute0);
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      linkedList0.add(chebyshevDistance0);
      linkedList0.retainAll(instances0);
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0, intArray0, (-810));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance((-2857.0627851212153), doubleArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelational(2);
      Instances instances0 = testInstances0.generate();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      linearNNSearch0.nearestNeighbour(sparseInstance1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9633406416807448
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances1.generate("+3vL%");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      linkedList1.add(chebyshevDistance0);
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      ChebyshevDistance chebyshevDistance2 = new ChebyshevDistance();
      LinkedList<ChebyshevDistance> linkedList2 = new LinkedList<ChebyshevDistance>();
      linkedList2.add(chebyshevDistance1);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      Random.setNextRandom(4599);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.toString();
      DecisionStump decisionStump0 = new DecisionStump();
      System.setCurrentTimeMillis(42L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.005381998169944
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("user.dir");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      LinkedList<ChebyshevDistance> linkedList2 = new LinkedList<ChebyshevDistance>();
      linkedList0.add(chebyshevDistance0);
      linkedList0.listIterator();
      LinkedList<ChebyshevDistance> linkedList3 = new LinkedList<ChebyshevDistance>();
      linkedList3.offer(chebyshevDistance1);
      linkedList1.addAll((Collection<? extends ChebyshevDistance>) linkedList3);
      ChebyshevDistance chebyshevDistance2 = new ChebyshevDistance();
      linkedList1.listIterator();
      linkedList1.add(chebyshevDistance1);
      LinkedList<ChebyshevDistance> linkedList4 = new LinkedList<ChebyshevDistance>();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Random.setNextRandom((-2));
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3598428608952555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0, intArray0, (-810));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance((-2857.0627851212153), doubleArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
      Random.setNextRandom(15);
      naiveBayesMultinomialText0.toString();
      DecisionStump decisionStump0 = new DecisionStump();
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.230265232675139
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("}wu_z1C 6jj");
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka.core.NoSupportForMissingValuesException");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      linkedList0.add(chebyshevDistance0);
      linkedList0.listIterator();
      LinkedList<ChebyshevDistance> linkedList1 = new LinkedList<ChebyshevDistance>();
      linkedList0.addAll((Collection<? extends ChebyshevDistance>) linkedList1);
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      linkedList0.add(chebyshevDistance0);
      linkedList0.retainAll(instances0);
      LinkedList<ChebyshevDistance> linkedList2 = new LinkedList<ChebyshevDistance>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      Random.setNextRandom((-3820));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0206311935050834
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      SparseInstance sparseInstance1 = new SparseInstance((-1222.0268471069744), doubleArray0, intArray0, (-632));
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, false);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      SparseInstance sparseInstance1 = new SparseInstance((-1222.0268471069744), doubleArray0, intArray0, (-632));
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) binarySparseInstance1);
      LinkedList<GlobalInfoJavadoc> linkedList0 = new LinkedList<GlobalInfoJavadoc>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Yy0[,H", arrayList0, 2);
      instances0.containsAll(arrayList0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[2] = 'h';
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("R{`N,&t+}#TJ", "T");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // T
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.157517450062315
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance0);
      instances0.add((Instance) sparseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      try { 
        AbstractClassifier.forName(".arff", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.983813107273674
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_useStopList = true;
      Attribute attribute0 = new Attribute("ReE146g.!(6&rc");
      Attribute attribute1 = new Attribute("GXb)3L");
      binarySparseInstance0.toString(attribute1, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      naiveBayesMultinomialText0.setStopwords(file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStopwords(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText1.getNormalizeDocLength();
      naiveBayesMultinomialText1.getNormalizeDocLength();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText2.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.getPeriodicPruning();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.toString();
      naiveBayesMultinomialText2.getLowercaseTokens();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9710863640582432
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stemmer = null;
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      String[] stringArray0 = new String[0];
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.debugTipText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3144783360039938
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      Stopwords stopwords0 = new Stopwords();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.stemmerTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      System.setCurrentTimeMillis((-968));
      naiveBayesMultinomialText0.setPeriodicPruning(73);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile0.toURI();
      MockFile mockFile2 = new MockFile("BCeZ3\u0002&*lf`8&IuHp+", "5N5eeInvb@RY3\"\"jN");
      mockFile0.toURI();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      File file0 = MockFile.createTempFile("34+l.r?SO#k9DqO", "\"xJx/.scqWoS.3ub&a", (File) null);
      mockFile0.renameTo(file0);
      MockFile mockFile3 = new MockFile("BCeZ3\u0002&*lf`8&IuHp+");
      mockFile2.deleteOnExit();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.pruneDictionary();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(73, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.167102555970655
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stacking stacking0 = new Stacking();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setDebug(true);
      Stopwords stopwords0 = new Stopwords();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setOptions(testInstances0.DEFAULT_WORDS);
      long long0 = 3168L;
      System.setCurrentTimeMillis(long0);
      String[] stringArray0 = new String[7];
      String string0 = "-M";
      stringArray0[0] = string0;
      stringArray0[1] = testInstances0.DEFAULT_SEPARATORS;
      stringArray0[2] = testInstances0.DEFAULT_SEPARATORS;
      stringArray0[3] = testInstances0.DEFAULT_SEPARATORS;
      stringArray0[4] = testInstances0.DEFAULT_SEPARATORS;
      stringArray0[5] = testInstances0.DEFAULT_SEPARATORS;
      stringArray0[6] = testInstances0.DEFAULT_SEPARATORS;
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0423434204195408
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.m_norm = (-2240.917921445944);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.listOptions();
      assertEquals((-2240.917921445944), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5975417914750674
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.toString();
      Attribute attribute0 = new Attribute((String) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      binarySparseInstance0.toString(attribute0, 10000);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      System.setCurrentTimeMillis((-968));
      naiveBayesMultinomialText0.setPeriodicPruning((-968));
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.setExecutable(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BCeZ3\\2*lf`&IuHp+");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.getCanonicalPath();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "The");
      mockFile0.toURI();
      mockFile0.toURI();
      MockFile mockFile2 = new MockFile("BCeZ3\u0002*lf`&IuHp+", "5N5eeInvb@RY3\"\"jN");
      mockFile1.mkdir();
      mockFile0.toURI();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      mockFile2.createNewFile();
      mockFile2.setExecutable(false, false);
      File file0 = MockFile.createTempFile("34+l.r?SO#k9DqO", "\"xJx/.scqWoS.3ub&a", (File) mockFile1);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("BCeZ3\\2*lf`&IuHp+");
      FileSystemHandling.createFolder(evoSuiteFile1);
      File file1 = MockFile.createTempFile("The", "BCeZ3\u0002*lf`&IuHp+", (File) mockFile1);
      file1.getAbsoluteFile();
      file0.mkdirs();
      file1.toURL();
      mockFile0.renameTo(file0);
      MockFile mockFile3 = new MockFile("");
      mockFile2.deleteOnExit();
      naiveBayesMultinomialText0.pruneDictionary();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals((-968), int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0782723920947346
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.toString();
      Attribute attribute0 = new Attribute((String) null);
      binarySparseInstance0.toString(attribute0, 10000);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getUseWordFrequencies();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Whether to convert all tokens to lowercase";
      stringArray0[1] = "integer";
      stringArray0[2] = "real";
      stringArray0[3] = "NaiveBayesMultinomialText: No model built yet.\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      System.setCurrentTimeMillis(1);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals("Whether to convert all tokens to lowercase", naiveBayesMultinomialText0.lowercaseTokensTipText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.74054655890746
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      System.setCurrentTimeMillis((-968));
      naiveBayesMultinomialText0.setPeriodicPruning(73);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.getCanonicalPath();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "The");
      mockFile0.toURI();
      MockFile mockFile2 = new MockFile("BCeZ3\u0002&*lf`8&IuHp+", "5N5eeInvb@RY3\"\"jN");
      mockFile0.toURI();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      mockFile2.createNewFile();
      mockFile2.setExecutable(false, false);
      File file0 = MockFile.createTempFile("34+l.r?SO#k9DqO", "\"xJx/.scqWoS.3ub&a", (File) null);
      mockFile0.setWritable(true);
      MockFile.createTempFile("The", "Copy with length set to be missing: ", (File) mockFile1);
      mockFile2.toURL();
      mockFile0.renameTo(file0);
      MockFile mockFile3 = new MockFile("");
      mockFile2.deleteOnExit();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "BCeZ3\u0002&*lf`8&IuHp+";
      stringArray0[1] = "\"xJx/.scqWoS.3ub&a";
      stringArray0[2] = "/";
      stringArray0[3] = "/";
      stringArray0[4] = "The";
      stringArray0[5] = "";
      stringArray0[6] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(73, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      System.setCurrentTimeMillis((-968));
      naiveBayesMultinomialText0.setPeriodicPruning(46);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.setExecutable(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BCeZ3\\2*lf`&IuHp+");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.getCanonicalPath();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "The");
      mockFile0.toURI();
      mockFile0.toURI();
      MockFile mockFile2 = new MockFile("BCeZ3\u0002*lf`&IuHp+", "5N5eeInvb@RY3\"\"jN");
      mockFile1.mkdir();
      mockFile0.toURI();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      mockFile2.createNewFile();
      mockFile2.setExecutable(false, false);
      File file0 = MockFile.createTempFile("34+l.r?SO#k9DqO", "\"xJx/.scqWoS.3ub&a", (File) mockFile1);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("BCeZ3\\2*lf`&IuHp+");
      FileSystemHandling.createFolder(evoSuiteFile1);
      File file1 = MockFile.createTempFile("The", "BCeZ3\u0002*lf`&IuHp+", (File) mockFile1);
      file1.getAbsoluteFile();
      file0.mkdirs();
      file1.toURL();
      mockFile0.renameTo(file0);
      MockFile mockFile3 = new MockFile("");
      mockFile2.deleteOnExit();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stacking stacking0 = new Stacking();
      double[] doubleArray0 = new double[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(793.1515126731, doubleArray0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      int[] intArray0 = new int[3];
      intArray0[0] = (-152);
      intArray0[1] = 536;
      binarySparseInstance0.toStringNoWeight((-152));
      intArray0[2] = 536;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-3437));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2023.5858971835528, intArray0, (-152));
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      double[] doubleArray0 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[1] = (double) 2;
      Attribute attribute1 = (Attribute)attribute0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[20];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(239.07710641, intArray0, 0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance0);
      attribute1.value(2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@end";
      stringArray0[1] = "integer";
      stringArray0[2] = "string";
      stringArray0[3] = "string";
      stringArray0[4] = "integer";
      stringArray0[5] = "integer";
      stringArray0[6] = "@end";
      stringArray0[7] = "@attribute";
      stringArray0[8] = "real";
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[4];
      intArray0[2] = 536;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      System.setCurrentTimeMillis((-1L));
      String[] stringArray0 = new String[6];
      stringArray0[1] = "ReEN46g.!(6&rc";
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      AlphabeticTokenizer[] alphabeticTokenizerArray0 = new AlphabeticTokenizer[2];
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[0] = alphabeticTokenizer0;
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[1] = alphabeticTokenizer1;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2402.25372301767, doubleArray0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      instances0.iterator();
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      SGDText sGDText0 = new SGDText();
      testInstances0.generate("+3vL%");
      LinkedList<ChebyshevDistance> linkedList0 = new LinkedList<ChebyshevDistance>();
      AlphabeticTokenizer[] alphabeticTokenizerArray0 = new AlphabeticTokenizer[2];
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[0] = alphabeticTokenizer0;
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[1] = alphabeticTokenizer1;
      linkedList0.toArray(alphabeticTokenizerArray0);
      naiveBayesMultinomialText0.getUseStopList();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      int int0 = 4582;
      StringWriter stringWriter0 = new StringWriter(4582);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      bufferedWriter0.write("m>>4VB*#yJo|jx", (-1), 0);
      BufferedWriter bufferedWriter1 = null;
      try {
        bufferedWriter1 = new BufferedWriter(stringWriter0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2929141101345367
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      Stopwords stopwords0 = new Stopwords();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4784.55580110702);
      doubleArray0[1] = (-4784.55580110702);
      doubleArray0[2] = (-4784.55580110702);
      doubleArray0[3] = (-4784.55580110702);
      File file0 = MockFile.createTempFile("DM7($4-!&4Z5", "DM7($4-!&4Z5");
      MockFile mockFile0 = new MockFile(file0, "-lowercase");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      SparseInstance sparseInstance0 = new SparseInstance((-4784.55580110702), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      naiveBayesMultinomialText0.getOptions();
      intArray0[2] = 2;
      intArray0[3] = 929;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      System.setCurrentTimeMillis(2);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setLNorm((-534.35272));
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.m_wordsPerClass = null;
      CoverTree coverTree0 = new CoverTree();
      DenseInstance denseInstance0 = new DenseInstance(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The norm of the instances after normalization.";
      stringArray0[1] = "The norm of the instances after normalization.";
      stringArray0[2] = "The norm of the instances after normalization.";
      stringArray0[3] = "The norm of the instances after normalization.";
      stringArray0[4] = "The norm of the instances after normalization.";
      stringArray0[5] = "The norm of the instances after normalization.";
      stringArray0[6] = "The norm of the instances after normalization.";
      stringArray0[8] = "The norm of the instances after normalization.";
      // Undeclared exception!
      try { 
        CoverTree.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(19);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 277.0;
      doubleArray0[1] = (double) 19;
      SparseInstance sparseInstance0 = new SparseInstance(108.531643, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2, intArray0, 19);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance0);
      Attribute attribute0 = new Attribute("3[Tv.9@'HE~NcC*", 2);
      Attribute attribute1 = attribute0.copy("real");
      attribute1.copy("date");
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2);
      System.setCurrentTimeMillis(0L);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, double0, 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      double[] doubleArray0 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[1] = (double) 2;
      attribute0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[20];
      intArray0[0] = 1;
      intArray0[1] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(6.0, doubleArray0, intArray0, (-116));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance3);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance5 = new SparseInstance(2, doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance5);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      assertEquals(0, int0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      double[] doubleArray0 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[1] = (double) 2;
      attribute0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      SparseInstance sparseInstance1 = new SparseInstance(2.0, doubleArray0, intArray0, 10000);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance3);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance6 = new SparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance5);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance3, false);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[3];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      Stacking stacking0 = new Stacking();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      assertFalse(inputMappedClassifier1.equals((Object)inputMappedClassifier0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      Attribute attribute0 = new Attribute("ReE146g.!(6&rc");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-749);
      intArray0[1] = 2;
      intArray0[2] = 536;
      intArray0[3] = 1;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1, intArray0, (-749));
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance1);
      System.setCurrentTimeMillis(450L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "real";
      stringArray0[1] = "-lowercase";
      stringArray0[2] = "numeric";
      stringArray0[3] = "string";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[3];
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance1 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2, intArray0, 2);
      binarySparseInstance2.setValueSparse((-1146), 3.0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.299997284832577
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 277.0;
      doubleArray0[1] = (double) 37;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance1 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2, intArray0, 2);
      binarySparseInstance2.setValueSparse(0, 277.0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      File file0 = MockFile.createTempFile("wJv5Vjdk6_vMv", "-dir");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumNominal((-1775));
      testInstances0.assign(testInstances1);
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      AlphabeticTokenizer[] alphabeticTokenizerArray0 = new AlphabeticTokenizer[2];
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[0] = alphabeticTokenizer0;
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      alphabeticTokenizerArray0[1] = alphabeticTokenizer1;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(2402.25372301767, doubleArray0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      instances0.iterator();
      try { 
        naiveBayesMultinomialText0.updateClassifier(instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      double[] doubleArray0 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[1] = (double) 2;
      attribute0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[20];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(239.07710641, intArray0, 0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) binarySparseInstance4);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((Instance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(578);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      double double0 = naiveBayesMultinomialText0.m_t;
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      System.setCurrentTimeMillis(0L);
      Tokenizer tokenizer0 = sGDText1.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getNormalizeDocLength();
      naiveBayesMultinomialText0.setPeriodicPruning(7);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      SGDText sGDText2 = new SGDText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[2] = "S";
      stringArray0[3] = "Use word frequencies rather than binary bag of words representation";
      naiveBayesMultinomialText1.tokenizerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(7, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.656492970314892
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Number of rules: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Number of rules: ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      LinkedList<GlobalInfoJavadoc> linkedList0 = new LinkedList<GlobalInfoJavadoc>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = new Attribute("Number of rules: ");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 8.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(277.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance1 = new SparseInstance(8.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(4, intArray0, 1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance2.value(attribute0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      attribute0.copy("Number of rules: ");
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance0);
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3401196061221263
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0, intArray0, (-810));
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance3.toStringNoWeight();
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute("ReEN46g.!(6&rc");
      double[] doubleArray0 = new double[4];
      binarySparseInstance0.setValueSparse(2, 536.4246491952);
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray0[1] = (double) 2;
      Attribute attribute1 = (Attribute)attribute0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      attribute1.setWeight(3);
      int[] intArray0 = new int[20];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      attribute1.value(2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@end";
      stringArray0[1] = "integer";
      stringArray0[2] = "string";
      attribute0.enumerateValues();
      stringArray0[3] = "string";
      attribute1.addStringValue(attribute0, 1);
      stringArray0[4] = "integer";
      stringArray0[5] = "integer";
      stringArray0[6] = "@end";
      stringArray0[7] = "@attribute";
      Attribute.typeToString(attribute0);
      stringArray0[8] = "real";
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      naiveBayesMultinomialText0.useStopListTipText();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      Stemmer stemmer0 = sGDText1.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      sGDText0.setMinWordFrequency(1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[1] = "If true, ignores all words that are on the stoplist.";
      stringArray0[4] = "If true, ignores all words that are on the stoplist.";
      stringArray0[3] = "If true, ignores all words that are on the stoplist.";
      stringArray0[4] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[5] = "iS";
      stringArray0[6] = "If true, ignores all words that are on the stoplist.";
      stringArray0[7] = "If true, ignores all words that are on the stoplist.";
      try { 
        sGDText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute("}wu_z1C 6jj");
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(12.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray1 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = (-810);
      intArray0[1] = 2869;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 102;
      intArray0[7] = 2;
      intArray0[8] = 19;
      SparseInstance sparseInstance2 = new SparseInstance(2563.351741, doubleArray1, intArray0, 107);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance3);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance6 = new SparseInstance((Instance) sparseInstance4);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("NaiveBayesMultinomialText: No model built yet.\n");
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[0] = 'P';
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      mockPrintStream0.println(charArray0);
      mockPrintStream0.println((Object) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6298718780844146
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency((-1196.685));
      naiveBayesMultinomialText0.listOptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "K`yI$D~JX_9r";
      stringArray0[1] = "!wuMLV";
      stringArray0[2] = "Implements John Platt's sequential minimal optimization algorithm for training a support vector classifier.\n\nThis implementation globally replaces all missing values and transforms nominal attributes into binary ones. It also normalizes all attributes by default. (In that case the coefficients in the output are based on the normalized data, not the original data --- this is important for interpreting the classifier.)\n\nMulti-class problems are solved using pairwise classification (1-vs-1 and if logistic models are built pairwise coupling according to Hastie and Tibshirani, 1998).\n\nTo obtain proper probability estimates, use the option that fits logistic regression models to the outputs of the support vector machine. In the multi-class case the predicted probabilities are coupled using Hastie and Tibshirani's pairwise coupling method.\n\nNote: for improved speed normalization should be turned off when operating on SparseInstances.\n\nFor more information on the SMO algorithm, see\n\n";
      stringArray0[3] = "";
      stringArray0[4] = "\tThe tokenizing algorihtm (classname plus parameters) to use.\n\t(default: ";
      stringArray0[5] = "T|8^#5l%A-9GV]$";
      stringArray0[6] = "*0M @1>,T_hoR*";
      stringArray0[7] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-1196.685), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.m_periodicP;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.getLNorm();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0, intArray0, (-810));
      binarySparseInstance1.setMissing(68);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setClassValue((-1984.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("9122", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(37);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 277.0;
      doubleArray0[1] = (double) 37;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      naiveBayesMultinomialText0.setUseStopList(false);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2, intArray0, 2);
      binarySparseInstance2.setValueSparse(0, 277.0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      binarySparseInstance0.isMissingSparse(2);
      binarySparseInstance4.setValueSparse(2015, 1316.12554018);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance6 = null;
      try {
        binarySparseInstance6 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-1.0E-6));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0E-6);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 140.42333771646648;
      doubleArray0[3] = 140.42333771646648;
      doubleArray0[4] = 140.42333771646648;
      naiveBayesMultinomialText0.getCapabilities();
      doubleArray0[5] = 140.42333771646648;
      doubleArray0[6] = 1.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_t = 1.0;
      naiveBayesMultinomialText0.setLNorm(140.42333771646648);
      naiveBayesMultinomialText0.setMinWordFrequency((-570.2829048));
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }
}
