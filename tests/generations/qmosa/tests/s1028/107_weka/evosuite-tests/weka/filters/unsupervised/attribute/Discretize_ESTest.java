/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 22:17:26 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.setMakeBinary(true);
      Instances instances0 = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[3];
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k?D0,r!$I5");
      discretize0.m_CutPoints = doubleArray0;
      SystemInUtil.addInputLine("*toPfiY+u|1GgR| {#t");
      doubleArray0[4] = doubleArray0[0];
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("?DG,r!$I5");
      double[][] doubleArray0 = new double[5][7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[3];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SystemInUtil.addInputLine("vyBq\"");
      doubleArray1[1] = 0.0;
      doubleArray0[3] = doubleArray0[0];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?DG,r!$I5");
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1297);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1297
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.799512206233116
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.setBins((-2089443546));
      discretize0.getCutPoints((-2089443546));
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1073741822));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("m;Y2!2f+brrR");
      discretize0.m_IgnoreClass = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getOptions();
      int int0 = (-5053);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-5053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object0 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Attribute attribute0 = new Attribute("3665,-321", "1,1,1,1,1,1,1");
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      predicate2.negate();
      predicate3.or(predicate6);
      attribute0.equalsMsg(predicate8);
      Predicate<Object> predicate9 = predicate7.negate();
      predicate0.test(predicate4);
      predicate2.test(predicate0);
      Object object1 = new Object();
      predicate1.test(predicate9);
      Predicate.isEqual(object1);
      predicate8.or(predicate6);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Discretize discretize0 = new Discretize("@attribute");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("NPmber of+bins.");
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.getOptions();
      int int0 = 19;
      discretize0.invertSelectionTipText();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-3083));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 11);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("m;Y2!2f+brrR");
      discretize0.m_UseEqualFrequency = true;
      discretize0.setOutputFormat();
      discretize0.getOptions();
      discretize0.getCapabilities();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-5053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "9dKuXw.u8J$YY}j";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9dKuXw.u8J$YY}j");
      String string1 = "k?D0,r!$I5";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("k?D0,r!$I5");
      double[][] doubleArray0 = new double[5][7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[3];
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string2 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = "m;Y2!2f+brR";
      Discretize discretize0 = new Discretize("m;Y2!2f+brR");
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      int int0 = 19;
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((-3083));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("?DG,r!$I5");
      double[][] doubleArray0 = new double[5][7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[3];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = doubleArray1;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      doubleArray1[1] = 0.0;
      doubleArray0[3] = doubleArray0[0];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)34;
      doubleArray1[2] = (double) (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?DG,r!$I5");
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5158519776570625
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("?DG,r!$I5");
      double[][] doubleArray0 = new double[5][7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[16];
      SystemInUtil.addInputLine("vyB\"");
      doubleArray2[0] = (-3094.0);
      doubleArray1[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[3] = doubleArray0[0];
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.04585824585734333;
      SystemInUtil.addInputLine("?DG,r!$I5");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)125;
      doubleArray2[3] = (double) (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray2[13] = 1114.400855248;
      doubleArray3[5] = 0.0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)3);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5158519776570625
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("?DG,r!$I5");
      double[][] doubleArray0 = new double[5][7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[3];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = doubleArray1;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      doubleArray1[1] = 0.0;
      doubleArray0[3] = doubleArray0[0];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)3;
      doubleArray1[2] = (double) (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?DG,r!$I5");
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString((byte)3);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.getUseEqualFrequency();
      discretize0.getBins();
      discretize0.setBins((-2806));
      assertEquals((-2806), discretize0.getBins());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] problem parsing number of packages from server.", arrayList0);
      Attribute attribute1 = new Attribute("relational", 2);
      Attribute attribute2 = attribute0.copy("string");
      Attribute attribute3 = new Attribute("date", 2);
      Attribute attribute4 = new Attribute("numeric", arrayList0, 3);
      Attribute attribute5 = new Attribute("date", 0);
      attribute0.enumerateValues();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute5.addStringValue(attribute4, 0);
      Attribute.typeToString(attribute1);
      Attribute attribute6 = new Attribute("numeric");
      attribute3.isInRange(2);
      attribute0.copy("string");
      Attribute attribute7 = new Attribute("@attribute", 2);
      attribute4.addStringValue(attribute5, 2);
      arrayList0.containsAll(arrayList1);
      attribute2.copy();
      attribute0.isInRange(6.7);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 4;
      Integer integer0 = new Integer(4);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 1;
      arrayList0.toArray(integerArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[7] = (double) 4;
      doubleArray0[2] = (double) 2;
      attribute4.equals(attribute5);
      doubleArray0[4] = (double) 2;
      integerArray0[3] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray0);
      Attribute.typeToString(2);
      attribute5.addStringValue(attribute2, (-833));
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("1,1,1,1,1,1,1", arrayList0);
      Attribute attribute1 = new Attribute("relational", 1649);
      Attribute attribute2 = new Attribute("date", 2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute3 = new Attribute("numeric", arrayList0, 3);
      attribute1.addStringValue(attribute2, 2);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "real";
      stringArray0[2] = "real";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "numeric";
      stringArray0[5] = "integer";
      stringArray0[6] = "relational";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object0 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      predicate2.or(predicate3);
      predicate0.negate();
      predicate2.and(predicate0);
      Attribute attribute0 = new Attribute("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", "1,1,1,1,1,1,1");
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      predicate3.or(predicate5);
      predicate6.negate();
      predicate2.test(predicate0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      predicate7.or(predicate5);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Discretize discretize0 = new Discretize("@attribute");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      discretize0.m_DiscretizeCols = null;
      Filter.makeCopies(discretize0, 123);
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.attributeIndicesTipText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[2] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[3] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[4] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.getInvertSelection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      int int0 = (-1);
      discretize0.useEqualFrequencyTipText();
      discretize0.getOptions();
      boolean boolean0 = true;
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      int int1 = (-1766);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1766));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("1,1,1,1,1,1,1", arrayList0);
      Attribute attribute1 = new Attribute("relational", 2);
      Attribute attribute2 = attribute0.copy("P_*W(i]>4");
      Attribute attribute3 = new Attribute("date", 2);
      Attribute attribute4 = new Attribute("numeric", arrayList0, 3);
      Attribute attribute5 = new Attribute("date", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute0.addStringValue(attribute5, 3943);
      attribute5.isInRange(29.800279192941982);
      Attribute.typeToString(attribute2);
      double[] doubleArray0 = new double[7];
      attribute3.addStringValue("integer");
      doubleArray0[0] = (double) 3;
      attribute1.isInRange(2);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) 0;
      Discretize discretize0 = new Discretize("@end");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate6);
      Predicate<Object> predicate8 = predicate2.or(predicate3);
      Predicate<Object> predicate9 = predicate1.and(predicate8);
      Predicate<Object> predicate10 = predicate3.or(predicate9);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate7.negate();
      Predicate<Object> predicate13 = predicate3.or(predicate7);
      Predicate<Object> predicate14 = predicate5.negate();
      Predicate<Object> predicate15 = predicate3.and(predicate2);
      Predicate<Object> predicate16 = predicate8.negate();
      predicate10.and(predicate7);
      Predicate<Object> predicate17 = predicate14.negate();
      predicate7.negate();
      predicate3.test(predicate13);
      Predicate<Object> predicate18 = predicate12.or(predicate3);
      predicate18.test(",{");
      Predicate<Object> predicate19 = predicate8.and(predicate17);
      Predicate<Object> predicate20 = predicate11.negate();
      Predicate<Object> predicate21 = Predicate.isEqual((Object) predicate15);
      Predicate<Object> predicate22 = predicate21.or(predicate0);
      predicate20.and(predicate22);
      predicate20.or(predicate16);
      predicate8.test(predicate10);
      predicate17.negate();
      predicate3.test(predicate4);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate23 = predicate7.negate();
      predicate23.test(predicate1);
      predicate19.negate();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      Discretize discretize0 = new Discretize("%()M;My_");
      discretize0.setUseBinNumbers(false);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      int int0 = discretize0.m_NumBins;
      assertEquals(10, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Set attribute selection mode. If false, only selected (numeric) attributes in the ranBe will be discretized; if true, only non-selected pttribut`s will be discretized.");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "b>;bIAA$O]?|v(a<");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.or(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      predicate4.test(predicate1);
      predicate1.test(comparator0);
      predicate1.negate();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Locale.getISOCountries();
      int int0 = 67;
      ArrayList<String> arrayList0 = new ArrayList<String>(67);
      Integer integer0 = new Integer(67);
      Integer integer1 = new Integer((-1735));
      Integer integer2 = new Integer(67);
      Integer integer3 = new Integer(67);
      Integer integer4 = new Integer((-1610612734));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer4;
      integerArray0[0] = integer0;
      integerArray0[3] = integerArray0[1];
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) int0;
      integerArray0[7] = integer4;
      integerArray0[8] = integer3;
      arrayList0.toArray(integerArray0);
      Attribute.typeToString(4861);
      Discretize discretize0 = new Discretize("unknown(4861)");
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getFindNumBins();
      int int0 = (-683);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-683));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] problem parsng number of packages from server.", arrayList0);
      Attribute attribute1 = new Attribute("numeric", 0);
      Attribute attribute2 = new Attribute("numeric", arrayList0, 3);
      attribute1.addStringValue(attribute2, 0);
      Attribute.typeToString(attribute0);
      attribute0.setWeight(0);
      Attribute attribute3 = new Attribute("numeric");
      Attribute attribute4 = new Attribute("@attribute", 2);
      attribute3.copy((String) null);
      attribute2.addStringValue(attribute1, 2);
      attribute0.equalsMsg("numeric");
      attribute2.copy("date");
      Attribute.typeToString(attribute3);
      attribute2.copy();
      double[] doubleArray0 = new double[24];
      doubleArray0[8] = (double) 0;
      attribute0.addStringValue("date");
      attribute0.equals("Object has wrong class");
      attribute3.enumerateValues();
      attribute2.equals((Object) null);
      attribute3.setStringValue("string");
      attribute1.copy("@attribute");
      arrayList0.add("@end");
      SparseInstance sparseInstance0 = new SparseInstance(3);
      Discretize discretize0 = new Discretize("integer");
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setFindNumBins(false);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("1,1,1,1,1,1,1", arrayList0);
      Attribute attribute1 = new Attribute("relational", 2);
      Attribute attribute2 = new Attribute("date", 2);
      Attribute attribute3 = new Attribute("numeric", arrayList0, 3);
      Attribute attribute4 = new Attribute("date", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize("date");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "numeric";
      stringArray0[1] = "date";
      stringArray0[2] = "numeric";
      stringArray0[3] = "relational";
      stringArray0[4] = "integer";
      stringArray0[5] = "relational";
      stringArray0[6] = "1,1,1,1,1,1,1";
      stringArray0[7] = "real";
      stringArray0[8] = "date";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] problem parsing number ofackages from server.", arrayList0);
      Attribute attribute1 = attribute0.copy("string");
      Attribute attribute2 = new Attribute("date", 2);
      Attribute attribute3 = new Attribute("@end");
      Attribute attribute4 = attribute1.copy("@end");
      attribute0.enumerateValues();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute4.addStringValue(attribute3, 0);
      Attribute.typeToString(attribute0);
      Attribute attribute5 = new Attribute("numeric");
      attribute0.copy("string");
      Attribute attribute6 = new Attribute("date", 3);
      attribute3.addStringValue(attribute4, 2);
      arrayList0.containsAll(arrayList1);
      attribute1.copy();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 4;
      Integer integer0 = new Integer(4);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 1;
      arrayList0.toArray(integerArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[2];
      doubleArray0[2] = (double) 4;
      integerArray0[2] = (Integer) 2;
      attribute3.equals(attribute4);
      integerArray0[5] = (Integer) 2;
      integerArray0[3] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(1);
      attribute4.addStringValue(attribute1, 4);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("7(C`&mjPV2Vd");
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Instances instances0 = null;
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.JAPANESE;
      Locale locale2 = Locale.FRANCE;
      Locale.getISOLanguages();
      locale1.getDisplayScript();
      Locale locale3 = Locale.CHINESE;
      locale1.getUnicodeLocaleAttributes();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-316.8034);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("Attribute type '");
      int[] intArray0 = new int[9];
      intArray0[0] = 5225;
      intArray0[1] = 89;
      intArray0[2] = 3881;
      intArray0[3] = (-792);
      intArray0[4] = 2686;
      intArray0[5] = 4;
      intArray0[6] = 89;
      intArray0[7] = 2222;
      intArray0[8] = (-2269);
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Instances instances0 = null;
      Discretize discretize0 = new Discretize();
      discretize0.getIgnoreClass();
      discretize0.toString();
      SparseInstance sparseInstance0 = null;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.FRANCE;
      Locale.getISOLanguages();
      ArrayList<String> arrayList0 = new ArrayList<String>(67);
      Integer integer0 = new Integer((-2028178998));
      Integer integer1 = new Integer((-1735));
      Integer integer2 = new Integer((-2028178998));
      Integer integer3 = new Integer((-2028178998));
      Integer integer4 = new Integer((-1610612734));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer4;
      integerArray0[2] = integer0;
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer4;
      integerArray0[7] = integer4;
      integerArray0[8] = integer3;
      arrayList0.toArray(integerArray0);
      SystemInUtil.addInputLine("Cc}S3~SXy(+|;7E$.");
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] problem parsng number of packages from server.", arrayList0);
      Attribute attribute1 = new Attribute("relational", 2);
      Attribute attribute2 = new Attribute("numeric", 0);
      Attribute attribute3 = new Attribute("numeric", arrayList0, 3);
      attribute2.addStringValue(attribute3, 0);
      Attribute.typeToString(attribute1);
      attribute1.setWeight(0);
      Attribute attribute4 = new Attribute("numeric");
      Attribute attribute5 = new Attribute("@attribute", 2);
      attribute3.addStringValue(attribute2, 2);
      attribute0.equalsMsg("numeric");
      attribute3.setWeight(4);
      Attribute.typeToString(attribute4);
      attribute3.copy();
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (double) 0;
      attribute0.addStringValue("date");
      attribute0.equals("Object has wrong class");
      attribute4.enumerateValues();
      attribute3.equals((Object) null);
      attribute4.setStringValue("string");
      attribute2.copy("@attribute");
      Locale locale0 = Locale.KOREAN;
      attribute2.equals(locale0);
      arrayList0.add("@end");
      attribute5.value(1812);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      Discretize discretize0 = new Discretize("k>8Yhy\"{ehCrxl");
      System.setCurrentTimeMillis(1);
      discretize0.getCutPoints(2076);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      Predicate<Object> predicate7 = predicate2.or(predicate3);
      Predicate<Object> predicate8 = predicate1.and(predicate7);
      Predicate<Object> predicate9 = predicate3.or(predicate8);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate3.or(predicate6);
      predicate2.and(predicate4);
      Predicate<Object> predicate13 = predicate3.and(predicate2);
      Predicate<Object> predicate14 = predicate7.negate();
      Predicate<Object> predicate15 = predicate11.negate();
      predicate6.negate();
      predicate3.test(predicate12);
      Predicate<Object> predicate16 = predicate11.or(predicate3);
      predicate16.test(",{");
      Predicate<Object> predicate17 = predicate1.and(predicate7);
      Predicate.isEqual((Object) predicate13);
      predicate17.and(predicate10);
      predicate17.or(predicate14);
      predicate7.test(predicate9);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      predicate15.negate();
      predicate3.test(predicate4);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate18 = predicate6.negate();
      predicate18.test(predicate1);
      predicate7.negate();
      Discretize discretize0 = new Discretize("  \tresult[i] = null;\n");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SystemInUtil.addInputLine("[WekaPackageManager] problem parsng number of packages from server.");
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.JAPANESE;
      Locale locale2 = Locale.FRANCE;
      Locale.getISOLanguages();
      locale2.getDisplayScript();
      Locale locale3 = Locale.CHINESE;
      Locale locale4 = Locale.JAPANESE;
      locale4.getUnicodeLocaleAttributes();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Discretize discretize0 = new Discretize("[WekaPackageManager] problem parsng number of packages from server.");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("[WekaPackageManager] problem parsng number of packages from server.", arrayList0);
      Attribute attribute1 = new Attribute("relational", 2);
      Attribute attribute2 = new Attribute("numeric", 0);
      Attribute attribute3 = new Attribute("numeric", arrayList0, 3);
      attribute2.addStringValue(attribute3, 0);
      Attribute.typeToString(attribute1);
      attribute1.setWeight(0);
      Attribute attribute4 = new Attribute("numeric");
      Attribute attribute5 = new Attribute("@attribute", 2);
      attribute3.addStringValue(attribute2, 2);
      attribute0.equalsMsg("numeric");
      attribute3.setWeight(4);
      Attribute.typeToString(attribute4);
      attribute3.copy();
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (double) 0;
      attribute0.addStringValue("date");
      attribute0.equals("Object has wrong class");
      attribute4.enumerateValues();
      attribute3.equals((Object) null);
      attribute4.setStringValue("string");
      doubleArray0[4] = (double) 2;
      Attribute attribute6 = new Attribute("date", 2);
      Attribute.typeToString(112);
      attribute4.value(2);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      Discretize discretize0 = new Discretize("relational");
      Filter.runFilter(discretize0, (String[]) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-931));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer[] integerArray0 = new Integer[2];
      arrayList0.spliterator();
      int int0 = 10;
      Integer integer0 = new Integer(10);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      arrayList0.toArray(integerArray0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("ZO8K,bub, Vs>");
      int int0 = (-683);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-683));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("first-last");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-19);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K.nyX^=}Gbur");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("\u000398o~P.a:", arrayList0);
      Attribute attribute1 = attribute0.copy("string");
      Attribute attribute2 = new Attribute("date", 2);
      Attribute attribute3 = new Attribute("@end");
      Attribute attribute4 = attribute1.copy("@end");
      attribute0.enumerateValues();
      attribute4.addStringValue(attribute3, 0);
      Attribute.typeToString(attribute0);
      Attribute attribute5 = attribute4.copy("integer");
      Attribute attribute6 = attribute0.copy("string");
      Attribute attribute7 = new Attribute("@attribute", 1);
      attribute3.addStringValue(attribute4, 2);
      attribute5.isInRange(0);
      attribute6.copy("numeric");
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) 0;
      attribute3.equals(attribute4);
      doubleArray0[7] = (double) 0;
      arrayList0.add("real");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      Discretize discretize0 = new Discretize("string");
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.ROOT;
      Locale locale2 = Locale.JAPANESE;
      Locale locale3 = Locale.FRANCE;
      Locale locale4 = Locale.CHINESE;
      locale2.getUnicodeLocaleAttributes();
      locale0.hasExtensions();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.keySet();
      SystemInUtil.addInputLine(";b5+ 4W[paqAR:");
      Discretize discretize0 = new Discretize("\"position\" is nominal: ");
      discretize0.getBinRangesString((-1120));
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("m;Y2!2f+brrR");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1399.56));
      discretize0.getOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-5053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      int int0 = (-683);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-683));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Discretize discretize0 = new Discretize("1,1,1,1,1,1,1");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("m;Y2!2f+brrR");
      discretize0.m_IgnoreClass = true;
      discretize0.getRevision();
      Locale.getISOLanguages();
      int int0 = (-5053);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-5053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.m_ClassIndex = 2587;
      discretize0.getOptions();
      int int0 = (-5053);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-5053));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize("Bb9db>,i");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[0] = (-3094.0);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      String string0 = "rnem-BIHx4/ELp2WW]j";
      SystemInUtil.addInputLine("rnem-BIHx4/ELp2WW]j");
      doubleArray1[0] = (-3094.0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      String string1 = null;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[0];
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopies(allFilter0, 122);
      int[] intArray0 = new int[7];
      intArray0[0] = 122;
      Discretize.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}
