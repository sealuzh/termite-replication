/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 00:11:30 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2386433694065966
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qi|PVW)VGEIf\"F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      int int0 = 38;
      streamTokenizer0.ordinaryChar(38);
      jSTerm1.setSize(38);
      streamTokenizer0.sval = "qi|PVW)VGEIf\"F";
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.isEval();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3725560012510243
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("KuV1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      JSTerm jSTerm3 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm3);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate1);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      predicate3.negate();
      predicate3.or(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSSubstitution0);
      predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate4.or(predicate6);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.815439414260462
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("X]9=6)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      predicate0.negate();
      Object object0 = new Object();
      predicate0.test(object0);
      jSTerm1.firstElement();
      Predicate.isEqual((Object) ".");
      Predicate.isEqual((Object) predicate0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "X]9=6)";
      objectArray0[2] = (Object) predicate0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) stringReader0;
      stringReader0.reset();
      boolean boolean0 = stringReader0.markSupported();
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'K';
      charArray0[2] = ')';
      charArray0[3] = ':';
      stringReader0.read(charArray0);
      stringReader0.mark(41);
      JSTerm jSTerm3 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm2);
      jSTerm2.standardizerTerm();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.toString();
      boolean boolean1 = jSTerm3.contains(objectArray0[1]);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.054588981971454
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSTerm3.toArray();
      jSTerm1.call();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm3, jSSubstitution1);
      jSTerm1.call();
      jSTerm3.matches(jSTerm0);
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.setSize(41);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.removeElement(jSTerm5);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSSubstitution1.clear();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = jSTerm2.matches(jSTerm4);
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1763797690909998
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#rm5|\"61%");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 35;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nval = (double) 35;
      streamTokenizer0.lowerCaseMode(false);
      StringReader stringReader1 = new StringReader("(#rm5|\"61%");
      char[] charArray0 = new char[8];
      stringReader1.read();
      charArray0[0] = 'K';
      streamTokenizer0.pushBack();
      charArray0[1] = '`';
      stringReader1.reset();
      streamTokenizer0.nval = (double) 'y';
      streamTokenizer0.ttype = (int) ':';
      stringReader1.read(charArray0);
      charArray0[4] = 'k';
      stringReader1.markSupported();
      charArray0[6] = ']';
      charArray0[7] = 'k';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-1132.99769709);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2461921548801214
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = (-2813);
      StringReader stringReader0 = new StringReader("ih^&%ysLhyXUT{8iam");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      JSTerm jSTerm3 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm3);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate1);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      predicate3.or(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSSubstitution0);
      predicate4.or(predicate5);
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7314233917906585
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.makeEval(true);
      jSTerm1.call();
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSSubstitution0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      predicate0.negate();
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6085334188067226
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = (-2813);
      StringReader stringReader0 = new StringReader("ih^&%ysLhyXUT{8iam");
      JSJshopVars.colon = (-2813);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm0.addAll((Collection) jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = unaryOperator0.apply(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm2);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.addAll((Collection) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm4.containsAll(jSTerm2);
      stringReader0.reset();
      streamTokenizer0.ordinaryChars((-4), (-2813));
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3930483904652777
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X]9=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.addElement(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6844289829174985
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("ih^&%ysLhyXUT{8iam");
      JSJshopVars.colon = 43;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm0.addAll((Collection) jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = unaryOperator0.apply(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm2);
      jSSubstitution1.replaceAll(unaryOperator0);
      jSSubstitution1.addAll((Collection) jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm3.containsAll(jSSubstitution0);
      jSTerm2.listIterator();
      jSTerm3.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 69;
      jSTerm0.setSize(69);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0544597843960615
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSTerm3.toArray();
      jSTerm1.call();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm3, jSSubstitution1);
      jSTerm1.call();
      jSTerm3.matches(jSTerm0);
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.removeElement(jSTerm5);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      streamTokenizer0.eolIsSignificant(false);
      jSSubstitution1.clear();
      jSTerm4.clear();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = jSTerm2.matches(jSTerm4);
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6835827157901857
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-2813);
      JSJshopVars.plus = (-2813);
      StringReader stringReader0 = new StringReader("ih^&%ysLhyXUT{8iam");
      JSJshopVars.colon = (-2813);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm2);
      jSTerm0.addAll((Collection) jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function1 = unaryOperator1.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends JSSubstitution>) function1);
      JSJshopVars.plus = (-2813);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.cloneS();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.toStr();
      jSTerm2.removeElement(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.100059695044677
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X]9=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.print();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      Object[] objectArray0 = jSTerm3.toArray();
      JSTerm jSTerm4 = jSTerm1.call();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm2.matches(jSTerm4);
      jSTerm2.standardizerTerm();
      jSTerm3.matches(jSTerm5);
      jSTerm0.spliterator();
      jSTerm3.print();
      JSTerm jSTerm7 = jSTerm2.cloneT();
      JSTerm jSTerm8 = jSTerm7.standardizerTerm();
      jSTerm4.isEmpty();
      JSTerm jSTerm9 = new JSTerm();
      jSTerm9.toArray(objectArray0);
      System.setCurrentTimeMillis((-758L));
      JSTerm jSTerm10 = new JSTerm();
      JSJshopVars.dot = 2;
      jSTerm10.makeVariable();
      JSTerm jSTerm11 = jSTerm6.applySubstitutionT(jSSubstitution0);
      jSTerm10.call();
      jSTerm11.cloneT();
      JSJshopVars.percent = 2486;
      jSTerm0.matches(jSTerm8);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "(`m5jP\"61%";
      StringReader stringReader0 = new StringReader("(`m5jP\"61%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("ih^&%ysLhyXUT{8iam");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '(';
      charArray0[2] = 'j';
      charArray0[3] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(10, stringBuffer0.length());
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9085147001477023
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("X]9=6)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.matches(jSTerm2);
      jSTerm0.toArray();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSSubstitution3.removeElement(jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.clear();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSJshopVars.semicolon = 1834;
      JSTerm jSTerm6 = new JSTerm();
      jSSubstitution6.add((Object) jSTerm6);
      jSTerm3.addAll(1, (Collection) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution7);
      jSTerm5.matches(jSTerm2, jSSubstitution4);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm8.applySubstitutionT(jSSubstitution7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(526L);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 1;
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8020261358160923
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("X]9=6)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate6 = predicate4.or(predicate3);
      Predicate<String> predicate7 = predicate5.and(predicate6);
      Predicate<String> predicate8 = predicate5.negate();
      Predicate<String> predicate9 = predicate8.and(predicate4);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate5);
      predicate8.or(predicate10);
      Predicate<String> predicate11 = predicate5.and(predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate12 = predicate6.and(predicate1);
      Predicate<Object> predicate13 = predicate6.negate();
      Predicate<Object> predicate14 = predicate13.and(predicate1);
      Predicate<Object> predicate15 = predicate13.negate();
      predicate15.negate();
      predicate12.negate();
      predicate13.or(predicate15);
      Predicate<String> predicate16 = predicate11.negate();
      Predicate.isEqual((Object) null);
      predicate9.negate();
      Predicate.isEqual((Object) predicate6);
      predicate16.or(predicate13);
      Predicate.isEqual((Object) predicate14);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      predicate7.negate();
      predicate7.or(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm4, jSTerm1);
      assertTrue(jSTerm4.isFunction());
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.72346224340834
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("X]9=6)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate6 = predicate4.or(predicate3);
      Predicate<String> predicate7 = predicate5.and(predicate6);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.and(predicate4);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate5);
      predicate8.or(predicate10);
      predicate5.and(predicate8);
      predicate6.or(predicate10);
      Predicate<String> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate0.and(predicate3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate4.negate();
      predicate14.and(predicate1);
      Predicate<Object> predicate15 = predicate14.negate();
      predicate3.negate();
      predicate15.or(predicate13);
      predicate13.negate();
      predicate14.or(predicate15);
      Predicate<String> predicate16 = predicate11.negate();
      predicate9.negate();
      Predicate<String> predicate17 = Predicate.isEqual((Object) predicate6);
      predicate17.or(predicate1);
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      predicate17.or(predicate16);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm4.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(22);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.sval = null;
      streamTokenizer2.pushBack();
      streamTokenizer2.ordinaryChars(0, 22);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.parseList(streamTokenizer2);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9203173640517046
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.trimToSize();
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm4.equals(jSTerm2);
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.928170726312985
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals(1, jSTerm2.capacity());
      
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSSubstitution0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      Predicate<Object> predicate6 = predicate3.or(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Predicate<Object> predicate8 = predicate3.or(predicate7);
      jSTerm0.firstElement();
      Predicate<String> predicate9 = Predicate.isEqual((Object) "?%%%");
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<String> predicate11 = predicate9.and(predicate2);
      Predicate<String> predicate12 = predicate10.or(predicate11);
      predicate12.and(predicate5);
      predicate2.test(predicate6);
      Predicate<String> predicate13 = predicate9.and(predicate5);
      Predicate<String> predicate14 = predicate13.negate();
      predicate7.negate();
      predicate10.or(predicate7);
      Predicate.isEqual((Object) predicate10);
      predicate9.and(predicate14);
      predicate3.or(predicate8);
      predicate10.or(predicate13);
      predicate13.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isVariable());
      assertEquals("[?%%%0]", jSTerm3.toString());
      
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm4, jSTerm0);
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9277502932669477
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.call();
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.parallelStream();
      JSJshopVars.slash = (-2);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7540959108790593
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&w}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      StringReader stringReader1 = new StringReader("74-BD4+op");
      jSTerm0.toArray();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution2.removeElement("?&w}");
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution3.clear();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution9.add((Object) jSSubstitution10);
      // Undeclared exception!
      try { 
        jSTerm2.addAll(1, (Collection) jSTerm4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 1;
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.909129982429236
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XLa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3);
      jSTerm3.toArray();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSTerm jSTerm5 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSSubstitution0.removeElement(jSTerm6);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm7 = new JSTerm();
      jSSubstitution1.clear();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.VarCounter = 1;
      JSSubstitution jSSubstitution7 = jSTerm2.matches(jSTerm5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution7.add((Object) jSSubstitution8);
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      JSTerm jSTerm8 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution9 = jSTerm2.matches(jSTerm4, jSSubstitution7);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSTerm jSTerm9 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.rightPar = (-1922);
      jSTerm9.sort(comparator0);
      jSTerm8.applySubstitutionT(jSSubstitution7);
      jSSubstitution9.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm9.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 459;
      int int0 = (-1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      int int1 = 992;
      JSJshopVars.greaterT = 992;
      int int2 = 931;
      JSJshopVars.colon = 931;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8195274025283306
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XLa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.toArray();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSTerm jSTerm4 = jSTerm1.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.removeElement(jSTerm5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.VarCounter = 1;
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution7);
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.rightPar = 1;
      jSTerm6.applySubstitutionT(jSSubstitution5);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSTerm4.cloneT();
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.715325941604802
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution2);
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm3);
      assertTrue(jSSubstitution3.fail());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm4);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8434779446603735
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      
      JSJshopVars.plus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate0);
      Predicate<Object> predicate8 = predicate4.or(predicate5);
      jSTerm0.firstElement();
      Predicate<String> predicate9 = Predicate.isEqual((Object) "?%%%");
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<String> predicate11 = predicate9.and(predicate3);
      predicate11.and(predicate7);
      Predicate<String> predicate12 = predicate10.or(predicate11);
      predicate12.and(predicate6);
      predicate3.test(predicate7);
      Predicate<String> predicate13 = predicate9.and(predicate6);
      Predicate<String> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate3.negate();
      predicate10.or(predicate2);
      predicate15.negate();
      predicate9.and(predicate14);
      predicate4.or(predicate8);
      predicate10.or(predicate13);
      predicate13.negate();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm3);
      assertEquals("[?%%%]", jSTerm3.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0519526056431565
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "?&}");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.leftPar = 60;
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8082784920190798
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("X]9=6)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate<String> predicate6 = predicate4.and(predicate5);
      Predicate<String> predicate7 = predicate4.negate();
      Predicate<String> predicate8 = predicate7.and(predicate3);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate4);
      Predicate<String> predicate10 = predicate6.or(predicate9);
      Predicate<String> predicate11 = predicate4.and(predicate7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate12 = predicate5.and(predicate1);
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate<Object> predicate14 = predicate13.and(predicate1);
      Predicate<Object> predicate15 = predicate13.negate();
      predicate15.negate();
      predicate12.negate();
      predicate13.or(predicate15);
      Predicate<String> predicate16 = predicate11.negate();
      predicate8.negate();
      Predicate.isEqual((Object) predicate5);
      predicate16.or(predicate13);
      Predicate.isEqual((Object) predicate14);
      boolean boolean0 = jSTerm3.equals(jSTerm1);
      assertTrue(boolean0);
      
      Predicate<String> predicate17 = predicate10.negate();
      predicate17.or(predicate8);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm3.equals(jSTerm0);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      
      StringBuffer stringBuffer0 = jSTerm4.toStr();
      assertEquals("[., [X]9=6], [nil]]", jSTerm1.toString());
      assertEquals("(. X]9=6 nil )", stringBuffer0.toString());
      assertNotSame(jSTerm1, jSTerm4);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8925601997780763
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("Expecting variable name in term");
      jSTerm0.makeEval(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.call();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader1.markSupported();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm2.matches(jSTerm1);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.plus = (-6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8800221234841177
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.913768920715803
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XLa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.cloneS();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm3.print();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution1.clear();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm3.clonePF();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm6.applySubstitutionT(jSSubstitution5);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm6.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm7.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8602379540766947
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting v*riable ndme in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.parallelStream();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm0);
      jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm2.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1094277057578132
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("ih^&%ysLhyXUT{8iaG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis(3334L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.removeAllElements();
      System.setCurrentTimeMillis(2545L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1050296313349124
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm1.makeConstant();
      jSTerm1.isVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(aq#?mT5KP\"ah1%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'k';
      charArray0[2] = '$';
      charArray0[3] = '|';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("(aq#?mT5KP\"ah1%");
      stringReader0.ready();
      int int0 = 42;
      stringReader0.mark(64);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.wordChars(42, 60);
      StringReader stringReader2 = new StringReader("(aq#?mT5KP\"ah1%");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D$\u0005>;e+ Zx/Bm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.413861375019163
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("T#~3'e]fov=6'i}'d&t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(42, 0);
      jSTerm0.isGround();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v*iable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aq#?m5KP\"ah1%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("aq#?m5KP\"ah1%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.097029514139959
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'p';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      stringReader1.read(charBuffer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.cloneT();
      streamTokenizer2.ordinaryChars(255, 0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3163447464899425
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#rm5|\"61%");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-755), (-4));
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("(#rm5|\"61%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      streamTokenizer2.ordinaryChar((-2981));
      streamTokenizer0.ordinaryChars((-4), (-755));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.parseNumbers();
      streamTokenizer2.ordinaryChar(47);
      streamTokenizer2.ordinaryChars(47, 43);
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer2.nval = (-2346.1525022);
      streamTokenizer1.whitespaceChars((-4), 7);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.resetSyntax();
      streamTokenizer3.ordinaryChars((-3264), (-2981));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(aq#?mT5KP\"ah1%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(aq#?mT5KP\"ah1%");
      stringReader0.ready();
      int int0 = 42;
      stringReader0.mark(64);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader("(aq#?mT5KP\"ah1%");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(aq#?mT5KP\"ah1%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("(aq#?mT5KP\"ah1%");
      stringReader0.ready();
      stringReader0.read();
      int int0 = 42;
      stringReader0.mark(64);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader("(aq#?mT5KP\"ah1%");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(123, (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(123, 2334);
      streamTokenizer1.ordinaryChars(2334, 2334);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer1.ordinaryChar(2334);
      streamTokenizer0.ordinaryChars((-1), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer3.ordinaryChar(123);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#rm5|\"61%");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 35;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChars(59, 59);
      streamTokenizer0.lowerCaseMode(false);
      StringReader stringReader1 = new StringReader("(#rm5|\"61%");
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = '`';
      stringReader1.reset();
      charArray0[2] = 'y';
      charArray0[2] = ':';
      stringReader1.read(charArray0);
      charArray0[4] = 'y';
      charArray0[5] = ')';
      stringReader1.markSupported();
      charArray0[6] = ']';
      stringReader0.read(charArray0);
      stringReader1.mark(63);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.909718867228647
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSTerm3.toArray();
      JSTerm jSTerm4 = jSTerm1.call();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm5, jSSubstitution1);
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm2.matches(jSTerm4);
      jSTerm2.standardizerTerm();
      JSTerm jSTerm7 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm8 = new JSTerm();
      jSSubstitution0.removeElement(jSTerm8);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm9 = new JSTerm();
      jSSubstitution1.clear();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = jSTerm2.matches(jSTerm7);
      jSTerm2.makeFunction();
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      JSTerm jSTerm10 = jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm7.applySubstitutionT(jSSubstitution5);
      jSTerm2.matches(jSTerm6, jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm11 = new JSTerm();
      jSTerm10.applySubstitutionT(jSSubstitution5);
      // Undeclared exception!
      try { 
        jSTerm8.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(126, (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(126, 2334);
      streamTokenizer1.ordinaryChars(2334, 2334);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer1.ordinaryChar(2334);
      streamTokenizer0.ordinaryChars((-1), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer3.ordinaryChar(126);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-1));
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1243401600918084
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XLa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3);
      jSTerm1.call();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm3, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      JSTerm jSTerm7 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm8 = jSTerm4.applySubstitutionT(jSSubstitution3);
      jSTerm8.clonePF();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm9 = new JSTerm();
      JSTerm jSTerm10 = jSTerm7.applySubstitutionT(jSSubstitution2);
      jSTerm10.standarizerPredicateForm();
      jSTerm8.isConstant();
      JSSubstitution jSSubstitution7 = null;
      // Undeclared exception!
      try { 
        jSTerm6.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChars(123, (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(123, 2334);
      streamTokenizer1.ordinaryChars(2334, 2334);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ordinaryChar(123);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(123, (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(123, 2334);
      streamTokenizer1.ordinaryChars(2334, 2334);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer0.ordinaryChars((-1), (-4));
      stringReader0.markSupported();
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      stringReader0.read(charArray0);
      stringReader0.mark(552);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-4952);
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.verticalL = 43;
      JSJshopVars.plus = 2563;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm0.isConstant();
      jSTerm1.isEmpty();
      JSJshopVars.leftPar = 60;
      boolean boolean1 = jSTerm1.isVariable();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6265742625597954
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XLa=)");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.toArray();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSTerm jSTerm4 = jSTerm1.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.removeElement(jSTerm5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.clear();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.VarCounter = 1;
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution7);
      jSTerm0.addAll(0, (Collection) jSSubstitution1);
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution8);
      JSSubstitution jSSubstitution9 = jSTerm2.matches(jSTerm4, jSSubstitution6);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution9);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.rightPar = 1;
      jSTerm6.applySubstitutionT(jSSubstitution5);
      jSSubstitution9.add((Object) jSSubstitution0);
      jSTerm4.cloneT();
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9102506018002212
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "(#{m5jP\"61%");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.negate();
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "a");
      Predicate<Object> predicate6 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      Predicate<String> predicate10 = predicate2.and(predicate6);
      Predicate<String> predicate11 = predicate0.and(predicate4);
      predicate1.negate();
      Predicate<String> predicate12 = predicate11.or(predicate10);
      Predicate<String> predicate13 = predicate10.or(predicate5);
      Predicate.isEqual((Object) predicate8);
      predicate6.and(predicate9);
      Predicate<Object> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate7.or(predicate14);
      predicate0.negate();
      Predicate<String> predicate16 = predicate3.negate();
      predicate13.or(predicate16);
      Predicate.isEqual((Object) predicate15);
      // Undeclared exception!
      try { 
        predicate12.or((Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("ih^h%zsLhy;cT81am");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.650959686250932
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSSubstitution0.add((Object) "Expecting variable name in term");
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm4.isEval());
      
      jSTerm3.call();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.550438436883685
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars(123, (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(123, 2334);
      streamTokenizer1.ordinaryChars(2334, 2334);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer1.ordinaryChar(2334);
      streamTokenizer0.ordinaryChars((-1), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer3.ordinaryChar(123);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-1));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&w}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm0.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("ih^h%ysLhy;UT81am");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.toStr();
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate1.negate();
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate2.negate();
      Predicate<String> predicate6 = predicate1.negate();
      Predicate<String> predicate7 = predicate0.or(predicate6);
      predicate4.or(predicate7);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate8.and(predicate9);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate<String> predicate12 = predicate4.or(predicate3);
      predicate2.or(predicate12);
      predicate5.negate();
      predicate0.test("&Vd@eZc@-n64al~vl");
      predicate1.negate();
      predicate2.or(predicate5);
      Predicate<Object> predicate13 = predicate9.negate();
      predicate10.or(predicate13);
      Predicate<String> predicate14 = predicate4.or(predicate5);
      Predicate<Object> predicate15 = predicate8.negate();
      predicate11.or(predicate15);
      predicate14.negate();
      Predicate<String> predicate16 = predicate7.negate();
      predicate10.or(predicate13);
      predicate9.or(predicate13);
      assertEquals("[%%%]", jSTerm0.toString());
      
      predicate1.or(predicate16);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), 2334);
      streamTokenizer1.ordinaryChars(2334, 2334);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      int int0 = (-1);
      streamTokenizer1.ordinaryChar(2334);
      streamTokenizer0.ordinaryChars((-1), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9487605215810104
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.trimToSize();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(42);
      System.setCurrentTimeMillis(42);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
