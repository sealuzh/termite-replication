/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 22:41:04 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()EkY}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0010913480265513
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(fz.Z 7Y}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1135468458416944
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(!A@e)5veW7Ro(JN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-843), (-843));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-862), 763);
      streamTokenizer1.quoteChar((-843));
      streamTokenizer1.whitespaceChars(763, 763);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.equals(jSPredicateForm1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertEquals(1, jSPredicateForm2.size());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2761812552039644
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(2285);
      StringReader stringReader0 = new StringReader("vs|)do(Q)D0u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(2285);
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      jSTerm1.print();
      JSPredicateForm jSPredicateForm3 = jSTerm1.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm5.matches((JSPredicateForm) jSTerm1);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      jSPredicateForm5.print();
      streamTokenizer0.nextToken();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm6.ensureCapacity((-3));
      jSPredicateForm0.matches(jSPredicateForm3);
      JSPredicateForm jSPredicateForm7 = jSTerm1.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm1);
      jSTerm0.matches(jSPredicateForm7);
      jSTerm1.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm2);
      jSPredicateForm1.print();
      jSPredicateForm6.JSPredicateFormInit(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0736844799460363
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTnB+ ");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm2 = unaryOperator0.apply(jSTerm0);
      jSTerm2.makeVariable();
      jSTerm1.trimToSize();
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.clear();
      jSTerm3.iterator();
      JSTerm jSTerm4 = unaryOperator0.apply(jSTerm2);
      function0.apply("'KJ%r`9Kb7)yPTnB+ ");
      jSTerm0.matches(jSTerm3);
      Function<Object, Object> function1 = Function.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm0.isEmpty();
      function1.compose((Function<? super JSTerm, ?>) function0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<String, Integer> function2 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) function1;
      objectArray0[1] = (Object) unaryOperator1;
      objectArray0[3] = (Object) function1;
      jSTerm1.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSTerm4.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm4.clonePF();
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm1));
      assertNotSame(jSPredicateForm3, jSPredicateForm2);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.standarizerPredicateForm();
      assertNotSame(jSPredicateForm0, jSPredicateForm4);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals("['KJ%r`9Kb7)yPTnB+ , ['KJ%r`9Kb7)yPTnB+ 0]]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.129824381202889
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJr`9K5!kjPTnB+ ");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm2 = unaryOperator0.apply(jSTerm0);
      jSTerm2.makeVariable();
      jSTerm1.trimToSize();
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      UnaryOperator.identity();
      jSTerm3.clear();
      jSTerm3.iterator();
      function0.apply("'KJr`9K5!kjPTnB+ ");
      jSTerm0.matches(jSTerm3);
      UnaryOperator.identity();
      Function<Object, Object> function1 = Function.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      function0.compose((Function<? super String, ?>) unaryOperator1);
      jSTerm3.isEmpty();
      function1.compose((Function<? super JSTerm, ?>) function0);
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      function1.compose((Function<? super Integer, ?>) function0);
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<String, Integer> function2 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) function1;
      objectArray0[1] = (Object) unaryOperator1;
      objectArray0[3] = (Object) function1;
      jSTerm1.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.equals(jSPredicateForm0);
      jSTerm2.clonePF();
      // Undeclared exception!
      try { 
        jSTerm3.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTnB+Z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm2 = unaryOperator0.apply(jSTerm0);
      jSTerm2.makeVariable();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator1);
      jSTerm0.add((Object) jSTerm2);
      jSSubstitution0.add((Object) "'KJ%r`9Kb7)yPTnB+Z");
      StringReader stringReader0 = new StringReader("'KJ%r`9Kb7)yPTnB+Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeEval(true);
      JSTerm jSTerm3 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSTerm0.sort(comparator0);
      jSTerm1.listIterator();
      jSTerm3.trimToSize();
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTnB+ ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm2 = unaryOperator0.apply(jSTerm0);
      jSTerm2.makeVariable();
      jSTerm1.trimToSize();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator1);
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.iterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution4.parallelStream();
      jSSubstitution3.removeElements(jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionPF(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTn\"B+Z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm2 = unaryOperator0.apply(jSTerm0);
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator1);
      jSTerm0.add((Object) jSTerm2);
      UnaryOperator<JSTerm> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm1);
      unaryOperator0.apply(jSTerm0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.apply(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7707356420353721
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTnB+ ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      jSTerm1.makeVariable();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator1);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.clear();
      jSTerm2.iterator();
      jSTerm1.toStr();
      jSTerm0.clonePF();
      UnaryOperator<JSTerm> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function0 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Integer, ? extends JSTerm>) function0);
      UnaryOperator<JSTerm> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super JSTerm, ? extends JSTerm>) unaryOperator2);
      unaryOperator0.compose((Function<? super JSTerm, ? extends JSTerm>) unaryOperator3);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.stream();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("'KJ%r`9Kb7)yPTnB+ ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I/[De=5Znz$y<3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-968));
      jSTerm0.removeElement((-1));
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.pushBack();
      Integer integer1 = new Integer((-1091476420));
      jSTerm1.addElement((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm1);
      Integer integer2 = new Integer((-1));
      jSTerm0.makeVariable();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3tTrJesSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      jSTerm0.addElement((Object) null);
      int int0 = 1497;
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis(0L);
      int int1 = 914;
      streamTokenizer0.ordinaryChars(914, 1497);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8808334465708425
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(!A@e)5veW7Ro(JN");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.ensureCapacity((-3));
      System.setCurrentTimeMillis((-295L));
      System.setCurrentTimeMillis(431L);
      System.setCurrentTimeMillis(431L);
      System.setCurrentTimeMillis(1330L);
      System.setCurrentTimeMillis(1375L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(81L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-4727L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-511L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1268L);
      System.setCurrentTimeMillis(112L);
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("(!A@e)5veW7Ro(JN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm2);
      assertTrue(boolean0);
      assertEquals("[!Ae]", jSPredicateForm0.toString());
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3tTrJesSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (-1.0);
      Integer integer0 = new Integer((-1));
      stringReader0.ready();
      stringReader0.ready();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis(337L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer(1289);
      jSTerm1.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      objectArray0[12] = (Object) "7T#";
      objectArray0[1] = (Object) "7T#";
      objectArray0[15] = (Object) "7T#";
      objectArray0[6] = (Object) "7T#";
      objectArray0[9] = (Object) "7T#";
      objectArray0[7] = (Object) "7T#";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(1222);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!@\"neDLWqJIo(K/JN");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9297061990576545
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!A@e5ef%WM7Ro(KJN");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!@\"nefWM7Xo(K/JN");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray();
      objectArray0[4] = (Object) 2285;
      System.setCurrentTimeMillis((-1328L));
      StringReader stringReader0 = new StringReader("[M9Ek;udD%awi");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.04461051760409
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(!A@e)5veW7Ro(JN");
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrjbds_dvu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer0.wordChars((-4), (-167));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.quoteChar((-40857853));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(1393, 47);
      streamTokenizer1.ordinaryChars((-1969505238), (-4));
      streamTokenizer1.whitespaceChars(33, (-4));
      stringReader0.read();
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(753);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.wordChars(4494, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(~z.Z kY}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(&;(zkY}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrJeDOBsSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      jSTerm0.addElement((Object) null);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer1 = new Integer(91);
      jSSubstitution0.removeElement(integer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.retainAll(jSTerm0);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) "7T#";
      objectArray0[1] = (Object) "7T#";
      objectArray0[3] = (Object) "7T#";
      objectArray0[6] = (Object) "7T#";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-68216056));
      jSPredicateForm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTnB+Z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSSubstitution0.standarizerSubs();
      jSSubstitution2.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.removeElement(jSSubstitution2);
      jSSubstitution5.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution6);
      jSPredicateForm0.add((Object) jSSubstitution6);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTnB+Z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSSubstitution0.standarizerSubs();
      jSSubstitution2.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution5);
      jSPredicateForm0.add((Object) jSSubstitution5);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3tTrJesSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement((-1));
      int int0 = 15;
      long long0 = 337L;
      System.setCurrentTimeMillis(337L);
      streamTokenizer0.ordinaryChars(1497, 15);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I/[De=5Znz$y<3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      jSTerm0.addElement(streamTokenizer0);
      Integer integer1 = new Integer((-968));
      jSTerm0.removeElement(integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.pushBack();
      Integer integer2 = new Integer((-1091476420));
      jSTerm1.addElement(integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.add((Object) jSTerm0);
      Integer integer3 = new Integer((-968));
      Integer integer4 = new Integer(1497);
      jSTerm0.makeVariable();
      Integer integer5 = new Integer((-968));
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zTR";
      objectArray0[1] = (Object) "zTR";
      objectArray0[3] = (Object) "zTR";
      objectArray0[5] = (Object) "zTR";
      objectArray0[6] = (Object) "zTR";
      objectArray0[7] = (Object) "zTR";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(2);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.144866782328228
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJr`9K5!kWPTnB+ ");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm2 = unaryOperator0.apply(jSTerm0);
      jSTerm2.makeVariable();
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.clear();
      function0.apply("'KJr`9K5!kWPTnB+ ");
      jSTerm0.matches(jSTerm3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      function0.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator3.compose((Function<? super Object, ?>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      jSTerm3.isEmpty();
      unaryOperator3.compose((Function<? super JSTerm, ?>) function0);
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      function0.compose((Function<? super Integer, ?>) function0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<String, Integer> function2 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) unaryOperator3;
      objectArray0[1] = (Object) unaryOperator2;
      jSTerm1.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.print();
      jSTerm2.clonePF();
      // Undeclared exception!
      try { 
        jSTerm3.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7/R!}x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      Integer integer0 = new Integer((-3));
      jSTerm1.addElement((Object) null);
      JSTerm jSTerm2 = jSTerm0.call();
      Integer integer1 = new Integer(1497);
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis((-3976L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1497);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ms|)do(Q)0u");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      stringReader0.close();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.iterator();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution6.parallelStream();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution10.removeElements(jSSubstitution11);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrJeOBsSDu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Integer integer0 = new Integer((-1));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.wordChars((-4571), (-1981));
      streamTokenizer0.nextToken();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.nextToken();
      streamTokenizer1.ordinaryChars((-688), 420);
      Integer integer1 = new Integer((-1));
      streamTokenizer0.slashSlashComments(false);
      Integer integer2 = new Integer((-1));
      jSTerm0.addElement((Object) null);
      streamTokenizer0.quoteChar((-1));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrjbds_dvu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer0.wordChars((-4), (-167));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.ordinaryChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(1393, 47);
      streamTokenizer1.ordinaryChars((-1969505238), (-4));
      streamTokenizer1.whitespaceChars(33, (-4));
      stringReader0.read();
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(753);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.wordChars(4494, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      assertTrue(jSSubstitution3.fail());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'KJ%r`9Kb7)yPTn\"B+Z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm0);
      jSSubstitution0.listIterator();
      unaryOperator0.apply(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.ensureCapacity(191);
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.retainAll(jSTerm0);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.trimToSize();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ms|)do(Q)0u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer(41);
      streamTokenizer0.slashSlashComments(false);
      stringReader0.skip(41);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer2.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar(41);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ttype = 41;
      streamTokenizer1.nextToken();
      streamTokenizer3.ordinaryChars((-1), (-1));
      Integer integer1 = new Integer((-4));
      streamTokenizer1.pushBack();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ttype = 41;
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.ordinaryChars(41, 41);
      streamTokenizer4.ordinaryChar(41);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.wordChars((-4), 41);
      streamTokenizer4.slashStarComments(true);
      streamTokenizer4.quoteChar(41);
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrJeDOBsSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Integer integer0 = new Integer((-1));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.wordChars((-1), (-1981));
      streamTokenizer0.nextToken();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.resetSyntax();
      jSTerm0.addElement("y3ttrJeDOBsSDVu4");
      Integer integer1 = new Integer((-1));
      streamTokenizer0.slashSlashComments(false);
      Integer integer2 = new Integer((-1));
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrJeDOBsSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Integer integer0 = new Integer((-1));
      jSTerm0.addElement("y3ttrJeDOBsSDVu4");
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer1 = new Integer((-4));
      jSSubstitution0.removeElement(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zTR";
      objectArray0[1] = (Object) "zTR";
      objectArray0[3] = (Object) "zTR";
      objectArray0[5] = (Object) "zTR";
      objectArray0[6] = (Object) "zTR";
      objectArray0[7] = (Object) "zTR";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer(2787);
      jSPredicateForm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.028080167529994
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7/R!}x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.stream();
      jSPredicateForm1.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm2.toStr();
      jSPredicateForm2.trimToSize();
      streamTokenizer0.pushBack();
      jSTerm0.iterator();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm2.parallelStream();
      jSTerm0.sort(comparator0);
      int int0 = 1969;
      Integer integer0 = new Integer(1969);
      jSPredicateForm2.add((Object) integer0);
      jSPredicateForm3.standarizerPredicateForm();
      JSJshopVars.rightBrac = 1969;
      // Undeclared exception!
      try { 
        jSPredicateForm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrjbds_dvu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.sval = "Jh:@8+:GHTB<";
      stringReader0.ready();
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars(1393, 47);
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars(1572, (-4));
      stringReader0.read();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zTR";
      objectArray0[1] = (Object) "zTR";
      objectArray0[3] = (Object) "zTR";
      objectArray0[5] = (Object) "zTR";
      objectArray0[6] = (Object) "zTR";
      objectArray0[7] = (Object) "zTR";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement(objectArray0[3]);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(zTR)", stringBuffer0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrJeDNBsSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-4));
      streamTokenizer0.commentChar((-4));
      Integer integer1 = new Integer((-4));
      StringReader stringReader1 = new StringReader("YK MRId ");
      streamTokenizer1.wordChars((-14), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer3.pushBack();
      Integer integer2 = new Integer((-4));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-2052L));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = 1L;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.iterator();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zTR";
      objectArray0[1] = (Object) "zTR";
      objectArray0[2] = (Object) "zTR";
      objectArray0[5] = (Object) "zTR";
      objectArray0[6] = (Object) "zTR";
      objectArray0[7] = (Object) "zTR";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer1);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.ensureCapacity((-4202));
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ms|)do(Q)0u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-4));
      streamTokenizer0.slashSlashComments(false);
      Integer integer1 = new Integer((-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      Integer integer2 = new Integer((-4));
      streamTokenizer0.wordChars((int) integer2, (int) integer2);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.ttype = (-4);
      Integer integer3 = new Integer((-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      Integer integer4 = new Integer((-4));
      streamTokenizer1.pushBack();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ttype = (-4);
      streamTokenizer1.nval = (double) (-4);
      boolean boolean0 = true;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSSubstitution0.standarizerSubs();
      jSSubstitution2.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution5.removeElements(jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution12.forEach(consumer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("r?&$^IQ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(fzkY}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y3ttrJeDOBsSDVu4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.wordChars((-1368), (-865));
      Integer integer0 = new Integer(59);
      streamTokenizer1.commentChar((-356));
      Integer integer1 = new Integer((-1092));
      StringReader stringReader1 = new StringReader("!");
      streamTokenizer1.wordChars((-408), 0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar(3314);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars((-4), (-700));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.nextToken();
      streamTokenizer4.whitespaceChars((-319352257), (-1438047219));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
