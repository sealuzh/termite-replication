/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 23:17:50 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3261437056631082
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpptyzbn{Bkm", false, "-trimText");
      OutputFormat outputFormat1 = new OutputFormat("-expandEmpptyzbn{Bkm");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-expandEmpptyzbn{Bkm";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.parseOptions(stringArray0, 4);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.parseOptions(stringArray0, 4);
      assertTrue(outputFormat1.isNewlines());
      
      int int0 = outputFormat0.parseOptions(stringArray0, 4);
      assertEquals(4, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.938311329683084
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setPadText(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setIndent("-Ys.6''(HbUx]!(@\"");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isPadText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6899064828459416
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = new OutputFormat("Cz9ZDpx");
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-indent";
      stringArray0[2] = "Cz9ZDpx";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(3, int0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("Cz9ZDpx", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isTrimText());
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isPadText());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isNewlines());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2095422126762791
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expanTdEmptyc6vrUy{";
      stringArray0[1] = "-expanTdEmptyc6vrUy{";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-expandEmptyc6vrUy{";
      stringArray0[4] = "-trimText";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-expaYdEmptyc6vrUy{";
      stringArray1[1] = "-trimText";
      stringArray1[3] = "-expaYdEmptyc6vrUy{";
      stringArray1[4] = "-expandEmptyz$n.{Bkm";
      stringArray1[5] = "-trimText";
      stringArray1[6] = "-trimText";
      stringArray1[8] = "-expandEmptyc6vrUy{";
      OutputFormat outputFormat0 = new OutputFormat(stringArray1[7], true, "-xhtml-xhtml~");
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "-hUZa,CUS -{\"";
      stringArray0[4] = "xPB}Rq2_(ic+";
      stringArray0[6] = "r|Rv<jllh";
      OutputFormat outputFormat0 = new OutputFormat("-hUZa,CUS -{\"", true, "r|Rv<jllh");
      outputFormat0.setPadText(true);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      String string0 = outputFormat0.getEncoding();
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("", string0);
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat0.setOmitEncoding(true);
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2801888204015377
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km", false, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[1] = "-padText";
      stringArray0[2] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[3] = "-xhtml~";
      stringArray0[4] = "-expandEmpty";
      stringArray0[5] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[6] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[7] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isXHTML());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0710375347904217
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-expandEmptyz$n.{Bkm";
      stringArray0[2] = "Czu9ZDphHx}";
      stringArray0[3] = "-indent";
      stringArray0[4] = "'";
      stringArray0[5] = "Czu9ZDphHx}";
      stringArray0[6] = "'";
      outputFormat0.parseOptions(stringArray0, 1);
      OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-expandEmptyz$n.{Bkm\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyz$n.{Bkm", false, "-indentSize");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-expandEmpty$*RY!`?Z";
      stringArray0[2] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.105426495394898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat2 = new OutputFormat("&Ie,mbRrs]tX'");
      OutputFormat.createPrettyPrint();
      outputFormat2.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat3 = new OutputFormat("&Ie,mbRrs]tX'");
      outputFormat0.isXHTML();
      OutputFormat outputFormat4 = new OutputFormat("&Ie,mbRrs]tX'", true);
      outputFormat4.setXHTML(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat3.setXHTML(true);
      outputFormat1.setPadText(true);
      assertTrue(outputFormat1.isPadText());
      
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat5 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat5.isPadText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpptyzbn{Bkm";
      stringArray0[1] = "-trimText";
      outputFormat0.setNewLineAfterNTags(13);
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-expandEmpptyzbn{Bkm";
      stringArray0[7] = "-trimText";
      stringArray0[8] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(13, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6568671789549314
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true, "-expandEmpty");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("r|Rv<jllh");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "-expandEmpty";
      outputFormat1.setNewLineAfterNTags(1);
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "r|Rv<jllh";
      stringArray0[4] = "xPB}Rq2_(ic+";
      stringArray0[5] = "r|Rv<jllh";
      stringArray0[6] = "r|Rv<jllh";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterNTags(5133);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getNewLineAfterNTags();
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.getEncoding();
      outputFormat0.setIndent("r|Rv<jllh");
      assertEquals(5133, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7914234446919735
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setIndent((String) null);
      boolean boolean0 = false;
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("");
      outputFormat0.setNewLineAfterDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";*Cn8J@[,", true);
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(";*Cn8J@[,", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&\"^#dJmh0Mkq6");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&\"^#dJmh0Mkq6";
      stringArray0[1] = "]5BiudyTEs]Wk_;";
      stringArray0[2] = ">FwBUR|";
      outputFormat0.setNewLineAfterNTags((-4177984));
      stringArray0[3] = "Czu9ZD";
      stringArray0[4] = "Czu9ZDhophHx}X";
      stringArray0[5] = "&\"^#dJmh0Mkq6";
      stringArray0[6] = "Czu9ZDhophHx}X";
      stringArray0[7] = "g$5@|SZGkQL;\"A";
      stringArray0[8] = "Czu9ZD";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-4177984), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km", false, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      outputFormat0.setIndent((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[7] = "-expandEmpty$*RY!`?Z";
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0787692411134904
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize(0);
      outputFormat0.setNewlines(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setPadText(false);
      outputFormat2.isNewlines();
      outputFormat0.setIndentSize(0);
      outputFormat2.setIndentSize(0);
      outputFormat2.isNewlines();
      String string0 = outputFormat0.getIndent();
      assertEquals("", string0);
      
      outputFormat2.isXHTML();
      outputFormat0.setIndent(true);
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat1.setIndent("-xhtml.");
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1079382693352433
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterNTags((-884));
      outputFormat0.setNewlines(false);
      outputFormat0.setLineSeparator("-xhtml-grimText");
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setIndentSize((-1915826481));
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent(false);
      outputFormat1.setNewlines(true);
      outputFormat1.setNewLineAfterNTags((-1915826481));
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(false);
      outputFormat1.setIndentSize((-1915826481));
      outputFormat0.setPadText(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isNewlines();
      outputFormat0.setIndentSize(0);
      outputFormat0.setPadText(false);
      outputFormat1.isTrimText();
      outputFormat1.setPadText(false);
      assertEquals((-1915826481), outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.784619384820672
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("xJq2TIAa", false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("xJq2TIAa");
      outputFormat0.setIndentSize(39);
      outputFormat0.setIndent(true);
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xJq2TIAa";
      stringArray0[1] = "xJq2TIAa";
      stringArray0[7] = "xJq2TIAa";
      stringArray0[3] = "xJq2TIAa";
      stringArray0[4] = "xJq2TIAa";
      stringArray0[5] = "xJq2TIAa";
      stringArray0[6] = "vFn--mg%";
      stringArray0[7] = "xJq2TIAa";
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterNTags((-2226));
      outputFormat0.setIndent((String) null);
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals((-2226), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("] ", false, "-trimText");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmptyc6vrUy{";
      stringArray0[1] = "-trimText";
      stringArray0[4] = "-expandEmpty$*RY!`?Z";
      stringArray0[5] = "-expandEmpty$*RY!`?Z";
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm", true, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      assertEquals("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-expandEmpty$*RY!`?Z";
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&\"^#dJmh0Mkq6");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&\"^#dJmh0Mkq6";
      stringArray0[1] = "]5BiudyTEs]Wk_;";
      stringArray0[2] = ">FwBUR|";
      stringArray0[3] = "Czu9ZD";
      stringArray0[4] = "Czu9ZDhophHx}X";
      stringArray0[5] = "&\"^#dJmh0Mkq6";
      stringArray0[6] = "Czu9ZDhophHx}X";
      stringArray0[7] = "g$5@|SZGkQL;\"A";
      stringArray0[8] = "Czu9ZD";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("&\"^#dJmh0Mkq6", outputFormat0.getIndent());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3763386509335085
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (&)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&\"^#dJmh0Mkq6");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&\"^#dJmh0Mkq6";
      stringArray0[1] = "]5BiudyTEs]Wk_;";
      stringArray0[2] = ")!wBUR|";
      stringArray0[3] = "Czu9ZD";
      stringArray0[4] = "Czu9ZDhphHx}X";
      stringArray0[5] = "&\"^#dJmh0Mkq6";
      stringArray0[6] = "Czu9ZDhphHx}X";
      stringArray0[7] = "g$5@|SZGkQL;\"A";
      stringArray0[8] = "Czu9ZD";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("&\"^#dJmh0Mkq6", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("eRy@K*UBiqPk>*-]{vI");
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("eRy@K*UBiqPk>*-]{vI", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1144174683302812
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "icD*.)AwMF0GSC1%";
      stringArray0[1] = "-grimText";
      stringArray0[2] = "-omitEncoding";
      stringArray0[3] = "-expandEmptyc6vrUy{";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "*PGm*.<P(";
      stringArray0[7] = "-expandEmptyc6vrUy{";
      outputFormat0.parseOptions(stringArray0, 2);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h0$", false, (String) null);
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals("h0$", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertNull(string0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5436118176366946
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isPadText();
      outputFormat0.setXHTML(true);
      outputFormat0.setEncoding("-hUZa,");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-hUZa,", outputFormat0.getEncoding());
      
      outputFormat1.setOmitEncoding(true);
      String string0 = outputFormat1.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1526254461503203
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.isPadText();
      outputFormat0.setEncoding("-hUZa,");
      assertEquals("-hUZa,", outputFormat0.getEncoding());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-hUZa,";
      stringArray0[1] = "";
      stringArray0[2] = "-hUZa,";
      stringArray0[3] = "";
      outputFormat1.setIndent(true);
      stringArray0[4] = "";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setOmitEncoding(true);
      String string0 = outputFormat1.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("U", true, (String) null);
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-^html~";
      stringArray0[1] = "U";
      stringArray0[1] = "U";
      stringArray0[3] = "-xhtml@2NHR0";
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "j*u+/");
      String[] stringArray0 = new String[6];
      outputFormat0.setIndentSize((-1));
      outputFormat0.setIndent("CzuyZEhphHx}X");
      stringArray0[0] = "  ";
      stringArray0[1] = "CzuyZEhphHx}X";
      stringArray0[2] = "j*u+/";
      stringArray0[3] = "";
      stringArray0[4] = "h0$";
      stringArray0[5] = "j*u+/";
      outputFormat0.setIndent("-indentSize");
      assertEquals("-indentSize", outputFormat0.getIndent());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "-expandEmptyz$n.{Bkm";
      String string1 = "-expandEmptyz$n.{Bkm";
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyz$n.{Bkm", false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (X)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H_GAgUcYR#W?";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = null;
      stringArray0[3] = "811:THCqkvJi%U_";
      stringArray0[5] = "-exrandEmptyz$n.{Bkm";
      stringArray0[5] = "-exrandEmptyz$n.{Bkm";
      stringArray0[6] = "org.dom4j.io.OutputFormat";
      stringArray0[7] = "-exrandEmptyz$n.{Bkm";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2770928451693395
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlCzu9ZDphHx}", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "aEu]yx065";
      stringArray0[1] = "-expandEmptyc6vrUy{";
      stringArray0[2] = "-xhtmlCzu9ZDphHx}";
      stringArray0[3] = "-expandEmptyc6vrUy{";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "-expandEmptyc6vrUy{";
      stringArray0[6] = "-expandEmptyz$n.{Bkm";
      stringArray0[7] = "-expandEmptyz$n.{Bkm";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("-expandEmptyc6vrUy{", outputFormat0.getLineSeparator());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-AxpandEmpeyz$n.{Bkm", true, "-AxpandEmpeyz$n.{Bkm");
      assertEquals("-AxpandEmpeyz$n.{Bkm", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[1];
      outputFormat0.setIndent(false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-AxpandEmpeyz$n.{Bkm", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km", false, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[8];
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km", false, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      outputFormat0.setIndent(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty$*RY!`?Z";
      stringArray0[1] = "-xhtml~";
      stringArray0[2] = "-xhtml~";
      stringArray0[3] = "-xhtml~";
      stringArray0[4] = "X_)T,(}u&L2f*\"";
      stringArray0[5] = "-expandEmpty$*RY!`?Z";
      stringArray0[6] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km";
      stringArray0[7] = "X_)T,(}u&L2f*\"";
      stringArray0[8] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km";
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Cz9ZDpx", false);
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-lineSeparator";
      stringArray0[2] = "Cz9ZDpx";
      stringArray0[2] = "-expandErptyz$n.{Bm";
      stringArray0[7] = "-expandErptyz$n.{Bm";
      stringArray0[5] = "4l;";
      stringArray0[6] = "\n";
      String[] stringArray1 = new String[3];
      stringArray1[1] = "\n";
      stringArray1[2] = "4l;";
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8394781799534115
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("mO?Zy#@-bF~-4M");
      assertEquals("mO?Zy#@-bF~-4M", outputFormat0.getIndent());
      
      OutputFormat outputFormat2 = new OutputFormat(")!wBUR|");
      outputFormat2.isNewLineAfterDeclaration();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat1.setIndent("  ");
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat3.isNewlines());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("U", false, (String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-fxpandmp&6sptyzbn{B";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      stringArray0[3] = "-xhtml@2NHR0";
      stringArray0[4] = "-xhtml-xhtml~";
      stringArray0[5] = "-xhtml~";
      stringArray0[6] = "-xhtml@2NHR0";
      int int0 = outputFormat0.parseOptions(stringArray0, 885);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("U", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(885, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(false);
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertNull(string0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.145277367387215
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm", false);
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km";
      stringArray0[1] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "-expandEmpty$*RY!`?Z";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.121410475323288
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km", false, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty$*RY!`?Z";
      stringArray0[1] = "-xhtml~";
      stringArray0[2] = "-xhtml~";
      stringArray0[3] = "-xhtml~";
      stringArray0[4] = "X_)T,(}u&L2f*\"";
      stringArray0[5] = "-expandEmpty$*RY!`?Z";
      stringArray0[6] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km";
      stringArray0[7] = "-xhtmlCzuyZEhphHx}Z";
      stringArray0[8] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{(km";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9481072480504316
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterNTags((-884));
      outputFormat0.setNewlines(false);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setIndentSize((-1915826481));
      outputFormat0.setIndent(false);
      outputFormat0.setNewlines(true);
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(false);
      outputFormat0.setIndentSize((-1915826481));
      outputFormat0.setPadText(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isNewlines();
      outputFormat0.setIndentSize(0);
      outputFormat0.setPadText(false);
      outputFormat0.isTrimText();
      outputFormat0.setPadText(false);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9556823265963292
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm", false, "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[1] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[2] = "-expandEmptyc6vrUy{";
      stringArray0[3] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[4] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[5] = "-expandEmpty-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[6] = "-expandEmpty-expandEmpty-expandEmptyz$n.{Bkm";
      stringArray0[7] = "z7,77x,MDh";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(7, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\n", true, "Czu9ZDhphHx}X");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NVI(vX0$tB( ^";
      stringArray0[2] = "\n";
      stringArray0[4] = "Czu9ZDhphHx}X";
      stringArray0[5] = "NVI(vX0$tB( ^";
      stringArray0[6] = "NVI(vX0$tB( ^";
      outputFormat0.setLineSeparator("NVI(vX0$tB( ^");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isNewLineAfterDeclaration();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setIndent("\n");
      assertEquals("NVI(vX0$tB( ^", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, "r%HX");
      assertEquals("r%HX", outputFormat0.getEncoding());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "h0$";
      stringArray0[2] = "1p{{";
      stringArray0[3] = "CzuyZEhphHx}Z";
      stringArray0[4] = "-expandEmptyc6vrUy{";
      stringArray0[5] = "r%HX";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("h0$", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\n", false);
      String[] stringArray0 = new String[15];
      stringArray0[0] = "-expandEmptyc6vrUy{";
      stringArray0[1] = "-expandEmptyz$n.{Bkm";
      stringArray0[2] = "-expandEmptyz$n.{Bkm";
      stringArray0[6] = "-expandEmptyc6vrUy{";
      stringArray0[4] = "-expandEmptyz$n.{Bkm";
      stringArray0[5] = "-expandEmptyc6vrUy{";
      stringArray0[6] = "-expandEmptyc6vrUy{";
      stringArray0[0] = "-expandEmptyz$n.{Bkm";
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", string0);
  }
}
