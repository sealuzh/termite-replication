/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 23:18:30 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.xerces.jaxp.SAXParserImpl;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLReader xMLReader0 = null;
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 43);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 43);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      try { 
        sequenceInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3757224858173362
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("f  ");
      Object object0 = new Object();
      sAXReader_SAXEntityResolver0.resolveEntity("", "=");
      sAXReader_SAXEntityResolver0.resolveEntity("`5=Eq", "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/home/ubuntu/termite/projects/62_do4/Z|b2.VI''CtJQD|0vbO");
      SAXReader sAXReader0 = new SAXReader();
      Object object1 = new Object();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("`5=Eq");
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.setEncoding("//tmp/tmp/+sqFlM2>]i4fI<is(-0+sqFlM2>]i4fI<is(-0[Wy9Ah");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.setPublicId((String) null);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl2);
      locatorImpl2.getColumnNumber();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      File file0 = MockFile.createTempFile("//tmp/lygU1Lm-T", "`5=Eq");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/TMP/+SQFLM2>]I4FI<IS(-0+SQFLM2>]I4FI<IS(-0[WY9AH\". Nested exception: Invalid encoding name \"//TMP/TMP/+SQFLM2>]I4FI<IS(-0+SQFLM2>]I4FI<IS(-0[WY9AH\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.setEncoding("S`S0F[1tpaNJK-&+$");
      try { 
        sAXReader0.read((InputStream) dataInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"S`S0F[1TPANJK-&+$\". Nested exception: Invalid encoding name \"S`S0F[1TPANJK-&+$\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~*ONO1\"T}6l%");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("^nV?B");
      StringReader stringReader0 = new StringReader("wj");
      try { 
        sAXReader0.read((Reader) stringReader0, "~*ONO1\"T}6l%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document ~*ONO1\"T}6l% : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl0.setColumnNumber(681);
      locator2Impl0.setSystemId("JTytJ#V4Yz|K");
      locator2Impl2.getPublicId();
      locator2Impl3.getXMLVersion();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl3.setPublicId((String) null);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      locator2Impl2.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl4);
      locatorImpl3.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      MockFile.createTempFile("JTytJ#V4Yz|K", "");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.334527382023145
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("  ");
      Object object0 = new Object();
      sAXReader_SAXEntityResolver0.resolveEntity("fE3", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("fE3");
      Object object1 = new Object();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = Namespace.get("fE3");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace.get("");
      namespaceStack1.contains(namespace0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack2 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack2.contains(namespace0);
      namespaceStack1.contains(namespace0);
      namespaceStack1.contains(namespace0);
      Namespace namespace1 = namespaceStack0.addNamespace("fE3", "http://xml.org/sax/features/use-locator2");
      namespaceStack0.contains(namespace1);
      NamespaceStack namespaceStack3 = new NamespaceStack();
      StringReader stringReader0 = new StringReader("");
      namespaceStack3.getQName("zRH6gZ", "fE3", "//tmp/&gY00u6F$&$yglxxg}D[w");
      Namespace namespace2 = Namespace.get("http://xml.org/sax/features/use-locator2");
      QName qName0 = new QName("", namespace2, "");
      Object object2 = new Object();
      namespaceStack1.getAttributeQName("  ", "C%V<L", "a6s<N");
      NamespaceStack namespaceStack4 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("  ");
      Object object0 = new Object();
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("fw", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("fw");
      Object object1 = new Object();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.clear();
      Object object2 = new Object();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.get(",3ss}");
      namespaceStack1.contains(namespace0);
      namespaceStack0.contains(namespace0);
      namespaceStack0.contains(namespace0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.getQName("  ", ",3ss}", "zRH6gZ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",3ss}");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", (Object) null);
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("'kOr_KT*4debJjn", "getBaseURI");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      locator2Impl3.setSystemId("/");
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl3);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl1.getPublicId();
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      locator2Impl5.getSystemId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      locator2Impl5.setSystemId("/");
      locator2Impl1.setPublicId("//tmp/&v`L$K0/tmp/'pws0`5=E5");
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      locator2Impl0.setSystemId("JTytJ#V4Yz|K");
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.setPublicId("Y9$p");
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl5.getPublicId();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl8);
      Locator2Impl locator2Impl10 = new Locator2Impl();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      SAXReader sAXReader0 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.253253709276892
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      locator2Impl3.setColumnNumber(46);
      locator2Impl3.setSystemId("/");
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl3);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl1.getPublicId();
      MockURL.getHttpExample();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, (String) null, "/", 3286, (-383));
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName((String) null, (String) null, "N?(JaRpP#Y]Oh8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputSource inputSource0 = new InputSource("/");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.320369128956862
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.isIncludeExternalDTDDeclarations();
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream(1398);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.369419808008122
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "q3";
      xMLFilterImpl0.processingInstruction("T2!_I~", "q3");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      String string1 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("%?{(|Q~X+#e:TreC-V");
      String string2 = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl3);
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.getXMLVersion();
      locator2Impl7.getPublicId();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl5.getPublicId();
      MockURL.getHttpExample();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, locator2Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("  ");
      Object object0 = new Object();
      sAXReader_SAXEntityResolver0.resolveEntity("fE3", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("fE3");
      Object object1 = new Object();
      sAXReader_SAXEntityResolver1.uriPrefix = "";
      Namespace.get("fE3");
      sAXReader_SAXEntityResolver1.resolveEntity("fE3", "//tmp/Index value: 0");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SAXReader sAXReader0 = new SAXReader();
      Object object2 = new Object();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", object2);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LocatorImpl locatorImpl0 = new LocatorImpl();
          Locator2Impl locator2Impl0 = new Locator2Impl();
          Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
          Locator2Impl locator2Impl2 = new Locator2Impl();
          Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
          Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
          LocatorImpl locatorImpl1 = new LocatorImpl();
          locatorImpl0.getColumnNumber();
          Locator2Impl locator2Impl5 = new Locator2Impl();
          Locator2Impl locator2Impl6 = new Locator2Impl();
          Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl5);
          locator2Impl7.getLineNumber();
          Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl4);
          Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl2);
          locator2Impl9.getPublicId();
          locator2Impl9.setColumnNumber(0);
          locator2Impl9.getPublicId();
          Locator2Impl locator2Impl10 = new Locator2Impl();
          URL uRL0 = MockURL.getHttpExample();
          SAXReader sAXReader0 = new SAXReader((String) null);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.304093815508835
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setEntityResolver(defaultHandler2_0);
      sAXReader0.isStringInternEnabled();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getEncoding();
      sAXReader0.getDocumentFactory();
      InputSource inputSource0 = new InputSource("[XPathPattern: text: ");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: [XPathPattern: text:  Nested exception: no protocol: [XPathPattern: text: 
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.537473156709128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|";
      sAXReader0.removeHandler("//home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|");
      String string1 = "nIb<[ILD1mOD\\M]y";
      sAXReader0.setEncoding("nIb<[ILD1mODM]y");
      String string2 = "/S*U^FeLrs$gl";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("/S*U^FeLrs$gl", pruningDispatchHandler0);
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|");
      stringReader0.ready();
      stringReader0.mark(111);
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3671774230734823
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LocatorImpl locatorImpl0 = new LocatorImpl();
          Locator2Impl locator2Impl0 = new Locator2Impl();
          Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
          Locator2Impl locator2Impl2 = new Locator2Impl();
          Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
          locator2Impl1.setSystemId("//tmp/w:B90cj,%[");
          locator2Impl1.getPublicId();
          LocatorImpl locatorImpl1 = new LocatorImpl();
          locatorImpl0.setPublicId((String) null);
          LocatorImpl locatorImpl2 = new LocatorImpl();
          Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl2);
          LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl4);
          locatorImpl0.getColumnNumber();
          Locator2Impl locator2Impl5 = new Locator2Impl();
          locatorImpl3.setColumnNumber((-1819));
          Locator2Impl locator2Impl6 = new Locator2Impl();
          Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl1);
          Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl3);
          Locator2Impl locator2Impl9 = new Locator2Impl();
          locator2Impl3.getPublicId();
          Locator2Impl locator2Impl10 = new Locator2Impl();
          LocatorImpl locatorImpl4 = new LocatorImpl();
          Locator2Impl locator2Impl11 = new Locator2Impl(locatorImpl0);
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
          sAXReader_SAXEntityResolver0.resolveEntity("//tmp/zRH6gZ0nPZ?%YU!+", "//tmp/j'6k-T`^U>kSU[1xA3hx!s7]?g5{0H>eh");
          URL uRL0 = MockURL.getFtpExample();
          SAXReader sAXReader0 = new SAXReader();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Docum_entFragment");
      String string0 = ":";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      Namespace namespace0 = Namespace.get("p'Zq,7\"@9$]");
      Namespace namespace1 = Namespace.get("p'Zq,7\"@9$]", "Error on line ");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("", "", "");
      String[] stringArray0 = new String[18];
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = new QName("", namespace1);
      dOMDocument0.addElement(qName1);
      stringArray0[1] = "";
      stringArray0[4] = null;
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      namespace0.clone();
      pruningElementStack0.pushElement((Element) null);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1);
      qName1.equals((Object) null);
      DOMElement dOMElement0 = new DOMElement(qName0, (-244));
      QName qName2 = new QName("Error on line ", namespace0, " [Coomment: \"");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      DefaultDocumentFactory.getInstance();
      File file0 = MockFile.createTempFile("xE]h", "xE]h");
      String string0 = file0.getCanonicalPath();
      assertEquals("/tmp/xE]h0xE]h", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4897182683864876
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = ":";
          QName qName0 = new QName(":");
          qName0.getDocumentFactory();
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
          Object object0 = new Object();
          qName0.equals(object0);
          sAXReader0.setStringInternEnabled(true);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
          sAXReader0.setErrorHandler(xMLFilterImpl1);
          xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
          sAXReader0.setMergeAdjacentText(true);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "YqtGUMwz'J;PK@>eI");
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      locator2Impl0.setSystemId("JTytJ#V4Yz|K");
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl1);
      locatorImpl1.getColumnNumber();
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl4);
      locator2Impl7.getSystemId();
      Locator2Impl locator2Impl9 = new Locator2Impl();
      locator2Impl8.getPublicId();
      locator2Impl6.getColumnNumber();
      Locator2Impl locator2Impl10 = new Locator2Impl();
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl10);
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl3);
      LocatorImpl locatorImpl6 = new LocatorImpl(locatorImpl0);
      locatorImpl6.getSystemId();
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl7);
      locator2Impl6.setSystemId((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locator2Impl1.setPublicId((String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("DO");
      sAXReader_SAXEntityResolver0.resolveEntity("JTytJ#V4Yz|K", (String) null);
      sAXReader0.getXMLReader();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locatorImpl0.setSystemId("!RH#&D=]\"W~)\n/9&n");
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl3);
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl0);
      locator2Impl4.getColumnNumber();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.getSystemId();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.getPublicId();
      locator2Impl7.getColumnNumber();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl6);
      locator2Impl4.getSystemId();
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl10);
      locator2Impl5.setSystemId((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locator2Impl0.setPublicId((String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      URL uRL0 = MockURL.getFtpExample();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6b115177 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6b115177 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      URI uRI0 = MockURI.aHttpURI;
      MockURI.toURL(uRI0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.getDispatchHandler();
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("?3 hd+U5H13^#", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '?3 hd+U5H13^#' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl3.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      locator2Impl6.getLineNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl2);
      locator2Impl2.getPublicId();
      locator2Impl6.getPublicId();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read((InputStream) null, "$.+>=fgZvY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: $.+>=fgZvY Nested exception: no protocol: $.+>=fgZvY
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DOMElement dOMElement0 = new DOMElement("Lm-T");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      dispatchHandler0.setDefaultHandler(dispatchHandler1);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      locatorImpl2.getLineNumber();
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locatorImpl2);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locatorImpl2.setLineNumber(0);
      locator2Impl1.setPublicId("http://xml.org/sax/features/namespace-prefixes");
      locatorImpl0.getLineNumber();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.574729047527649
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("}0&Nw(!Hu+5,Ds#ht`", "Variable ", "");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      SAXReader sAXReader1 = new SAXReader(false);
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(xMLReader0);
      sAXReader1.configureReader(xMLReader0, sAXContentHandler0);
      try { 
        sAXReader0.setFeature("//tmp/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|0/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//tmp/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|0/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      locator2Impl3.setSystemId("//tmp/Y9$p0");
      locator2Impl1.getPublicId();
      locator2Impl4.setPublicId((String) null);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl2);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl2);
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl6 = new Locator2Impl();
      locatorImpl1.setLineNumber(0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      locatorImpl4.setPublicId("");
      Locator2Impl locator2Impl9 = new Locator2Impl();
      locator2Impl7.getLineNumber();
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl10);
      locator2Impl4.setPublicId("//tmp/wa:B90cj,%[");
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl13 = new Locator2Impl();
      locator2Impl3.getPublicId();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("asXPathResult() not yet implemented fully for: ", "//tmp/tmp/Validation not supported for XMLReader: 00/tmp/Validation not supported for XMLReader: 0");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.createDefaultEntityResolver("//tmp/wa:B90cj,%[");
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gPG!ez");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|0/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader1 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sAXReader1.setMergeAdjacentText(false);
      boolean boolean0 = sAXReader1.isStripWhitespaceText();
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("  ");
      Object object0 = new Object();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver(":x>cDoQ!7`=]=");
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("//tmp/home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|0'YO", ":x>cDoQ!7`=]=");
      QName qName0 = new QName("  ", (Namespace) null, (String) null);
      Object object1 = new Object();
      qName0.equals(inputSource0);
      InputSource inputSource1 = new InputSource();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("EE3", "EE3", (String) null);
      Namespace namespace0 = Namespace.get("EE3");
      namespaceStack0.contains(namespace0);
      namespaceStack0.contains(namespace0);
      Namespace namespace1 = (Namespace)namespace0.detach();
      namespaceStack0.contains(namespace0);
      namespaceStack0.contains(namespace0);
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace2 = Namespace.get("org.dom4j.io.SAXReader$SAXEntityResolver");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " of document ");
      namespace0.detach();
      namespaceStack1.contains(namespace1);
      namespaceStack0.contains(namespace2);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack1.getQName("", (String) null, "HPpz<");
      MockURL.getHttpExample();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3381239155780884
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl1.setSystemId("//tmp/wa:B90cj,%[");
      locator2Impl1.getPublicId();
      locatorImpl0.setPublicId("//tmp/wa:B90cj,%[");
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl2);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      locatorImpl3.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl9 = new Locator2Impl();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName("`:.!2s!4", "edm!}.~eM7m", "//tmp/wa:B90cj,%[");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.JaxenRuntimeException");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.io.SAXReader", "//tmp/wa:B90cj,%[");
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) null, "\"3Tk)R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: \"3Tk)R Nested exception: no protocol: \"3Tk)R
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LG>Q 70F'D_;m|6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.getDispatchHandler();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QName qName0 = new QName(":");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setStringInternEnabled(true);
      MockFile mockFile0 = new MockFile("Z|b2.VI''CtJQD|", "Z|b2.VI''CtJQD|");
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      mockFile0.getAbsoluteFile();
      mockFile0.mkdirs();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      try { 
        sAXReader1.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      String string0 = "org.dom4j.tree.AbstractAttribute";
      try { 
        sAXReader0.read("org.dom4j.tree.AbstractAttribute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractAttribute (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractAttribute (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4379012195506835
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(false);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          xMLFilterImpl0.endDocument();
          sAXReader0.setXMLFilter(xMLFilterImpl0);
          sAXReader0.getDispatchHandler();
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.setXMLReaderClassName("oHN!pVL\"q`?z");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class oHN!pVL\"q`?z not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("Eay;M}>>G");
      sAXReader0.addHandler("$rjXB84t=wlqEKsh#%", (ElementHandler) null);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      locator2Impl3.setSystemId("/");
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl3);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl1.getPublicId();
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl5.getSystemId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      locator2Impl5.setSystemId("/");
      locator2Impl1.setPublicId("//tmp/&v`L$K0/tmp/'pws0`5=E5");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.276430916015819
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      InputSource inputSource0 = new InputSource("");
      Object object0 = new Object();
      Namespace namespace0 = Namespace.get("p'Zq,7\"@9$]");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      inputSource0.getCharacterStream();
      QName qName0 = namespaceStack0.getQName("", "", "");
      String[] stringArray0 = new String[18];
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = QName.get("*zRwH6gZ", "p'Zq,7\"@9$]", "*zRwH6gZ");
      Element element0 = dOMDocument0.addElement(qName1);
      QName.get((String) null);
      namespace0.getPath(element0);
      stringArray0[1] = "";
      stringArray0[4] = null;
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.popElement();
      pruningElementStack0.pushElement((Element) null);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1);
      DOMElement dOMElement0 = new DOMElement(qName0, (-244));
      QName qName2 = new QName("Error on line ", namespace0, " [Coomment: \"");
      QName qName3 = new QName("*zRwH6gZ", namespace0, " [Coomment: \"");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4140916530599967
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("p'Zq,7\"@9$]", "");
      Object object0 = new Object();
      Namespace namespace0 = Namespace.get("p'Zq,7\"@9$]");
      Namespace namespace1 = (Namespace)namespace0.detach();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      inputSource0.getCharacterStream();
      QName qName0 = namespaceStack0.getQName("", "", "");
      String[] stringArray0 = new String[18];
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = new QName((String) null, namespace0, "p'Zq,7\"@9$]");
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement(qName1);
      namespace0.getPath((Element) dOMElement0);
      stringArray0[1] = "";
      stringArray0[4] = null;
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.pushElement((Element) null);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      BaseElement baseElement0 = new BaseElement("*zRwH6gZ", namespace1);
      DOMElement dOMElement1 = new DOMElement(qName0, (-244));
      QName qName2 = new QName("Error on line ", namespace0, " [Coomment: \"");
      QName qName3 = new QName("*zRwH6gZ", namespace1, " [Coomment: \"");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader();
      DOMDocument dOMDocument1 = new DOMDocument(dOMElement1);
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '';
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      charArray0[2] = 'f';
      charArray0[3] = '6';
      charArray0[4] = ',';
      charArray0[5] = 'C';
      charArray0[6] = 'V';
      charArray0[7] = 'f';
      xMLFilterImpl0.characters(charArray0, (-29), (-29));
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("  ");
      Object object0 = new Object();
      sAXReader_SAXEntityResolver0.resolveEntity("fE3", "");
      Object object1 = new Object();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("fE3", "fE3", (String) null);
      Namespace namespace0 = Namespace.get("fE3");
      namespaceStack0.contains(namespace0);
      namespaceStack0.contains(namespace0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.605671103312144
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = ":";
          QName qName0 = new QName(":");
          qName0.getDocumentFactory();
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
          Object object0 = new Object();
          qName0.equals(object0);
          sAXReader0.setStringInternEnabled(true);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
          sAXReader0.setErrorHandler(xMLFilterImpl1);
          xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
          sAXReader0.setIncludeInternalDTDDeclarations(true);
          SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
          sAXReader1.setMergeAdjacentText(true);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4201346565134503
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "http://xml.org/sax/features/string-interning";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://xml.org/sax/features/string-interning");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.getXMLFilter();
      sAXReader0.getXMLReader();
      sAXReader0.isIgnoreComments();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isIncludeInternalDTDDeclarations();
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/string-interning");
      try { 
        sAXReader0.read((Reader) stringReader0, "8'A\"+BfljZe-'k&`Uc.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document 8'A\"+BfljZe-'k&`Uc. : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.299224376350122
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("");
      try { 
        sAXReader0.read("org.dom4j.tree.AbstractAttribute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.418521658670515
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("\n  ");
      sAXReader0.removeHandler("#&_lo~8|O)");
      try { 
        sAXReader0.read((Reader) stringReader0, "Error on line ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      SAXReader sAXReader1 = new SAXReader(false);
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(xMLReader0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/features/namespaces", locatorImpl1);
      try { 
        sAXReader0.setProperty("", locatorImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      StringReader stringReader0 = new StringReader("\n  ");
      DefaultDocument defaultDocument0 = new DefaultDocument("uBError on line ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl3.getLineNumber();
      locator2Impl0.setSystemId("header");
      locator2Impl2.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl3.setPublicId("Y9$p");
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      locator2Impl2.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl5.getPublicId();
      Locator2Impl locator2Impl9 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl11 = new Locator2Impl();
      InputSource inputSource0 = new InputSource((String) null);
      SAXReader sAXReader0 = new SAXReader();
      locator2Impl5.getXMLVersion();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl1.setSystemId("//tmp/wa:B90cj,%[");
      locator2Impl1.getPublicId();
      locatorImpl0.setPublicId("//tmp/wa:B90cj,%[");
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl1.setColumnNumber(866);
      locatorImpl2.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl2);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl2);
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl1);
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl1.setLineNumber(0);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl5);
      locator2Impl7.setPublicId(";+D");
      LocatorImpl locatorImpl6 = new LocatorImpl();
      LocatorImpl locatorImpl7 = new LocatorImpl(locatorImpl6);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl4.getColumnNumber();
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("p'Zq,7\"@9$]", "");
      Namespace namespace0 = Namespace.get("p'Zq,7\"@9$]");
      Namespace namespace1 = (Namespace)namespace0.detach();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      inputSource0.getCharacterStream();
      QName qName0 = namespaceStack0.getQName("", "", "");
      String[] stringArray0 = new String[18];
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = new QName((String) null, namespace0, "p'Zq,7\"@9$]");
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement(qName1);
      namespace0.getPath((Element) dOMElement0);
      stringArray0[1] = "";
      stringArray0[4] = null;
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.pushElement((Element) null);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      BaseElement baseElement0 = new BaseElement("*zRwH6gZ", namespace1);
      DOMElement dOMElement1 = new DOMElement(qName0, (-244));
      QName qName2 = new QName("Error on line ", namespace0, " [Coomment: \"");
      QName qName3 = new QName("*zRwH6gZ", namespace1, " [Coomment: \"");
      SAXReader sAXReader0 = new SAXReader();
      DOMDocument dOMDocument1 = new DOMDocument(dOMElement1);
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(sAXParserImpl_JAXPSAXParser0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      xMLReaderAdapter0.skippedEntity("//tmp/j'6k-T`^U>kSU[0j'6k-T`^U>kSU[");
      char[] charArray0 = new char[2];
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      charArray0[0] = '5';
      charArray0[1] = '0';
      xMLReaderAdapter0.ignorableWhitespace(charArray0, (-1073), 152);
      try { 
        sAXReader0.setFeature("@nCq]g[}7+@9c<<", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: @nCq]g[}7+@9c<<
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      locator2Impl3.setSystemId("/");
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl3);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl1.getPublicId();
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      locator2Impl5.setSystemId("/");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locator2Impl4.setPublicId("Illegal Load factor: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      InputSource inputSource0 = new InputSource((String) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setIgnoreComments(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      StringReader stringReader0 = new StringReader("\n  ");
      DefaultDocument defaultDocument0 = new DefaultDocument("uBError on line ");
      assertNull(defaultDocument0.getXMLEncoding());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      Namespace.get("//tmp/lygU0;+D");
      Namespace namespace0 = Namespace.get("//tmp/tmp/tmp/JTytJ#V4Yz|K0http:/xml.org/sax/propertius/declarati!n-handler0.tmp05CAiW1U`E4A!", "http://xml.org/sax/features/namespace-prefixes");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("org.dom4j.dom.DOMNodeHelper$EmptyNodeList", "//tmp/k=I1DDIk+odb0.tmp", "");
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = new QName("", namespace0);
      Element element0 = dOMDocument0.addElement(qName1);
      namespace0.getPath(element0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.dom4j.dom.DOMNodeHelper$EmptyNodeList";
      stringArray0[1] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.pushElement((Element) null);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      DOMElement dOMElement0 = new DOMElement(qName1, (-244));
      QName qName2 = new QName("", namespace0, "//tmp/Lm-T0/tmp/tmp/wa:B90cj,%[0'mCS~Z-yFd@JjS");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("ENTITY_REFERENCE_NODE", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ENTITY_REFERENCE_NODE not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("A(<&?hM");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class A(<&?hM not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      locator2Impl2.setSystemId("");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl2.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      locator2Impl2.getColumnNumber();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.isMergeAdjacentText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXReader$SAXEntityResolver");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.bean.BeanAttributeList", "");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Z|b2.VI''CtJQD|");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Validation not supported for XMLReader: ");
      MockFile mockFile0 = new MockFile("Z|b2.VI''CtJQD|");
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Namespace namespace0 = Namespace.get("//home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|");
      QName qName0 = QName.get("qJv", namespace0, "//home/ubuntu/termite/projects/62_dom4j/Z|b2.VI''CtJQD|");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createDocType("http://xml.org/sax/features/string-interning", "org.dom4j.io.SAXReader$SAXEntityResolver", "Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("p'Zq,7\"@9$]", "");
      Namespace namespace0 = Namespace.get("p'Zq,7\"@9$]");
      Namespace namespace1 = (Namespace)namespace0.detach();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      inputSource0.getCharacterStream();
      QName qName0 = namespaceStack0.getQName("", "", "");
      String[] stringArray0 = new String[18];
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = new QName((String) null, namespace0, "p'Zq,7\"@9$]");
      qName1.equals(namespaceStack0);
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement(qName1);
      namespace0.getPath((Element) dOMElement0);
      stringArray0[1] = "";
      stringArray0[4] = null;
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.pushElement((Element) null);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      BaseElement baseElement0 = new BaseElement("*zRwH6gZ", namespace1);
      DOMElement dOMElement1 = new DOMElement(qName0, (-244));
      QName qName2 = new QName("Error on line ", namespace0, " [Coomment: \"");
      QName qName3 = new QName("*zRwH6gZ", namespace1, " [Coomment: \"");
      SAXReader sAXReader0 = new SAXReader();
      DOMDocument dOMDocument1 = new DOMDocument(dOMElement1);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("fw");
      Object object0 = new Object();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Object object1 = new Object();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.get(",3ss}");
      namespaceStack1.contains(namespace0);
      namespaceStack0.contains(namespace0);
      namespaceStack0.contains(namespace0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      Object object2 = new Object();
      namespaceStack2.getAttributeQName("//tmp/'pws0fE3", "org.jaxen.BaseXPath", "xL9>WlIXe2tUfF~^b8");
      NamespaceStack namespaceStack3 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("Error on line ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/Error on line  (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/Error on line  (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LocatorImpl locatorImpl0 = new LocatorImpl();
          Locator2Impl locator2Impl0 = new Locator2Impl();
          Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
          Locator2Impl locator2Impl2 = new Locator2Impl();
          Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
          locator2Impl1.setSystemId("//tmp/wa:B90cj,%[");
          locatorImpl0.getLineNumber();
          locator2Impl1.getPublicId();
          locatorImpl0.setPublicId("//tmp/wa:B90cj,%[");
          LocatorImpl locatorImpl1 = new LocatorImpl();
          LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
          locatorImpl1.setColumnNumber(866);
          locatorImpl2.getColumnNumber();
          Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl2);
          LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl2);
          LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl1);
          locator2Impl0.getColumnNumber();
          Locator2Impl locator2Impl5 = new Locator2Impl();
          locator2Impl1.setLineNumber(0);
          Locator2Impl locator2Impl6 = new Locator2Impl();
          LocatorImpl locatorImpl5 = new LocatorImpl();
          Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl5);
          locator2Impl7.setPublicId(";+D");
          LocatorImpl locatorImpl6 = new LocatorImpl();
          Locator2Impl locator2Impl8 = new Locator2Impl();
          locator2Impl8.getLineNumber();
          Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl1);
          LocatorImpl locatorImpl7 = new LocatorImpl();
          Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl5);
          Locator2Impl locator2Impl11 = new Locator2Impl();
          locator2Impl4.setPublicId((String) null);
          Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl10);
          Locator2Impl locator2Impl13 = new Locator2Impl();
          locator2Impl4.getPublicId();
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("E]K", "E]K");
      file0.getCanonicalPath();
      File file1 = MockFile.createTempFile("xA3hx!s7]?g5{0H>eh", "/");
      file1.toURL();
      try { 
        sAXReader0.read(file1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2959368307306476
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      Object object0 = new Object();
      Namespace namespace0 = Namespace.get("p'Zq,7\"@9$]");
      Namespace namespace1 = Namespace.get("p'Zq,7\"@9$]", "Error on line ");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("", "", "");
      String[] stringArray0 = new String[18];
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      QName qName1 = new QName("", namespace1);
      Element element0 = dOMDocument0.addElement(qName1);
      namespace0.getPath(element0);
      stringArray0[1] = "";
      stringArray0[4] = null;
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      Element[] elementArray0 = new Element[9];
      elementArray0[0] = (Element) null;
      elementArray0[1] = (Element) null;
      elementArray0[2] = (Element) null;
      elementArray0[3] = element0;
      elementArray0[4] = element0;
      elementArray0[5] = element0;
      elementArray0[6] = (Element) null;
      elementArray0[7] = (Element) null;
      elementArray0[8] = element0;
      pruningElementStack0.stack = elementArray0;
      pruningElementStack0.pushElement(element0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      DOMElement dOMElement0 = new DOMElement(qName1, 4);
      QName qName2 = new QName((String) null, namespace1, "Error on line ");
      File file0 = MockFile.createTempFile("%o`teW.F3RL$h", " [Coomment: \"");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("", "U?:Xy", "");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
