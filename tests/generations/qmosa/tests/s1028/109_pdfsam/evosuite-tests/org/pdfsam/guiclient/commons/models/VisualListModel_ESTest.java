/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 23:53:32 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Window;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyListener;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.ImagingOpException;
import java.awt.image.Kernel;
import java.awt.image.renderable.ParameterBlock;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EventListener;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8548720307766424
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 19;
      visualListModel0.data = null;
      visualListModel0.moveDownIndex((-1813));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[C`\bBVM|O{6A<7SGy");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[C`\bBVM|O{6A<7SGy");
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndex(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable0.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      Window.Type window_Type0 = Window.Type.NORMAL;
      RenderingHints renderingHints1 = new RenderingHints(hashtable1);
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type1 = Window.Type.NORMAL;
      hashMap0.put(sunHints_Key0, window_Type0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type2 = Window.Type.UTILITY;
      hashMap1.replace((RenderingHints.Key) sunHints_Key0, window_Type1, window_Type2);
      int int0 = 0;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      Object object0 = new Object();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.removeElements(intArray0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byte byte0 = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.811945234952582
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(0, 7, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 0;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 0;
      intArray0[6] = 7;
      intArray0[7] = 0;
      visualListModel0.removeElements(intArray0, true);
      int[] intArray1 = new int[5];
      intArray1[0] = 7;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 395;
      visualListModel0.reverseElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray1);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray1);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel2.rotateClockwiseElements(intArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6200896749459623
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      visualListModel0.removeElements(0, 0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.removeElementAt(0, true);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 40000;
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(40000) > toIndex(2)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2409426413877322
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 0;
      visualListModel0.removeElements(0, 0, false);
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.705698522659915
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(0, 0, true);
      int[] intArray0 = new int[8];
      intArray0[3] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.rotateClockwiseElements(intArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2383884359730457
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(0, 0, false);
      int[] intArray0 = new int[8];
      intArray0[2] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.878675371892228
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 0;
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      hashtable1.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints1 = new RenderingHints(hashtable0);
      RenderingHints renderingHints2 = new RenderingHints(hashtable0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable1.put(sunHints_Key1, sunHints_Key1);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable2 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap1 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints3 = new RenderingHints(hashtable1);
      AffineTransform affineTransform0 = new AffineTransform();
      VisualPageListItem visualPageListItem0 = null;
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      arrayList0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      int int1 = 49;
      visualListModel0.moveUpIndex(49);
      int int2 = 10;
      VisualPageListItem visualPageListItem1 = null;
      try {
        visualPageListItem1 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.233675857741236
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      hashtable0.put(sunHints_LCDContrastKey0, renderingHints0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      hashtable1.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints1 = new RenderingHints(hashtable0);
      RenderingHints renderingHints2 = new RenderingHints(hashtable0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable1.put(sunHints_Key1, sunHints_Key1);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable2 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap1 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints3 = new RenderingHints(hashtable1);
      AffineTransform affineTransform0 = new AffineTransform();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      visualListModel0.moveUpIndex(49);
      visualListModel0.addElementAt((VisualPageListItem) null, 10);
      int[] intArray0 = new int[7];
      intArray0[0] = 9;
      intArray0[1] = 10;
      intArray0[2] = 49;
      intArray0[3] = 0;
      intArray0[4] = 49;
      intArray0[5] = 49;
      intArray0[6] = 0;
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("KH{*pmP(}3we-B#$I");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.spliterator();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "]a~.h)Og-K,%/Tis");
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedHashSet0);
      String string0 = "KH{*pmP(}3we-B#$I";
      File file0 = MockFile.createTempFile("Ignoring attempt to add an existent listener.", "AknN");
      MockFile.createTempFile("Ignoring attempt to add an existent listener.", "DR#8VNO\"");
      String string1 = "";
      MockFile mockFile0 = new MockFile("KH{*pmP(}3we-B#$I");
      try { 
        MockFile.createTempFile("DR#8VNO\"", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9966392780576343
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable0.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      hashtable0.put(sunHints_Key1, sunHints_Key1);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints1 = new RenderingHints(hashtable0);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable2 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      hashtable2.put(sunHints_Key0, defaultEditorKit_DefaultKeyTypedAction0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(1497);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel1.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9226853935616632
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      int[] intArray0 = new int[6];
      intArray0[0] = 2222;
      intArray0[1] = 14;
      intArray0[2] = 14;
      intArray0[3] = 1421;
      intArray0[4] = 14;
      intArray0[5] = 265;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      boolean boolean0 = true;
      int[] intArray1 = new int[1];
      intArray1[0] = 180;
      try { 
        visualListModel0.removeElements(intArray1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 181
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.515677514642442
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 1863;
      intArray0[1] = 14;
      intArray0[2] = (-1);
      intArray0[3] = 265;
      intArray0[4] = 1421;
      intArray0[5] = 180;
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[2];
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.reverseElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      AffineTransform affineTransform0 = new AffineTransform();
      int[] intArray2 = new int[5];
      visualListModel0.moveUpIndexes(intArray2);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.removeElements(intArray2, true);
      visualListModel2.rotateAnticlockwiseElements(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.515677514642442
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 1863;
      intArray0[1] = 14;
      intArray0[2] = (-1);
      intArray0[3] = 265;
      intArray0[4] = 1421;
      intArray0[5] = 180;
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[1];
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.reverseElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      AffineTransform affineTransform0 = new AffineTransform();
      int[] intArray2 = new int[5];
      visualListModel0.moveUpIndexes(intArray2);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.removeElements(intArray2, true);
      visualListModel2.rotateAnticlockwiseElements(intArray1);
      visualListModel0.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1397850293099174
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1872);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      HashMap<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashMap0 = new HashMap<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable0 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1871
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4669667702348366
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable0.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      BiFunction<Object, Object, DefaultEditorKit.DefaultKeyTypedAction> biFunction0 = (BiFunction<Object, Object, DefaultEditorKit.DefaultKeyTypedAction>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashtable0.computeIfPresent(sunHints_Key0, biFunction0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      hashtable0.put(sunHints_Key1, sunHints_Key1);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.undeleteElements(intArray0);
      VisualListModel visualListModel4 = new VisualListModel();
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      HashMap<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashMap0 = new HashMap<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable0 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable1 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction1 = new DefaultEditorKit.DefaultKeyTypedAction();
      hashtable0.put(sunHints_Key0, defaultEditorKit_DefaultKeyTypedAction0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(3);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.234044601196686
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Vector<VisualPageListItem> vector0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[8];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type0 = Window.Type.NORMAL;
      Window.Type window_Type1 = Window.Type.NORMAL;
      RenderingHints renderingHints1 = new RenderingHints(hashtable0);
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Window.Type window_Type2 = Window.Type.POPUP;
      hashMap2.put(sunHints_Key0, window_Type2);
      int int0 = visualListModel0.getSize();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable1 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable2 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints1 = new RenderingHints(hashtable1);
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setToRotation((-815.761298148821), 0.0, 581.02588, (-1.0));
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      assertEquals(8, visualListModel0.getSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2487138225718355
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.prependAllElements(vector0);
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Window.Type window_Type0 = Window.Type.POPUP;
      hashMap0.put(sunHints_Key0, window_Type0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.pollFirst();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(arrayList0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      treeSet1.clear();
      TreeSet<VisualPageListItem> treeSet2 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet3 = new TreeSet<VisualPageListItem>();
      treeSet1.size();
      int[] intArray0 = new int[4];
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9896217341979852
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type0 = Window.Type.POPUP;
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      hashMap0.put(sunHints_Key0, window_Type0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      hashMap1.putAll(hashMap0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setToRotation((double) 5831, 905.95, (-1.0), 0.0);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      visualListModel0.moveDownIndex(0);
      Object object0 = new Object();
      visualListModel1.moveUpIndex(4372);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1385;
      floatArray0[1] = (float) 5831;
      floatArray0[2] = (-237.0F);
      floatArray0[3] = (float) 4372;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(5831, 1385, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 4 and should be 8075935
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4400951351245586
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet2 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet3 = new TreeSet<VisualPageListItem>();
      int[] intArray0 = new int[1];
      intArray0[0] = 1648;
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.undeleteElements(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel2.rotateClockwiseElements(intArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      OperationRegistry operationRegistry0 = new OperationRegistry();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6603877744520825
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 0;
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-1442);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1442
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.243138630046909
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[3];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      jComboBox0.setVerifyInputWhenFocusTarget(false);
      jComboBox0.requestFocus();
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      visualListModel1.removeListDataListener(jComboBox0);
      int[] intArray0 = new int[3];
      intArray0[1] = 760;
      intArray0[2] = 760;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable0.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      BiFunction<Object, Object, DefaultEditorKit.DefaultKeyTypedAction> biFunction0 = (BiFunction<Object, Object, DefaultEditorKit.DefaultKeyTypedAction>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashtable0.computeIfPresent(sunHints_Key0, biFunction0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Object object0 = new Object();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints1 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      int[] intArray0 = new int[25];
      intArray0[0] = (-1629);
      intArray0[1] = (-1629);
      visualListModel0.getElements();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      treeSet1.clear();
      TreeSet<VisualPageListItem> treeSet2 = new TreeSet<VisualPageListItem>();
      TreeSet<String> treeSet3 = new TreeSet<String>();
      treeSet1.containsAll(treeSet3);
      TreeSet<VisualPageListItem> treeSet4 = new TreeSet<VisualPageListItem>();
      treeSet1.size();
      int[] intArray0 = new int[4];
      intArray0[0] = 1648;
      intArray0[3] = 1648;
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1647
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4631572464253124
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet2 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet3 = new TreeSet<VisualPageListItem>();
      int[] intArray0 = new int[4];
      intArray0[0] = 1648;
      int[] intArray1 = new int[9];
      intArray1[0] = 1648;
      intArray1[1] = 1648;
      intArray1[4] = 1648;
      intArray1[5] = 1648;
      visualListModel0.reverseElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      AffineTransform affineTransform0 = new AffineTransform();
      visualListModel1.moveUpIndexes(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel2.moveDownIndexes(intArray1);
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1648
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.243138630046909
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      treeSet1.clear();
      TreeSet<VisualPageListItem> treeSet2 = new TreeSet<VisualPageListItem>();
      treeSet1.size();
      int[] intArray0 = new int[4];
      intArray0[0] = 1648;
      intArray0[3] = 1648;
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1648
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet2 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet3 = new TreeSet<VisualPageListItem>();
      treeSet1.size();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[3] = 1648;
      visualListModel0.moveUpIndexes(intArray0);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1648
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.669435108494575
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 1648;
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 1648;
      intArray0[1] = 5831;
      intArray0[2] = 5831;
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1648
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.243138630046909
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[13];
      int[] intArray0 = new int[7];
      intArray0[3] = 1648;
      intArray0[1] = 1648;
      visualListModel0.elementChanged((VisualPageListItem) null);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable1 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      HashMap<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashMap1 = new HashMap<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable2 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>(hashMap1);
      Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction> hashtable3 = new Hashtable<RenderingHints.Key, DefaultEditorKit.DefaultKeyTypedAction>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction1 = new DefaultEditorKit.DefaultKeyTypedAction();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction2 = new DefaultEditorKit.DefaultKeyTypedAction();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "d#pqa{YPbs[7@8i!sy";
      stringArray0[1] = "TKuT";
      stringArray0[2] = "d#pqa{YPbs[7@8i!sy";
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      JComboBox<String> jComboBox1 = new JComboBox<String>();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jComboBox0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      JComboBox<String> jComboBox2 = new JComboBox<String>(stringArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      treeSet1.size();
      Object object0 = new Object();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      assertTrue(vector0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8786753718922282
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[13];
      int[] intArray0 = new int[6];
      intArray0[0] = 2222;
      intArray0[1] = 14;
      intArray0[2] = 14;
      intArray0[3] = 1421;
      intArray0[4] = 14;
      intArray0[5] = 265;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      boolean boolean0 = false;
      int[] intArray1 = new int[1];
      intArray1[0] = 180;
      try { 
        visualListModel0.removeElements(intArray1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 180
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Window.Type.values();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((WindowStateListener) aWTEventMulticaster0, (WindowStateListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":bfb9>;Y";
      stringArray0[1] = "GB";
      stringArray0[2] = ",";
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      JComboBox<String> jComboBox1 = new JComboBox<String>();
      JComboBox<String> jComboBox2 = new JComboBox<String>(stringArray0);
      jComboBox0.isEditable();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.rotateClockwiseElements(intArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "\"6B";
      MockFile mockFile0 = new MockFile("\"6B", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.toURI();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "\"6B", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byte byte1 = (byte) (-41);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)79;
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0474725747311235
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.iterator();
      visualListModel0.data = vector0;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(0, 0, false);
      int[] intArray0 = new int[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[2] = 0;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0134399594822057
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-1);
      visualListModel0.addElement((VisualPageListItem) null);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)7;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      MockFile.createTempFile("i_73Xr}Z$*", "i_73Xr}Z$*");
      MockFile mockFile0 = new MockFile("i_73Xr}Z$*");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      Hashtable<RenderingHints.Key, Object> hashtable2 = new Hashtable<RenderingHints.Key, Object>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Hashtable<RenderingHints.Key, Object> hashtable3 = new Hashtable<RenderingHints.Key, Object>();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      hashtable3.put(sunHints_Key0, defaultEditorKit_DefaultKeyTypedAction0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable3);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable4 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      visualListModel0.getElementAt(0);
      // Undeclared exception!
      try { 
        hashtable3.put(sunHints_Key1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type0 = Window.Type.NORMAL;
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type1 = Window.Type.NORMAL;
      Window.Type window_Type2 = Window.Type.NORMAL;
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Window.Type window_Type3 = Window.Type.POPUP;
      HashMap<RenderingHints.Key, Window.Type> hashMap3 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Window.Type window_Type4 = Window.Type.POPUP;
      hashMap3.put(sunHints_Key0, window_Type4);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 0;
      boolean boolean0 = false;
      int int1 = 7;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(0, 7, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-1813));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[C`\bBVM|O{6A<7SGy");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[C`\bBVM|O{6A<7SGy");
      visualListModel0.moveUpIndex(19);
      visualListModel0.getElementAt(19);
      // Undeclared exception!
      try { 
        visualListModel0.subList(19, (-200), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(19) > toIndex(-200)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(666, (-1163), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(666) > toIndex(-1163)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      visualListModel0.subList(0, 0, true);
      VisualListModel visualListModel1 = new VisualListModel();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.close();
      pipedInputStream0.mark(11);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      AffineTransform affineTransform0 = new AffineTransform();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-2910), (-2910), false);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2910);
      floatArray0[1] = (float) (-2910);
      floatArray0[2] = (float) (-2910);
      floatArray0[3] = (float) (-2910);
      floatArray0[4] = (float) (-2910);
      floatArray0[5] = (float) (-2910);
      floatArray0[6] = (float) (-2910);
      floatArray0[7] = (float) (-2910);
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (-2910));
        fail("Expecting exception: ImagingOpException");
      
      } catch(ImagingOpException e) {
         //
         // Unable to invert transform AffineTransform[[-2910.0, -2910.0, -2910.0], [-2910.0, -2910.0, -2910.0]]
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type0 = Window.Type.POPUP;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Window.Type window_Type1 = Window.Type.NORMAL;
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type2 = Window.Type.POPUP;
      hashMap2.put(sunHints_Key0, window_Type2);
      hashMap2.putAll(hashMap0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      visualListModel0.moveDownIndex(0);
      Object object0 = new Object();
      visualListModel0.moveUpIndex(0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type0 = Window.Type.POPUP;
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type1 = Window.Type.NORMAL;
      Window.Type window_Type2 = Window.Type.NORMAL;
      hashMap0.put(sunHints_Key0, window_Type2);
      hashMap0.put(sunHints_Key0, window_Type1);
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type3 = Window.Type.NORMAL;
      HashMap<RenderingHints.Key, Window.Type> hashMap3 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      hashMap3.put(sunHints_Key1, window_Type3);
      HashMap<RenderingHints.Key, Window.Type> hashMap4 = new HashMap<RenderingHints.Key, Window.Type>();
      hashMap4.putAll(hashMap2);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      visualListModel0.moveDownIndex(1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap1 = new HashMap<RenderingHints.Key, DefaultTableModel>(114);
      RenderingHints renderingHints1 = new RenderingHints(hashMap1);
      AffineTransform affineTransform0 = new AffineTransform();
      affineTransform0.setToRotation(23.842298306105434, 0.0, 429.86323, (-1.0));
      visualListModel0.getValidElements();
      visualListModel0.addAllElements((-4104), (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Window.Type.values();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      Class<DefaultEditorKit.DefaultKeyTypedAction> class0 = DefaultEditorKit.DefaultKeyTypedAction.class;
      AWTEventMulticaster.add((FocusListener) aWTEventMulticaster3, (FocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster1, class0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster5, (ContainerListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ActionListener) aWTEventMulticaster3, (ActionListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((ActionListener) aWTEventMulticaster0, (ActionListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((KeyListener) aWTEventMulticaster2, (KeyListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.pollFirst();
      visualListModel0.updateElementAt(126, (VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = 1863;
      intArray0[1] = 56;
      intArray0[2] = (-1);
      intArray0[3] = 265;
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      jComboBox0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jComboBox0.isEditable();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawQuery());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 1863;
      intArray0[1] = 56;
      intArray0[2] = (-10);
      intArray0[3] = 265;
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type0 = Window.Type.POPUP;
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      hashMap0.put(sunHints_Key0, window_Type0);
      Window.Type window_Type1 = Window.Type.UTILITY;
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type2 = Window.Type.NORMAL;
      hashMap0.put(sunHints_Key0, window_Type2);
      HashMap<RenderingHints.Key, Window.Type> hashMap3 = new HashMap<RenderingHints.Key, Window.Type>();
      hashMap3.replace((RenderingHints.Key) sunHints_Key0, (Window.Type) null, (Window.Type) null);
      Window.Type window_Type3 = Window.Type.NORMAL;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(110, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 110
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      visualListModel0.getListDataListeners();
      visualListModel0.removeElements(0, 0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        MockFile.createTempFile("INFO", "INFO");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>();
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable1 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      AffineTransform affineTransform0 = new AffineTransform();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements((-1), (Collection<VisualPageListItem>) arrayList0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 92;
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.descendingSet();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type0 = Window.Type.POPUP;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type1 = Window.Type.POPUP;
      hashMap0.put(sunHints_Key0, window_Type1);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(1543, (Collection<VisualPageListItem>) treeSet1);
      assertNotSame(treeSet1, treeSet0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      visualListModel0.prependAllElements(treeSet0);
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Window.Type window_Type0 = Window.Type.NORMAL;
      hashMap0.put(sunHints_Key0, window_Type0);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Window.Type window_Type1 = Window.Type.POPUP;
      URI uRI0 = MockURI.aHttpURI;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getValidElements();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(110, "org.apache.log4j.Logger");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(1260, 256, true);
      String string0 = "";
      String string1 = "D#8VNO\"";
      String string2 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "log4j.configuration");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      URI uRI0 = MockURI.aHttpURI;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.elementsChanged();
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Window.Type.values();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      Class<DefaultEditorKit.DefaultKeyTypedAction> class0 = DefaultEditorKit.DefaultKeyTypedAction.class;
      AWTEventMulticaster.add((FocusListener) aWTEventMulticaster3, (FocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster1, class0);
      AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster4, (ContainerListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ActionListener) aWTEventMulticaster0, (ActionListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((KeyListener) aWTEventMulticaster2, (KeyListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      Window.Type window_Type0 = Window.Type.POPUP;
      hashMap1.put(sunHints_Key0, window_Type0);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      HashMap<ChronoLocalDate, Object> hashMap1 = new HashMap<ChronoLocalDate, Object>();
      Window.Type window_Type0 = Window.Type.NORMAL;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type1 = Window.Type.NORMAL;
      hashMap0.put(sunHints_Key0, window_Type1);
      Window.Type window_Type2 = Window.Type.POPUP;
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap3 = new HashMap<RenderingHints.Key, Window.Type>();
      HashMap<RenderingHints.Key, Window.Type> hashMap4 = new HashMap<RenderingHints.Key, Window.Type>(hashMap2);
      hashMap4.put(sunHints_Key0, window_Type2);
      hashMap3.put(sunHints_Key0, (Window.Type) null);
      HashMap<RenderingHints.Key, Window.Type> hashMap5 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type3 = Window.Type.NORMAL;
      Window.Type window_Type4 = Window.Type.NORMAL;
      hashMap4.replace((RenderingHints.Key) sunHints_Key0, window_Type3, window_Type4);
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      String string0 = "log4j.factory";
      String string1 = "";
      MockFile mockFile0 = new MockFile((File) null, "");
      String string2 = "2ipV$\\%h/5-#wC`LL";
      String string3 = "S[q8E[S2\\Uol,";
      String string4 = "<RtD4tI>1X(HK";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "<RtD4tI>1X(HK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = (-3687);
      intArray0[2] = (-3687);
      int int2 = 12;
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getParameters();
      ParameterBlock parameterBlock1 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock1.getParameters();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector0);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      parameterBlock0.add(0.0F);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      CollectionOp collectionOp0 = new CollectionOp("1<#x0", parameterBlock2, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"1<#x0\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      LinkedHashSet<DefaultTableModel> linkedHashSet0 = new LinkedHashSet<DefaultTableModel>();
      vector0.containsAll(linkedHashSet0);
      visualListModel0.appendAllElements(vector0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      String string0 = "ERROR";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ERROR");
      visualListModel0.removeElements(2, (-1), false);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      String string1 = "S[q8E[S2\\Uol,";
      File file0 = MockFile.createTempFile("tnUDqbV;2Pgl,~C4)", "");
      MockFile mockFile0 = new MockFile(file0, "S[q8E[S2Uol,");
      mockFile0.deleteOnExit();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type0 = Window.Type.POPUP;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Window.Type window_Type1 = Window.Type.NORMAL;
      hashMap0.put(sunHints_Key0, window_Type1);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type window_Type2 = Window.Type.POPUP;
      hashMap2.put(sunHints_Key0, window_Type2);
      hashMap2.putAll(hashMap0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      visualListModel0.moveDownIndex(0);
      Object object0 = new Object();
      visualListModel0.moveUpIndex(1811);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Window.Type.values();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster2);
      Class<DefaultEditorKit.DefaultKeyTypedAction> class0 = DefaultEditorKit.DefaultKeyTypedAction.class;
      AWTEventMulticaster.add((FocusListener) null, (FocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster1, class0);
      AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster3, (ContainerListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ActionListener) aWTEventMulticaster0, (ActionListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((KeyListener) aWTEventMulticaster2, (KeyListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster3, (HierarchyBoundsListener) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      jComboBox0.setTransferHandler((TransferHandler) null);
      JComboBox<String> jComboBox1 = new JComboBox<String>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.removeElements(126, 126, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1662);
      visualListModel0.subList((-1), (-1662));
      intArray0[1] = (-1);
      URI uRI0 = MockURI.aHttpURI;
      MockURI.relativize(uRI0, uRI0);
      MockURI.normalize(uRI0);
      String string0 = "";
      String string1 = "nqYPGl*(<3";
      File file0 = MockFile.createTempFile("nqYPGl*(<3", "");
      MockFile mockFile0 = new MockFile(file0, "nqYPGl*(<3");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("Z", "\" was loaded by ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(2, 2, true);
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.relativize((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-51), (-51), true);
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.relativize((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0);
      String string0 = "The Hiearchy.overrideAsNeeded method has been deprecated.";
      String string1 = "m$PV$\"'$RfSoSL";
      try { 
        MockURI.URI("m$PV$\"'$RfSoSL", "qbXVc", "ua}G*=]qZZq<", "org.pdfsam.guiclient.commons.models.VisualListModel");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: m$PV$\"'$RfSoSL://qbXVcua%7DG*=%5DqZZq%3C#org.pdfsam.guiclient.commons.models.VisualListModel
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7039917864324616
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualListModel0.setData(visualPageListItemArray0);
      Window.Type.values();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qLa/xua#C#Lv7";
      stringArray0[1] = "qLa/xua#C#Lv7";
      stringArray0[2] = "qLa/xua#C#Lv7";
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      JComboBox<String> jComboBox1 = new JComboBox<String>();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jComboBox0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      JComboBox<String> jComboBox2 = new JComboBox<String>(stringArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      Object object0 = new Object();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel1.setData(vector0);
      assertEquals(8, visualListModel0.getSize());
      assertEquals(8, visualListModel1.getSize());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[3] = 1;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1, (-1.0));
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Point2D point2D0 = affineTransform0.deltaTransform((Point2D) point0, (Point2D) point0);
      Object[][] objectArray0 = new Object[7][5];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) gridBagLayout0;
      objectArray1[1] = (Object) gridBagLayout0;
      objectArray1[2] = (Object) point2D0;
      objectArray1[0] = (Object) gridBagLayout0;
      objectArray1[4] = (Object) 1;
      objectArray1[5] = (Object) point0;
      objectArray1[6] = (Object) point2D0;
      objectArray1[7] = (Object) affineTransform0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[0];
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[5];
      objectArray3[0] = (Object) gridBagLayout0;
      objectArray3[1] = (Object) visualListModel0;
      objectArray3[2] = (Object) affineTransform0;
      objectArray3[3] = (Object) point2D0;
      objectArray3[4] = (Object) 1;
      objectArray0[2] = objectArray3;
      objectArray0[3] = objectArray3;
      Object[] objectArray4 = new Object[0];
      objectArray0[4] = objectArray4;
      Object[] objectArray5 = new Object[1];
      objectArray5[0] = (Object) affineTransform0;
      objectArray0[5] = objectArray5;
      JTable jTable0 = new JTable(objectArray0, objectArray3);
      gridBagLayout0.preferredLayoutSize(jTable0);
      int[] intArray1 = new int[5];
      intArray1[0] = (int) (byte)125;
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Window.Type.values();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      Class<DefaultEditorKit.DefaultKeyTypedAction> class0 = DefaultEditorKit.DefaultKeyTypedAction.class;
      AWTEventMulticaster.add((FocusListener) aWTEventMulticaster3, (FocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster1, class0);
      AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster4, (ContainerListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ActionListener) aWTEventMulticaster0, (ActionListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((KeyListener) aWTEventMulticaster2, (KeyListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.pollFirst();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HashMap<RenderingHints.Key, Window.Type> hashMap0 = new HashMap<RenderingHints.Key, Window.Type>();
      hashMap0.clone();
      Window.Type window_Type0 = Window.Type.NORMAL;
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type1 = Window.Type.POPUP;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Window.Type window_Type2 = Window.Type.POPUP;
      hashMap0.put(sunHints_Key0, window_Type2);
      Window.Type window_Type3 = Window.Type.POPUP;
      hashMap0.put(sunHints_Key1, window_Type3);
      Window.Type window_Type4 = Window.Type.POPUP;
      hashMap0.put(sunHints_Key0, window_Type4);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      HashMap<RenderingHints.Key, Window.Type> hashMap1 = new HashMap<RenderingHints.Key, Window.Type>();
      Window.Type.values();
      HashMap<RenderingHints.Key, Window.Type> hashMap2 = new HashMap<RenderingHints.Key, Window.Type>();
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Window.Type window_Type5 = Window.Type.UTILITY;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(1024, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1024
         //
         verifyException("java.util.Vector", e);
      }
  }
}
