/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 00:05:46 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)101;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[6] = (byte)38;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      QuickServer quickServer0 = new QuickServer("WA[!KYtWOTo`lq#I*Mw", 2490);
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      dBObjectPoolConfig0.setDbPoolUtil("{TheClient ");
      dBObjectPoolConfig0.setDbPoolUtil("WA[!KYtWOTo`lq#I*Mw");
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      quickServer0.setServiceState((byte)0);
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.setConfig(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg(", Event: ");
      theClient0.toString();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg(", Event: ");
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.toString();
      theClient0.getClientEvent();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(0L);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      theClient0.getSocketChannel();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4866413644630816
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setTimeout((-1344));
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getMaxConnectionMsg();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getMaxAuthTry();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.getTrusted();
      theClient0.setTimeout(15);
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxAuthTryMsg();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.setSocket((Socket) null);
      theClient0.toString();
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      theClient0.getClientWriteHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.toString();
      assertEquals(15, theClient0.getTimeout());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      quickServer0.clone();
      quickServer0.setRawCommunicationMaxLength(0);
      theClient0.setServer(quickServer0);
      theClient0.getClientAuthenticationHandler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getSocket();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getServer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(0);
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      mockSocket0.getPort();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.toString();
      mockSocket0.getChannel();
      theClient0.getSocket();
      System.setCurrentTimeMillis((-3063L));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.626722286104588
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServer.getVersionNo();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      theClient0.getClientWriteHandler();
      quickServerConfig0.setClientWriteHandler((ClientWriteHandler) null);
      quickServerConfig0.setClientEventHandler("no socket");
      quickServer0.setApplicationJarPath((String) null);
      quickServer0.getSecurityManager();
      quickServerConfig0.setConsoleLoggingLevel("Gx5Zh~Ox\"8N[<n,p");
      quickServer0.run();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis(0L);
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.getAuthenticator();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(1);
      theClient0.getTimeout();
      CommandHandler commandHandler1 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1);
      commandHandler1.closingConnection(blockingClientHandler0);
      theClient0.getAuthenticator();
      BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler();
      try { 
        commandHandler1.gotConnected(blockingClientHandler1);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTrusted(false);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getAuthenticator();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4869603437294296
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-1344));
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientEventHandler();
      theClient0.toString();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeout();
      theClient0.getClientEvent();
      theClient0.getTrusted();
      theClient0.setTimeout(0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.setSocket((Socket) null);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      try { 
        QuickServer.load("Mj|bS>}{v");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      Data data0 = new Data();
      data0.setLastAsked("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      data0.setLastAsked("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.setClientData(data0);
      data0.setLastAsked("");
      data0.setUsername("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getClientData();
      theClient0.getSocketChannel();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis(20L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuickServer quickServer0 = new QuickServer();
      TheClient theClient0 = new TheClient();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3805678363275375
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry((-993));
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      QuickServer quickServer0 = new QuickServer((String) null);
      theClient1.setTimeout(3567);
      quickServer0.setClientCommandHandler("ciRui3a");
      quickServer0.getServerHooks();
      Integer integer0 = new Integer((-993));
      QuickServer quickServer1 = new QuickServer("ciRui3a");
      QSAdminServerConfig qSAdminServerConfig0 = new QSAdminServerConfig();
      qSAdminServerConfig0.setClientBinaryHandler("{TheClient ");
      qSAdminServerConfig0.getAccessConstraintConfig();
      quickServer1.setAccessConstraintConfig((AccessConstraintConfig) null);
      theClient0.setServer(quickServer1);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientCommandHandler();
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTry((-467));
      theClient0.toString();
      theClient1.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getMaxAuthTry();
      theClient0.toString();
      theClient0.setMaxAuthTry((-1));
      theClient0.getMaxAuthTry();
      theClient1.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      assertEquals((-1), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Data data0 = new Data();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)0;
      data0.setPassword(byteArray0);
      data0.setPassword((byte[]) null);
      data0.setLastAsked("Jh(_NJI7CX\"0");
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      CommandHandler commandHandler1 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler1);
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("A");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S6^/|93;*cXXvfY");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S6^/|93;*cXXvfY");
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("aBf'~J>R$CWM}?8|");
      theClient0.getMaxAuthTryMsg();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sdpz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setMaxAuthTry(125);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(125, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis((-2407));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient0.setMaxConnectionMsg("{TheClient ");
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getClientCommandHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      ClientHandler clientHandler0 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        authenticator0.handleAuthentication((ClientHandler) null, (Object) "6@\"Dsm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String/Byte mode not implemented!
         //
         verifyException("org.quickserver.net.server.QuickAuthenticationHandler", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[5];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "/server-banner");
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[3] = (byte)76;
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(theClient0.getTrusted());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sdpz");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
