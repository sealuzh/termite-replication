/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 22:55:34 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.764789011525621
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(1207, "ztx?x#gm'>A*&Jc", "ztx?x#gm'>A*&Jc", 1207);
      byte[] byteArray0 = player0.pack();
      System.setCurrentTimeMillis(373L);
      player0.gangStrength();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ztx?x#gm'>A*&Jc0Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      player0.setX(1);
      Player player1 = new Player((short)4919, "!X\"8sY/C", (short)4919);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.isJoinOK(player0, true);
      player1.getY();
      player0.getName();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.pack();
      System.setCurrentTimeMillis(1392409296320L);
      player0.isJoinOK(player1, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      File file0 = MockFile.createTempFile("ztx?x#gm'>A*&Jc", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ");
      MockFile mockFile0 = new MockFile(file0, "!X\"8sY/C");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "ztx?x#gm'>A*&Jc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ztx?x#gm'>A*&Jc\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1502035530702606
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      Player player2 = new Player();
      player2.setJoinOK(player0, false);
      player1.isJoinOK(player2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = player2.isJoinOK(player0, false);
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = player0.getName();
      assertEquals("Player-1", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[0] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player3 = new Player();
      System.setCurrentTimeMillis(1392409296320L);
      boolean boolean1 = player2.isJoinOK(player3, false);
      assertEquals("0.0.0.0", player2.getIP());
      assertTrue(player2.isConnected());
      assertEquals(0, player2.getPictureId());
      assertEquals(1, player2.getStrength());
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertFalse(player2.isDead());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(667, "X_", "X_", 399);
      player0.setDead((long) 667, true);
      player0.setMoney((-1.0F));
      player0.setX(667);
      player0.setDead();
      player0.type();
      player0.getMoney();
      System.setCurrentTimeMillis((short)4919);
      PipedInputStream pipedInputStream0 = new PipedInputStream(667);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 846);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)5;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6304386871303556
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(0, ";?bms>YyfM)e,O!~c", ";?bms>YyfM)e,O!~c", 0, 0);
      Player player1 = new Player(0, "state.Player$JoinInfo", ";?bms>YyfM)e,O!~c", 4919, 4919);
      player0.remove(player1);
      player0.gangStrength();
      player1.setJoinOK(player0, false);
      Player player2 = new Player(4919);
      player2.boss = (Party) player0;
      player1.isJoinOK(player2, false);
      player1.isJoinOK(player0, true);
      player2.isJoinOK(player1, true);
      player0.getY();
      player1.getName();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-80), 31769);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1024;
      Player player0 = new Player(13827, (String) null, ":", 1024, 13827);
      player0.setY(0.0F);
      player0.type();
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.setJoinOK(player1, false);
      player0.type();
      player0.type();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player1.setX((-137.8913F));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gui.ModuleBrowserDialog$ModuleFilter");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 5);
      try { 
        dataInputStream0.readFully(byteArray0, 10, 5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      Party party0 = new Party();
      Party party1 = new Party((byte)4);
      party1.add(party0);
      party0.remove(party1);
      Player player0 = new Player(1, (String) null, "0.0.0.0", 2519);
      player0.gangStrength();
      Player player1 = new Player(2459, "3L8;7-'m6*", (String) null, 0);
      player1.setJoinOK(player0, false);
      player1.isJoinOK(player0, true);
      player1.getName();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(4919, (String) null, 635);
      player0.getMoney();
      player0.setConnected(false);
      player0.setZ((-1.0F));
      player0.setDead((long) 635, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      player0.setDead();
      player0.getName();
      player0.toString();
      player0.getMoney();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      player0.toString();
      player0.getMoney();
      player0.toString();
      player0.getY();
      float float0 = player0.getMoney();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-4145), "vA\"A#'MA=nO F", ";?bms>YyfMw)e,O!~c", 639, 639);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = Packable.ACTION;
      Player player1 = new Player(639, ";?bms>YyfMw)e,O!~c", (short)4919);
      player1.setJoinOK(player0, false);
      player1.isJoinOK(player0, true);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.skip((-1805L));
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(2825);
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.head = (Party) player1;
      player0.head.remove(player1);
      player0.gangStrength();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 2825);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8542306045431616
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(1660, "", "", 257, (-4217));
      player0.gangStrength();
      Player player1 = new Player();
      player0.getStrength();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      Party party0 = new Party((-4217));
      player0.remove(player1);
      int int0 = player0.gangStrength();
      assertEquals((-4217), int0);
      
      Player player2 = new Player(10, "", "", (-889));
      player1.setJoinOK(player2, false);
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
      assertEquals("0.0.0.0", player1.getIP());
      
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertEquals((-889), player2.getPictureId());
      assertEquals(1, player2.getStrength());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertFalse(boolean0);
      assertFalse(player2.isDead());
      assertEquals(10.0F, player2.getX(), 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-7);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zQ>NZ.");
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-86);
      System.setCurrentTimeMillis((byte)1);
      Player player0 = new Player(945, "zQ>NZ.", (String) null, 2191, 2072);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0, "VE(B{&)H{@4x6f-4N9", (String) null, 0, (-662));
      player0.setDead((-1388L), true);
      player0.setConnected(true);
      player0.getTimeOfDeath();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4569);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-2050));
      player0.setDead();
      boolean boolean0 = player0.isDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setY((-1443.1981F));
      Player player1 = new Player(0, "", 0);
      player0.head = (Party) player1;
      player0.toString();
      player1.setZ(0.2F);
      player0.getTimeOfDeath();
      player1.toString();
      assertEquals(0.2F, player1.getZ(), 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-2267), "", 5);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      player0.setZ(10.8338785F);
      pipedOutputStream0.write(1706);
      player0.getY();
      player0.getZ();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)117;
      byteArray0[5] = (byte)16;
      player0.unpack(byteArray0);
      Player player1 = new Player(5, "z[/o85^TIF3odY", "|-}(pip/P@", (-1097), (-1097));
      player0.setX(0.2F);
      System.setCurrentTimeMillis((-2525L));
      float float0 = player0.getZ();
      assertEquals(0.2F, player0.getX(), 0.01F);
      assertEquals(10.8338785F, float0, 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4869603437294296
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Gn<1+3qa}N");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Player player0 = new Player((-30), ";?bms>YyfM)e,O!~c", ";?bms>YyfM)e,O!~c", (-30), (-30));
      player0.setX((-4755.0F));
      byte[] byteArray0 = player0.pack();
      byte[] byteArray1 = player0.pack();
      player0.unpack(byteArray1);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Gn<1+3qa}N");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ";?bms>YyfM)e,O!~c");
      player0.getStrength();
      player0.getMoney();
      int int0 = Packable.PLAYER;
      player0.unpack(byteArray0);
      player0.reset(true);
      player0.getZ();
      player0.setDead();
      player0.setY(5);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";?bms>YyfM)e,O!~c");
      mockPrintStream0.println(true);
      mockPrintStream0.println((-4755.0F));
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) ";?bms>YyfM)e,O!~c";
      Player player1 = new Player(4362);
      player0.isJoinOK(player1, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.getPictureId();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 6;
      Player player0 = new Player(6, ";?jbms>Yy:fM)e,O!~c", ";?jbms>Yy:fM)e,O!~c", 6, 6);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-86);
      Player player0 = new Player();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Player player0 = new Player((byte)9, "xqYBA=n7LG>Q 70F'", "s(K.>T-~", (byte)1, 4919);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player((byte)4, "cPs PlO@56h#7Gp$1=", "Io(lt?]6sn2RDR8KX", 27, (byte)4);
      player0.pack();
      player0.getX();
      player0.pack();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2, "", "", 2);
      player0.id = 2;
      player0.gangStrength();
      player0.getIP();
      player0.getName();
      player0.getZ();
      Player player1 = new Player();
      player1.setDead((long) 2);
      Player player2 = new Player(141);
      player1.isJoinOK(player0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.627801908236842
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-30), ";?bms>YyfM)e,O!~c", ";?bms>YyfM)e,O!~c", (-30), (-30));
      player0.setX((-4755.0F));
      player0.pack();
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      player0.getStrength();
      player0.getMoney();
      int int0 = Packable.ACTION;
      player0.setZ((-1.0F));
      player0.reset(true);
      player0.getZ();
      player0.setDead();
      player0.setY(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Gn<1+3qa}N/");
      Player player1 = new Player(2, "", (-30));
      player0.remove(player1);
      player1.isJoinOK(player0, true);
      player1.isJoinOK(player0, false);
      player1.getY();
      player0.getName();
      player0.getY();
      player0.type();
      player0.pack();
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("9o}z-eHqj&T8FG=|2o", ">oy:.h9F_FytM5\"&H");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      Player player0 = new Player((-1), (String) null, "9o}z-eHqj&T8FG=|2o", (-2951), (-2951));
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.913851801455974
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(0, ";?bms>YyfM)e,OB~c", ";?bms>YyfM)e,OB~c", 0, 0);
      int int0 = player0.getStrength();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.remove((Party) null);
      int int1 = player0.gangStrength();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Player player1 = new Player();
      player1.setJoinOK(player0, false);
      player0.isJoinOK(player1, true);
      Player player2 = new Player((-1), ";?bms>YyfM)e,OB~c", "", (-600));
      player0.setJoinOK(player2, true);
      boolean boolean0 = player0.isJoinOK(player2, false);
      boolean boolean1 = player1.isJoinOK(player2, false);
      assertTrue(boolean1 == boolean0);
      
      float float1 = player0.getY();
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, float1, 0.01F);
      
      String string0 = player1.getName();
      assertEquals("Player-1", string0);
      assertTrue(player1.isConnected());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(1, player1.getStrength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(639, ";?bms>YyfM)e,O!~c", ";?bms>YyfM)e,O!~c", (-206), 399);
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      int int0 = Packable.TEXT_MESSAGE;
      Player player1 = new Player((-6), "=", "state.Player$JoinInfo", 639);
      player0.setJoinOK(player1, true);
      Player player2 = new Player(4919);
      player2.isJoinOK(player0, true);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals(127, player0.getId());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player();
      player0.setY(5);
      float float0 = player0.getY();
      assertEquals(5.0F, float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ";?bms>YyfM)e,O!~c";
      Player player0 = new Player();
      player0.setX(399);
      player0.getStrength();
      player0.getMoney();
      Party party0 = new Party((-1726));
      party0.add(player0);
      player0.remove(party0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0289251927098695
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      Player player1 = new Player();
      player0.reset(true);
      player0.reset(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      player1.getZ();
      player0.getIP();
      player0.setY(0.0F);
      player1.toString();
      player0.setX(0.0F);
      player0.setDead((long) (byte)27, true);
      player0.setZ(705.40625F);
      player0.setDead();
      player0.getIP();
      player1.reset(true);
      long long0 = player0.getTimeOfDeath();
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      Player player0 = new Player(5633);
      Player player1 = new Player((byte) (-7), "Z", 399);
      player0.isJoinOK(player1, false);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)11;
      sequenceInputStream0.read(byteArray0, 24988, (int) (byte)1);
      SequenceInputStream sequenceInputStream1 = null;
      try {
        sequenceInputStream1 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-206);
      Player player0 = new Player(639, ";?bms>YyfM)e,O!~c", ";?bms>YyfM)e,O!~c", (-206), 399);
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      player0.getStrength();
      player0.getMoney();
      player0.remove((Party) null);
      player0.gangStrength();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party(2993);
      player0.boss = party0;
      boolean boolean0 = player0.isDead();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      Player player0 = new Player((byte)4);
      player0.reset(true);
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player1.isJoinOK(player0, false);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      
      Player player2 = new Player((byte)4, "sw}", (String) null, (-1));
      boolean boolean0 = player2.isJoinOK(player1, false);
      assertEquals((-1), player2.getPictureId());
      assertFalse(boolean0);
      assertEquals(1, player2.getStrength());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player2.isConnected());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.379260646785054
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((-752), "{79dfORHw;V", 1);
      player0.getY();
      player0.setConnected(false);
      player0.getSubparty();
      player0.type();
      player0.setDead();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      player0.next = null;
      player0.add((Party) null);
      player0.prev = null;
      player0.getTimeOfDeath();
      player0.setX(0.0F);
      player0.setConnected(false);
      player0.setMoney(5);
      player0.head = null;
      player0.setConnected(false);
      player0.setMoney(1392409281320L);
      player0.getName();
      player0.getX();
      player0.getMoney();
      player0.setZ(1392409281320L);
      player0.reset(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(0.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(4, "e9:^I", "e9:^I", 4, 4919);
      player0.setY(1191.6486F);
      player0.setDead((long) 4);
      player0.getTimeOfDeath();
      System.setCurrentTimeMillis(301L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-86);
      Player player0 = new Player(2304, "h8)6M-_Pku$pa", (byte)1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)10;
      Player player0 = new Player();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)10);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      player0.unpack(dataInputStream0);
      int int0 = Packable.ACTION;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(263, (String) null, 263);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(263, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.432811072189696
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(2075, (String) null, (String) null, 0);
      player0.id = 983;
      player0.getIP();
      player0.setY(2075);
      player0.setX((-3246.0F));
      player0.id = 3;
      player0.getX();
      player0.getMoney();
      player0.isConnected();
      Party party0 = player0.boss;
      player0.remove((Party) null);
      player0.getIP();
      player0.setX(0.1F);
      player0.getStrength();
      player0.getZ();
      player0.type();
      player0.setZ(0.0F);
      player0.isDead();
      player0.setDead();
      player0.getY();
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(0, ";?bms>Yy:fM)e,O!~c", ";?bms>Yy:fM)e,O!~c", 0, 0);
      player0.reset(false);
      byte byte0 = (byte)2;
      byte byte1 = (byte)0;
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-53);
      Player player0 = new Player((byte)4, " ]vh-W", "", 12549);
      player0.getY();
      player0.getName();
      player0.getY();
      float float0 = player0.getY();
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(" ]vh-W", player0.getIP());
      assertEquals(12549, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setZ(1.0F);
      int int0 = Packable.GAME_EVENT;
      player0.getPictureId();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)10;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[7] = (byte)0;
      player0.unpack(byteArray0);
      player0.getPictureId();
      player0.isConnected();
      System.setCurrentTimeMillis((byte)0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(3, "/~2%-}B<fT[(lM", "/~2%-}B<fT[(lM", 3, 577);
      player0.setZ(1.0F);
      player0.getPictureId();
      Party party0 = player0.next;
      player0.next = null;
      player0.setY(577);
      player0.setZ((-1168.0603F));
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = Packable.TEXT_MESSAGE;
      boolean boolean0 = false;
      Player player0 = new Player(1637, "", (byte) (-109));
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.376546853080793
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(0, ";?bms>Yy:fM)e,O!~c", ";?bms>Yy:fM)e,O!~c", 0, 0);
      Player player1 = new Player(0, "state.Player$JoinInfo", ";?bms>Yy:fM)e,O!~c", 4919, 4919);
      int int0 = Packable.ACTION;
      player1.setJoinOK(player0, false);
      Player player2 = new Player(4919);
      player2.setConnected(false);
      player1.isJoinOK(player2, false);
      assertFalse(player2.isConnected());
      
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertTrue(player1.isConnected());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)0;
      player0.unpack(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-2267), "", 5);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      player0.setZ(0.0F);
      pipedOutputStream0.write(1706);
      player0.getY();
      player0.getZ();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)117;
      byteArray0[5] = (byte)16;
      player0.unpack(byteArray0);
      Player player1 = new Player(5, "z[/o85^TIF3odY", "|-}(pip/P@", (-1097), (-1097));
      player0.setX(0.2F);
      System.setCurrentTimeMillis((-2525L));
      float float0 = player0.getZ();
      assertEquals(0.2F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(0, ";?bs>Yy:fM)e,O!~c", ";?bs>Yy:fM)e,O!~c", 0, 0);
      player0.setDead((long) 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 228;
      Player player0 = new Player((-1832), "", "!)3Ali?+I:#D.ndH", 228, 228);
      player0.setDead((long) 228, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Player player0 = new Player((-1), "ztx?x#gm>A*&%c", "ztx?x#gm>A*&%c", (-2233), 18122);
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, true);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream(pipedInputStream1);
      PipedOutputStream pipedOutputStream3 = null;
      try {
        pipedOutputStream3 = new PipedOutputStream(pipedInputStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player(0, "mJ5|T<x':^HyaOU", (short)4919);
      player0.prev = (Party) player1;
      assertEquals(4919, player1.getPictureId());
      
      String string0 = player0.getIP();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.getName());
      assertEquals("0.0.0.0", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1996);
      Player player0 = new Player((-1996), "", "WdU==T3+:x", (-1832), (-1996));
      player0.setDead();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(32539, (String) null, (String) null, 5);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("?3Q.30iFiT", "x?p9P^N!d$9;0|k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      dataOutputStream0.writeLong(5);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player((-1066), "Player", (-1));
      MockFile mockFile0 = new MockFile("Player", "Player");
      MockFile mockFile1 = new MockFile(mockFile0, "(V!!c%6ViYCO@]0)?%");
      File file0 = MockFile.createTempFile("Player", "Player", (File) mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      assertTrue(player0.isConnected());
      assertEquals((-1), player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player(965, "state.Party", 965);
      player0.setMoney(0.0F);
      Player player1 = new Player(0, "", "", (-1291), 0);
      player0.head = (Party) player1;
      Party party0 = new Party((-1291));
      player1.prev = party0;
      assertEquals(10.0F, player1.getX(), 0.01F);
      
      player1.setX(0.0F);
      player0.type();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player(4, ":^I", ":^I", 4, 4919);
      long long0 = player0.getTimeOfDeath();
      assertEquals(4, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, long0);
      assertFalse(player0.isDead());
      assertEquals(4919, player0.getStrength());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 3006);
      boolean boolean0 = player0.isConnected();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(3006, player0.getPictureId());
      assertTrue(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-86);
      Player player0 = new Player((-71), "cPs PlO@56h#7Gp$1=", 1);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, 4);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player();
      player0.setY((-6));
      float float0 = player0.getY();
      assertEquals((-6.0F), float0, 0.01F);
  }
}
