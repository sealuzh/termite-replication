/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 23:03:28 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.im.InputContext;
import java.awt.image.BufferedImage;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.Month;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Date;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.event.AncestorListener;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.WrappedPlainView;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.SVGTextElementBridge;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemEmpty;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.templates.ElemValueOf;
import org.apache.xalan.templates.ElemWithParam;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XML11DTDConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2183731918146603
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(jpegImage0);
      
      ColorSpace colorSpace0 = jpegImage0.getColorSpace();
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNull(colorSpace0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) ' ';
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Locale locale0 = jDayChooser0.locale;
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      Color color0 = Color.red;
      assertEquals(0, color0.getBlue());
      assertEquals((-65536), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, color0.getBlue());
      assertEquals((-65536), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(jpegImage0);
      
      ColorSpace colorSpace0 = jpegImage0.getColorSpace();
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNull(colorSpace0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean1 = jpegImage0.load(0);
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertTrue(boolean1);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      int int0 = defaultTableColumnModel0.getColumnIndexAtX((-1355));
      assertEquals((-1), int0);
      
      jDayChooser0.removePropertyChangeListener("f5yKh,t%IuIE|-<|-", (PropertyChangeListener) defaultTableColumnModel0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      ActionEvent actionEvent0 = new ActionEvent(jpegImage0, 0, "select_favorites_folder", 0L, 2971);
      assertEquals(2971, actionEvent0.getModifiers());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("select_favorites_folder", actionEvent0.getActionCommand());
      assertEquals(0, actionEvent0.getID());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(actionEvent0);
      
      AncestorListener[] ancestorListenerArray0 = jDayChooser0.getAncestorListeners();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, ancestorListenerArray0.length);
      assertNotNull(ancestorListenerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      actionEvent0.setSource((Object) null);
      assertEquals(2971, actionEvent0.getModifiers());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("select_favorites_folder", actionEvent0.getActionCommand());
      assertEquals(0, actionEvent0.getID());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3292571131080035
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMonth(1459);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle1);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle1);
      assertNotNull(styleContext_NamedStyle2);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle0));
      
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext1);
      assertNotSame(styleContext1, styleContext0);
      assertFalse(styleContext1.equals((Object)styleContext0));
      
      StyleContext styleContext2 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext2);
      assertSame(styleContext2, styleContext1);
      assertNotSame(styleContext2, styleContext0);
      assertFalse(styleContext2.equals((Object)styleContext0));
      
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument1);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      
      GapContent gapContent0 = new GapContent((-544));
      assertNotNull(gapContent0);
      
      InputContext inputContext0 = jDayChooser0.getInputContext();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNull(inputContext0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      DefaultStyledDocument defaultStyledDocument2 = new DefaultStyledDocument(gapContent0, styleContext2);
      assertNotNull(defaultStyledDocument2);
      assertFalse(defaultStyledDocument2.equals((Object)defaultStyledDocument1));
      assertFalse(defaultStyledDocument2.equals((Object)defaultStyledDocument0));
      assertFalse(styleContext2.equals((Object)styleContext0));
      
      Style style0 = defaultStyledDocument1.addStyle("1", styleContext_NamedStyle1);
      assertNotNull(style0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument2);
      assertNotSame(style0, styleContext_NamedStyle2);
      assertNotSame(style0, styleContext_NamedStyle1);
      assertNotSame(style0, styleContext_NamedStyle0);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertNotSame(styleContext_NamedStyle1, style0);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle2);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle1));
      assertFalse(style0.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle2));
      
      StyleContext styleContext3 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext3);
      assertSame(styleContext3, styleContext2);
      assertSame(styleContext3, styleContext1);
      assertNotSame(styleContext3, styleContext0);
      assertFalse(styleContext3.equals((Object)styleContext0));
      
      Color color0 = styleContext1.getForeground(style0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument2);
      assertNotSame(style0, styleContext_NamedStyle2);
      assertNotSame(style0, styleContext_NamedStyle1);
      assertNotSame(style0, styleContext_NamedStyle0);
      assertNotSame(styleContext0, styleContext3);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertNotSame(styleContext_NamedStyle1, style0);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle2);
      assertSame(styleContext1, styleContext3);
      assertSame(styleContext1, styleContext2);
      assertNotSame(styleContext1, styleContext0);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle1));
      assertFalse(style0.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext0.equals((Object)styleContext3));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle1.equals((Object)style0));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle2));
      assertFalse(styleContext1.equals((Object)styleContext0));
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertFalse(jButton0.isFocusable());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertNotNull(jButton0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertSame(jButton0, jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument2);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(style0, styleContext_NamedStyle2);
      assertNotSame(style0, styleContext_NamedStyle1);
      assertNotSame(style0, styleContext_NamedStyle0);
      assertNotSame(styleContext0, styleContext3);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertNotSame(styleContext_NamedStyle1, style0);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle2);
      assertSame(styleContext1, styleContext3);
      assertSame(styleContext1, styleContext2);
      assertNotSame(styleContext1, styleContext0);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument2));
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(style0.equals((Object)styleContext_NamedStyle2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle1));
      assertFalse(style0.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext0.equals((Object)styleContext3));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle1.equals((Object)style0));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle2));
      assertFalse(styleContext1.equals((Object)styleContext0));
      
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3389012562246294
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = new Boolean("1i4");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(29);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(boolean1);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      HsqlProperties hsqlProperties0 = new HsqlProperties("y");
      assertEquals(1, HsqlProperties.NO_VALUE_FOR_KEY);
      assertNotNull(hsqlProperties0);
      
      Properties properties0 = FreeMindApplet.defaultProps;
      assertNull(properties0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      
      Color color0 = Color.red;
      assertEquals((-65536), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setForeground(color0);
      assertEquals((-65536), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3303396025534764
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      int int0 = (-1331);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(301, (-1331), 301, (-1331), 301, 301);
      assertNotNull(mockGregorianCalendar0);
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=301,MONTH=-1331,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=301,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1331,HOUR_OF_DAY=-1331,MINUTE=301,SECOND=301,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      int int1 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(90, color0.getGreen());
      assertNotNull(color0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1331), (long) 301);
      assertNotNull(instant0);
      
      ChronoField chronoField0 = ChronoField.ERA;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      assertEquals(ChronoUnit.ERAS, temporalUnit0);
      
      Instant instant1 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = MockInstant.minusMillis(instant1, 14);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Timestamp timestamp0 = Timestamp.from(instant2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(306000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.306", timestamp0.toString());
      assertNotNull(timestamp0);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Timestamp timestamp1 = (Timestamp)jDayChooser0.setMinSelectableDate(timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(306000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.306", timestamp0.toString());
      assertEquals(306000000, timestamp1.getNanos());
      assertEquals("2014-02-14 20:21:21.306", timestamp1.toString());
      assertNotNull(timestamp1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(timestamp0, timestamp1);
      assertSame(timestamp1, timestamp0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      Timestamp timestamp2 = Timestamp.from(instant2);
      assertEquals(306000000, timestamp2.getNanos());
      assertEquals("2014-02-14 20:21:21.306", timestamp2.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(timestamp2);
      assertNotSame(timestamp2, timestamp0);
      assertNotSame(timestamp2, timestamp1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertTrue(timestamp2.equals((Object)timestamp0));
      assertTrue(timestamp2.equals((Object)timestamp1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      jDayChooser0.setSelectableDateRange(mockDate0, timestamp2);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(306000000, timestamp2.getNanos());
      assertEquals("2014-02-14 20:21:21.306", timestamp2.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotSame(timestamp2, timestamp0);
      assertNotSame(timestamp2, timestamp1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertTrue(timestamp2.equals((Object)timestamp0));
      assertTrue(timestamp2.equals((Object)timestamp1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2054733035890117
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertNotNull(jPanel0);
      
      jDayChooser0.firePropertyChange("sG.DC'{^yr]y#nL", (-409), (-409));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(210, color1.getRed());
      assertEquals((-2956050), color1.getRGB());
      assertEquals(228, color1.getGreen());
      assertEquals(238, color1.getBlue());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("H*OSbQJtf~XS", styleContext_NamedStyle0);
      assertNotNull(styleContext_NamedStyle1);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(639, (-409), 639, 639, 639);
      assertNotNull(mockGregorianCalendar0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_NamedStyle1);
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("Monospaced", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.isItalic());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("Monospaced", font0.getName());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      jDayChooser0.setDecorationBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 3350);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertEquals(3350, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertEquals(3350, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(jpegImage0);
      
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      assertNull(jpegImage1.getMimeType());
      assertEquals(72.0, jpegImage1.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage1.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage1.getBitsPerPixel());
      assertEquals(0, jpegImage1.getRessourceBytesSize());
      assertEquals(0, jpegImage1.getWidth());
      assertEquals(0, jpegImage1.getIntrinsicWidth());
      assertEquals(0, jpegImage1.getHeight());
      assertFalse(jpegImage1.isTransparent());
      assertEquals(0, jpegImage1.getIntrinsicHeight());
      assertEquals(0, jpegImage1.getBitmapsSize());
      assertFalse(jpegImage1.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(jpegImage1);
      assertFalse(jpegImage1.equals((Object)jpegImage0));
      
      ColorSpace colorSpace0 = jpegImage1.getColorSpace();
      assertNull(jpegImage1.getMimeType());
      assertEquals(72.0, jpegImage1.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage1.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage1.getBitsPerPixel());
      assertEquals(0, jpegImage1.getRessourceBytesSize());
      assertEquals(0, jpegImage1.getWidth());
      assertEquals(0, jpegImage1.getIntrinsicWidth());
      assertEquals(0, jpegImage1.getHeight());
      assertFalse(jpegImage1.isTransparent());
      assertEquals(0, jpegImage1.getIntrinsicHeight());
      assertEquals(0, jpegImage1.getBitmapsSize());
      assertFalse(jpegImage1.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNull(colorSpace0);
      assertNotSame(jpegImage1, jpegImage0);
      assertFalse(jpegImage1.equals((Object)jpegImage0));
      
      boolean boolean0 = jpegImage1.load(0);
      assertNull(jpegImage1.getMimeType());
      assertEquals(72.0, jpegImage1.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage1.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage1.getBitsPerPixel());
      assertEquals(0, jpegImage1.getRessourceBytesSize());
      assertEquals(0, jpegImage1.getWidth());
      assertEquals(0, jpegImage1.getIntrinsicWidth());
      assertEquals(0, jpegImage1.getHeight());
      assertFalse(jpegImage1.isTransparent());
      assertEquals(0, jpegImage1.getIntrinsicHeight());
      assertEquals(0, jpegImage1.getBitmapsSize());
      assertFalse(jpegImage1.hasSoftMask());
      assertTrue(boolean0);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotSame(jpegImage1, jpegImage0);
      assertFalse(jpegImage1.equals((Object)jpegImage0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      int int0 = defaultTableColumnModel0.getColumnIndexAtX(0);
      assertEquals((-1), int0);
      
      jDayChooser0.removePropertyChangeListener((String) null, (PropertyChangeListener) defaultTableColumnModel0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", (-1), "r7lf:@bSG", (-1), (-575));
      assertEquals("r7lf:@bSG", actionEvent0.getActionCommand());
      assertEquals((-1), actionEvent0.getID());
      assertEquals((-1L), actionEvent0.getWhen());
      assertEquals((-575), actionEvent0.getModifiers());
      assertNotNull(actionEvent0);
      
      AncestorListener[] ancestorListenerArray0 = jDayChooser0.getAncestorListeners();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, ancestorListenerArray0.length);
      assertNotNull(ancestorListenerArray0);
      
      String string0 = actionEvent0.paramString();
      assertEquals("r7lf:@bSG", actionEvent0.getActionCommand());
      assertEquals((-1), actionEvent0.getID());
      assertEquals((-1L), actionEvent0.getWhen());
      assertEquals((-575), actionEvent0.getModifiers());
      assertEquals("unknown type,cmd=r7lf:@bSG,when=-1,modifiers=Shift", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      actionEvent0.setSource("select_favorites_folder");
      assertEquals("r7lf:@bSG", actionEvent0.getActionCommand());
      assertEquals((-1), actionEvent0.getID());
      assertEquals((-1L), actionEvent0.getWhen());
      assertEquals((-575), actionEvent0.getModifiers());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      ActionEvent actionEvent1 = new ActionEvent(defaultTableModel0, 1008, "f5yKh,t%IuIE|-<|-", 371);
      assertEquals(0L, actionEvent1.getWhen());
      assertEquals(1008, actionEvent1.getID());
      assertEquals(371, actionEvent1.getModifiers());
      assertEquals("f5yKh,t%IuIE|-<|-", actionEvent1.getActionCommand());
      assertNotNull(actionEvent1);
      assertFalse(actionEvent1.equals((Object)actionEvent0));
      
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2750543890430937
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMonth(5);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 5;
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      floatArray0[5] = (float) 5;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser1.init();
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle1);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      assertNotNull(styleContext_NamedStyle2);
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext1);
      assertNotSame(styleContext1, styleContext0);
      assertFalse(styleContext1.equals((Object)styleContext0));
      
      StyleContext styleContext2 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext2);
      assertSame(styleContext2, styleContext1);
      assertNotSame(styleContext2, styleContext0);
      assertFalse(styleContext2.equals((Object)styleContext0));
      
      AttributeSet attributeSet0 = styleContext2.removeAttribute(styleContext_NamedStyle2, jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(attributeSet0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(styleContext_NamedStyle2, styleContext_NamedStyle1);
      assertNotSame(styleContext_NamedStyle2, styleContext_NamedStyle0);
      assertSame(styleContext2, styleContext1);
      assertNotSame(styleContext2, styleContext0);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle2);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext2.equals((Object)styleContext0));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle2));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      GapContent gapContent0 = new GapContent((-5832));
      assertNotNull(gapContent0);
      
      InputContext inputContext0 = jDayChooser0.getInputContext();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNull(inputContext0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext2);
      assertNotNull(defaultStyledDocument1);
      assertFalse(styleContext2.equals((Object)styleContext0));
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      
      DocumentListener[] documentListenerArray0 = defaultStyledDocument1.getDocumentListeners();
      assertEquals(0, documentListenerArray0.length);
      assertNotNull(documentListenerArray0);
      assertSame(styleContext2, styleContext1);
      assertNotSame(styleContext2, styleContext0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertFalse(styleContext2.equals((Object)styleContext0));
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      
      Style style0 = defaultStyledDocument1.addStyle("1", styleContext_NamedStyle0);
      assertNotNull(style0);
      assertSame(styleContext2, styleContext1);
      assertNotSame(styleContext2, styleContext0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertNotSame(style0, styleContext_NamedStyle2);
      assertNotSame(style0, styleContext_NamedStyle0);
      assertNotSame(style0, styleContext_NamedStyle1);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle2);
      assertNotSame(styleContext_NamedStyle0, style0);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertFalse(styleContext2.equals((Object)styleContext0));
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(style0.equals((Object)styleContext_NamedStyle2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle0));
      assertFalse(style0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle2));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      
      StyleContext styleContext3 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext3);
      assertNotSame(styleContext3, styleContext0);
      assertSame(styleContext3, styleContext2);
      assertSame(styleContext3, styleContext1);
      assertFalse(styleContext3.equals((Object)styleContext0));
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNull(jButton0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.transferFocusUpCycle();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.186898663416807
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      GapContent gapContent0 = new GapContent((-169));
      assertNotNull(gapContent0);
      
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      assertNotNull(metalRootPaneUI0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jDayChooser0.removePropertyChangeListener("14", (PropertyChangeListener) metalRootPaneUI0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jDayChooser0.setMaxDayCharacters((-169));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      boolean boolean2 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      HsqlProperties hsqlProperties0 = new HsqlProperties("y");
      assertEquals(1, HsqlProperties.NO_VALUE_FOR_KEY);
      assertNotNull(hsqlProperties0);
      
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      GapContent gapContent0 = new GapContent((-169));
      assertNotNull(gapContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      assertFalse(boolean0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      assertNotNull(defaultStyledDocument0);
      
      Element element0 = defaultStyledDocument0.getCharacterElement((-169));
      assertNotNull(element0);
      
      LabelView labelView0 = new LabelView(element0);
      assertNotNull(labelView0);
      
      WrappedPlainView wrappedPlainView0 = new WrappedPlainView(element0, false);
      assertNotNull(wrappedPlainView0);
      
      float float0 = labelView0.getTabbedSpan(1542.5535F, wrappedPlainView0);
      assertEquals(0.0F, float0, 0.01F);
      
      Color color0 = labelView0.getBackground();
      assertNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InputMethodListener inputMethodListener0 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener0);
      
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener2);
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener3);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("14"));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.240224004636059
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, int0);
      
      int int1 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, int1);
      assertFalse(int1 == int0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertNotNull(defaultCaret0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 12, 8262, (-3708), '2');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(12L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(6, keyEvent0.getModifiers());
      assertEquals((-3708), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('2', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertEquals(12, keyEvent0.getID());
      assertNotNull(keyEvent0);
      
      keyEvent0.consume();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(12L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(6, keyEvent0.getModifiers());
      assertEquals((-3708), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('2', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertEquals(12, keyEvent0.getID());
      
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(12L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(6, keyEvent0.getModifiers());
      assertEquals((-3708), keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('2', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertEquals(12, keyEvent0.getID());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser_DecoratorButton1.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton1.isFocusable());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton1.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton1);
      assertFalse(jDayChooser_DecoratorButton1.equals((Object)jDayChooser_DecoratorButton0));
      
      boolean boolean0 = jDayChooser_DecoratorButton1.isFocusable();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser_DecoratorButton1.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton1.isFocusable());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton1.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      assertNotSame(jDayChooser_DecoratorButton1, jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser_DecoratorButton1.equals((Object)jDayChooser_DecoratorButton0));
      
      ElemEmpty elemEmpty0 = new ElemEmpty();
      assertNull(elemEmpty0.getBaseIdentifier());
      assertTrue(elemEmpty0.getXmlSpace());
      assertEquals("Unknown XSLT Element", elemEmpty0.getNodeName());
      assertEquals((-1), elemEmpty0.getXSLToken());
      assertFalse(elemEmpty0.hasChildNodes());
      assertFalse(elemEmpty0.hasTextLitOnly());
      assertNull(elemEmpty0.getActualEncoding());
      assertEquals("Unknown XSLT Element", elemEmpty0.getLocalName());
      assertEquals(0, elemEmpty0.getEndColumnNumber());
      assertTrue(elemEmpty0.canAcceptVariables());
      assertEquals("Unknown XSLT Element", elemEmpty0.getTagName());
      assertFalse(elemEmpty0.handlesNullPrefixes());
      assertFalse(elemEmpty0.isId());
      assertNull(elemEmpty0.getBaseURI());
      assertEquals((short)1, elemEmpty0.getNodeType());
      assertFalse(elemEmpty0.isCompiledTemplate());
      assertFalse(elemEmpty0.getXmlStandalone());
      assertEquals(0, elemEmpty0.getColumnNumber());
      assertEquals(0, elemEmpty0.getLineNumber());
      assertFalse(elemEmpty0.hasVariableDecl());
      assertEquals(0, elemEmpty0.getLength());
      assertEquals((-1), elemEmpty0.getUid());
      assertNull(elemEmpty0.getXmlVersion());
      assertNull(elemEmpty0.getDocumentURI());
      assertNull(elemEmpty0.getSystemId());
      assertEquals(0, elemEmpty0.getEndLineNumber());
      assertFalse(elemEmpty0.isWhitespaceInElementContent());
      assertNull(elemEmpty0.getXmlEncoding());
      assertEquals(0, elemEmpty0.exprGetNumChildren());
      assertNull(elemEmpty0.getWholeText());
      assertNull(elemEmpty0.getPublicId());
      assertNotNull(elemEmpty0);
      
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      assertNotNull(imageHandlerBase64Encoder0);
      
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      assertNotNull(defaultExtensionHandler0);
      
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemEmpty0, imageHandlerBase64Encoder0, defaultExtensionHandler0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3046185570286695
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      jDayChooser0.firePropertyChange("sG.DC'{^yr]y#nL", (-409), (-409));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(228, color1.getGreen());
      assertEquals((-2956050), color1.getRGB());
      assertEquals(210, color1.getRed());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(238, color1.getBlue());
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      String string0 = "H*OSbQ(Jtf~XS";
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("H*OSbQ(Jtf~XS", styleContext_NamedStyle0);
      assertNotNull(styleContext_NamedStyle1);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      jDayChooser0.setMaxDayCharacters((-3552));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Month month0 = Month.JANUARY;
      assertEquals(Month.JANUARY, month0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) month0);
      assertNotNull(predicate0);
      
      boolean boolean1 = vector0.removeIf(predicate0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      assertNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener2);
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener3);
      
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener4);
      
      Vector<String> vector1 = new Vector<String>();
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.transferFocusUpCycle();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertFalse(jpegImage0.hasSoftMask());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNotNull(jpegImage0);
      
      ColorSpace colorSpace0 = jpegImage0.getColorSpace();
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertFalse(jpegImage0.hasSoftMask());
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertNull(colorSpace0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      floatArray0[2] = (float) ' ';
      jDayChooser0.setDay(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1114, 7, 7, 18, ' ', 0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(1114, keyEvent0.getID());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(' ', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(7, keyEvent0.getModifiers());
      assertEquals(448, keyEvent0.getModifiersEx());
      assertEquals(18, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(7L, keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener1);
      assertNull(inputMethodListener3);
      
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener4);
      
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener5);
      
      InputMethodListener inputMethodListener6 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener6);
      
      InputMethodListener inputMethodListener7 = AWTEventMulticaster.remove(inputMethodListener1, (InputMethodListener) null);
      assertNotNull(inputMethodListener7);
      assertSame(inputMethodListener7, inputMethodListener1);
      assertSame(inputMethodListener1, inputMethodListener7);
      
      InputMethodListener inputMethodListener8 = AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener8);
      
      InputMethodListener inputMethodListener9 = AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      assertNull(inputMethodListener9);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1247934888088933
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getHeight());
      assertNull(jpegImage0.getMimeType());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(jpegImage0);
      
      ColorSpace colorSpace0 = jpegImage0.getColorSpace();
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getHeight());
      assertNull(jpegImage0.getMimeType());
      assertFalse(jpegImage0.hasSoftMask());
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNull(colorSpace0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) ' ';
      floatArray0[8] = (float) 0;
      floatArray0[5] = (float) 0;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(43);
      assertEquals(43, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=43,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Date date0 = mockSimpleDateFormat0.parse("R", parsePosition0);
      assertEquals(43, parsePosition0.getErrorIndex());
      assertEquals(43, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=43,errorIndex=43]", parsePosition0.toString());
      assertEquals("day", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("day", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertNull(date0);
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(90, color0.getGreen());
      assertNotNull(color0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3075442129144332
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(301, (-1331), 301, (-1331), 301, 301);
      assertNotNull(mockGregorianCalendar0);
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=301,MONTH=-1331,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=301,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1331,HOUR_OF_DAY=-1331,MINUTE=301,SECOND=301,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      DirectColorModel directColorModel0 = (DirectColorModel)jDayChooser0.getColorModel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(3, directColorModel0.getTransferType());
      assertNotNull(directColorModel0);
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, int0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(90, color0.getGreen());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(164, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1331), (long) 301);
      assertNotNull(instant0);
      
      Instant instant1 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = MockInstant.minusMillis(instant1, 14);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Timestamp timestamp0 = Timestamp.from(instant2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(306000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.306", timestamp0.toString());
      assertNotNull(timestamp0);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      timestamp0.setNanos(14);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014-02-14 20:21:21.000000014", timestamp0.toString());
      assertEquals(14, timestamp0.getNanos());
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Date date0 = Date.from(instant2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Date date1 = Date.from(instant2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotSame(date1, date0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      assertTrue(date1.equals((Object)date0));
      
      Timestamp timestamp1 = (Timestamp)jDayChooser0.setMinSelectableDate(timestamp0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014-02-14 20:21:21.000000014", timestamp0.toString());
      assertEquals(14, timestamp0.getNanos());
      assertEquals(14, timestamp1.getNanos());
      assertEquals("2014-02-14 20:21:21.000000014", timestamp1.toString());
      assertNotNull(timestamp1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(timestamp0, timestamp1);
      assertSame(timestamp1, timestamp0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      Timestamp timestamp2 = (Timestamp)jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, timestamp2.getNanos());
      assertEquals("2014-02-14 20:21:21.000000014", timestamp2.toString());
      assertNotNull(timestamp2);
      assertSame(timestamp2, timestamp0);
      assertSame(timestamp2, timestamp1);
      
      Timestamp timestamp3 = (Timestamp)jDayChooser0.setMaxSelectableDate(timestamp0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, timestamp3.getNanos());
      assertEquals("2014-02-14 20:21:21.000000014", timestamp3.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014-02-14 20:21:21.000000014", timestamp0.toString());
      assertEquals(14, timestamp0.getNanos());
      assertNotNull(timestamp3);
      assertSame(timestamp3, timestamp0);
      assertSame(timestamp3, timestamp1);
      assertSame(timestamp3, timestamp2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertSame(timestamp0, timestamp3);
      assertSame(timestamp0, timestamp1);
      assertSame(timestamp0, timestamp2);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      // Undeclared exception!
      try { 
        Timestamp.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(fopImage_ImageInfo0);
      
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      assertEquals(72.0, jpegImage0.getVerticalResolution(), 0.01);
      assertNull(jpegImage0.getMimeType());
      assertEquals(0, jpegImage0.getBitmapsSize());
      assertEquals(0, jpegImage0.getIntrinsicHeight());
      assertEquals(0, jpegImage0.getHeight());
      assertFalse(jpegImage0.hasSoftMask());
      assertFalse(jpegImage0.isTransparent());
      assertEquals(0, jpegImage0.getBitsPerPixel());
      assertEquals(0, jpegImage0.getIntrinsicWidth());
      assertEquals(72.0, jpegImage0.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage0.getRessourceBytesSize());
      assertEquals(0, jpegImage0.getWidth());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(jpegImage0);
      
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      assertEquals(0, jpegImage1.getBitsPerPixel());
      assertEquals(0, jpegImage1.getWidth());
      assertFalse(jpegImage1.hasSoftMask());
      assertEquals(0, jpegImage1.getRessourceBytesSize());
      assertEquals(72.0, jpegImage1.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage1.getHeight());
      assertFalse(jpegImage1.isTransparent());
      assertEquals(72.0, jpegImage1.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage1.getIntrinsicWidth());
      assertNull(jpegImage1.getMimeType());
      assertEquals(0, jpegImage1.getBitmapsSize());
      assertEquals(0, jpegImage1.getIntrinsicHeight());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotNull(jpegImage1);
      assertFalse(jpegImage1.equals((Object)jpegImage0));
      
      ColorSpace colorSpace0 = jpegImage1.getColorSpace();
      assertEquals(0, jpegImage1.getBitsPerPixel());
      assertEquals(0, jpegImage1.getWidth());
      assertFalse(jpegImage1.hasSoftMask());
      assertEquals(0, jpegImage1.getRessourceBytesSize());
      assertEquals(72.0, jpegImage1.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage1.getHeight());
      assertFalse(jpegImage1.isTransparent());
      assertEquals(72.0, jpegImage1.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage1.getIntrinsicWidth());
      assertNull(jpegImage1.getMimeType());
      assertEquals(0, jpegImage1.getBitmapsSize());
      assertEquals(0, jpegImage1.getIntrinsicHeight());
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNull(colorSpace0);
      assertNotSame(jpegImage1, jpegImage0);
      assertFalse(jpegImage1.equals((Object)jpegImage0));
      
      boolean boolean0 = jpegImage1.load(13);
      assertEquals(0, jpegImage1.getBitsPerPixel());
      assertEquals(0, jpegImage1.getWidth());
      assertFalse(jpegImage1.hasSoftMask());
      assertEquals(0, jpegImage1.getRessourceBytesSize());
      assertEquals(72.0, jpegImage1.getVerticalResolution(), 0.01);
      assertEquals(0, jpegImage1.getHeight());
      assertFalse(jpegImage1.isTransparent());
      assertEquals(72.0, jpegImage1.getHorizontalResolution(), 0.01);
      assertEquals(0, jpegImage1.getIntrinsicWidth());
      assertNull(jpegImage1.getMimeType());
      assertEquals(0, jpegImage1.getBitmapsSize());
      assertEquals(0, jpegImage1.getIntrinsicHeight());
      assertTrue(boolean0);
      assertEquals(0, fopImage_ImageInfo0.width);
      assertEquals(72.0, fopImage_ImageInfo0.dpiHorizontal, 0.01);
      assertEquals(0, fopImage_ImageInfo0.height);
      assertEquals(72.0, fopImage_ImageInfo0.dpiVertical, 0.01);
      assertNotSame(jpegImage1, jpegImage0);
      assertFalse(jpegImage1.equals((Object)jpegImage0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      int int0 = defaultTableColumnModel0.getColumnIndexAtX(13);
      assertEquals((-1), int0);
      
      jDayChooser0.removePropertyChangeListener((String) null, (PropertyChangeListener) defaultTableColumnModel0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dialog Plain 11");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", (-1), "r7lf:@bSG", (-1), (-575));
      assertEquals((-1L), actionEvent0.getWhen());
      assertEquals((-575), actionEvent0.getModifiers());
      assertEquals("r7lf:@bSG", actionEvent0.getActionCommand());
      assertEquals((-1), actionEvent0.getID());
      assertNotNull(actionEvent0);
      
      AncestorListener[] ancestorListenerArray0 = jDayChooser0.getAncestorListeners();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, ancestorListenerArray0.length);
      assertNotNull(ancestorListenerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      actionEvent0.setSource("select_favorites_folder");
      assertEquals((-1L), actionEvent0.getWhen());
      assertEquals((-575), actionEvent0.getModifiers());
      assertEquals("r7lf:@bSG", actionEvent0.getActionCommand());
      assertEquals((-1), actionEvent0.getID());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      ActionEvent actionEvent1 = new ActionEvent(defaultTableModel0, 1008, "f5yKh,t%IuIE|-<|-", 371);
      assertEquals("f5yKh,t%IuIE|-<|-", actionEvent1.getActionCommand());
      assertEquals(371, actionEvent1.getModifiers());
      assertEquals(1008, actionEvent1.getID());
      assertEquals(0L, actionEvent1.getWhen());
      assertNotNull(actionEvent1);
      assertFalse(actionEvent1.equals((Object)actionEvent0));
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertNotNull(jCheckBoxMenuItem0);
      
      KeyStroke keyStroke0 = jCheckBoxMenuItem0.getAccelerator();
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertNull(keyStroke0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8935, 8935, 8935, 8935, 'B');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(39, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals('B', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8935, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(8935, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(8935L, keyEvent0.getWhen());
      assertEquals(8896, keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStrokeForEvent(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(39, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals('B', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(8935, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(8935, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(8935L, keyEvent0.getWhen());
      assertEquals(8896, keyEvent0.getModifiersEx());
      assertNull(aWTKeyStroke0);
      
      ActionListener actionListener0 = jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNull(actionListener0);
      
      jDayChooser0.setYear((-4292));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(boolean0);
      
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      GraphicsConfiguration graphicsConfiguration0 = jDayChooser0.getGraphicsConfiguration();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNull(graphicsConfiguration0);
      
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("H2#Z6z", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2750543890430937
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMonth(74);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle1);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      assertNotNull(styleContext_NamedStyle2);
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle1));
      
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext1);
      assertNotSame(styleContext1, styleContext0);
      assertFalse(styleContext1.equals((Object)styleContext0));
      
      StyleContext styleContext2 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext2);
      assertNotSame(styleContext2, styleContext0);
      assertSame(styleContext2, styleContext1);
      assertFalse(styleContext2.equals((Object)styleContext0));
      
      AttributeSet attributeSet0 = styleContext1.removeAttribute(styleContext_NamedStyle2, "day");
      assertNotNull(attributeSet0);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle2);
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertNotSame(styleContext_NamedStyle2, styleContext_NamedStyle0);
      assertNotSame(styleContext_NamedStyle2, styleContext_NamedStyle1);
      assertSame(styleContext1, styleContext2);
      assertNotSame(styleContext1, styleContext0);
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle2));
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext_NamedStyle2.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext1.equals((Object)styleContext0));
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      GapContent gapContent0 = new GapContent(0);
      assertNotNull(gapContent0);
      
      Enumeration<?> enumeration0 = styleContext0.getStyleNames();
      assertNotNull(enumeration0);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      
      InputContext inputContext0 = jDayChooser1.getInputContext();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertNull(inputContext0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      assertNotNull(defaultStyledDocument1);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      
      DocumentListener[] documentListenerArray0 = defaultStyledDocument1.getDocumentListeners();
      assertEquals(0, documentListenerArray0.length);
      assertNotNull(documentListenerArray0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      
      Style style0 = defaultStyledDocument1.addStyle("day", (Style) null);
      assertNotNull(style0);
      assertNotSame(defaultStyledDocument1, defaultStyledDocument0);
      assertNotSame(style0, styleContext_NamedStyle1);
      assertNotSame(style0, styleContext_NamedStyle2);
      assertNotSame(style0, styleContext_NamedStyle0);
      assertNotSame(styleContext0, styleContext2);
      assertNotSame(styleContext0, styleContext1);
      assertFalse(defaultStyledDocument1.equals((Object)defaultStyledDocument0));
      assertFalse(style0.equals((Object)styleContext_NamedStyle1));
      assertFalse(style0.equals((Object)styleContext_NamedStyle2));
      assertFalse(style0.equals((Object)styleContext_NamedStyle0));
      assertFalse(styleContext0.equals((Object)styleContext2));
      assertFalse(styleContext0.equals((Object)styleContext1));
      
      StyleContext styleContext3 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext3);
      assertSame(styleContext3, styleContext2);
      assertSame(styleContext3, styleContext1);
      assertNotSame(styleContext3, styleContext0);
      assertFalse(styleContext3.equals((Object)styleContext0));
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNull(jButton0);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2316661051647397
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("Japan", string0);
      assertNotNull(string0);
      
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertSame(mockDate0, date0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      Date date1 = jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertSame(date1, mockDate0);
      assertSame(date1, date0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertNotNull(jDayChooser1);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      JButton jButton0 = jDayChooser1.getSelectedDay();
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertNull(jButton0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertFalse(jdbcConnection0.isClosed());
      assertNotNull(jdbcConnection0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string0));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3074878932892964
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      jDayChooser0.firePropertyChange("sG.DC'{^yr]y#nL", (-409), (-409));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertNotNull(color0);
      
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(1, color1.getTransparency());
      assertEquals(210, color1.getRed());
      assertEquals((-2956050), color1.getRGB());
      assertEquals(238, color1.getBlue());
      assertEquals(228, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertNotNull(color1);
      assertNotSame(color1, color0);
      assertFalse(color1.equals((Object)color0));
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      jDayChooser0.setYear((-409));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      int int0 = 0;
      Color color2 = Color.getColor("AE", 0);
      assertEquals(0, color2.getGreen());
      assertEquals(0, color2.getRed());
      assertEquals(0, color2.getBlue());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertNotNull(color2);
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      
      jDayChooser0.setSundayForeground(color2);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, color2.getGreen());
      assertEquals(0, color2.getRed());
      assertEquals(0, color2.getBlue());
      assertEquals((-16777216), color2.getRGB());
      assertEquals(1, color2.getTransparency());
      assertEquals(255, color2.getAlpha());
      assertNotSame(color2, color0);
      assertNotSame(color2, color1);
      assertFalse(color2.equals((Object)color0));
      assertFalse(color2.equals((Object)color1));
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      int int1 = (-608);
      char char0 = '`';
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      assertEquals(16, StructuredMenuHolder.ICON_SIZE);
      assertNotNull(structuredMenuHolder0);
      
      BrowseMode browseMode0 = new BrowseMode();
      assertEquals("Browse", browseMode0.toString());
      assertNotNull(browseMode0);
      
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1239939941938686
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableColumnModel0.getSelectionModel();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.removePropertyChangeListener("#lmw%%", (PropertyChangeListener) defaultTableColumnModel0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      Vector<String> vector0 = new Vector<String>();
      jDayChooser1.isDayBordersVisible();
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GapContent gapContent0 = new GapContent((-169));
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = (AbstractDocument.LeafElement)defaultStyledDocument0.getCharacterElement((-169));
      LabelView labelView0 = new LabelView(abstractDocument_LeafElement0);
      defaultStyledDocument0.getDefaultRootElement();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      WrappedPlainView wrappedPlainView0 = new WrappedPlainView(abstractDocument_LeafElement0, false);
      float float0 = Component.TOP_ALIGNMENT;
      labelView0.getBackground();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGTextElementBridge.ALT_GLYPH_HANDLER;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = (StyleContext.SmallAttributeSet)styleContext0.addAttribute(abstractDocument_LeafElement0, gVTAttributedCharacterIterator_TextAttribute0, integer0);
      Integer.compare((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL);
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_SmallAttributeSet0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFont(font0);
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(16);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XML11DTDConfiguration xML11DTDConfiguration0 = null;
      try {
        xML11DTDConfiguration0 = new XML11DTDConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // fRecognizedFeatures
         //
         verifyException("org.apache.xerces.parsers.XML11DTDConfiguration", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0927007021459914
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GapContent gapContent0 = new GapContent((-169));
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      float float0 = Component.TOP_ALIGNMENT;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("{uf)-DA9&Z]v0XjQD");
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4148.63F);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.getTopLevelAncestor();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(6393);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      int int0 = 2517;
      Class<StyledEditorKit.UnderlineAction> class0 = StyledEditorKit.UnderlineAction.class;
      jDayChooser0.yearChooser = null;
      jDayChooser0.getListeners(class0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2517);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1337666506513626
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(5);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 5;
      jDayChooser0.setFocus();
      floatArray0[5] = (float) 5;
      floatArray0[6] = (float) 5;
      floatArray0[7] = (float) 5;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      Boolean boolean0 = new Boolean("day");
      // Undeclared exception!
      try { 
        jDayChooser0.remove(1049);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1049
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.164728819285683
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(1523);
      jpegImage0.getColorSpace();
      float[] floatArray0 = new float[9];
      fopImage_ImageInfo0.width = 1523;
      floatArray0[0] = (float) 1523;
      floatArray0[1] = (float) 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) ' ';
      floatArray0[4] = (float) 0;
      jDayChooser0.addListeners(13);
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 1523;
      floatArray0[8] = (float) 0;
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.setDay((-1834));
      jDayChooser0.getDayPanel();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "day";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.221678068932015
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDay();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.remove((-3225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -3225
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2719882033536103
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(5);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 5;
      jDayChooser0.setFocus();
      floatArray0[6] = (float) 5;
      floatArray0[7] = (float) 5;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Style style0 = jTextPane0.getLogicalStyle();
      Style style1 = defaultStyledDocument0.addStyle("", style0);
      Enumeration<JButton> enumeration0 = (Enumeration<JButton>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      ((StyleContext.NamedStyle) style1).removeAttributes(enumeration0);
      StyleContext styleContext1 = new StyleContext();
      defaultStyledDocument0.getStyleNames();
      Color color0 = styleContext0.getForeground(style1);
      jDayChooser0.setWeekdayForeground(color0);
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame("14", false);
      KeyEvent keyEvent0 = new KeyEvent(jInternalFrame0, 1648, 5, 238, 25, 'S');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setAlwaysFireDayProperty(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.JAPAN;
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.097465961594406
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      jpegImage1.getColorSpace();
      jpegImage1.load(13);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableColumnModel0.getColumnIndexAtX(13);
      jDayChooser0.removePropertyChangeListener((String) null, (PropertyChangeListener) defaultTableColumnModel0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dialog Plain 11");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", (-1), "r7lf:@bSG", (-1), (-575));
      jDayChooser0.getAncestorListeners();
      Object object0 = new Object();
      actionEvent0.setSource("select_favorites_folder");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      jDayChooser0.setDecorationBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.initDecorations();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1708624547780904
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W+8(i)8>9rbPs");
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jMonthChooser0.checkImage((Image) bufferedImage0, (ImageObserver) jDayChooser0);
      jMonthChooser0.transferFocusBackward();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("0", styleContext_NamedStyle0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-25), (-33), 0, 7);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) styledEditorKit_UnderlineAction0;
      objectArray0[1] = null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      styleContext0.addAttribute(styleContext_NamedStyle0, styledEditorKit_UnderlineAction0, defaultTableModel0);
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_NamedStyle1);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.drawWeeks();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2496, 0L, 2496, 2496, 'b');
      FontInfo fontInfo0 = new FontInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.isDecorationBackgroundVisible();
      ElemValueOf elemValueOf0 = new ElemValueOf();
      ElemWithParam elemWithParam0 = new ElemWithParam();
      // Undeclared exception!
      try { 
        elemValueOf0.appendChild((ElemTemplateElement) elemWithParam0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Can not add with-param to value-of
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1289L), 3, 0, '@', 0);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.206345633658482
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.firePropertyChange("sG.DC'{^yr]y#nL", (-409), (-409));
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("H*OSbQ(Jtf~XS", styleContext_NamedStyle0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-409), (-409), (-409), (-409), (-409));
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.init();
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle3 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle4 = styleContext1.new NamedStyle(styleContext_NamedStyle3);
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext2 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext2);
      GapContent gapContent0 = new GapContent(5);
      DefaultStyledDocument defaultStyledDocument2 = new DefaultStyledDocument(gapContent0, styleContext1);
      Style style0 = defaultStyledDocument2.addStyle("day", styleContext_NamedStyle1);
      StyleContext styleContext3 = new StyleContext();
      styleContext3.getBackground(styleContext_NamedStyle4);
      styleContext3.getForeground(style0);
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isPaintingTile();
      GraphicContext graphicContext0 = new GraphicContext();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[5];
      try { 
        ICC_Profile.getInstance("day");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file day
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("WU,:9d$%W re5L", vetoableChangeListener0);
      jDayChooser0.getColorModel();
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setDay(' ');
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1114, 0, 10170, 20, '2', 1114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }
}
