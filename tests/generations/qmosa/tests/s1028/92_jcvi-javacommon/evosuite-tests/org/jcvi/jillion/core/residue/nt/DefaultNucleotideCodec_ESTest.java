/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 00:08:41 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2149;
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-114);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      int int1 = (-5);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-5), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2185;
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)78;
      byteArray0[8] = (byte)78;
      byteArray0[1] = (byte) (-114);
      byte byte1 = (byte)103;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2465977848818666
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      linkedList0.pollFirst();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, 879);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      linkedList2.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.toString(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec2.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 0);
      assertEquals(0, int0);
      
      defaultNucleotideCodec1.isGap(byteArray0, 879);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("AC", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)29}, byteArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2149;
      byte[] byteArray0 = new byte[13];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4017248240049525
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 879);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      linkedList2.add(nucleotide0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("-", string0);
      
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.iterator(byteArray1);
      defaultNucleotideCodec0.isGap(byteArray1, 879);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList2);
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray3);
      assertEquals(2, int0);
      
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (-75));
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 86);
      assertEquals(0, int1);
      assertEquals(4, byteArray2.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.065798341841333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[7] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[3] = (byte)78;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(3, iterator0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) (byte)0, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) (byte)78, (Range) null);
      Byte byte0 = Byte.valueOf((byte)78);
      Byte.toUnsignedInt((byte)78);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) (byte)78, (Range) null);
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) comparator0);
      AbstractMap.SimpleEntry<Byte, Range>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Byte, Range>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 9);
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry1;
      Map.Entry.comparingByKey();
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry4;
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry0;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[8] = abstractMap_SimpleEntry5;
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte byte0 = (byte)81;
      byte byte1 = (byte) (-114);
      byte byte2 = (byte)95;
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      int int0 = 3;
      int int1 = 16;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(16, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.128232037121263
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(3, iterator0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(iterator0);
      Range.of(range_CoordinateSystem1, (-2698L), (long) (byte)78);
      Range range1 = Range.of((long) 3);
      range1.intersection(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      range2.isSubRangeOf(range1);
      range1.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (long) 3, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)78;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8851218920964308
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.parallelStream();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (-1233));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)37;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-127);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals((-2130673408L), long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.428466250260821
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1207659807));
      DefaultNucleotideCodec.values();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList3);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, (-1207659807));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1207659807
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1914102166033658
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[7] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[3] = (byte)78;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(3, iterator0);
      Byte byte0 = new Byte((byte)78);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) (byte)0, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) (byte)78, (Range) null);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)78);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) (byte)78, (Range) null);
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) comparator0);
      AbstractMap.SimpleEntry<Byte, Range>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Byte, Range>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 9);
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry1;
      Map.Entry.comparingByKey();
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry0;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntryArray0[8] = abstractMap_SimpleEntry4;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 190);
      assertEquals(187, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.434282242078569
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 36);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-21));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 4;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4791165753848774
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      linkedList0.pollFirst();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 0, 0L);
      defaultNucleotideCodec1.isGap(byteArray0, 879);
      range0.equals(defaultNucleotideCodec0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      linkedList2.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.toString(byteArray1);
      DefaultNucleotideCodec.values();
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      defaultNucleotideCodec1.isGap(byteArray1, 879);
      Predicate<Nucleotide> predicate0 = Predicate.isEqual((Object) iterator0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Nucleotide> predicate2 = predicate0.and(predicate1);
      Predicate<Nucleotide> predicate3 = predicate0.or(predicate2);
      Predicate<Nucleotide> predicate4 = predicate3.negate();
      linkedList2.removeIf(predicate4);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.encode((Collection<Nucleotide>) linkedList2);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec5.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 36);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-21));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, 4);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-21));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec3.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-21);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte) (-21);
      Range range0 = Range.of((long) (byte) (-21));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4769409328322274
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      int int0 = 0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-63);
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-59);
      Range range0 = Range.ofLength((byte)17);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray1, range0);
      defaultNucleotideCodec0.encode(0, iterator0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-428));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (long) 0, (long) 0);
      defaultNucleotideCodec0.isGap(byteArray0, 2720);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (long) (-428), (long) (-428));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.equals((Object) null);
      Range.of(range_CoordinateSystem2, 0L, (long) 2720);
      Range range3 = Range.of(range_CoordinateSystem1, 0L, (long) 0);
      range3.toString();
      range2.startsBefore(range3);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(3L);
      Byte byte0 = new Byte((byte)1);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Byte byte1 = new Byte((byte)16);
      Byte byte2 = new Byte((byte)16);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Byte, Range>(byte2, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, (Range) null);
      abstractMap_SimpleEntry0.setValue(range0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Object>>) comparator0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) null, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry4);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry5);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<Byte, Range>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Byte, Range>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry6;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry6;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry6;
      Map.Entry.comparingByKey();
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry2;
      linkedList0.toArray(abstractMap_SimpleEntryArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.065798341841333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[8] = (byte)78;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(3, iterator0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(iterator0);
      Range range1 = Range.of(range_CoordinateSystem1, (-2698L), (long) (byte)78);
      Range range2 = Range.of((long) 3);
      range2.intersection(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(range_CoordinateSystem1, (long) 3, (long) (byte)78);
      range3.split((byte)78);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      Range range4 = Range.of((-2698L), 59L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, (long) (byte) (-114), (long) (byte)78);
      range4.startsBefore(range3);
      Range.of((-2698L), (long) (byte) (-114));
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5377544030281727
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)10;
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 6);
      assertEquals(0, int0);
      
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.contains(6));
      assertEquals(10, list0.size());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 13;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.360591184055953
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      Range range0 = Range.of((-4196L));
      Byte byte0 = new Byte((byte)0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Byte byte1 = new Byte((byte)1);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      AbstractMap.SimpleEntry<Byte, Range>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Byte, Range>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 9);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry2);
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry2);
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray0[8] = abstractMap_SimpleEntry1;
      linkedList0.toArray(abstractMap_SimpleEntryArray0);
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -4196 .. -4196 ]/0B is out of range of sequence which is only [ 0 .. 6 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2004318071, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Byte byte0 = new Byte((byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor((byte[]) null, (int) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      linkedList0.add(nucleotide0);
      linkedList0.add(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.109748224086374
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1932735283);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGapOffsets(byteArray0);
      defaultNucleotideCodec3.isGap(byteArray0, 1932735283);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec2.isGap(byteArray0, (-1478));
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.decode(byteArray0, 9L);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)121;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.decode(byteArray1, 1391L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1391 corresponds to encodedIndex 699  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6862668983950013
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      linkedList0.add(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Amino;
      linkedList1.add(nucleotide2);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide3);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.containsAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide4 = Nucleotide.Amino;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide4);
      linkedList2.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("M", string0);
      
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide5 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Amino, nucleotide5);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1950745878335933
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Nucleotide nucleotide1 = Nucleotide.Purine;
      linkedList0.add(nucleotide1);
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec1.encode(nucleotide0);
      Range range0 = Range.ofLength(0L);
      defaultNucleotideCodec1.iterator(byteArray0, range0);
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      nucleotide2.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2513;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultNucleotideCodec3);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(3L);
      Byte byte0 = new Byte((byte)1);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Byte byte1 = new Byte((byte)16);
      Byte byte2 = new Byte((byte)16);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Byte, Range>(byte2, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, (Range) null);
      abstractMap_SimpleEntry0.setValue(range0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Object>>) comparator0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Byte, Range>((Byte) null, (Range) null);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry4);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry5);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<Byte, Range>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Byte, Range>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry6;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry6;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry6;
      Map.Entry.comparingByKey();
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry2;
      linkedList0.toArray(abstractMap_SimpleEntryArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.241462535298864
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(3L);
      Byte byte0 = new Byte((byte)1);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry0);
      Byte byte1 = new Byte((byte)16);
      Byte byte2 = new Byte((byte)16);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Byte, Range>(byte2, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Byte, Range>(byte0, range0);
      Range range1 = abstractMap_SimpleEntry3.setValue(range0);
      abstractMap_SimpleEntry0.setValue(range0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Object>>) comparator0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Byte, Range>(byte2, range0);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry4);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry5);
      Byte.compare((byte)1, (byte)1);
      AbstractMap.SimpleEntry<Byte, Range> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Byte, Range>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<Byte, Range>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Byte, Range>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry6;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry3;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry6;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry6;
      Map.Entry.comparingByKey();
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry2;
      linkedList0.toArray(abstractMap_SimpleEntryArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 10);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 3 .. 3 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8773896007754103
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)48;
      byte byte0 = (byte)109;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = (-1610612735);
      Range range0 = Range.of(1259L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 633
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1950745878335933
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Nucleotide nucleotide1 = Nucleotide.Purine;
      linkedList0.add(nucleotide1);
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec1.encode(nucleotide0);
      Range range0 = Range.ofLength(0L);
      defaultNucleotideCodec1.iterator(byteArray0, range0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2513;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultNucleotideCodec3);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.476832555600588
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte) (-74);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte) (-18);
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)55;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-2946));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (-1551));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-58);
      byte byte0 = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-58));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -58
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.containsAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1087), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[3] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[1] = (byte)7;
      byteArray0[4] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 12);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)3;
      byte byte0 = (byte) (-114);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-127));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3786245420563206
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-105);
      byte byte0 = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-105));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0831728948417303
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)96;
      byteArray0[0] = (byte)96;
      byte byte1 = (byte)71;
      byteArray0[1] = (byte)71;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.624945863276291
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 5228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.816028897382805
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2149, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.5382203042673224
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertEquals(4, byteArray0.length);
      
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList1.add(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide0);
      linkedList1.add(nucleotide0);
      linkedList0.push(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) nucleotide0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) defaultNucleotideCodec0;
      objectArray0[6] = (Object) nucleotide0;
      Object object3 = new Object();
      objectArray0[7] = object3;
      objectArray0[8] = (Object) defaultNucleotideCodec0;
      linkedList0.toArray(objectArray0);
      int int1 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, (-1567));
      assertTrue(int1 == int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray1);
      assertEquals("-", string0);
      
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean1 = defaultNucleotideCodec5.isGap(byteArray1, 0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.850532185590133
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      linkedList1.toArray();
      linkedList0.add(nucleotide0);
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.containsAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("D", string0);
      
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1317965454);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)85;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2);
      byteArray0[3] = (byte)67;
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.containsAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)96}, byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)3;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)85;
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte) (-3));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.add(nucleotide0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)113;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)113);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)119;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 5111884);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 1451;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      Range range1 = Range.of((long) (byte) (-114), (long) (byte) (-114));
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2698L), (long) (byte)78);
      Range range2 = Range.of((long) 3);
      range2.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      range2.startsBefore(range3);
      range2.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.181388003908821
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      linkedList3.removeFirstOccurrence(nucleotide0);
      linkedList3.add(nucleotide0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("D", string0);
      
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1185));
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(1L, long0);
      
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1);
      assertTrue(int1 == int0);
      
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1185));
      int int2 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1185));
      assertEquals((-1185), int2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-16);
      byteArray0[5] = (byte)125;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.512874795155885
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.817659287861325
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[8] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)103;
      byteArray0[1] = (byte)78;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)78, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.421911661589563
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.530371357724608
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-105);
      byte byte0 = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.539248639787031
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[1] = (byte) (-58);
      byte byte0 = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[6] = (byte)10;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 6);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)69;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8215407423377818
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)78;
      byteArray0[8] = (byte)78;
      byteArray0[1] = (byte)78;
      byte byte1 = (byte)103;
      byteArray0[11] = (byte)78;
      byteArray0[3] = (byte)78;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2698L);
      Range range1 = Range.of(range_CoordinateSystem1, (-2698L), (long) (byte)103);
      range0.intersection(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range2 = Range.of(range_CoordinateSystem1, (long) 3, (long) (byte)78);
      range2.split((byte)103);
      Range.of((-2698L), 59L);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8215407423377818
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[8] = (byte)78;
      byteArray0[1] = (byte)78;
      byte byte0 = (byte)103;
      byteArray0[11] = (byte)78;
      byteArray0[3] = (byte)78;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)78, (long) 2185);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2698L);
      Range range1 = Range.of(range_CoordinateSystem1, (-2698L), (long) (byte)103);
      range0.intersection(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range2 = Range.of(range_CoordinateSystem1, (long) 3, (long) (byte)78);
      range2.split((byte)103);
      Range.of((-2698L), 59L);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5098963751290886
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 36);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 36);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-21));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, 4);
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 4);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray1, 820L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 820 corresponds to encodedIndex 414  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)64;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)15;
      byteArray0[1] = (byte)15;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-1);
      defaultNucleotideCodec0.encode((-1), (Iterator<Nucleotide>) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4231L, 26L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
