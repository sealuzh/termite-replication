/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 22:23:31 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L, 4294967295L);
      long long1 = 1131L;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6189554189423836
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object3 = new Object();
      Range range1 = Range.of(2147483647L);
      Range.Comparators.values();
      range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.147949343276988
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      Object object5 = new Object();
      Long long0 = new Long((-950L));
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.646508646719466
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 1609L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1609L, 1609L);
      Range range1 = Range.of(range_CoordinateSystem0, 1609L, 1609L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1609L, 9223372036854775807L);
      range0.equals(linkedList0);
      Object object0 = new Object();
      range2.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(range2);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        range2.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.398662794933159
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long(1609L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1609L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.of(range_CoordinateSystem0, 3689L, 2147483647L);
      range0.equals(range2);
      Object object2 = new Object();
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      
      Range range3 = range0.intersection(range1);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6596681885261297
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range1.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList1.add(range1);
      assertFalse(linkedList1.contains(range2));
      
      linkedList1.offer(range2);
      range2.equals(range1);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4735760934589726
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Long long1 = new Long(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      range0.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange("<7 -4^-@]#qU\"+zgF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.576405879537464
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long(1584L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators.values();
      Object object0 = new Object();
      range0.equals(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.976800531808604
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(1404L);
      Range range1 = Range.of(9223372036854775806L, 9223372036854775806L);
      range0.isSubRangeOf(range1);
      range0.toString();
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      Range range3 = Range.of(9223372036854775806L);
      range3.startsBefore(range1);
      range3.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range4 = Range.of(3410L);
      Object object0 = new Object();
      range3.equals(range2);
      Object object1 = new Object();
      range2.endsBefore(range4);
      Object object2 = new Object();
      Range range5 = Range.of(1404L);
      range4.equals(range5);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("$fJz.=<zn[m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.$fJz.=<zn[m
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.74688841921788
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range.of((-2147479830L), 3L);
      Object object0 = new Object();
      Range range2 = Range.of(3L, 980L);
      range2.equals(range1);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6616285503662658
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4382L, 4382L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Range range1 = Range.of(603L, 4382L);
      range0.equals(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7344779193585906
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 1609L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1609L, 1609L);
      Range range1 = Range.of(1609L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1609L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.084077998711056
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder0.shift(1360L);
      range0.equals(range_Builder1);
      range1.isSubRangeOf(range2);
      Range.Comparators.values();
      Range range3 = Range.of((-128L));
      range0.complement(range1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder2.expandEnd(694L);
      Range.Builder range_Builder5 = range_Builder4.expandEnd((-128L));
      range_Builder0.expandEnd((-1L));
      range_Builder4.contractBegin(2147483645L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder6.shift(0L);
      range_Builder2.expandEnd((-9223372036854775808L));
      Range.Builder range_Builder7 = new Range.Builder(0L, 0L);
      range_Builder0.build();
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        range_Builder5.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.541739514307303
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long(1584L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators.values();
      Range range1 = Range.of(1584L);
      Object object0 = new Object();
      range0.equals(range1);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      Object object3 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.446672348313415
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 32767L;
      Range.ofLength(32767L);
      Range.ofLength(32767L);
      long long1 = 9223372036854775807L;
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854774678L, 9223372036854775807L);
      long long2 = 2147483647L;
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292162 would make range [9223372036854774678 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1673487370177598
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "{o*";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 1177L, 1177L);
      range0.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.383455486987377
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 4336L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.086237300808371
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(166L);
      Range range2 = range_Builder0.build();
      range2.isSubRangeOf(range1);
      Long long0 = new Long((-9223372036854775795L));
      range0.equals(long0);
      Range range3 = Range.of((-9223372036854775795L), (-9223372036854775795L));
      Range range4 = Range.of((-9223372036854775795L));
      range3.equals(range4);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Comparators.values();
      Range.of((-32768L));
      Object object0 = new Object();
      range1.equals(long0);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long1 = new Long(353L);
      range2.equals(long1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8307198589373064
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range1.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList1.add(range1);
      linkedList1.offer(range2);
      range1.equals("S6QA");
      Range.of((-2455L), (-2455L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, (-1051L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.713600540682721
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range1.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList1.add(range1);
      assertFalse(linkedList1.contains(range2));
      
      linkedList1.offer(range2);
      Object object1 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range.ofLength(9223372036854775807L);
      range1.intersection(range0);
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9630430987697474
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.ofLength(32767L);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      
      Range range2 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = Range.of(32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Object object1 = new Object();
      Object object2 = new Object();
      range4.equals(object2);
      Object object3 = new Object();
      boolean boolean0 = range2.equals(object3);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range5 = range4.intersection(range3);
      assertTrue(range5.isEmpty());
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.801487986592605
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.listIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.add(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList0.add(range0);
      linkedList1.offer(range1);
      Range range2 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer2);
      Range range3 = Range.ofLength(675L);
      Range range4 = range0.intersection(range3);
      assertSame(range4, range3);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.750242801312275
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 1609L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1609L, 1609L);
      Range range1 = Range.of(1609L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1609L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.321930754604041
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2218L), (-2218L));
      Object object0 = new Object();
      Object object1 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.spliterator();
      linkedList0.add(range0);
      Range range1 = null;
      linkedList0.offer((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.080259460929824
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147479830L), (-2147479830L));
      range1.equals("[ 0 .. -1 ]/0B");
      range1.getLength();
      Range range2 = Range.of(0L);
      range2.iterator();
      Range.ofLength(0L);
      range2.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 9223372036854774454L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.spliterator();
      linkedList0.add((Range) null);
      linkedList0.offer(range2);
      // Undeclared exception!
      try { 
        range2.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8321548283928353
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder((-21L), 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1086L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.shift(1892L);
      range1.equals(range_Builder2);
      Range.Builder range_Builder3 = new Range.Builder(1468L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147479830L), 1388L);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.588125168879395
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-7L));
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-7L), (-7L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(1327L);
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range0);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.5165890537520883
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range1.equals(range0);
      long long1 = 2616L;
      Range.of(713L, 2616L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2616L, (-3284L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.102496330178326
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(166L);
      Range range2 = range_Builder0.build();
      range2.isSubRangeOf(range1);
      range2.equals((Object) null);
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Comparators.values();
      Range range3 = Range.of(9223372036854775806L);
      Object object1 = new Object();
      range2.equals(linkedList0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      range3.equals("$fJz.=<zn[m");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.8001042309024604
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.ofLength(32767L);
      Range.ofLength(32767L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-559L), (-128L));
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      long long0 = (-716L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-716L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -716 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.857720908659512
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      Object object3 = new Object();
      Range range1 = Range.of((-3059L));
      Range.Comparators.values();
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.849429405935085
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range1 = Range.of((-9223372036854775795L), (-9223372036854775795L));
      Object object7 = new Object();
      range1.equals(object7);
      Object object8 = new Object();
      Range range2 = Range.of((-6L));
      Range range3 = range0.intersection(range2);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.974351070143781
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 1571L, 9223372036854775807L);
      Object object0 = new Object();
      range1.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Comparators.values();
      long long0 = (-1123L);
      Range range2 = Range.of(255L);
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      Range.of((-4708L), (-2523L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2579040075500787
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(1609L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2147482517L, 9223372036854774678L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.722298040425464
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Object object0 = new Object();
      Range.of(127L);
      long long0 = 3345L;
      Range.of(3345L, 3345L);
      Range.of(4294967295L);
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.010003365671392
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range1.split(2147483647L);
      range0.complementFrom(list0);
      range1.equals(range0);
      Range range2 = Range.of((-3611L), (-3611L));
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-3611L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.871107258147356
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(3171L, 9223372036854775807L);
      range0.complement(range1);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      linkedList0.add(range0);
      Range range2 = Range.of(range_CoordinateSystem1, 127L, 127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(range0);
      linkedList0.offer(range1);
      range2.complementFrom(linkedList0);
      long long1 = 259L;
      // Undeclared exception!
      try { 
        Range.of(259L, (-503L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.772313245638796
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      range1.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList1.add(range1);
      linkedList1.offer(range2);
      Object object1 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range.ofLength(9223372036854775807L);
      Range range3 = range1.intersection(range0);
      //  // Unstable assertion: assertSame(range1, range2);
      //  // Unstable assertion: assertNotSame(range1, range3);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5114945132608564
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = (-189L);
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      long long1 = 0L;
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-16L), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2937460519804915
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4968538414686163
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.spliterator();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList3.add(range0);
      linkedList2.offer(range0);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775807L);
      String string0 = "";
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.774258913876769
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2218L), (-2218L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(range0);
      linkedList0.offer(range0);
      Object object6 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.intersection(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(448L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7515731205363414
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      range0.intersects(range0);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range1.spliterator();
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        range1.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5345046181130666
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(1183L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.829700975748127
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2291L), (-2291L));
      List<Range> list0 = range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.spliterator();
      linkedList0.removeAll(list0);
      linkedList0.add(range0);
      linkedList0.offer(range0);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.148700995535877
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      range_Builder1.copy();
      Range.Builder range_Builder2 = range_Builder0.shift(1360L);
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
      
      range1.isSubRangeOf(range2);
      assertSame(range2, range0);
      
      Range.Comparators.values();
      Range.of((-128L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range range3 = Range.ofLength(4294967295L);
      long long0 = range3.getLength();
      assertEquals(4294967295L, long0);
      
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder((-2147479830L), (-2290L));
      range_Builder0.build();
      Range.of(0L);
      range_Builder2.contractBegin(4131L);
      boolean boolean1 = range1.startsBefore(range2);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.111804656804214
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.ofLength(2147483647L);
      Range range0 = Range.of((-3611L), 2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.850715488847336
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      long long1 = 127L;
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      range_Builder1.contractEnd(1L);
      long long2 = 32767L;
      Range range1 = range_Builder2.build();
      range1.complement(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.build();
      range_Builder2.expandEnd(523L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773407L, (-1170L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5368115334402397
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range1.equals(long0);
      Object object0 = new Object();
      Range.of(9223372036854775807L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.9167608920837527
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(1404L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(1L, 2147483647L);
      Range range2 = Range.of(2147482292L, 4294967295L);
      List<Range> list1 = range0.split(1L);
      assertTrue(list1.contains(range0));
      
      Range range3 = range0.intersection(range2);
      assertFalse(range3.isEmpty());
      
      Range range4 = range_Builder1.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6059729205461917
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
      
      Object object3 = new Object();
      Range range1 = Range.of(2147483647L);
      Range.Comparators.values();
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.886887892899352
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder((-21L), 4294967295L);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.expandEnd((-2147479830L));
      Range.Builder range_Builder3 = new Range.Builder();
      Range range3 = Range.of((-2147479830L), (-21L));
      range3.equals(range_Builder2);
      Range.of(3L);
      long long0 = (-349L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-349L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.866173258011793
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = (-2147479830L);
      long long1 = 104L;
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      long long2 = (-21L);
      Range.Builder range_Builder0 = new Range.Builder((-21L), 4294967295L);
      range_Builder0.contractEnd((-2292L));
      range_Builder0.shift(3L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.91789370304807
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.ofLength(32767L);
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(1200L, 9223372036854775807L);
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of(32767L, 32767L);
      // Undeclared exception!
      try { 
        range0.complement(range2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.427217762102283
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(1584L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1131L, 1584L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators.values();
      Range range1 = Range.of(1584L);
      Object object0 = new Object();
      range0.equals(range1);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.6729768718843783
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = range_Builder0.shift(1399L);
      range_Builder0.build();
      Range.Comparators.values();
      Range.of(32767L);
      Range.of(3485L, 4496L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.build();
      Range.of(255L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(255L, 104L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.760628175579264
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(1609L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-1L), 4294967295L);
      Object object3 = new Object();
      range0.equals(long0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6331331984817865
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = range0.asRange();
      Range range2 = Range.of(1L, 255L);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5520354819280024
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range1.equals(object0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("end of file reached before entire block was skipped");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.end of file reached before entire block was skipped
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6374319565754147
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-2147479830L), 104L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967291L);
      range_Builder0.shift(1360L);
      Range.Comparators.values();
      Range range1 = Range.of((-128L));
      Object object0 = new Object();
      range1.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("yk_]C.d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.yk_]C.d
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.9423029335668067
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = (-2430L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2430L));
      Range.of(28L, 28L);
      range1.equals(range0);
      Range.Comparators.values();
      Range.of((-2435L));
      range_Builder1.expandEnd((-629L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.4419610228519013
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.spliterator();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList3.offer(range0);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.858282703226869
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.endsBefore(range1);
      range1.intersection(range0);
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder((-21L), 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1086L));
      Range.Builder range_Builder2 = new Range.Builder();
      long long1 = 1892L;
      range_Builder1.shift(1892L);
      range1.equals(range_Builder2);
      Range.Builder range_Builder3 = new Range.Builder(1468L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(4382L, (-1203L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.875032287598681
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      long long0 = 4382L;
      Range range1 = Range.of(4382L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 4294967295 .. 4294967295 ]/0B", range_CoordinateSystem1);
      range0.equals(range2);
      Range.Comparators.values();
      Range.of((-1734L));
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.68668837766974
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.spliterator();
      linkedList0.add(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList1.offer(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.827846651681908
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(2147479834L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(2147479834L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(2147479834L);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(2446L, 65535L);
      boolean boolean0 = range3.intersects(range4);
      assertFalse(boolean0);
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(2147479834L, long0);
      
      Range range5 = range1.asRange();
      Range.CoordinateSystem.values();
      List<Range> list0 = range5.complement(range1);
      assertTrue(list0.isEmpty());
      assertSame(range5, range0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.633263490851608
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1609L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(2147483647L, 4294967295L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.003241759928206
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      long long0 = (-3570L);
      Range.of((-3570L), (-3570L));
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      Range.of(2147483646L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-9L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.742463382894037
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = new Long(1609L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(2147483647L, 4294967295L);
      range1.complement(range0);
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.534986182188179
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Comparators.values();
      Range.of(419L);
      // Undeclared exception!
      try { 
        Range.of(123L, (-696L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6728277196525347
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1131L, 2147483647L);
      Object object0 = new Object();
      Range.Comparators.values();
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-128L), (-128L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      assertTrue(linkedList1.equals((Object)linkedList0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5263695029678086
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd((-1440L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.9640504713293567
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.expandEnd(127L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      range0.getEnd();
      range_Builder2.copy();
      range2.isEmpty();
      range0.getEnd(range_CoordinateSystem0);
      Range range3 = Range.of((-128L), 127L);
      range0.endsBefore(range1);
      range0.startsBefore(range3);
      Range.of(0L, 1889L);
      range1.endsBefore(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.755213328647584
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1609L, 2147483647L);
      Object object0 = new Object();
      Range.Comparators.values();
      Range.of(1131L);
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-128L), 4927L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      assertEquals(0, linkedList1.size());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=4.000589456893527
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.of((-3611L), (-3611L));
      List<Range> list0 = range1.split(2147483647L);
      range0.complementFrom(list0);
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((-3611L), (-3626L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.860793501391145
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      long long1 = 3L;
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.of((-2147479830L), 3L);
      Range.of((-21L), 3L);
      Range.Builder range_Builder0 = new Range.Builder(3L);
      Range range3 = range_Builder0.build();
      range_Builder0.shift(3L);
      range2.isSubRangeOf(range0);
      range1.equals(range3);
      range_Builder0.expandEnd((-2290L));
      long long2 = (-1701L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("%@^O:rn|pU}I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.%@^O:rn|pU}I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.504870236304845
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.spliterator();
      long long0 = 127L;
      Range.of(127L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.9452355591140145
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder1.copy();
      range_Builder0.shift(1360L);
      range0.equals(range_Builder1);
      range1.isSubRangeOf(range2);
      Range.Comparators.values();
      Range range3 = Range.of(0L);
      range1.equals(range3);
      Range.of(1360L, 1614L);
      Range.of(65535L);
      long long0 = 1427L;
      Range.of(1427L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(1698L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.5361152256466113
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.of(3171L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-2805L));
      range_Builder1.contractEnd((-141L));
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2805L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2805 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.898296828171213
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      boolean boolean0 = range1.endsBefore(range1);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.spliterator();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList2.offer(range0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range.of((-1281L));
      Range range2 = Range.of(104L);
      Range.Comparators.values();
      Range range3 = range2.intersection(range0);
      assertFalse(range0.isEmpty());
      assertNotSame(range2, range1);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.705149853539556
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Comparators.values();
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775795L), 212L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.586702788365258
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147482517L);
      Object object0 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4811072864377604
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.of((-162L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-833L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.860255680245639
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147479830L), 3L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      long long0 = (-2292L);
      Range range3 = Range.of((-2147479830L), 3L);
      Range range4 = Range.of((-21L), 3L);
      long long1 = (-2290L);
      Range.Builder range_Builder0 = new Range.Builder(3L);
      range_Builder0.build();
      range3.isSubRangeOf(range1);
      range2.intersects(range4);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-2290L));
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin((-1701L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4643681595142195
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      range0.intersects(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(long0);
      Object object6 = new Object();
      Range range2 = Range.ofLength(2147483647L);
      Object object7 = new Object();
      range2.equals(object7);
      Range range3 = Range.ofLength(995L);
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("kA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.kA
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.6164625327623185
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(1183L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Comparators.values();
      Range range2 = Range.of(123L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(212L, 212L);
      //  // Unstable assertion: assertNotSame(range3, range2);
      
      Range range4 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.8978535881792564
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      Range range0 = Range.of((-2147479830L), 104L);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder((-21L), 4294967295L);
      range_Builder0.contractEnd((-2292L));
      range_Builder0.shift(3L);
      Range range1 = Range.of((-2147479830L), 3L);
      Range.of((-21L), 3L);
      Range.of((-2292L), (-2290L));
      Range.Builder range_Builder1 = new Range.Builder(3L);
      Range range2 = range_Builder1.build();
      range1.isSubRangeOf(range0);
      range0.equals(range2);
      Range.of((-21L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-955L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372034707292146L, (-955L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=4.007116302936156
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      range3.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Range> consumer0 = (Consumer<Range>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.spliterator();
      linkedList0.add(range2);
      range0.isSubRangeOf(range3);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-493L));
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(899L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.546398102122401
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      Range.Comparators.values();
      Range range0 = Range.of(1131L);
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Long long0 = new Long(255L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(range0);
      linkedList0.offer(range0);
      Object object3 = new Object();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      assertSame(range0, range2);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.976519329628177
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = (-2147479830L);
      long long1 = 104L;
      Range range1 = Range.ofLength(0L);
      range1.isEmpty();
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.of((-2147479830L), (-2147479830L));
      Range.Comparators.values();
      long long2 = 269L;
      Range.of(269L);
      Range.of(3L);
      Range.of(104L);
      Long long3 = new Long(28L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(269L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.8375506896213363
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.ofLength(32767L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range2.equals(object0);
      Range.of(32767L, 32767L);
      Range.Comparators.values();
      Range.of((-31497L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.096083803045559
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(1404L);
      Range range1 = Range.of(9223372036854775806L, 9223372036854775806L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 1403 ]/0B", string0);
      
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      Range range3 = Range.of(9223372036854775806L);
      Range range4 = range2.intersection(range1);
      range4.startsBefore(range1);
      range3.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.toString(range_CoordinateSystem0);
      range1.spliterator();
      String string1 = range2.toString();
      assertEquals("[ 0 .. -1 ]/0B", string1);
      
      Range range5 = range0.asRange();
      boolean boolean1 = range5.intersects(range4);
      range4.spliterator();
      String string2 = range3.toString();
      assertEquals("[ 9223372036854775806 .. 9223372036854775806 ]/0B", string2);
      
      Range range6 = range2.asRange();
      range3.intersects(range6);
      Range.of(32767L, 9223372034707292162L);
      Range range7 = Range.of(3L, 9223372034707292162L);
      range7.endsBefore(range5);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range8 = Range.parseRange("[ 0 .. 1403 ]/0B", range_CoordinateSystem1);
      boolean boolean2 = range8.intersects(range7);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = range7.endsBefore(range2);
      assertFalse(boolean3 == boolean2);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.810989057502801
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      Range.Comparators.values();
      Range.of(4382L);
      Range range1 = Range.of((-1L), (-1L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("9^t,b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.9^t,b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.531437898286535
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.spliterator();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object1 = new Object();
      Range.of((-2147483648L), 65535L);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      assertFalse(linkedList4.contains(range0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.644248257776639
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.of((-2147479830L), 3L);
      Range.of((-21L), 3L);
      Range.Builder range_Builder0 = new Range.Builder(3L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("%@^O:rn|pU}I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.%@^O:rn|pU}I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.80108307259216
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 1609L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1609L, 1609L);
      Range range1 = Range.of(1609L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1609L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.957396043158068
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range.of(127L, 32767L);
      Range range1 = range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      assertFalse(linkedList0.contains(range1));
      
      linkedList0.offer(range1);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range3 = range0.intersection(range2);
      range3.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=4.141704806964705
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder0.shift(1360L);
      range0.equals(range_Builder1);
      range1.isSubRangeOf(range2);
      Range.Comparators.values();
      Range range3 = Range.of((-128L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder2.expandEnd(694L);
      Range.Builder range_Builder5 = range_Builder4.expandEnd((-128L));
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder6.shift((-452L));
      Range.Builder range_Builder7 = new Range.Builder(0L, 0L);
      range_Builder0.build();
      Range range4 = range2.intersection(range3);
      range_Builder5.build();
      range1.startsBefore(range4);
      assertSame(range2, range0);
      assertTrue(range4.isEmpty());
      
      Range range5 = Range.of((-2147479830L), 1117L);
      assertNotSame(range5, range1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.9877915801348753
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2291L), (-2291L));
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.spliterator();
      linkedList0.add(range0);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-9223372036854775808L));
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6064709177963317
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(1131L);
      range_Builder1.expandEnd(4294967295L);
      range_Builder1.build();
      Range.of(1131L, 9223372036854771427L);
      Range.of(32767L);
      String string0 = "0";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=4.166365447202302
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      Range range2 = Range.of(0L);
      range2.getEnd();
      range_Builder1.copy();
      range2.isEmpty();
      Range.of((-4194L), (-52L));
      range0.getEnd();
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range2.isEmpty();
      Range range3 = Range.of(292L);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range1.equals(range_CoordinateSystem2);
      range3.getBegin();
      range2.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("0B", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.7055046336196718
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-3192L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.ofLength(940L);
      Object object5 = new Object();
      range1.equals(object2);
      Object object6 = new Object();
      Object object7 = new Object();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=4.033122774768185
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Range range0 = Range.of(4382L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4383L, long0);
      
      Range.Comparators.values();
      Range range1 = Range.of((-1734L));
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.contractEnd((-2292L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.of(1156L, 65535L);
      Range range2 = Range.ofLength(4383L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(4294967295L);
      Range range4 = range_Builder2.build();
      long long1 = range4.getBegin();
      assertEquals(0L, long1);
      
      range3.getBegin();
      Range.of(range_CoordinateSystem0, 4382L, 65535L);
      Range range5 = range3.intersection(range0);
      assertFalse(range3.isEmpty());
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.8709978121475936
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.of(28L, 28L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      range_Builder1.shift(0L);
      Long long1 = new Long(0L);
      range1.equals(long1);
      long long2 = 1468L;
      Range.Builder range_Builder2 = new Range.Builder(28L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.800326077671695
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = 1602L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1602L, 1602L);
      Range range1 = Range.of(1602L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.intersects(range0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1602L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.438979798883769
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-9223372036854775794L), long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.73851452216701
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd(127L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      Range range1 = range_Builder2.build();
      Range range2 = Range.of(1517L);
      Range.Comparators.values();
      Range range3 = range2.intersection(range1);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.641755338081428
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.ofLength(32767L);
      Range.ofLength(32767L);
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      long long0 = 2147482292L;
      range_Builder1.expandEnd(2147482292L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(2147482292L, 2147482292L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2147482292L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(3384L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.9125011131485
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-471L), 2147483648L);
      Range range1 = Range.ofLength(3385L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.8703586899581155
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      range0.spliterator();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of((-1L), 32767L);
      range_Builder2.build();
      Range.ofLength(1353L);
      long long0 = 28L;
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 2739L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=4.031546015604653
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.getEnd();
      range0.isSubRangeOf(range1);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      range1.intersects(range1);
      range_Builder0.contractBegin((-1281L));
      Range range3 = Range.ofLength(1024L);
      range0.endsBefore(range3);
      Range range4 = range2.intersection(range3);
      Long long1 = new Long((-380L));
      Long long2 = new Long(0L);
      range4.endsBefore(range3);
      Range.Comparators.values();
      Range range5 = Range.of(0L);
      range1.complement(range5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1281L), 0L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.591990632856893
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long1 = (-471L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-640L), 2329L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.6666516395412487
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2219L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.8608495115982397
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(1399L);
      Range.Builder range_Builder1 = range_Builder0.shift(4370L);
      long long0 = 32767L;
      Range.of(212L, 65535L);
      range_Builder1.build();
      Range.Comparators.values();
      Range.of(1399L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.expandEnd(212L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder3.copy();
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(654L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.8137167314641953
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators.values();
      long long1 = 292L;
      Range range1 = Range.of(292L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2076L, 2076L);
      range2.split(1354L);
      range2.intersects(range1);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372034707292161L, 1354L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.939898320214936
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range range1 = Range.of(0L, 127L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(2147483646L, 2152L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.7800423128064495
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.of(28L, 28L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.build();
      long long0 = (-2060L);
      long long1 = 1603L;
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1603L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=4.088723744961014
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2291L), (-2291L));
      range0.complement(range0);
      range0.split(4626L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.spliterator();
      linkedList0.add(range0);
      linkedList0.offer(range0);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of((-9223372036854775808L));
      Range range2 = range1.intersection(range0);
      range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 3126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.460175160841728
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-729L), 1L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.getBegin();
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.4476611862466084
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1812L), 3998L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.978271750967296
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = 3L;
      Range range1 = Range.of((-2147479830L), 3L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-2147479830L), 3L);
      range1.iterator();
      Range.of((-21L), 3L);
      Range.Builder range_Builder0 = new Range.Builder(3L);
      Range range4 = range_Builder0.build();
      range3.isSubRangeOf(range1);
      range2.equals(range4);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-2290L));
      long long1 = (-1701L);
      range4.startsBefore(range2);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin((-1701L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.4930838060757203
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(1130L, 1130L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1130L, 1130L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2046L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3309023537481957
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.offer(range0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range1 = Range.of((-2147483648L));
      Range.Comparators.values();
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.7069443393391928
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(1L);
      range_Builder0.shift((-9223372036854775316L));
      Range range0 = range_Builder1.build();
      range_Builder2.contractEnd((-2060L));
      range_Builder1.build();
      Range.of((-2490L));
      range_Builder0.contractBegin((-2557L));
      Range.Comparators.values();
      Range range1 = range_Builder1.build();
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5925683308850638
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1516L);
      range_Builder0.expandEnd(1516L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder((-128L), 255L);
      range_Builder0.build();
      Range.of(1516L);
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-2620L));
      assertSame(range_Builder2, range_Builder3);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.728593947395651
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.8751283425039524
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.of((-2147479830L), 3L);
      Range.of((-21L), 3L);
      Range.Builder range_Builder0 = new Range.Builder(3L);
      range_Builder0.build();
      range_Builder0.shift(3L);
      range1.endsBefore(range1);
      range2.isSubRangeOf(range0);
      range_Builder0.expandEnd((-2290L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("%@^O:rn|pU}I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.%@^O:rn|pU}I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.796752687519942
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 1609L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1609L, 1609L);
      Range range1 = Range.of(1609L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.isSubRangeOf(range0);
      Range.Builder range_Builder1 = new Range.Builder(1609L, 1609L);
      range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder0.shift(1399L);
      long long1 = 32767L;
      long long2 = 212L;
      // Undeclared exception!
      try { 
        Range.of(1609L, 212L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.6959549781377787
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder1.build();
      range_Builder2.contractEnd((-2060L));
      Range.of((-2490L));
      range_Builder0.contractBegin((-2557L));
      Range.Comparators.values();
      Range range1 = range_Builder1.build();
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.7611321142336327
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-2147479830L), 0L);
      range0.intersects(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-21L), (-2147479830L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=4.015501628517672
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.ofLength(1404L);
      Range range1 = Range.of(9223372036854775806L, 9223372036854775806L);
      range0.isSubRangeOf(range1);
      range0.toString();
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      Range range3 = Range.of(9223372036854775806L);
      Range range4 = range2.intersection(range1);
      range4.startsBefore(range1);
      range3.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.toString(range_CoordinateSystem0);
      range1.spliterator();
      range2.toString();
      Range range5 = range0.asRange();
      range5.intersects(range4);
      // Undeclared exception!
      try { 
        Range.of(1404L, (-25L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.9658899915923587
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd(127L);
      Range range0 = range_Builder1.build();
      range0.getEnd();
      Range range1 = Range.of((-78L));
      range0.intersection(range1);
      Range.of((-1L), 32767L);
      Range.of(32767L);
      Range.of((-32768L));
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.651067954684359
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(4294967295L, 4294967295L);
      Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin((-32768L));
      Range.Comparators.values();
      Range.of((-1734L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1734L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.300349515739897
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4382L, 4382L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(4382L, long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.4381454225800567
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-9223372036854775795L);
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-9223372036854775795L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775795L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.937939406803579
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertTrue(list0.contains(range0));
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.spliterator();
      linkedList1.add(range0);
      linkedList1.offer(range0);
      List<Range> list1 = range0.complementFrom(linkedList1);
      assertEquals(0, list1.size());
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range1 = Range.of(3263L);
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.905640485678133
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.spliterator();
      linkedList1.add(range0);
      linkedList1.offer(range0);
      List<Range> list0 = range0.complementFrom(linkedList1);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range1 = Range.of(3263L);
      Range range2 = range0.intersection(range0);
      Range range3 = range1.intersection(range0);
      //  // Unstable assertion: assertSame(range0, range2);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.4543270994121613
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-2147483646L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.spliterator();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList3.offer(range0);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775807L);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483646 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.455992004547793
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList3.offer(range0);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775807L);
      Range.Comparators.values();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.5624501226397607
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.copy();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1790L), (-1790L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("-b1ePiVhJK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.-b1ePiVhJK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Long long0 = new Long(1609L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1118L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.7592964148796897
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd(127L);
      range_Builder1.build();
      Range.of((-1L), 32767L);
      Range.of((-32768L));
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.1126512729537206
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Comparators.values();
      Range range0 = Range.of((-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.1341519506138185
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 11111L, 11111L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of((-2218L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-69L), (-69L));
      range_Builder0.contractEnd((-3194L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1505L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(509L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.5002767629080385
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of(1L);
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = (-2291L);
      long long1 = 3143L;
      Range.of(3143L, 3143L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
