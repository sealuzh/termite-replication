/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 18:19:23 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.SocketException;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.DefaultDataMode;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      TheClient theClient0 = new TheClient();
      theClient0.getSocket();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.getSelector();
      Selector.open();
      quickServer0.makeServerSocket();
      quickServer0.setSelector((Selector) null);
      theClient0.setServer(quickServer0);
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      theClient0.getSocket();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Max Connection)}", string0);
      
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry((-762));
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(1L);
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(1520L);
      System.setCurrentTimeMillis(1L);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      assertEquals((-762), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.close();
      mockSocket0.getTrafficClass();
      mockSocket0.getRemoteSocketAddress();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3805678363275375
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      QuickServer quickServer0 = new QuickServer("Client Data Pool - Not Used");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      quickServer0.setMaxAuthTry(0);
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      quickServer0.setDefaultDataMode(defaultDataMode0);
      theClient0.setServer(quickServer0);
      theClient0.setMaxAuthTry((-1106));
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.setServer(quickServer0);
      theClient0.getClientCommandHandler();
      theClient0.getClientAuthenticationHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getSocketChannel();
      theClient0.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient0.toString();
      theClient0.getClientData();
      theClient1.setClientData((ClientData) null);
      CommandHandler commandHandler1 = new CommandHandler();
      theClient0.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.setMaxAuthTry(1927);
      theClient0.getCommunicationLogging();
      theClient0.getServer();
      theClient1.getSocketChannel();
      theClient0.getClientWriteHandler();
      assertEquals((-1106), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      Class<Object> class0 = Object.class;
      quickServer0.clientDataClass = class0;
      quickServer0.setClientObjectHandler("Creatig \"lientThread pool");
      QuickServer.setDebugNonBlockingMode(true);
      quickServer0.configQuickServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getMaxAuthTryMsg();
      theClient0.getServer();
      // Undeclared exception!
      try { 
        QuickServer.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.629165102005099
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      QuickServer quickServer0 = new QuickServer((String) null, 0);
      quickServer0.run();
      quickServer0.getSecure();
      theClient0.setServer(quickServer0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTimeoutMsg("XMzlRh{cE_7\"qzS$");
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.lostConnection(blockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:4>", blockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.toString();
      theClient0.getClientEvent();
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      //  // Unstable assertion: assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Notifying IO of client {0}");
      theClient0.getTimeoutMsg();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4367466714741326
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getTimeout();
      theClient0.getTrusted();
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      theClient0.setTimeout((-1516));
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.setTrusted(false);
      theClient0.getClientData();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getTimeout();
      theClient1.getAuthenticator();
      theClient0.getClientEventHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient1.getClientEventHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getClientCommandHandler();
      theClient1.setTrusted(false);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      assertEquals((-1516), theClient0.getTimeout());
      
      theClient1.getClientExtendedEventHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTry((-2178));
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry(1059);
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      CommandHandler commandHandler1 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      try { 
        commandHandler1.handleCommand(blockingClientHandler0, "\n");
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.435964402895254
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      int int0 = theClient0.getTimeout();
      theClient0.setTimeoutMsg(", Event: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxAuthTryMsg("amF< T");
      theClient0.getClientData();
      theClient0.getClientExtendedEventHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getTimeout();
      theClient1.getAuthenticator();
      theClient0.getClientEventHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      int int1 = theClient1.getMaxAuthTry();
      assertTrue(int1 == int0);
      
      theClient0.getClientCommandHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient0.setTimeout(723);
      theClient0.getClientEvent();
      int int0 = theClient0.getTimeout();
      assertEquals(723, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, (-533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-533
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1797));
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.setMaxConnectionMsg(":0TkBK#es=kFJyjcC");
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.setMaxAuthTry((-1797));
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      quickServer0.setDefaultDataMode(defaultDataMode0);
      theClient0.setServer(quickServer0);
      theClient0.setMaxAuthTry(1);
      theClient0.getClientObjectHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getMaxConnectionMsg();
      theClient0.getServer();
      assertEquals(1, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("jFa=:IB2`B:8JWN");
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("0*7F}~u");
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.setTimeout((-2913));
      theClient0.setMaxAuthTryMsg("E`+:~v%M?uSXrWV:");
      theClient0.getMaxAuthTryMsg();
      assertEquals((-2913), theClient0.getTimeout());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1797));
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient0.getMaxAuthTry();
      theClient0.getClientBinaryHandler();
      assertEquals((-1797), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler((-2067));
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-2067-ID:1>", nonBlockingClientHandler0.getName());
      
      ClientEventHandler clientEventHandler0 = theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(clientEventHandler0);
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      Data data0 = new Data();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTrusted(true);
      theClient0.getSocket();
      theClient0.getTrusted();
      theClient1.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getTrusted());
      
      theClient1.getClientExtendedEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      socketChannel0.supportedOptions();
      theClient0.setSocketChannel(socketChannel0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) quickServer0;
      Object object0 = new Object();
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      dBObjectPoolConfig0.setDbPoolUtil(":#!D<ivB~}%GK");
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      objectArray0[3] = object0;
      quickServer0.initService(objectArray0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setMaxAuthTry(304);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(304, int0);
  }
}
