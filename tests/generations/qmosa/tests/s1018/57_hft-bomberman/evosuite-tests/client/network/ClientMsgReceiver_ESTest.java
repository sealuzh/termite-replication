/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:21:29 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.Socket;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransientException;
import messages.global.GlobalChatMsg;
import messages.global.JoinAckMsg;
import messages.round.RoundTimeOverMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = "B`TjVh4}~*dt^";
      String string1 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", 240);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("B`TjVh4}~*dt^", (String) null, 240);
      SQLException sQLException0 = new SQLException("B`TjVh4}~*dt^", (String) null, sQLDataException0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string2 = null;
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string2, string0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "p'");
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-15);
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      MockURL.getFtpExample();
      int int0 = 86;
      String string0 = "";
      String string1 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string0, string1, int0);
      String string2 = "]/XRq`D=qJR\"%,Hc";
      SQLException sQLException0 = new SQLException(string1, string2, sQLInvalidAuthorizationSpecException0);
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) clientMsgReceiver0;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, clientMsgReceiver0);
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) clientMsgReceiver0;
      threadArray0[3] = (Thread) clientMsgReceiver0;
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, clientMsgReceiver0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      BomberClient.getInstance();
      BomberClient bomberClient1 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, bomberClient1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Couldn't close input stream");
      MockSocket mockSocket0 = new MockSocket();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "p'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Couldn't close input stream");
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zGtkOUFKd:1;<Xbc']");
      System.setCurrentTimeMillis(32L);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      RoundTimeOverMsg roundTimeOverMsg0 = new RoundTimeOverMsg();
      clientMsgReceiver0.processMsg(roundTimeOverMsg0);
      String string0 = "Couldn't close input stream";
      MockSocket mockSocket1 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string1 = "";
      String string2 = "V";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string2);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string3 = "l75U";
      String string4 = "Calculating scores...";
      int int0 = 0;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string2, string3, string4, int0);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string5 = "";
      String string6 = "3&seu\\";
      stackTraceElementArray0[1] = stackTraceElement0;
      String string7 = "";
      StackTraceElement stackTraceElement1 = new StackTraceElement(string7, string5, string6, int0);
      stackTraceElementArray0[2] = stackTraceElement1;
      String string8 = "3-ce+Wlf`}t.HX~1 ";
      StackTraceElement stackTraceElement2 = new StackTraceElement(string6, string8, string7, int0);
      stackTraceElementArray0[3] = stackTraceElement2;
      String string9 = "#RF{^^kQ2RS2M\\.IIa";
      String string10 = "";
      StackTraceElement stackTraceElement3 = new StackTraceElement(string4, string9, string10, int0);
      stackTraceElementArray0[4] = stackTraceElement3;
      int int1 = 24;
      StackTraceElement stackTraceElement4 = new StackTraceElement(string9, string0, string7, int1);
      stackTraceElementArray0[5] = stackTraceElement4;
      String string11 = "";
      String string12 = "+*l7N";
      StackTraceElement stackTraceElement5 = new StackTraceElement(string11, string12, string0, int0);
      stackTraceElementArray0[6] = stackTraceElement5;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      SQLException sQLException0 = new SQLException(string0, string1, sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = true;
      int int2 = 0;
      JoinAckMsg joinAckMsg0 = new JoinAckMsg(boolean0, int2);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(joinAckMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.BomberClient", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Socket socket0 = null;
      String string0 = "IG,=\"?|^Z)d-";
      String string1 = "#zAY)/*eNZK\"ylI@Un";
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(socket0, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }
}
