/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:08:05 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.Dimension;
import java.awt.RenderingHints;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseWheelListener;
import java.awt.event.TextListener;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.renderable.ParameterBlock;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.Proxy;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.KeyStroke;
import javax.swing.event.ListDataListener;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      int int0 = (-8);
      visualListModel0.updateElementAt((-8), (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = visualPageListItemArray0[0];
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2722));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, arrayDeque0);
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      int[] intArray0 = new int[1];
      intArray0[0] = (-8);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualPageListItemArray1[4] = null;
      visualPageListItemArray1[5] = null;
      visualListModel0.moveUpIndex(114);
      visualListModel0.setData(visualPageListItemArray1);
      visualListModel0.elementChanged(visualPageListItemArray1[0]);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.368336764702305
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 39;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 24;
      intArray0[4] = 360;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      boolean boolean0 = vector0.add((VisualPageListItem) null);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveUpIndexes(intArray1);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualListModel0.moveDownIndex(110);
      visualPageListItemArray1[3] = null;
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      byte byte0 = (byte) (-91);
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((byte) (-91), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((byte) (-91));
      visualListModel0.data = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndex(1343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4968503600692964
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 39;
      intArray0[1] = 0;
      intArray0[2] = 13;
      intArray0[3] = 45;
      intArray0[4] = 360;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt(4, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(13);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2722));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      int[] intArray1 = new int[1];
      intArray1[0] = 4;
      visualListModel0.moveUpIndexes(intArray1);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualListModel0.addAllElements(13, (Collection<VisualPageListItem>) vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(5, vector0.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.470273112689068
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 39;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 24;
      intArray0[4] = 360;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveUpIndexes(intArray1);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4702731126890676
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 39;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 24;
      intArray0[4] = 360;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveUpIndexes(intArray1);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualListModel0.moveDownIndex(110);
      visualPageListItemArray1[3] = null;
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
      visualListModel0.updateElementAt(0, visualPageListItemArray0[3]);
      assertEquals(6, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5467743669247533
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.moveUpIndex(1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2722));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, arrayDeque0);
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualPageListItemArray1[4] = null;
      visualPageListItemArray1[5] = null;
      visualListModel0.moveUpIndex(114);
      visualListModel0.setData(visualPageListItemArray1);
      visualListModel0.elementChanged(visualPageListItemArray1[0]);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4337793456508745
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 114;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt((-1), (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      BasicComboBoxEditor[] basicComboBoxEditorArray0 = new BasicComboBoxEditor[7];
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      basicComboBoxEditorArray0[0] = (BasicComboBoxEditor) basicComboBoxEditor_UIResource0;
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      basicComboBoxEditorArray0[1] = (BasicComboBoxEditor) metalComboBoxEditor_UIResource0;
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      basicComboBoxEditorArray0[2] = (BasicComboBoxEditor) metalComboBoxEditor0;
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource1 = new MetalComboBoxEditor.UIResource();
      basicComboBoxEditorArray0[3] = (BasicComboBoxEditor) metalComboBoxEditor_UIResource1;
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      basicComboBoxEditorArray0[4] = basicComboBoxEditor0;
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource1 = new BasicComboBoxEditor.UIResource();
      basicComboBoxEditorArray0[5] = (BasicComboBoxEditor) basicComboBoxEditor_UIResource1;
      BasicComboBoxEditor basicComboBoxEditor1 = new BasicComboBoxEditor();
      basicComboBoxEditorArray0[6] = basicComboBoxEditor1;
      vector0.toArray(basicComboBoxEditorArray0);
      visualListModel0.moveUpIndex(114);
      Integer integer0 = new Integer(2418);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      MetalComboBoxEditor metalComboBoxEditor1 = new MetalComboBoxEditor();
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 113
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.522929008885028
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-394), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((byte)102);
      visualListModel0.moveDownIndex((-394));
      visualListModel0.addElement((VisualPageListItem) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2250));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, pdfGraphics2D_HyperLinkKey0);
      Object object0 = new Object();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      int[] intArray0 = new int[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[0] = (-394);
      VisualListModel visualListModel1 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((-394), (Collection<VisualPageListItem>) linkedList0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel1.setData(visualPageListItemArray0);
      try { 
        visualListModel1.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -393
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4691738278863227
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2722));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, arrayDeque0);
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualPageListItemArray1[4] = null;
      visualPageListItemArray1[5] = null;
      visualListModel0.moveUpIndex(114);
      visualListModel0.setData(visualPageListItemArray1);
      visualListModel0.elementChanged(visualPageListItemArray1[0]);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2983368449258386
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2722));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = null;
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualPageListItemArray1[4] = null;
      visualPageListItemArray1[5] = null;
      visualListModel0.moveUpIndex(114);
      visualListModel0.setData(visualPageListItemArray1);
      visualListModel0.elementChanged(visualPageListItemArray1[0]);
      List<VisualPageListItem> list0 = new Stack<VisualPageListItem>();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.171218111933964
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[2];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack1 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack1);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      Stack<Object> stack2 = new Stack<Object>();
      Stack<Object> stack3 = new Stack<Object>();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(stack3);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JComboBox<VisualPageListItem> jComboBox2 = new JComboBox<VisualPageListItem>(visualPageListItemArray0);
      defaultComboBoxModel0.removeListDataListener(jComboBox2);
      JComboBox<Object> jComboBox3 = new JComboBox<Object>(stack3);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      Stack<Object> stack1 = new Stack<Object>();
      Stack<Object> stack2 = new Stack<Object>();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(stack2);
      stack1.listIterator();
      jComboBox0.firePopupMenuWillBecomeInvisible();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultComboBoxModel0.removeListDataListener(jComboBox1);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(stack1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector0);
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      CollectionOp collectionOp0 = new CollectionOp((OperationRegistry) null, "", parameterBlock1, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "Could not instantiate configurator [", parameterBlock0);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"Could not instantiate configurator [\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.080387553220373
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize((byte)48);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      Class<BasicComboBoxEditor> class0 = BasicComboBoxEditor.class;
      defaultComboBoxModel0.getListeners(class0);
      metalComboBoxEditor_UIResource0.selectAll();
      metalComboBoxEditor_UIResource0.selectAll();
      stack0.add((Object) metalComboBoxEditor_UIResource0);
      Class<BasicComboBoxEditor> class1 = BasicComboBoxEditor.class;
      defaultComboBoxModel0.getListeners(class1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      jComboBox0.getAutoscrolls();
      jComboBox0.transferFocusUpCycle();
      jComboBox0.firePopupMenuWillBecomeInvisible();
      Class<BasicComboBoxEditor> class2 = BasicComboBoxEditor.class;
      defaultComboBoxModel0.getListeners(class2);
      defaultComboBoxModel0.getSelectedItem();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultComboBoxModel0.removeListDataListener((ListDataListener) null);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.400464949094544
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(jComboBox1);
      jComboBox1.isDoubleBuffered();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      visualListModel0.removeElements(0, 0, false);
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      jComboBox1.transferFocusUpCycle();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      Dimension dimension0 = basicComboBoxUI0.getMaximumSize((JComponent) null);
      jComboBox1.setMinimumSize(dimension0);
      stack0.addAll((Collection<?>) treeSet0);
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      visualListModel0.reverseElements(intArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jComboBox0.firePopupMenuWillBecomeInvisible();
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.361954756956034
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[4] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2723));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, arrayDeque0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[0] = visualPageListItemArray0[4];
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualPageListItemArray1[4] = null;
      visualPageListItemArray1[5] = null;
      visualListModel0.setData(visualPageListItemArray1);
      visualListModel0.elementChanged(visualPageListItemArray1[0]);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(5, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      int int0 = (-37);
      visualListModel0.updateElementAt((-37), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((-37));
      visualListModel0.moveDownIndex((-394));
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addElement((VisualPageListItem) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, (Object) null);
      Object object1 = new Object();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      try { 
        visualListModel1.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-1948), (VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(9);
      visualListModel1.moveDownIndex((-2051));
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (byte)102);
      visualListModel0.addElementAt((VisualPageListItem) null, 102);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      vector0.removeAll(stack0);
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel1.prependAllElements(vector0);
      assertEquals(2, visualListModel1.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3771876589015464
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)65;
      byteArray0[0] = (byte)39;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-1948), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((-13));
      visualListModel0.moveDownIndex((-1948));
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)102;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.updateElementAt(3104, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndex((byte)0);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 102
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(jComboBox1);
      jComboBox1.isDoubleBuffered();
      visualListModel0.removeElements((-1), (-1), false);
      jComboBox0.setVerifyInputWhenFocusTarget(false);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      jComboBox0.transferFocusDownCycle();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      Dimension dimension0 = basicComboBoxUI0.getMaximumSize((JComponent) null);
      defaultComboBoxModel0.getListDataListeners();
      jComboBox1.setMinimumSize(dimension0);
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      Dimension dimension1 = basicComboBoxUI0.getMaximumSize((JComponent) null);
      jComboBox0.setMinimumSize(dimension1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      stack0.addAll((Collection<?>) linkedHashSet0);
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      try { 
        visualListModel0.reverseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0`6)-");
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)102;
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)102;
      intArray0[1] = 270;
      intArray0[2] = (int) (byte)37;
      visualListModel0.reverseElements(intArray0);
      VisualPageListItem visualPageListItem0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[10];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray1 = new int[2];
      visualListModel0.getElements();
      intArray1[1] = (int) (byte)37;
      visualListModel0.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.147576009616535
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VisualPageListItem visualPageListItem0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((byte)102, (VisualPageListItem) null);
      visualListModel0.moveUpIndex((byte)102);
      visualListModel0.moveDownIndex((-5));
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      int int0 = (-19);
      visualListModel0.addElementAt((VisualPageListItem) null, (-19));
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addElementAt((VisualPageListItem) null, 572);
      visualListModel0.moveDownIndex(1);
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2399434145382346
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(jComboBox1);
      jComboBox1.isDoubleBuffered();
      jComboBox0.setVerifyInputWhenFocusTarget(false);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      jComboBox0.getRegisteredKeyStrokes();
      jComboBox0.transferFocusDownCycle();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      Dimension dimension0 = basicComboBoxUI0.getMaximumSize((JComponent) null);
      defaultComboBoxModel0.getListDataListeners();
      jComboBox1.setMinimumSize(dimension0);
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      visualListModel0.reverseElements(intArray0);
      dimension0.setSize(0.0, 0.0);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      defaultComboBoxModel0.addListDataListener(jComboBox1);
      defaultComboBoxModel0.setSelectedItem((Object) null);
      jComboBox1.getMouseListeners();
      jComboBox1.firePopupMenuCanceled();
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0069724918931837
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte)121;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.updateElementAt((-394), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((byte)121);
      visualListModel0.moveDownIndex((-394));
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      visualListModel0.moveDownIndex((-394));
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, pdfGraphics2D_HyperLinkKey0);
      Object object0 = new Object();
      int[] intArray0 = new int[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[0] = (-394);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -394
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-394), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((byte)102);
      visualListModel0.moveDownIndex((-394));
      visualListModel0.addElement((VisualPageListItem) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      Integer integer0 = new Integer((-2250));
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, pdfGraphics2D_HyperLinkKey0);
      Object object0 = new Object();
      Object object1 = new Object();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2250);
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2250
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9226853935616632
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J[y$lcgx5\"Bx");
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize((byte)48);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.selectAll();
      stack0.add((Object) metalComboBoxEditor_UIResource0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      Class<BasicComboBoxEditor> class0 = BasicComboBoxEditor.class;
      defaultComboBoxModel0.getListeners(class0);
      defaultComboBoxModel0.getSelectedItem();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultComboBoxModel0.removeListDataListener((ListDataListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1074233080155556
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      Stack<Object> stack1 = new Stack<Object>();
      Stack<Object> stack2 = new Stack<Object>();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(stack2);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultComboBoxModel0.removeListDataListener(jComboBox1);
      stack2.add((Object) null);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(stack2);
      jComboBox2.transferFocus();
      jComboBox2.firePopupMenuWillBecomeInvisible();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((byte) (-91), (VisualPageListItem) null);
      visualListModel0.moveUpIndex((byte) (-91));
      visualListModel0.moveDownIndex(1343);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.clear();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      vector0.spliterator();
      vector0.add((VisualPageListItem) null);
      AWTEventMulticaster.add((FocusListener) null, (FocusListener) null);
      WindowFocusListener windowFocusListener0 = mock(WindowFocusListener.class, new ViolatedAssumptionAnswer());
      WindowFocusListener windowFocusListener1 = AWTEventMulticaster.add(windowFocusListener0, windowFocusListener0);
      AWTEventMulticaster.remove(windowFocusListener1, windowFocusListener1);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.getElements();
      visualListModel0.addElementAt((VisualPageListItem) null, (-1));
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[4] = (byte)48;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize((byte)0);
      RenderingHints.Key[] renderingHints_KeyArray0 = new RenderingHints.Key[8];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      renderingHints_KeyArray0[0] = (RenderingHints.Key) sunHints_Key0;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      renderingHints_KeyArray0[1] = (RenderingHints.Key) sunHints_Key1;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      hashMap2.put(sunHints_Key4, integer2);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1331337395597156
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      visualListModel0.getListDataListeners();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)95;
      intArray0[1] = (int) (byte)37;
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = (int) (byte)37;
      intArray1[1] = 555;
      intArray1[2] = (int) (byte)102;
      intArray1[3] = 48;
      intArray1[4] = (int) (byte)102;
      intArray1[5] = (int) (byte)102;
      intArray1[6] = 517;
      visualListModel0.rotateClockwiseElements(intArray1);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 95
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.243138630046909
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(jComboBox1);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      jComboBox0.getRegisteredKeyStrokes();
      jComboBox0.transferFocusDownCycle();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      Dimension dimension0 = basicComboBoxUI0.getMaximumSize((JComponent) null);
      defaultComboBoxModel0.getListDataListeners();
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      visualListModel0.reverseElements(intArray0);
      dimension0.setSize((double) 32767, (double) 32767);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      defaultComboBoxModel0.setSelectedItem((Object) null);
      jComboBox1.getMouseListeners();
      jComboBox1.firePopupMenuCanceled();
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 32767;
      dimension0.width = 2647;
      intArray1[1] = 2647;
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 32767
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[4] = (byte)48;
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize((byte)0);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      RenderingHints.Key[] renderingHints_KeyArray0 = new RenderingHints.Key[8];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      renderingHints_KeyArray0[0] = (RenderingHints.Key) sunHints_Key0;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      renderingHints_KeyArray0[1] = (RenderingHints.Key) sunHints_Key1;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      renderingHints_KeyArray0[2] = (RenderingHints.Key) sunHints_Key2;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      renderingHints_KeyArray0[3] = (RenderingHints.Key) sunHints_Key3;
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      renderingHints_KeyArray0[4] = (RenderingHints.Key) sunHints_Key4;
      SunHints.Key sunHints_Key5 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      renderingHints_KeyArray0[5] = (RenderingHints.Key) sunHints_Key5;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      renderingHints_KeyArray0[6] = (RenderingHints.Key) sunHints_LCDContrastKey0;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      renderingHints_KeyArray0[7] = (RenderingHints.Key) pdfGraphics2D_HyperLinkKey0;
      JComboBox<RenderingHints.Key> jComboBox0 = new JComboBox<RenderingHints.Key>(renderingHints_KeyArray0);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((int) (byte)48, 0, true);
      jComboBox0.getActionForKeyStroke(keyStroke0);
      metalComboBoxEditor_UIResource0.addActionListener((ActionListener) null);
      metalComboBoxEditor_UIResource0.selectAll();
      stack0.add((Object) metalComboBoxEditor_UIResource0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(visualPageListItemArray0, (byte)48);
      stack0.add((Object) defaultTableModel0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(stack0);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      Class<BasicComboBoxEditor> class0 = BasicComboBoxEditor.class;
      defaultComboBoxModel0.getListeners(class0);
      defaultComboBoxModel0.getSelectedItem();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultComboBoxModel0.removeListDataListener((ListDataListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3853311541118427
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox1.isDoubleBuffered();
      visualListModel0.removeElements(0, 0, true);
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      jComboBox1.firePopupMenuWillBecomeInvisible();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      Dimension dimension0 = basicComboBoxUI0.getMaximumSize((JComponent) null);
      jComboBox1.setMinimumSize(dimension0);
      stack0.addAll((Collection<?>) treeSet0);
      defaultComboBoxModel0.removeListDataListener(jComboBox0);
      visualListModel0.reverseElements(intArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      visualListModel0.removeElements((int) (byte)26, (-2296), false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jComboBox0.firePopupMenuWillBecomeInvisible();
      visualListModel0.moveUpIndexes(intArray0);
      Byte byte0 = new Byte((byte)26);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.398805401317134
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.addElement((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      visualListModel0.moveUpIndex(1);
      visualListModel0.moveDownIndex(1343);
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      vector0.clear();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      vector0.spliterator();
      vector1.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 1343);
      visualListModel0.addElementAt((VisualPageListItem) null, 50);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      ArrayDeque<VisualPageListItem> arrayDeque1 = new ArrayDeque<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualListModel0.setData(visualPageListItemArray0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3143719702816234
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultComboBoxModel0;
      objectArray0[1] = (Object) jComboBox0;
      objectArray0[2] = (Object) defaultComboBoxModel0;
      objectArray0[3] = (Object) jComboBox0;
      objectArray0[4] = (Object) jComboBox0;
      objectArray0[5] = (Object) defaultComboBoxModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      Object object0 = new Object();
      jComboBox1.removeItem(jComboBox0);
      visualListModel0.removeListDataListener(jComboBox0);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      stack0.add((VisualPageListItem) null);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.addAllElements((Collection<VisualPageListItem>) stack0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getSize();
      VisualListModel visualListModel4 = new VisualListModel();
      VisualListModel visualListModel5 = new VisualListModel();
      visualListModel5.getValidElements();
      int[] intArray0 = new int[0];
      visualListModel2.undeleteElements(intArray0);
      assertEquals(1, visualListModel2.getSize());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.453728460904923
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultComboBoxModel0;
      objectArray0[1] = (Object) jComboBox0;
      objectArray0[2] = (Object) defaultComboBoxModel0;
      objectArray0[3] = (Object) jComboBox0;
      objectArray0[4] = (Object) jComboBox0;
      objectArray0[5] = (Object) defaultComboBoxModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      Object object0 = new Object();
      jComboBox1.removeItem(jComboBox0);
      visualListModel0.removeListDataListener(jComboBox0);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      stack0.add((VisualPageListItem) null);
      VisualListModel visualListModel2 = new VisualListModel();
      stack0.add((VisualPageListItem) null);
      visualListModel2.addAllElements((Collection<VisualPageListItem>) stack0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getSize();
      VisualListModel visualListModel4 = new VisualListModel();
      VisualListModel visualListModel5 = new VisualListModel();
      visualListModel5.getValidElements();
      int[] intArray0 = new int[0];
      visualListModel2.undeleteElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 50);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream1.skip((byte)0);
      pipedInputStream1.skip((byte)0);
      pipedInputStream1.close();
      pipedInputStream1.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      VisualListModel visualListModel0 = new VisualListModel();
      boolean boolean0 = new Boolean(false);
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster3, (TextListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster11, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster14);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster7, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster7);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster2, (TextListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster12, (ComponentListener) aWTEventMulticaster0);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      Object object0 = visualListModel0.getElementAt(13);
      assertNull(object0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0608333657846836
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.elementChanged(visualPageListItemArray0[0]);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayDeque0);
      assertEquals(3, visualListModel0.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[0];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Integer integer1 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer.getInteger("Ax,+", integer1);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key2, integer1);
      Integer integer2 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Boolean boolean0 = new Boolean(false);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream0.skip(0L);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(91, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(91) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      WindowStateListener windowStateListener0 = mock(WindowStateListener.class, new ViolatedAssumptionAnswer());
      WindowStateListener windowStateListener1 = mock(WindowStateListener.class, new ViolatedAssumptionAnswer());
      WindowStateListener windowStateListener2 = AWTEventMulticaster.add(windowStateListener0, windowStateListener1);
      AWTEventMulticaster.remove(windowStateListener2, windowStateListener2);
      AWTEventMulticaster.add((WindowStateListener) null, (WindowStateListener) null);
      WindowStateListener windowStateListener3 = AWTEventMulticaster.remove(windowStateListener2, (WindowStateListener) null);
      WindowStateListener windowStateListener4 = AWTEventMulticaster.add(windowStateListener3, windowStateListener2);
      AWTEventMulticaster.remove((WindowStateListener) null, windowStateListener4);
      AWTEventMulticaster.remove((WindowStateListener) null, (WindowStateListener) null);
      AWTEventMulticaster.add((WindowStateListener) null, windowStateListener4);
      AWTEventMulticaster.add((WindowStateListener) null, (WindowStateListener) null);
      AWTEventMulticaster.add(windowStateListener2, (WindowStateListener) null);
      AWTEventMulticaster.remove((WindowStateListener) null, windowStateListener3);
      AWTEventMulticaster.remove((WindowStateListener) null, (WindowStateListener) null);
      AWTEventMulticaster.add((WindowStateListener) null, (WindowStateListener) null);
      AWTEventMulticaster.remove((WindowStateListener) null, (WindowStateListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((int) (byte)0, (Collection<VisualPageListItem>) linkedList0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(871, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 871
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jI{:EcN~S,An{JRto@");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(871, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 871
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jI{:EcN~S,An{JRto@");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(871, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 871
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, (-565), (-565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -565
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, componentListener1);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, componentListener1);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, componentListener1);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster1, (AdjustmentListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster13, (ComponentListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster2);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      boolean boolean0 = new Boolean("");
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) componentListener0;
      objectArray0[4] = (Object) null;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      jComboBox0.addComponentListener((ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements((int) (byte)28, 1091, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, componentListener2);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((TextListener) aWTEventMulticaster1, (TextListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) null);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster10, (KeyListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster15, componentListener1);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements((int) (byte)0, (-636), false);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.skip(0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-222), (-482), true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, componentListener2);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((TextListener) aWTEventMulticaster1, (TextListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) null);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster10, (KeyListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster15, componentListener1);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements((int) (byte)0, (int) (byte)0, false);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, componentListener2);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, (ComponentListener) aWTEventMulticaster2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, componentListener1);
      AWTEventMulticaster.add((TextListener) aWTEventMulticaster7, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((TextListener) aWTEventMulticaster1, (TextListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) null);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster10, (KeyListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster15, componentListener1);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements((int) (byte)0, (int) (byte)0, true);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")xm");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) null);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster4, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) aWTEventMulticaster0);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, componentListener2);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((TextListener) aWTEventMulticaster1, (TextListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) null);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster10, (KeyListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster15, componentListener1);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, false);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[1] = object0;
      objectArray0[3] = object0;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      Object object1 = new Object();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      priorityQueue0.remove((Object) sunHints_Key1);
      visualListModel0.appendAllElements(priorityQueue0);
      List<VisualPageListItem> list0 = new ArrayList<VisualPageListItem>();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1233);
      // Undeclared exception!
      try { 
        visualListModel0.subList((int) (byte)0, (-1233), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1233)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      hashMap0.put(sunHints_Key0, "D~");
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Integer integer0 = new Integer(0);
      hashMap1.putIfAbsent(sunHints_Key0, integer0);
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      hashMap1.put(sunHints_Key1, integer2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 125;
      floatArray0[1] = (float) (-1091);
      floatArray0[3] = (float) 125;
      floatArray0[4] = (float) (-1091);
      floatArray0[5] = (float) 125;
      Kernel kernel0 = new Kernel(125, 0, floatArray0);
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Function<RenderingHints.Key, String> function0 = (Function<RenderingHints.Key, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      hashtable0.put(sunHints_Key1, "");
      hashtable0.computeIfAbsent(sunHints_Key1, function0);
      RenderingHints renderingHints2 = new RenderingHints(hashtable0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, (-1091), renderingHints2);
      Boolean boolean0 = new Boolean(true);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 2036, true);
      assertNull(collection0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, false);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      hashMap1.put(sunHints_Key1, integer1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 125;
      floatArray0[1] = (float) (-1091);
      floatArray0[3] = (float) 125;
      floatArray0[4] = (float) (-1091);
      floatArray0[5] = (float) 125;
      Kernel kernel0 = new Kernel(125, 0, floatArray0);
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Function<RenderingHints.Key, String> function0 = (Function<RenderingHints.Key, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.awt.RenderingHints.Key.class));
      hashtable0.computeIfAbsent(sunHints_Key1, function0);
      RenderingHints renderingHints2 = new RenderingHints(hashtable0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, (-1091), renderingHints2);
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.updateElementAt((byte) (-85), (VisualPageListItem) null);
      visualListModel0.subList((int) (byte) (-85), (int) (byte) (-85));
      visualListModel0.moveUpIndex((byte) (-85));
      int int0 = 1343;
      visualListModel0.moveDownIndex(1343);
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      vector0.add((VisualPageListItem) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-85);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(11, (byte) (-85), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.markSupported();
      pipedInputStream2.markSupported();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream2.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(256, 256, false);
      assertNull(collection0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.markSupported();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream2.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1353), (-1353), false);
      assertNull(collection0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.subList(4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(4) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, componentListener2);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener2, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener2, componentListener1);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((TextListener) aWTEventMulticaster1, (TextListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster0, (AdjustmentListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster10);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster9, (KeyListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster14);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) aWTEventMulticaster13);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster14, componentListener1);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster12, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster15);
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((int) (byte)0, (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster9, (HierarchyBoundsListener) aWTEventMulticaster10);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster12, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster13, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster14, (ComponentListener) aWTEventMulticaster7);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      visualListModel0.moveDownIndexes(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, componentListener1);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove(componentListener1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, componentListener1);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, componentListener1);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster1, (AdjustmentListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster10, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster5, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster16, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster13, (ComponentListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) aWTEventMulticaster2);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      int int0 = 761;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(761, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream0.skip(0L);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream3);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2518);
      intArray0[1] = 850;
      intArray0[2] = 603;
      intArray0[3] = (-269);
      intArray0[4] = 755;
      intArray0[5] = 1099;
      intArray0[6] = 6;
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(7, intArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster3, (TextListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster2, (AdjustmentListener) aWTEventMulticaster10);
      AWTEventMulticaster.remove((FocusListener) aWTEventMulticaster0, (FocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster3, (HierarchyListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((FocusListener) aWTEventMulticaster6, (FocusListener) aWTEventMulticaster11);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster6, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster9, (ComponentListener) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) visualListModel0;
      objectArray0[1] = (Object) visualListModel0;
      objectArray0[2] = (Object) visualListModel0;
      objectArray0[3] = (Object) visualListModel0;
      objectArray0[4] = (Object) visualListModel0;
      objectArray0[5] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jComboBox0.removeHierarchyListener((HierarchyListener) null);
      Object object0 = new Object();
      jComboBox0.removeItem(object0);
      visualListModel0.removeListDataListener(jComboBox0);
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster4, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster1, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((TextListener) aWTEventMulticaster3, (TextListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster2, (AdjustmentListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((FocusListener) aWTEventMulticaster0, (FocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster6, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster17 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster3, (ComponentListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster11, (ComponentListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster aWTEventMulticaster18 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster9, (ComponentListener) null);
      AWTEventMulticaster aWTEventMulticaster19 = (AWTEventMulticaster)AWTEventMulticaster.add((AdjustmentListener) aWTEventMulticaster2, (AdjustmentListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster16, (HierarchyBoundsListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster12, (KeyListener) aWTEventMulticaster14);
      AWTEventMulticaster aWTEventMulticaster20 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster19, (WindowListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster6, (WindowListener) aWTEventMulticaster20);
      AWTEventMulticaster aWTEventMulticaster21 = (AWTEventMulticaster)AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster6, (ComponentListener) aWTEventMulticaster18);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster18, (ContainerListener) aWTEventMulticaster17);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster21, (ComponentListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster18, (ComponentListener) aWTEventMulticaster0);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.mark(1426);
      pipedInputStream1.skip(0L);
      pipedInputStream0.mark(240);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream2.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream1);
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedHashSet0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key1);
      visualListModel0.moveDownIndex((-411));
      visualListModel0.moveDownIndex(3562);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Nm");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 18;
      intArray0[3] = 2271;
      intArray0[4] = (-1);
      intArray0[5] = (-1236);
      intArray0[6] = 5000;
      intArray0[7] = 93;
      intArray0[8] = 4304;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream2);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = 3348;
      intArray0[1] = 270;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 270;
      visualListModel0.undeleteElements(intArray0);
      assertEquals(5, intArray0.length);
  }
}
