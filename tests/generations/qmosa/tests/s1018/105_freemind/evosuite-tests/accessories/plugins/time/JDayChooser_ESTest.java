/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:09:50 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.File;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import javax.swing.AbstractButton;
import javax.swing.ActionMap;
import javax.swing.InputVerifier;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerNumberModel;
import javax.swing.TransferHandler;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.PlainDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.crimson.tree.DOMImplementationImpl;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.OutputProperties;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.DTDConfiguration;
import org.apache.xerces.parsers.NonValidatingConfiguration;
import org.apache.xerces.parsers.XPointerParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xerces.xni.grammars.XMLGrammarPool;
import org.apache.xml.utils.ListingErrorHandler;
import org.apache.xml.utils.SAXSourceLocator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import org.w3c.dom.DOMException;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.265246628708609
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 2235;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(containerListener0, containerListener0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMonth(2235);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null);
      MenuSelectionManager.defaultManager();
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(802);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      MockDate mockDate0 = new MockDate(18, 2, 2235);
      jDayChooser1.setSelectableDateRange(date0, mockDate0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.178953052119458
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent((-1846));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-1846));
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle(style0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      styleContext1.getForeground(styleContext_NamedStyle0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.setEnabled(false);
      Style style1 = jTextPane0.getLogicalStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle(style1);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle("30", styleContext_NamedStyle0);
      StyleContext styleContext2 = new StyleContext();
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jTextPane0, 37, (-1846), 1764, 37, '[');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1970988700831766
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      MockDate mockDate0 = new MockDate((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, (-359), (-1437625606), (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING);
      JDayChooser jDayChooser0 = new JDayChooser();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl1);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      ParsePosition parsePosition0 = new ParsePosition((int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      mockSimpleDateFormat0.parse("~V_I", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2021525171555334
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent((-1846));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-1846));
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle(style0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      styleContext1.getForeground(styleContext_NamedStyle0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, (-1846), "day", (-1846));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      jDayChooser0.getInputVerifier();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.updateUI();
      jDayChooser0.getMinSelectableDate();
      jDayChooser_DecoratorButton0.isRolloverEnabled();
      ListingErrorHandler listingErrorHandler0 = new ListingErrorHandler();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SAXSourceLocator sAXSourceLocator0 = new SAXSourceLocator();
      SAXParseException sAXParseException0 = new SAXParseException("day", sAXSourceLocator0);
      sAXParseException0.fillInStackTrace();
      try { 
        listingErrorHandler0.error(sAXParseException0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      MockDate mockDate0 = new MockDate((-1670), (-1670), 8881, 4, 8881, 0);
      mockDate0.toInstant();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1998717279184157
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 2235;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 2235, 2916L, 424, 424, '.', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(2235, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getCharacterAttributes();
      styleContext0.getForeground(attributeSet0);
      StringContent stringContent0 = new StringContent((-1431655763));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane1 = new JTextPane(defaultStyledDocument0);
      Style style0 = jTextPane1.getLogicalStyle();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle(style0);
      jTextPane1.addStyle("30", styleContext_NamedStyle0);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      PlainDocument plainDocument0 = new PlainDocument();
      jDayChooser0.setDay((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setName("13");
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent((-1846));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-1846));
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle(style0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      styleContext1.getForeground(styleContext_NamedStyle0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Style style1 = jTextPane0.getLogicalStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle(style1);
      jTextPane0.addStyle("30", styleContext_NamedStyle1);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      PlainDocument plainDocument0 = new PlainDocument();
      jDayChooser0.setDay((-1846));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(228);
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.170162676756856
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.getAlignmentX();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.removeAll();
      jDayChooser0.setMonth((-1531));
      jDayChooser0.drawDays();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(30, int0);
      
      jDayChooser0.updateUI();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1390048668717827
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent((-1846));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-1846));
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle(style0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      styleContext1.getForeground(styleContext_NamedStyle0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Style style1 = jTextPane0.getLogicalStyle();
      Style style2 = jTextPane0.addStyle("30", style1);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("30", style2);
      StyleContext styleContext2 = new StyleContext();
      System.setCurrentTimeMillis(2436L);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1427167377878287
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-1531));
      jDayChooser0.drawDays();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.updateUI();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext.getDefaultStyleContext();
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("LAg6[3x3\u0002gD!N");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 27, 27, 4699, 37, 'i', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-218L));
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("31");
      MenuSelectionManager.defaultManager();
      JPopupMenu jPopupMenu0 = new JPopupMenu("31");
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenuItem jMenuItem0 = jMenu0.add((JMenuItem) jCheckBoxMenuItem0);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 164, 0L, 164, (-367), 'B', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent((-1846));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-1846));
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle(style0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      styleContext1.getForeground(styleContext_NamedStyle0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getLogicalStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("30", style0);
      StyleContext styleContext2 = new StyleContext();
      System.setCurrentTimeMillis((-1846));
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.181575842284971
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 2235;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(containerListener0, containerListener0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMonth(2235);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMonth(10027);
      jDayChooser0.getPreferredSize();
      jDayChooser0.drawDays();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.getDaysInMonth();
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.updateUI();
      jDayChooser0.updateUI();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2283687245662365
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(459L);
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      OutputProperties outputProperties0 = new OutputProperties("day");
      SVGGeneratorContext.createDefault(outputProperties0);
      jDayChooser1.setToolTipText("day");
      jDayChooser1.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser1.getDaysInMonth();
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuElement[] menuElementArray0 = new MenuElement[4];
      MenuSelectionManager.defaultManager();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2404401212809124
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      jDayChooser0.getSize((Dimension) null);
      jDayChooser0.getGraphics();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      int int0 = 100;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 87, 0L, 100, 0, 'V');
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = null;
      try {
        defaultStyledDocument0 = new DefaultStyledDocument((AbstractDocument.Content) null, styleContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1962175022002226
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl1);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.211532887319742
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createVolatileImage((-1832), 19);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isPaintingForPrint();
      jDayChooser0.setToolTipText("day");
      jDayChooser0.getMouseMotionListeners();
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser0.getDaysInMonth();
      Date date0 = jDayChooser1.getMinSelectableDate();
      jDayChooser1.updateUI();
      jDayChooser1.setMinSelectableDate(date0);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.getInputMap();
      JComponent.getDefaultLocale();
      jDayChooser0.init();
      jDayChooser0.createVolatileImage((-2039), (-1832));
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setInheritsPopupMenu(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.addListeners(29);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.xml.serializer.ToXMLSAXHandler";
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl1);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREA;
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      ActionEvent actionEvent0 = new ActionEvent(dTDConfiguration0, 34, "YM<XBuQ1@fT", 0L, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE);
      JDayChooser jDayChooser0 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      ActionEvent actionEvent1 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute1, (int) gVTAttributedCharacterIterator_TextAttribute1.ADJUST_SPACING, "day", 1024L, 164);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2119203643951164
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(459L);
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JPopupMenu jPopupMenu0 = new JPopupMenu("|C=W|k)c-:xH@\"<9u{");
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      menuElementArray0[5] = (MenuElement) jMenu0;
      menuElementArray0[6] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 8230, 8230, 8230, 27, 'B', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) styleContext0;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_SmallAttributeSet0);
      jDayChooser0.setFont(font0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(63727);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2307844118023574
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.xml.serializer.ToXMLSAXHandler";
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl1);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(228, color0.getGreen());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1031;
      jDayChooser0.getAncestorListeners();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1031, true);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "31";
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.GERMAN;
      Color color0 = Color.BLACK;
      Color color1 = Color.cyan;
      Color.getColor("31", 6);
      jDayChooser0.setForeground(color1);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1339368760936828
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(614);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool((XMLGrammarPool) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(614);
      jDayChooser0.getPreferredSize();
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 541, 140, 140, 31, 'k');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.init();
      jDayChooser0.updateUI();
      Color color0 = Color.white;
      jDayChooser0.setForeground(color0);
      SymbolTable symbolTable1 = new SymbolTable();
      XPointerParserConfiguration xPointerParserConfiguration0 = null;
      try {
        xPointerParserConfiguration0 = new XPointerParserConfiguration();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // org.apache.xerces.parsers.XML11Configuration.addCommonComponent(Lorg/apache/xerces/xni/parser/XMLComponent;)V
         //
         verifyException("org.apache.xerces.parsers.XPointerParserConfiguration", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JPopupMenu jPopupMenu0 = new JPopupMenu("|C=W|k)c-:xH@\"<9u{");
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[3] = (MenuElement) jPopupMenu0;
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jMenu0;
      menuElementArray0[6] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 'B', 'B', 'B', 27, 'B', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3250590428279865
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8201);
      jDayChooser0.setMaxDayCharacters(8201);
      jDayChooser0.removeAll();
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color.getColor((String) null, (Color) systemColor0);
      Color color0 = Color.black;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color1 = defaultTreeCellRenderer0.getBorderSelectionColor();
      color1.getRGBColorComponents((float[]) null);
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.setEnabled(false);
      boolean boolean0 = false;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlwaysFireDayProperty(false);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement(2948);
      GlyphView glyphView0 = new GlyphView(element0);
      Color color0 = Color.lightGray;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.218289909045865
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Color color0 = defaultStyledDocument0.getBackground(attributeSet0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getFocusListeners();
      jDayChooser0.setMaxDayCharacters((-30));
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.169928619014811
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setActionMap((ActionMap) null);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDaysInMonth();
      DOMImplementationImpl dOMImplementationImpl0 = new DOMImplementationImpl();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("30", (String) null, (String) null);
      try { 
        dOMImplementationImpl0.createDocument("30", "30", genericDocumentType0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: That node doesn't belong in this document.
         //
         verifyException("org.apache.crimson.tree.ParentNode", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getStyle("#-q7n^yQ\"_z[O dmQJ");
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle("#-q7n^yQ\"_z[O dmQJ", (Style) null);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle("J6l\"V##K", styleContext_NamedStyle0);
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.getSelectedPath();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2217519705689366
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.setDecorationBordersVisible(true);
      mockGregorianCalendar0.getWeeksInWeekYear();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.230845558174543
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.grabFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "31");
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange(date0, date0);
      System.setCurrentTimeMillis(60000L);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.372026591480539
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.drawWeeks();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      Color color0 = jDayChooser0.getWeekdayForeground();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setYear(0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.init();
      jDayChooser0.getLocale();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      StyleContext styleContext0 = new StyleContext();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) color0;
      objectArray0[1] = (Object) jMonthChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      objectArray0[4] = (Object) date0;
      objectArray0[5] = (Object) color0;
      objectArray0[6] = (Object) jPanel0;
      objectArray0[7] = (Object) color0;
      objectArray0[8] = (Object) color0;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      styleContext0.getFont((AttributeSet) styleContext_SmallAttributeSet0);
      MockFile mockFile0 = new MockFile("day", "0");
      MockFile mockFile1 = new MockFile(mockFile0, "0");
      // Undeclared exception!
      try { 
        Font.createFont(14, (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // font format not recognized
         //
         verifyException("java.awt.Font", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1237080994430295
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SymbolTable symbolTable0 = new SymbolTable(614);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool((XMLGrammarPool) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(614);
      jDayChooser0.getPreferredSize();
      jDayChooser0.drawDays();
      StyleContext styleContext1 = new StyleContext();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setFocus();
      XPointerParserConfiguration xPointerParserConfiguration0 = null;
      try {
        xPointerParserConfiguration0 = new XPointerParserConfiguration();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // org.apache.xerces.parsers.XML11Configuration.addCommonComponent(Lorg/apache/xerces/xni/parser/XMLComponent;)V
         //
         verifyException("org.apache.xerces.parsers.XPointerParserConfiguration", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x");
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.123762976655267
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool((XMLGrammarPool) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.drawDays();
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.updateUI();
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getStyle("#-q7n^yQ\"_z[O dmQJ");
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle("#-q7n^yQ\"_z[O dmQJ", (Style) null);
      defaultStyledDocument0.getDefaultRootElement();
      StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle();
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.169993336394016
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.xml.serializer.ToXMLSAXHandler";
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl1);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.097465961594406
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 2235;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener2);
      AWTEventMulticaster.add((ContainerListener) null, containerListener2);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, containerListener2);
      AWTEventMulticaster.add((ContainerListener) null, containerListener2);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      MockDate mockDate0 = new MockDate(4053, 49, 1523, 2235, 628, 0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.maxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2316628703320616
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getStyle("\"maF\"P=_O{Xt^9d");
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle("z`V.*cQG", (Style) null);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle((Style) null);
      StyleContext.getDefaultStyleContext();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color0 = Color.GRAY;
      jDayChooser1.setWeekdayForeground(color0);
      Date date1 = jDayChooser1.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1708559617143055
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawDays();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.addKeyListener(jDayChooser0);
      jMonthChooser0.addFocusListener(jDayChooser1);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-4));
      jDayChooser0.drawDays();
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(30, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1730753622170784
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 2235;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(containerListener0, containerListener0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMonth(2235);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null);
      MenuSelectionManager.defaultManager();
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setDay(1087);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.151872121064119
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      System.setCurrentTimeMillis(459L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getTransferHandler();
      jDayChooser0.setMaxDayCharacters((-1339));
      int int0 = (-1531);
      jDayChooser0.setMonth((-3687));
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      SpinnerNumberModel spinnerNumberModel0 = null;
      try {
        spinnerNumberModel0 = new SpinnerNumberModel(9733, 4, (-1531), (-3687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (minimum <= value <= maximum) is false
         //
         verifyException("javax.swing.SpinnerNumberModel", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.decorationBackgroundColor;
      color0.getColorSpace();
      Color.getColor("Sa0h#, 4Il*_Sk^%AI", color0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.160971648207995
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 608;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(608);
      int int1 = (-1531);
      jDayChooser0.setMonth(4);
      char char0 = '~';
      Integer integer0 = new Integer((-1531));
      int int2 = 32;
      SpinnerNumberModel spinnerNumberModel0 = null;
      try {
        spinnerNumberModel0 = new SpinnerNumberModel(608, (-1531), 32, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (minimum <= value <= maximum) is false
         //
         verifyException("javax.swing.SpinnerNumberModel", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3484001768598395
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.day = 2235;
      jDayChooser0.setMaxDayCharacters((-4));
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-4));
      jDayChooser0.drawDays();
      jDayChooser0.setYear((-4));
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setName("Dialog Plain 11");
      jDayChooser0.initDecorations();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      jDayChooser0.checkImage((Image) null, 311, (-1798), (ImageObserver) jPanel0);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 132, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2743527587194046
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.setMonth(2107);
      jDayChooser0.drawDays();
      jDayChooser0.setYear(2107);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.initDecorations();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      SymbolTable symbolTable0 = new SymbolTable(88);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration();
      NonValidatingConfiguration nonValidatingConfiguration0 = new NonValidatingConfiguration(symbolTable0, cachingParserPool_SynchronizedGrammarPool0);
      DTDConfiguration dTDConfiguration1 = new DTDConfiguration(symbolTable0, xMLGrammarPoolImpl0, nonValidatingConfiguration0);
      Locale locale0 = dTDConfiguration1.getLocale();
      jDayChooser0.setLocale(locale0);
      ActionEvent actionEvent0 = new ActionEvent("images/clone_original.png", (-108), "#Text", 1L, 2077);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0927040812664064
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(614);
      SymbolTable symbolTable1 = new SymbolTable(402);
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      
      PlainDocument plainDocument0 = new PlainDocument();
      jDayChooser1.setDay(402);
      assertEquals(28, jDayChooser1.getDay());
  }
}
