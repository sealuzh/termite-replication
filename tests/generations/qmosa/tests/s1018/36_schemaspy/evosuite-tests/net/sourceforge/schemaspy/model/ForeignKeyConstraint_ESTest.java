/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 15:58:53 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.ResultSet;
import java.util.List;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 3, 3);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint.toString(list0);
      Config config0 = new Config();
      Config config1 = new Config();
      foreignKeyConstraint0.isRestrictDelete();
      Integer integer0 = new Integer(3);
      foreignKeyConstraint0.getChildColumns();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UTF-8";
      stringArray0[1] = "java.util.Collections$UnmodifiableRandomAccessList@0000000002";
      stringArray0[2] = "UTF-8";
      Config config2 = new Config(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = "20oC";
      stringArray1[2] = " references ";
      Config config3 = new Config(stringArray1);
      assertNull(config3.getConnectionPropertiesFile());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JMWC&z-Xo(|pAn;.m\"i");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-825), (-825));
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`Ax}k%h/wxGFY");
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      ForeignKeyConstraint.toString(list0);
      assertEquals((-825), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-825), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6103750560929169
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(resultSet0).getInt(anyString());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn((String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyString());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 3, 3);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      TableColumn tableColumn0 = null;
      try {
        tableColumn0 = new TableColumn((Table) null, resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C5$xq");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "C5$xq", 1828, (-3403));
      foreignKeyConstraint0.getParentColumns();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      ForeignKeyConstraint.toString(list0);
      assertEquals((-3403), foreignKeyConstraint0.getDeleteRule());
      assertEquals(1828, foreignKeyConstraint0.getUpdateRule());
      assertTrue(list0.contains(tableColumn0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`Ax}k%h/wxGFY");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "kh!?FWfy'sN*40zmFiu", (-797), (-797));
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`Ax}k%h/wxGFY");
      foreignKeyConstraint0.getChildColumns();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6642186271401247
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 353, 2);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint.toString(list0);
      ForeignKeyConstraint.toString(list0);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string0);
      
      ForeignKeyConstraint.toString(list0);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.isImplied();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.isCascadeOnDelete();
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string1);
      
      boolean boolean1 = foreignKeyConstraint0.isImplied();
      boolean boolean2 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean2 == boolean1);
      
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getName();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getDeleteRuleName();
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string2);
      
      boolean boolean3 = foreignKeyConstraint0.isReal();
      assertTrue(boolean3 == boolean0);
      assertEquals(353, foreignKeyConstraint0.getUpdateRule());
      assertTrue(boolean3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7935868607173573
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Y_2<<HN_", 0, 0);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string0);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      int int1 = foreignKeyConstraint0.getUpdateRule();
      assertTrue(int1 == int0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RYxoHFX>(`W-ZCHe");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RYxoHFX>(`W-ZCHe");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RYxoHFX>(`W-ZCHe");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 148, 148);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean0);
      assertEquals(148, foreignKeyConstraint0.getUpdateRule());
      assertEquals(148, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.setComments("");
      tableColumn0.unlinkChildren();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn2, tableColumn0, 76, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p0]&L.}:y^1eh$Y");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4Nep*U9@~");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p0]&L.}:y^1eh$Y");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "4Nep*U9@~", 148, 148);
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getParentTable();
      assertEquals(148, foreignKeyConstraint0.getDeleteRule());
      assertEquals(148, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C5$xq");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "%Ma", 1828, (-3403));
      foreignKeyConstraint0.getParentColumns();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      foreignKeyConstraint0.getChildColumns();
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aKEMpcOGfsKNE");
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setIsAutoUpdated(true);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      tableColumn0.unlinkParents();
      tableColumn0.setComments("i~/c");
      tableColumn0.setShortType("%2)5.#Z[(P:mJONaa.");
      tableColumn0.setIsAutoUpdated(false);
      tableColumn0.unlinkParents();
      tableColumn0.unlinkParents();
      tableColumn0.unlinkChildren();
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      tableColumn0.unlinkChildren();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn1.unlinkChildren();
      tableColumn0.unlinkChildren();
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      tableColumn1.setIsAutoUpdated(true);
      tableColumn1.unlinkParents();
      TableColumnMeta tableColumnMeta4 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta4).getComments();
      doReturn((String) null).when(tableColumnMeta4).getDefaultValue();
      doReturn(0).when(tableColumnMeta4).getDigits();
      doReturn((String) null).when(tableColumnMeta4).getId();
      doReturn((String) null).when(tableColumnMeta4).getName();
      doReturn(0).when(tableColumnMeta4).getSize();
      doReturn((String) null).when(tableColumnMeta4).getType();
      doReturn(false).when(tableColumnMeta4).isAutoUpdated();
      doReturn(false).when(tableColumnMeta4).isNullable();
      tableColumn1.setIsAutoUpdated(true);
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta4);
      tableColumn2.unlinkParents();
      tableColumn2.unlinkParents();
      tableColumn0.unlinkParents();
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "A1_yvq6@x]~`I=", 0, 0);
      foreignKeyConstraint0.isCascadeOnDelete();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      TableColumn tableColumn0 = null;
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(resultSet1).getInt(anyString());
      doReturn((Object) null).when(resultSet1).getObject(anyString());
      doReturn((String) null, (String) null, (String) null, (String) null).when(resultSet1).getString(anyString());
      TableColumn tableColumn1 = null;
      try {
        tableColumn1 = new TableColumn((Table) null, resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5982538439717047
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", 0, 0);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config config1 = new Config();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UTF-8";
      config1.setNumRowsEnabled(false);
      stringArray0[1] = "UTF-8";
      stringArray0[2] = "UTF-8";
      stringArray0[3] = "UTF-8";
      stringArray0[4] = "UTF-8";
      stringArray0[5] = "UTF-8";
      Config config2 = new Config(stringArray0);
      config2.setHtmlGenerationEnabled(false);
      config2.setCharset("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-90), (-90));
      Config config3 = new Config();
      config3.setSqlFormatter("}{KX");
      config0.setFontSize(1757);
      Config config4 = new Config(stringArray0);
      config0.setConnectionProperties("iw _c");
      config0.setSingleSignOn(false);
      config3.isSingleSignOn();
      config3.isSingleSignOn();
      Config.getInstance();
      config3.setHtmlGenerationEnabled(true);
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "HpCNuG;7Q-S<(vCfD", 1758, (-2765));
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals(1758, foreignKeyConstraint1.getUpdateRule());
      assertEquals((-2765), foreignKeyConstraint1.getDeleteRule());
      assertEquals(13, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config0.setDescription("UTF-8");
      config1.getSchemas();
      config0.setNumRowsEnabled(false);
      Config config2 = Config.getInstance();
      config1.isLowQuality();
      config0.getDbSpecificOptions();
      config1.setSingleSignOn(true);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "zjL$r2m}Y=2@#Tm@*", 1726, 1726);
      Config config3 = Config.getInstance();
      config1.setImpliedConstraintsEnabled(true);
      config0.setSqlFormatter("UTF-8");
      config3.setFontSize(1726);
      Config config4 = new Config();
      config4.setConnectionProperties("Y#1b^#:");
      config0.setSingleSignOn(false);
      config3.isSingleSignOn();
      config4.isSingleSignOn();
      Config config5 = Config.getInstance();
      config5.setFontSize(1726);
      config3.setHtmlGenerationEnabled(true);
      Config.getInstance();
      config0.setEncodeCommentsEnabled(true);
      config2.isEvaluateAllEnabled();
      config1.setPassword("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "UTF-8", 2215, 2215);
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals((-5), int0);
      assertEquals(2215, foreignKeyConstraint1.getUpdateRule());
      assertEquals(2215, foreignKeyConstraint1.getDeleteRule());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7935868607173568
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Y_2<<HN_", (-9), (-9));
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      int int1 = foreignKeyConstraint0.getUpdateRule();
      assertTrue(int1 == int0);
      assertEquals((-9), int1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s_UbZnQH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "s_UbZnQH", 210, 1922);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertEquals(210, foreignKeyConstraint0.getUpdateRule());
      assertEquals(1922, foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4Nep*U9@~");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-EF0aa+dDF");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".REfeY]W)y4d`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "4Nep*U9@~", 140, (-819));
      System.setCurrentTimeMillis((-819));
      foreignKeyConstraint0.getDeleteRuleName();
      assertEquals((-819), foreignKeyConstraint0.getDeleteRule());
      assertEquals(140, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta4 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "%2)5.#Z[(P:mJONaa.", 870, 1045);
      foreignKeyConstraint0.getChildTable();
      assertEquals(870, foreignKeyConstraint0.getUpdateRule());
      assertEquals(1045, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 82, 2);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getUpdateRule();
      Config config0 = null;
      try {
        config0 = new Config((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Table table0 = null;
      Config config0 = new Config();
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 2767, 2767);
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      TableColumn tableColumn0 = null;
      try {
        tableColumn0 = new TableColumn((Table) null, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 491, 3);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      assertEquals(491, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.setDescription("UTF-8");
      String[] stringArray0 = new String[16];
      config0.getSchemas();
      config0.setDbType("UTF-8");
      stringArray0[3] = "UTF-8";
      config1.setNumRowsEnabled(true);
      stringArray0[10] = "UTF-8";
      stringArray0[6] = "UTF-8";
      stringArray0[14] = "UTF-8";
      stringArray0[4] = "UTF-8";
      Config.setInstance((Config) null);
      stringArray0[15] = "UTF-8";
      Config config2 = Config.getInstance();
      config2.isLowQuality();
      config1.getDbSpecificOptions();
      config1.setSingleSignOn(true);
      config1.setDb("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 1754, 1754);
      Config.getInstance();
      config0.setImpliedConstraintsEnabled(true);
      config0.setFontSize(1754);
      Config config3 = new Config();
      Config config4 = Config.getInstance();
      config4.setSingleSignOn(true);
      config2.setHighQuality(true);
      config4.setFontSize(1754);
      config4.setHtmlGenerationEnabled(true);
      Config config5 = Config.getInstance();
      config2.setEncodeCommentsEnabled(true);
      config5.setViewsEnabled(false);
      config5.isEvaluateAllEnabled();
      config5.setPassword("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "UTF-8", 1754, 1754);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.setDescription("UTF-8");
      String[] stringArray0 = new String[7];
      config1.getSchemas();
      stringArray0[0] = "UTF-8";
      config1.setNumRowsEnabled(true);
      stringArray0[1] = "UTF-8";
      stringArray0[6] = "UTF-8";
      stringArray0[3] = "UTF-8";
      stringArray0[4] = "UTF-8";
      stringArray0[5] = "UTF-8";
      Config config2 = Config.getInstance();
      config2.isLowQuality();
      config1.getDbSpecificOptions();
      config1.setSingleSignOn(true);
      config1.setDb((String) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 1726, 1726);
      Config config3 = Config.getInstance();
      config0.setImpliedConstraintsEnabled(true);
      config3.setSqlFormatter("UTF-8");
      config0.setFontSize(1726);
      Config config4 = new Config();
      config3.setConnectionProperties("UTF-8");
      config3.setSingleSignOn(true);
      config1.isSingleSignOn();
      config3.isSingleSignOn();
      Config config5 = Config.getInstance();
      config5.setSingleSignOn(true);
      config5.setFontSize(1726);
      config5.setHtmlGenerationEnabled(true);
      Config config6 = Config.getInstance();
      config2.setEncodeCommentsEnabled(true);
      config6.isEvaluateAllEnabled();
      config6.setPassword("UTF-8");
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals(1726, foreignKeyConstraint0.getDeleteRule());
      assertEquals(1726, foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.setDescription("UTF-8");
      String[] stringArray0 = new String[16];
      config0.getSchemas();
      config0.setDbType("UTF-8");
      stringArray0[3] = "UTF-8";
      config1.setNumRowsEnabled(true);
      stringArray0[10] = "UTF-8";
      stringArray0[6] = "UTF-8";
      stringArray0[14] = "UTF-8";
      stringArray0[4] = "UTF-8";
      Config.setInstance((Config) null);
      stringArray0[15] = "UTF-8";
      Config config2 = Config.getInstance();
      config2.isLowQuality();
      config1.getDbSpecificOptions();
      config1.setSingleSignOn(true);
      config1.setDb("UTF-8");
      Config.getInstance();
      config0.setImpliedConstraintsEnabled(true);
      config0.setFontSize(1754);
      Config config3 = new Config();
      Config config4 = Config.getInstance();
      config4.setSingleSignOn(true);
      config2.setHighQuality(true);
      config4.setFontSize(1754);
      config4.setHtmlGenerationEnabled(true);
      Config config5 = Config.getInstance();
      config2.setEncodeCommentsEnabled(true);
      config5.setViewsEnabled(false);
      config5.isEvaluateAllEnabled();
      config5.setPassword("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 1754, 1754);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo((ForeignKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$lTq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Ma");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4Nep*U9@~");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%Ma");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-EF0aa+dDF");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".REfeY]W)y4d`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 140, (-819));
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertEquals(140, foreignKeyConstraint0.getUpdateRule());
      assertEquals((-819), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.204187606020906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)3;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 1);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean0);
      
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean1);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      
      foreignKeyConstraint0.getDeleteRuleName();
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Restrict delete", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c*oX1:]Sf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",r,[tj^aA#k");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "`c*oX1:]Sf", 196, (-778));
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertEquals((-778), foreignKeyConstraint0.getDeleteRule());
      assertEquals(196, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9631430312600742
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Y_2<<HN_", 18, 18);
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      int int1 = foreignKeyConstraint0.getUpdateRule();
      assertTrue(int1 == int0);
      
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      assertEquals(18, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RYxoHFX>(`W-ZCHe");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RYxoHFX>(`W-ZCHe");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RYxoHFX>(`W-ZCHe");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 148, (-778));
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals(148, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
      assertEquals((-778), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      EvoSuiteFile evoSuiteFile0 = null;
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setShortType("uo:q;");
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn0, tableColumn2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
