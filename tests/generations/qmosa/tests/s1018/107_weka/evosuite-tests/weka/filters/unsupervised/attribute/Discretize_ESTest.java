/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:32:12 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7132389994392954
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "(D{5(");
      SparseInstance sparseInstance0 = new SparseInstance(159);
      DenseInstance denseInstance0 = new DenseInstance(159);
      sparseInstance0.mergeInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      sparseInstance0.toStringNoWeight(218);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 218;
      doubleArray0[1] = (double) 1614;
      sparseInstance0.s_numericAfterDecimalPoint = 218;
      doubleArray0[3] = (double) 218;
      doubleArray0[4] = (double) 218;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances("A+C-W[", arrayList0, 159);
      Discretize discretize1 = new Discretize(".bsi");
      instances0.sort((Comparator<? super Instance>) null);
      sparseInstance1.toString(218);
      discretize0.setFindNumBins(true);
      instances0.checkInstance(sparseInstance0);
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[0];
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize2 = new Discretize();
      assertFalse(discretize2.getFindNumBins());
      
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.102665971839849
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "(D{5(");
      SparseInstance sparseInstance0 = new SparseInstance(159);
      DenseInstance denseInstance0 = new DenseInstance(159);
      sparseInstance0.mergeInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      sparseInstance0.toStringNoWeight(218);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 218;
      doubleArray0[1] = (double) 1614;
      sparseInstance0.s_numericAfterDecimalPoint = 218;
      doubleArray0[3] = (double) 218;
      doubleArray0[4] = (double) 218;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances("A+C-W[", arrayList0, 159);
      sparseInstance1.toString(218);
      discretize0.setFindNumBins(true);
      instances0.checkInstance(sparseInstance0);
      Attribute attribute0 = new Attribute("$g4@6nOPM\";9t", 218);
      attribute0.copy();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("R?'");
      discretize0.batchFinished();
      discretize0.input(sparseInstance3);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6145235356985044
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-2850);
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue("date");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5126.142950869), intArray0, 89);
      binarySparseInstance0.toString(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.isMissing((-2850));
      discretize0.setAttributeIndices("d{;8-3[];r ");
      binarySparseInstance1.insertAttributeAt(4);
      binarySparseInstance0.toString((-2121));
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1591077904146356
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;<0{T+yi;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      attribute2.toString();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.listIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[1] = 2;
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.074309703600925
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue("date");
      arrayList0.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.isMissing((-1431655765));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance3.toString();
      discretize0.batchFinished();
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.05592522077561
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue("date");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.isMissing((-1431655765));
      binarySparseInstance1.toString((-1858));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance3.toString();
      attribute0.equalsMsg(binarySparseInstance1);
      discretize0.batchFinished();
      discretize0.input(binarySparseInstance0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        instances0.firstInstance();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("UuHOmb|0\"+i!y7yim]T");
      Filter.makeCopy(discretize0);
      discretize0.m_DefaultCols = "UuHOmb|0\"+i!y7yim]T";
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 57.3459917366;
      doubleArray1[1] = (-373.65998);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 57.3459917366;
      doubleArray2[1] = (-373.65998);
      doubleArray2[2] = 57.3459917366;
      doubleArray2[3] = 2699.3584815805807;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 57.3459917366;
      doubleArray3[1] = (-373.65998);
      doubleArray3[2] = 2699.3584815805807;
      doubleArray3[3] = (-373.65998);
      doubleArray3[4] = 57.3459917366;
      doubleArray3[5] = 2699.3584815805807;
      doubleArray3[6] = (-373.65998);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 57.3459917366;
      doubleArray4[1] = 57.3459917366;
      doubleArray4[2] = 2699.3584815805807;
      doubleArray4[3] = 57.3459917366;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 2699.3584815805807;
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-373.65998);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6145235356985044
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      Attribute attribute1 = new Attribute("first-lbst", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue(".jar");
      arrayList0.add(attribute0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute2 = new Attribute("@attribute", instances0, 4);
      Attribute attribute3 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-lbst");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[3] = 2;
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      arrayList0.add(attribute2);
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0680206300282524
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'Int.[y:=I_x[|pH_oS");
      Discretize discretize0 = new Discretize();
      int int0 = (-445);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-V";
      stringArray0[1] = "g\"sb5";
      stringArray0[2] = "}7)Sgy(!";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "xH\"'F0S*";
      stringArray0[4] = " | ";
      discretize0.setDesiredWeightOfInstancesPerInterval((-445));
      stringArray0[5] = "3w'";
      stringArray0[6] = "597,597,597,597,597,0,597,597,597";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[7] = "@end";
      discretize0.setOptions(stringArray0);
      discretize0.getBinRangesString((-445));
      discretize0.getInvertSelection();
      discretize0.useBinNumbersTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(154);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.212958732141931
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      attribute2.toString();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.listIterator();
      attribute2.addStringValue("date");
      Instances instances0 = new Instances("string", arrayList0, 3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 4;
      linkedList0.add("C4x<?_|7d");
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(159);
      Attribute attribute0 = new Attribute((String) null, 218);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue((String) null);
      arrayList0.listIterator();
      Instances instances0 = new Instances("5UFDw#|gI>S?TW:", arrayList0, 99);
      Discretize discretize1 = new Discretize("@end");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-225));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.isMissing(4);
      binarySparseInstance2.toString(2102);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance2.toString();
      instances0.add((Instance) binarySparseInstance3);
      boolean boolean0 = discretize1.m_FindNumBins;
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0371346250624818
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      attribute0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute1 = new Attribute("@end");
      attribute1.indexOfValue("<:=R]g\"hiS!]1=");
      Attribute attribute2 = new Attribute("numeric", 4);
      arrayList0.add(attribute2);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances("~PR>}!LCCCk*0].vY~B", arrayList0, 3586);
      Attribute attribute3 = new Attribute("date", instances0, (-2850));
      Attribute attribute4 = new Attribute("QR", 0);
      Discretize discretize0 = new Discretize("'All'");
      Attribute attribute5 = new Attribute("'All'", instances0);
      attribute5.enumerateValues();
      attribute2.isInRange(1);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize1.setBins(0);
      discretize1.batchFinished();
      Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.996229925720053
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      Attribute attribute1 = new Attribute("first-lbst", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue(".jar");
      Attribute attribute2 = new Attribute("Instances: attribute must be numeri, to compute kth-smallest value.", linkedList0);
      arrayList0.add(attribute2);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-lbst");
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getMakeBinary());
      
      discretize1.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      boolean boolean0 = discretize1.batchFinished();
      assertFalse(boolean0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-3));
      discretize1.convertInstance(binarySparseInstance0);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getFindNumBins());
      assertTrue(discretize1.isNewBatch());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nTrain: ");
      byteArray0[0] = (byte)62;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Discretize discretize0 = new Discretize("\nTrain: ");
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte)62;
      doubleArray1[3] = (double) (byte)62;
      doubleArray1[2] = (double) (byte)62;
      doubleArray1[3] = (double) (byte)62;
      doubleArray1[4] = (double) (byte)62;
      doubleArray1[5] = (double) (byte)62;
      doubleArray1[6] = (-1908.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (byte)62;
      doubleArray2[1] = (-1908.0);
      doubleArray2[2] = (double) (byte)62;
      doubleArray2[3] = (double) (byte)62;
      doubleArray2[4] = (double) (byte)62;
      doubleArray2[5] = (double) (byte)62;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) (byte)62;
      doubleArray3[1] = 1.7976931348623157E308;
      doubleArray3[2] = (-1908.0);
      doubleArray3[3] = (-1908.0);
      doubleArray3[4] = (double) (byte)62;
      doubleArray3[5] = (double) (byte)62;
      doubleArray3[6] = (-1908.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1908.0);
      doubleArray4[1] = 4.8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) (byte)62;
      doubleArray5[1] = 4.8;
      doubleArray5[2] = 4.8;
      doubleArray5[3] = 1.7976931348623157E308;
      doubleArray5[4] = 4.8;
      doubleArray5[5] = 1.7976931348623157E308;
      doubleArray5[6] = 1.7976931348623157E308;
      doubleArray5[7] = (double) (byte)62;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 4.8;
      doubleArray6[1] = (double) (byte)62;
      doubleArray6[2] = 1.7976931348623157E308;
      doubleArray6[3] = (double) (byte)62;
      doubleArray6[4] = (double) (byte)62;
      doubleArray6[5] = 1.7976931348623157E308;
      doubleArray6[6] = 4.8;
      doubleArray6[7] = 4.8;
      doubleArray6[8] = 4.8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-0.1);
      doubleArray7[1] = 1.7976931348623157E308;
      doubleArray7[2] = (double) (byte)62;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = 4.8;
      doubleArray8[1] = (double) (byte)62;
      doubleArray8[2] = 1.7976931348623157E308;
      doubleArray8[3] = 1.7976931348623157E308;
      doubleArray8[4] = (-1.0);
      doubleArray8[5] = 4.8;
      doubleArray8[6] = (double) (byte)62;
      doubleArray8[7] = 4.8;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 371
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2975049169006727
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{Tyq;z[i=", 2085);
      Attribute attribute1 = new Attribute("first-last", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute2);
      arrayList1.add(attribute2);
      arrayList1.listIterator();
      Object object0 = new Object();
      attribute2.equals(object0);
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[2] = 1;
      attribute2.enumerateValues();
      intArray0[3] = 2;
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.calculateCutPoints();
      discretize0.findNumBins(0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -551
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1065234924042353
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue("date");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5126.142950869), intArray0, 89);
      binarySparseInstance0.toString(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.isMissing((-2850));
      binarySparseInstance1.insertAttributeAt(4);
      binarySparseInstance0.toString((-2121));
      discretize0.setMakeBinary(true);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1);
      binarySparseInstance1.toString((-2850));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance2.toString();
      boolean boolean0 = discretize0.m_FindNumBins;
      discretize0.input(binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      boolean boolean1 = discretize0.m_FindNumBins;
      discretize0.getIgnoreClass();
      instances0.firstInstance();
      Filter.useFilter(instances0, discretize0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance3);
      Locale.getISOLanguages();
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1662521509908848
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      Attribute attribute1 = new Attribute("first-lbst", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue(".jar");
      Attribute attribute2 = new Attribute("Instances: attribute must be numeri, to compute kth-smallest value.", linkedList0);
      arrayList0.add(attribute2);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize();
      linkedList0.add("{]j\"[V1UIGD6~Q|");
      Discretize discretize1 = new Discretize("weka.core.UnsupportedAttributeTypeException");
      Attribute attribute5 = new Attribute("@end", 2);
      arrayList0.add(attribute5);
      Discretize discretize2 = new Discretize();
      discretize2.setInputFormat(instances0);
      SystemInUtil.addInputLine("PSJ ]");
      discretize2.setMakeBinary(true);
      discretize2.batchFinished();
      discretize2.findNumBins(0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-3656.34196192), doubleArray0);
      boolean boolean0 = discretize2.input(sparseInstance0);
      assertFalse(discretize2.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.986089585811924
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      Attribute attribute1 = new Attribute("first-last", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute2);
      arrayList1.add(attribute2);
      arrayList1.listIterator();
      Object object0 = new Object();
      attribute2.equals(object0);
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[2] = 1;
      intArray0[3] = 2;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5163528143327567
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      Attribute attribute1 = new Attribute("first-lbst", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue(".jar");
      arrayList0.add(attribute0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute2 = new Attribute("@attribute", instances0, 4);
      Attribute attribute3 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-lbst");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[3] = 2;
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'dAYh;e0{T+yq;z[iB=' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0660255996299464
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      attribute2.toString();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.listIterator();
      attribute2.addStringValue("date");
      Instances instances0 = new Instances("string", arrayList0, 3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("relational");
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-326));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -326
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SystemInUtil.addInputLine("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      byteArray0[0] = (byte)0;
      SystemInUtil.addInputLine("DoNotLoadIfClassNotPresentMessage");
      Discretize discretize0 = new Discretize();
      discretize0.getBins();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "DoNotLoadIfClassNotPresentMessage";
      stringArray0[1] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[2] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[3] = "-B";
      stringArray0[4] = "DoNotLoadIfClassNotPresentMessage";
      stringArray0[5] = "DoNotLoadIfClassNotPresentMessage";
      stringArray0[6] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"DoNotLoadIfClassNotPresentMessage\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9166731665848316
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{Tyq;z[i=", (-2850));
      Attribute attribute1 = new Attribute("first-last", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute2);
      arrayList1.add(attribute2);
      arrayList1.listIterator();
      Object object0 = new Object();
      attribute2.equals(object0);
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[2] = 1;
      intArray0[3] = 2;
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1013448627418367
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.setAttributeIndices("\"H");
      Discretize discretize1 = new Discretize("3=/^BhI,4");
      discretize1.setDesiredWeightOfInstancesPerInterval(2485.48828108006);
      discretize0.setBins((-155));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      int int0 = (-356);
      discretize1.setMakeBinary(false);
      discretize1.findNumBinsTipText();
      discretize1.listOptions();
      discretize1.setBins((-155));
      discretize0.getBins();
      discretize1.getFindNumBins();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0885052871145326
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(159);
      Attribute attribute0 = new Attribute((String) null, 218);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue((String) null);
      Instances instances0 = new Instances("dAYh;e0{T+yq;z[iB=", arrayList0, 99);
      Discretize discretize1 = new Discretize("@end");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1), intArray0, (-225));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.isMissing(4);
      binarySparseInstance2.toString(2102);
      binarySparseInstance2.toString();
      instances0.add((Instance) binarySparseInstance2);
      instances0.firstInstance();
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      instances0.add((Instance) binarySparseInstance1);
      instances0.firstInstance();
      Instances instances2 = Filter.useFilter(instances1, discretize0);
      arrayList0.add(attribute0);
      Instances instances3 = new Instances(instances2);
      Instances instances4 = new Instances(instances0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance(binarySparseInstance1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      Attribute attribute1 = new Attribute("first-last", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      linkedList0.add("@end");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      linkedList0.add("@attribute");
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "real";
      stringArray0[2] = "date";
      stringArray0[3] = "string";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "numeric";
      stringArray0[6] = "numeric";
      Filter.runFilter(discretize0, stringArray0);
      String[] stringArray1 = Locale.getISOCountries();
      assertEquals(250, stringArray1.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.146408670318444
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute2.toString();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.listIterator();
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute3 = new Attribute("@attribute", instances0, 4);
      Attribute attribute4 = new Attribute("string", 0);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 2;
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray1 = discretize0.getOptions();
      stringArray0[1] = "Ah$#x2dXeHp<\"H794D";
      discretize0.setIgnoreClass(true);
      stringArray0[2] = "^:}w't1kGh6kMytz";
      Filter.runFilter(discretize0, stringArray1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2851));
      Attribute attribute1 = new Attribute("dAYh;e0{T+yq;z[iB=", 2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue(".jar");
      Attribute attribute2 = new Attribute("@end", 2);
      arrayList0.add(attribute2);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute1.setStringValue("597,597,597,597,597,0,597,597,597");
      Instances instances0 = new Instances("string", arrayList0, 3);
      linkedList0.add("@end");
      attribute0.copy("string");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances1 = new Instances("@attribute", arrayList0, 1);
      Discretize discretize0 = new Discretize("@attribute");
      instances0.sort((Comparator<? super Instance>) null);
      Attribute attribute3 = new Attribute("]", 79);
      attribute2.copy();
      arrayList3.add(attribute3);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at @attribute
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7281076240182918
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = ")";
      discretize0.getOptions();
      stringArray0[1] = "Ah$#2dXeHp<H94D";
      discretize0.setIgnoreClass(true);
      stringArray0[2] = "Ah$#2dXeHp<H94D";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Ah$#2dXeHp<H94D", arrayList0, 386);
      Attribute attribute0 = new Attribute("sgTF~_3dE;09 RWWN^^", (-2136414142));
      attribute0.copy("H>`LSF#");
      discretize0.setMakeBinary(true);
      instances0.sort(attribute0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Instance instance0 = null;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-3611.0);
      double[] doubleArray0 = null;
      Discretize discretize0 = new Discretize("");
      int[] intArray0 = new int[7];
      intArray0[0] = 785;
      intArray0[1] = (-157);
      intArray0[2] = 79;
      intArray0[3] = (-2854);
      intArray0[4] = 1481;
      intArray0[5] = 9;
      intArray0[6] = 1181;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.4, intArray0, (-4850));
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.023907271562916
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.setAttributeIndices("JEMR;3lB-{");
      discretize0.setBins((-155));
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1270.031538);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      int int0 = (-356);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setMakeBinary(false);
      discretize0.getCutPoints((-356));
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.setBins(0);
      discretize0.getBins();
      discretize0.getFindNumBins();
      discretize0.m_DiscretizeCols = null;
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SystemInUtil.addInputLine("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      Discretize discretize0 = new Discretize("DoNotLoadIfClassNotPresentMessage");
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("zsr$\"5", arrayList0, 680);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getBinRangesString((-1952257859));
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-89));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(159);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(218);
      sparseInstance0.toStringNoWeight(218);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 218;
      doubleArray0[1] = (double) 1614;
      doubleArray0[2] = (double) 1614;
      doubleArray0[3] = (double) 218;
      doubleArray0[4] = (double) 218;
      doubleArray0[5] = (double) 218;
      doubleArray0[6] = (double) 218;
      SparseInstance sparseInstance4 = new SparseInstance(218, doubleArray0);
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance4);
      SparseInstance sparseInstance6 = new SparseInstance(32);
      SparseInstance sparseInstance7 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2067600440501884
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = Locale.getISOCountries();
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseEqualFrequency();
      discretize0.setOptions(stringArray0);
      discretize0.getFindNumBins();
      discretize0.globalInfo();
      discretize0.m_NumBins = 1873;
      discretize0.setInvertSelection(true);
      discretize0.binsTipText();
      int[] intArray0 = new int[5];
      discretize0.setAttributeIndicesArray(intArray0);
      Discretize.main(stringArray0);
      System.setCurrentTimeMillis(1873);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8816000070859373
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      discretize0.getOptions();
      discretize0.setMakeBinary(true);
      discretize0.setIgnoreClass(true);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0216816510239104
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;e0{T+yq;z[iB=", (-2850));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue("date");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      Instances instances0 = new Instances("string", arrayList0, 3);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5126.142950869), intArray0, 89);
      binarySparseInstance0.toString(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.isMissing((-2850));
      binarySparseInstance1.insertAttributeAt(4);
      binarySparseInstance0.toString((-2121));
      discretize0.setMakeBinary(true);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1);
      binarySparseInstance1.toString((-2850));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.015968347375845
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;<0{T+yi;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute2.equalsMsg((Object) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      attribute1.setWeight(1);
      arrayList0.removeIf(predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute2.addStringValue("Names differ:");
      attribute1.enumerateValues();
      Instances instances0 = new Instances("string", arrayList0, 3);
      Attribute attribute3 = new Attribute("numeric", 1);
      Attribute attribute4 = new Attribute("string", 0);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      Attribute.typeToString(attribute3);
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[1] = 2;
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      boolean boolean0 = discretize0.batchFinished();
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      boolean boolean1 = discretize0.getUseEqualFrequency();
      assertTrue(boolean1 == boolean0);
      
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.015968347375845
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;<0{T+yi;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute.typeToString(2);
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      attribute1.setWeight(1.0);
      arrayList0.removeIf(predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute2.addStringValue("Names differ:");
      Instances instances0 = new Instances("string", arrayList0, 3);
      Attribute attribute3 = new Attribute("numeric", 1);
      Attribute attribute4 = new Attribute("string", 0);
      Discretize discretize0 = new Discretize("first-last");
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      Attribute.typeToString(attribute3);
      arrayList0.add(attribute0);
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[1] = 2;
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("@attribute");
      discretize0.batchFinished();
      String string0 = discretize0.getBinRangesString(0);
      assertNotNull(string0);
      assertEquals("All", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2343.6511197485;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 315.886;
      doubleArray1[5] = 364.899535;
      doubleArray1[6] = (-704.6901131857);
      doubleArray1[7] = 2.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 315.886;
      doubleArray2[1] = 2343.6511197485;
      doubleArray2[2] = 364.899535;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1153.9276;
      doubleArray2[6] = 2.0;
      doubleArray2[7] = 2343.6511197485;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 2343.6511197485;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 364.899535;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = Double.NaN;
      doubleArray4[7] = Double.NaN;
      doubleArray4[8] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = 2343.6511197485;
      doubleArray5[4] = 1476.66842391;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1153.9276;
      doubleArray6[1] = (-704.6901131857);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = Double.NaN;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1476.66842391;
      doubleArray7[4] = 1.7976931348623157E308;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1476.66842391;
      doubleArray8[4] = Double.NaN;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = 1.7976931348623157E308;
      doubleArray9[1] = 2.0;
      doubleArray9[2] = 2343.6511197485;
      doubleArray9[3] = 315.886;
      doubleArray9[4] = 1.7976931348623157E308;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = 1.7976931348623157E308;
      doubleArray9[7] = 1153.9276;
      doubleArray9[8] = (-704.6901131857);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(3783);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3783
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("9YJn3iK");
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SystemInUtil.addInputLine((String) null);
      byteArray0[1] = (byte) (-1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[2] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[3] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[4] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[5] = null;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+JM#R'x;/Z!ia,<)Mb";
      stringArray0[1] = "+JM#R'x;/Z!ia,<)Mb";
      stringArray0[2] = "+JM#R'x;/Z!ia,<)Mb";
      stringArray0[3] = "+JM#R'x;/Z!ia,<)Mb";
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("2-K>dS");
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[5];
      intArray0[0] = 86;
      intArray0[1] = (-2034458190);
      intArray0[2] = 10;
      intArray0[3] = 2817;
      intArray0[4] = (-1952257859);
      discretize0.setAttributeIndicesArray(intArray0);
      String string0 = discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("87,-2034458189,11,2818,-1952257858", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.086162815983028
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(159);
      Attribute attribute0 = new Attribute((String) null, 218);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.indexOfValue((String) null);
      Instances instances0 = new Instances("5UFDw#|gI>S?TW:", arrayList0, 99);
      Discretize discretize1 = new Discretize("@end");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1), intArray0, (-225));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.isMissing(4);
      binarySparseInstance2.toString(2102);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.toString();
      instances0.add((Instance) binarySparseInstance3);
      instances0.firstInstance();
      Filter.useFilter(instances0, discretize0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      // Undeclared exception!
      try { 
        binarySparseInstance3.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SystemInUtil.addInputLine((String) null);
      byteArray0[1] = (byte) (-1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[2] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[3] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[4] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[5] = null;
      Discretize discretize0 = new Discretize("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize("(j5k!<Dp,J,Grs");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[2] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[4] = "$p.6VKle7/{0/I*+(";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aJM#R'x;/Z!ia,<)Mb");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("Lm0L`'(%q(7v6{y");
      discretize0.setInvertSelection(false);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("#<j#i5FC{um1\"C");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-362));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize("9YJn3iK");
      discretize0.m_NumBins = 259;
      System.setCurrentTimeMillis(259);
      discretize0.setUseEqualFrequency(false);
      double[] doubleArray0 = null;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2483.7682565751), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      Discretize discretize0 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      discretize0.getCutPoints((-1789569704));
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      discretize0.getCutPoints((-1789569704));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SystemInUtil.addInputLine("DoNotLoadIfClassNotPresentMessage");
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DoNotLoadIfClassNotPresentMessage";
      Filter[] filterArray0 = new Filter[5];
      filterArray0[0] = filter0;
      filterArray0[1] = filter0;
      filterArray0[2] = filter0;
      filterArray0[3] = filter0;
      filterArray0[4] = (Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      stringArray0[1] = "let,26VvFZg;Iomw";
      stringArray0[2] = "DoNotLoadIfClassNotPresentMessage";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "let,26VvFZg;Iomw");
      stringArray0[3] = "DoNotLoadIfClassNotPresentMessage";
      stringArray0[4] = "let,26VvFZg;Iomw";
      stringArray0[5] = "DoNotLoadIfClassNotPresentMessage";
      Filter.runFilter(filter0, stringArray0);
      Discretize discretize0 = new Discretize("DoNotLoadIfClassNotPresentMessage");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.7976931348623157E308));
      assertEquals((-1.7976931348623157E308), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      String[] stringArray1 = new String[0];
      discretize0.setOptions(stringArray1);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SystemInUtil.addInputLine("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("DoNotLoadIfClassNotPresentMessage");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2611883523040466
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attribute attribute0 = new Attribute("dAYh;<0{T+yi;z[iB=", (-2829));
      Attribute attribute1 = attribute0.copy("relational");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      attribute1.indexOfValue("date");
      Attribute attribute2 = new Attribute("date", linkedList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute2.equalsMsg((Object) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      attribute1.setWeight(1.0);
      arrayList0.removeIf(predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute2.addStringValue("integer");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "numeric";
      stringArray0[1] = ";ol*nL:'t";
      stringArray0[2] = "real";
      stringArray0[3] = "dAYh;<0{T+yi;z[iB=";
      stringArray0[4] = "numeric";
      stringArray0[5] = "V";
      stringArray0[6] = "@attribute";
      stringArray0[7] = "date";
      stringArray0[8] = "@attribute";
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getUseBinNumbers());
      
      Discretize discretize2 = new Discretize("");
      String[] stringArray1 = discretize2.getOptions();
      assertEquals(4, stringArray1.length);
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize2.getBins());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.985807635134637
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize("$");
      discretize0.listOptions();
      discretize0.m_NumBins = (-2575);
      discretize0.m_IgnoreClass = true;
      discretize0.setUseBinNumbers(true);
      discretize0.getUseBinNumbers();
      discretize0.useEqualFrequencyTipText();
      double[] doubleArray0 = new double[11];
      doubleArray0[7] = 0.0;
      discretize0.setOutputFormat();
      discretize0.useBinNumbersTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getOptions();
      assertEquals((-2575), discretize0.getBins());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SystemInUtil.addInputLine((String) null);
      byteArray0[1] = (byte) (-1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[2] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[3] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[4] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[5] = null;
      Discretize discretize0 = new Discretize("+.VC.foXV");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize("Hkn`.t3c&S*V*h ");
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(allFilter0, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, (String[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hkn`.t3c&S*V*h ");
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.runFilter(multiFilter0, (String[]) null);
      Filter.runFilter(discretize0, (String[]) null);
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.runFilter(multiFilter2, (String[]) null);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(6, stringArray0.length);
  }
}
