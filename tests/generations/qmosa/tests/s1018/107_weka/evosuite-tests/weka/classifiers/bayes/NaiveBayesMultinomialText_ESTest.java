/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:34:09 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.Option;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3771835856400645
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3721.77127047203);
      doubleArray0[3] = (-3138.802733);
      doubleArray0[4] = 2144.0;
      File file0 = MockFile.createTempFile("5T6Y|cfESF.\"T", "5T6Y|cfESF.\"T");
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 3427.084815539016;
      file0.mkdirs();
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_data = null;
      file0.deleteOnExit();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setStopwords((File) null);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed((-1258));
      Properties properties0 = new Properties();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1));
      URI uRI0 = MockURI.aFileURI;
      testInstances0.setNumRelationalNominalValues((-1));
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setExecutable(true, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" ");
      mockPrintStream1.print((long) (-1));
      mockPrintStream1.println();
      Locale locale0 = new Locale(" ", " ", " ");
      testInstances1.setWordSeparators(" ");
      testInstances0.setNumNominalValues((-2));
      MockPrintStream mockPrintStream2 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream3 = new MockPrintStream("Inverted Covariance Matrix * Target-value Vetor:\n");
      MockPrintStream mockPrintStream4 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream5 = new MockPrintStream(" ");
      properties0.storeToXML((OutputStream) mockPrintStream0, " ");
      MockFile mockFile1 = new MockFile(uRI1);
      Instances instances0 = testInstances1.generate(" ");
      DenseInstance denseInstance0 = new DenseInstance(0);
      instances0.add((Instance) denseInstance0);
      instances0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("", protectedProperties2);
      attribute0.value(352);
      attribute0.enumerateValues();
      arrayList0.add(attribute0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("", arrayList0, 8);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setDebug(false);
      MockFile mockFile0 = new MockFile("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_periodicP = 1320;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(1320, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.439905325894684
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.pruneDictionary();
      MockFile mockFile0 = new MockFile("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      double double0 = naiveBayesMultinomialText0.m_norm;
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AbstractClassifier.runClassifier(inputMappedClassifier0, testInstances0.DEFAULT_WORDS);
      testInstances0.setSeed((-1258));
      Properties properties0 = new Properties();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1));
      URI uRI0 = MockURI.aFileURI;
      testInstances1.setNumRelationalNominalValues(5056);
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(" ");
      testInstances1.setMultiInstance(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setExecutable(true, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("is'_?");
      mockPrintStream1.println();
      Locale locale0 = Locale.ITALY;
      MockPrintStream mockPrintStream2 = new MockPrintStream("l}Xv)hon<QO:;++TWU");
      MockPrintStream mockPrintStream3 = new MockPrintStream(" ");
      mockPrintStream2.printf(locale0, "", (Object[]) testInstances0.DEFAULT_WORDS);
      properties0.storeToXML((OutputStream) mockPrintStream0, "is'_?");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockFile mockFile1 = new MockFile(uRI1);
      Instances instances0 = testInstances1.generate();
      instances0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2485366255135686
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText1.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5778874340670943
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 4;
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 255;
      intArray0[4] = 7;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0, intArray0, 6);
      sparseInstance0.setWeight(96.05342073738);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.setUseStopList(true);
      MockFile mockFile0 = new MockFile("'[,mc.v#w_]<cN6Q", "LCCN");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2508763698874876
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3721.77127047203);
      doubleArray0[2] = 2907.061077081983;
      doubleArray0[3] = (-3138.802733);
      doubleArray0[4] = 2144.0;
      doubleArray0[5] = 2907.061077081983;
      doubleArray0[6] = 3427.084815539016;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.m_periodicP = 2648;
      naiveBayesMultinomialText0.m_norm = (double) 2648;
      naiveBayesMultinomialText0.getOptions();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText1.normTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      Random.setNextRandom(2376);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8282001462054565
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Properties properties0 = new Properties();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1));
      URI uRI0 = MockURI.aFileURI;
      Object object0 = new Object();
      testInstances1.setWordSeparators("R-T#-GqBC");
      testInstances0.setNumRelationalNominalValues((-1));
      MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(" ");
      mockPrintStream1.print((long) (-1));
      mockPrintStream1.println();
      mockPrintStream1.println('4');
      Locale locale0 = new Locale(" ", " ", " ");
      properties0.put(mockPrintStream1, mockPrintStream0);
      testInstances1.setWordSeparators(" ");
      testInstances0.setNumNominalValues((-2));
      MockPrintStream mockPrintStream2 = new MockPrintStream(" ");
      mockPrintStream0.write((-1));
      MockPrintStream mockPrintStream3 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream4 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream5 = new MockPrintStream(" ");
      properties0.storeToXML((OutputStream) mockPrintStream0, " ");
      Instances instances0 = testInstances1.generate(" ");
      instances0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.tokenizerTipText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      
      String string2 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t12.0\nclass2\t10.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string2);
      
      naiveBayesMultinomialText0.LNormTipText();
      String string3 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string3);
      
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.normTipText();
      String string4 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string4);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.94207540052751
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.setLNorm(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.m_tokenizer = null;
      naiveBayesMultinomialText0.getRevision();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("getCurrent", arrayList0, 30);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.toString();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      int int0 = 1686;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1686);
      naiveBayesMultinomialText0.m_periodicP = 1686;
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3721.77127047203);
      doubleArray0[2] = 2907.061077081983;
      doubleArray0[3] = (-3138.802733);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^6jE^<:";
      stringArray0[1] = "leaves:    ";
      stringArray0[2] = "   * Returns only the classnames and what filter it is based on.\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "-depth";
      stringArray0[6] = "(5kDL[Pr<r(k";
      stringArray0[7] = "Db>7Nz(0uD";
      stringArray0[8] = "-norm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -norm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8397414116058184
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3721.77127047203);
      doubleArray0[2] = 2907.061077081983;
      doubleArray0[3] = (-3138.802733);
      doubleArray0[4] = 2144.0;
      File file0 = MockFile.createTempFile("5T6Y|cfESF.\"T", "5T6Y|cfESF.\"T");
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 3427.084815539016;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_data = null;
      naiveBayesMultinomialText0.m_periodicP = 2648;
      file0.deleteOnExit();
      naiveBayesMultinomialText0.m_norm = (double) 2648;
      naiveBayesMultinomialText0.getOptions();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%T//TR[7(R@XB";
      stringArray0[1] = "-M";
      stringArray0[2] = "$x|]^W8dQoJu`{L";
      stringArray0[3] = "\nThe probability of a word given the class\n";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3181199174332616
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[1];
      naiveBayesMultinomialText0.setNorm((-1033.56638));
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.toString();
      doubleArray0[0] = (-1033.56638);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      naiveBayesMultinomialText0.m_stemmer = null;
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.normTipText();
      String[] stringArray0 = new String[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "The norm of the instances after normalization.";
      stringArray0[2] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[3] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[4] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[5] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[6] = "The norm of the instances after normalization.";
      stringArray0[7] = "NaiveBayesMultinomialText: No model built yet.\n";
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.listOptions();
      assertEquals((-1033.56638), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopies(inputMappedClassifier1, 1821);
      String[] stringArray0 = inputMappedClassifier0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      int int0 = 860;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4383317520898604
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "De0W5f9D22DuKt*smzd";
      stringArray0[1] = "";
      stringArray0[2] = "G";
      stringArray0[3] = "";
      stringArray0[4] = "sP(6n9";
      stringArray0[5] = "-normalize";
      stringArray0[6] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[7] = "q#c4iBa]kEN3hx";
      stringArray0[8] = "The International Standard Book Number (13 digits).";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      Locale locale0 = Locale.ITALY;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal((-2684));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumInstancesRelational((-1));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7646308653001805
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setUseStopList(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zzGFK^1@*AaC*P3y{]";
      stringArray0[1] = "";
      stringArray0[2] = "SZ1ye?:HrXBaa=,*j}w";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      int[] intArray0 = new int[8];
      intArray0[0] = 1406;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      intArray0[1] = 5;
      intArray0[0] = 2;
      intArray0[3] = 860;
      intArray0[7] = 2;
      intArray0[5] = 6;
      intArray0[6] = 7;
      intArray0[7] = (-1304);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-465));
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zzGFK^1@*AaC*P3y{]";
      stringArray0[2] = "SZ1ye?:HrXBaa=,*j}w";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      int[] intArray0 = new int[8];
      intArray0[0] = 1406;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      intArray0[1] = 102;
      intArray0[2] = 2;
      intArray0[3] = 860;
      intArray0[4] = 2;
      intArray0[5] = 6;
      intArray0[6] = 7;
      intArray0[7] = 7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-474));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6211272758470872
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setUseStopList(true);
      int int0 = 1686;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1686);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Random.setNextRandom(113);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8203806314665187
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setUseStopList(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 26.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 0.1;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3.0;
      doubleArray1[1] = 3.0;
      doubleArray1[2] = 3.0;
      doubleArray1[3] = 26.0;
      doubleArray1[4] = 3.0;
      doubleArray1[5] = (-2445.9);
      doubleArray1[6] = (-2445.9);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray1;
      doubleArray0[5] = (-2445.9);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed((-1));
      Properties properties0 = new Properties();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1926.3193;
      doubleArray0[5] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.setUseStopList(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setDebug(true);
      naiveBayesMultinomialText0.getUseStopList();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setUseWordFrequencies(true);
      naiveBayesMultinomialText2.getNormalizeDocLength();
      double double0 = naiveBayesMultinomialText2.m_t;
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      String string0 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      naiveBayesMultinomialText0.getTokenizer();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tOneR feature evaluator.\n\n";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.m_minWordP = (-286.1472077784996);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.getMinWordFrequency();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals((-286.1472077784996), double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Properties properties0 = new Properties();
      testInstances0.setNumRelationalNominal((-1));
      URI uRI0 = MockURI.aFileURI;
      testInstances0.setNumRelationalNominalValues(5056);
      MockURI.relativize(uRI0, uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("is'_?");
      Locale locale0 = Locale.forLanguageTag("is'_?");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) arrayList0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream("is'_?");
      locale0.getDisplayCountry();
      Properties properties1 = new Properties();
      testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      assertEquals(2.0, minkowskiDistance0.getOrder(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      naiveBayesMultinomialText0.setMinWordFrequency(2032.9967630544297);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      Attribute attribute0 = new Attribute("", 1);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getNorm();
      IBk iBk0 = new IBk(3);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(2032.9967630544297, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getStemmer();
      Random.setNextRandom(13);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":0ueHsf0");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.toString();
      // Undeclared exception!
      try { 
        MockURI.create("NaiveBayesMultinomialText: No model built yet.\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in opaque part at index 26: NaiveBayesMultinomialText: No model built yet.
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zzGFK^1@*AaC*P3y{]";
      stringArray0[1] = "";
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = 4;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 1;
      intArray0[7] = 5;
      wrapperSubsetEval0.postProcess(intArray0);
      stringArray0[2] = "SZ1ye?:HrXBaa=,*j}w";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      Option option0 = new Option("SZ1ye?:HrXBaa=,*j}w", "=tIpj[mY]HXZ", 975, "");
      serializedClassifier0.getCurrentModel();
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      File file1 = costSensitiveClassifier0.getOnDemandDirectory();
      assertEquals(0L, file1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7216997293944343
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setDebug(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.m_lnorm = (-3277.910059999902);
      naiveBayesMultinomialText0.getUseStopList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      assertEquals((-3277.910059999902), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.128051039802716
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.m_t = (-327.40976914);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.m_useStopList = false;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.setLNorm(1.0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopies(inputMappedClassifier1, 1868);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Properties properties0 = new Properties();
      testInstances0.setNumRelationalNominal((-1));
      URI uRI0 = MockURI.aFileURI;
      testInstances0.setNumRelationalNominalValues(5056);
      MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream1 = new MockPrintStream("is'_?");
      mockPrintStream1.print((float) (-2));
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFile0);
      mockPrintStream2.print(false);
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockFile0);
      mockPrintStream3.println();
      Locale locale0 = Locale.forLanguageTag("is'_?");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) arrayList0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      MockPrintStream mockPrintStream4 = new MockPrintStream("is'_?");
      locale0.getDisplayCountry();
      MockPrintStream mockPrintStream5 = new MockPrintStream("/home/ubuntu/termite/projects/107_weka/ ");
      MockPrintStream mockPrintStream6 = new MockPrintStream("/home/ubuntu/termite/projects/107_weka/ ");
      Properties properties1 = new Properties();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zzGFK^1@*AaC*P3y{]";
      stringArray0[1] = "";
      stringArray0[2] = "SZ1ye?:HrXBaa=,*j}w";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[3] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      naiveBayesMultinomialText0.stopwordsTipText();
      try { 
        naiveBayesMultinomialText0.classifyInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      Filter.makeCopy((Filter) null);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      costSensitiveClassifier0.setClassifier(classifier0);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance();
      ChebyshevDistance[] chebyshevDistanceArray0 = new ChebyshevDistance[5];
      chebyshevDistanceArray0[0] = chebyshevDistance1;
      chebyshevDistanceArray0[1] = chebyshevDistance0;
      chebyshevDistanceArray0[2] = chebyshevDistance1;
      Random.setNextRandom(3);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setMinWordFrequency(1.0);
      naiveBayesMultinomialText1.setOptions(stringArray0);
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      int int0 = 860;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "qDGW";
      stringArray0[1] = "-stopwords <file>";
      stringArray0[2] = "-lowercase";
      stringArray0[3] = "RandomSubSpace: No model built yet.";
      stringArray0[4] = "The default DL = ";
      stringArray0[5] = "";
      stringArray0[6] = "^dlP^&";
      stringArray0[7] = "";
      stringArray0[8] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are acceoted but ignored during training and classification";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zzGFK^1@*AaC*P3y{]";
      stringArray0[1] = "";
      int[] intArray0 = new int[8];
      stringArray0[2] = "SZ1ye?:HrXBaa=,*j}w";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      Option option0 = new Option("SZ1ye?:HrXBaa=,*j}w", "=tIpj[mY]HXZ", 975, "");
      serializedClassifier0.getCurrentModel();
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      File file1 = costSensitiveClassifier0.getOnDemandDirectory();
      assertEquals("/home/ubuntu/termite/projects", file1.getParent());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Properties properties0 = new Properties();
      testInstances0.setNumRelationalNominal((-1));
      URI uRI0 = MockURI.aFileURI;
      testInstances0.setNumRelationalNominalValues(5056);
      MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream1 = new MockPrintStream("is'_?");
      mockPrintStream1.print((float) (-2));
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFile0);
      mockPrintStream2.print(false);
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockFile0);
      mockPrintStream3.println();
      Locale locale0 = Locale.forLanguageTag("is'_?");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      WordTokenizer[] wordTokenizerArray0 = new WordTokenizer[6];
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      wordTokenizerArray0[0] = wordTokenizer0;
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      wordTokenizerArray0[1] = wordTokenizer1;
      WordTokenizer wordTokenizer2 = new WordTokenizer();
      wordTokenizerArray0[2] = wordTokenizer2;
      WordTokenizer wordTokenizer3 = new WordTokenizer();
      wordTokenizerArray0[3] = wordTokenizer3;
      WordTokenizer wordTokenizer4 = new WordTokenizer();
      wordTokenizerArray0[4] = wordTokenizer4;
      WordTokenizer wordTokenizer5 = new WordTokenizer();
      wordTokenizerArray0[5] = wordTokenizer5;
      arrayList0.toArray(wordTokenizerArray0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) arrayList0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      MockPrintStream mockPrintStream4 = new MockPrintStream("is'_?");
      locale0.getDisplayCountry();
      MockPrintStream mockPrintStream5 = new MockPrintStream("/home/ubuntu/termite/projects/107_weka/ ");
      MockPrintStream mockPrintStream6 = new MockPrintStream("/home/ubuntu/termite/projects/107_weka/ ");
      Properties properties1 = new Properties();
      properties1.keys();
      properties1.values();
      properties1.storeToXML((OutputStream) mockPrintStream2, "is'_?");
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      int int0 = 1680;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-P";
      stringArray0[1] = "81$5V";
      stringArray0[2] = "Vy::PO+wBP.^V!Jtd%";
      stringArray0[3] = "";
      stringArray0[4] = "ui}*m9'4T";
      stringArray0[5] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"81$5V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zzGFK^1@*AaC*P3y{]";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = 4;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 7;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      int[] intArray1 = new int[9];
      intArray1[0] = 860;
      intArray1[1] = (-3594);
      intArray1[2] = 7;
      intArray1[3] = (-474);
      intArray1[4] = 7;
      intArray1[5] = 2;
      intArray1[6] = 860;
      intArray1[7] = 4;
      intArray1[8] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(60.6215, intArray1, 4);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1680);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.getNorm();
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9813013333333287
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getOptions();
      int[] intArray0 = new int[3];
      intArray0[1] = 125;
      naiveBayesMultinomialText0.setLNorm(125);
      intArray0[2] = 854;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E-12, intArray0, 854);
      Properties properties0 = new Properties();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      naiveBayesMultinomialText0.getMinWordFrequency();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals(125.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      int int0 = 2296;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2296);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      int int1 = 100000;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(100000);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H*X`Ck/7kbIH;p[";
      stringArray0[1] = "H*X`Ck/7kbIH;p[";
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-543);
      intArray0[2] = 29;
      intArray0[3] = 9;
      intArray0[4] = (-883);
      intArray0[5] = 110;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-933.83833444353), intArray0, 3463);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      stringArray0[2] = "n?";
      stringArray0[3] = "67-91";
      stringArray0[4] = "J. Shavlik";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }
}
