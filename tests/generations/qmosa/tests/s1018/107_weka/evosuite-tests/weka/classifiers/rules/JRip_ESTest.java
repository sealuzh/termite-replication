/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 18:05:07 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setDebug(true);
      Utils.log2 = (-6.78214234);
      try { 
        jRip0.rulesetForOneClass((-6.78214234), (Instances) null, 0.9, (-6.78214234));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = new Attribute("real", 1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("real");
      Attribute attribute2 = new Attribute("real", 2);
      Attribute attribute3 = new Attribute("numeric", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute3);
      String[] stringArray0 = new String[0];
      Attribute attribute4 = new Attribute("@end", 0);
      Attribute.main(stringArray0);
      arrayList0.add("relational");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList1.addAll((Collection<? extends Attribute>) arrayList2);
      arrayList1.add((Attribute) null);
      arrayList1.add(attribute3);
      Attribute attribute5 = new Attribute("@end", arrayList0, 3);
      Attribute.main(stringArray0);
      Attribute attribute6 = new Attribute("@attribute");
      Attribute.typeToString(attribute5);
      jRip_NominalAntd0.toString();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity(0);
      arrayList3.add(attribute3);
      arrayList3.add(attribute2);
      jRip0.getDebug();
      Instances instances0 = new Instances("@attribute", arrayList3, 2);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("");
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      Attribute attribute1 = new Attribute("real", 1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("real");
      Attribute attribute2 = new Attribute("real", 2);
      Attribute attribute3 = new Attribute("integer", arrayList1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute3);
      String[] stringArray0 = new String[0];
      Attribute attribute4 = new Attribute("@end", 0);
      Attribute.main(stringArray0);
      arrayList1.add("relational");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute3);
      arrayList2.add(attribute0);
      arrayList2.add(attribute3);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      Attribute attribute5 = new Attribute("@end", arrayList1, 1479);
      attribute5.setStringValue("Inside m_Ruleset");
      Attribute.main(stringArray0);
      attribute5.copy((String) null);
      Attribute.typeToString(attribute5);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList1.ensureCapacity(0);
      arrayList3.add(attribute3);
      arrayList3.add(attribute2);
      arrayList1.add("real");
      Instances instances0 = new Instances("@attribute", arrayList3, 2);
      jRip_NominalAntd0.splitData(instances0, 2409.825649309166, 4);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 1, 0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1221);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      intArray0[1] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1221);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 106);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)68;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.toString();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 6.283185307179586, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = new Attribute("real", 1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("real");
      Attribute attribute2 = new Attribute("real", 2);
      Attribute attribute3 = new Attribute("numeric", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute3);
      String[] stringArray0 = new String[0];
      Attribute attribute4 = new Attribute("@end", 0);
      Attribute.main(stringArray0);
      arrayList0.add("relational");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList1.addAll((Collection<? extends Attribute>) arrayList2);
      arrayList1.add((Attribute) null);
      arrayList1.add(attribute3);
      Attribute attribute5 = new Attribute("@end", arrayList0, 3);
      Attribute.main(stringArray0);
      Attribute attribute6 = new Attribute("@attribute");
      Attribute.typeToString(attribute5);
      jRip_NominalAntd0.toString();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity(0);
      arrayList3.add(attribute3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("@attribute", arrayList3, 2);
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2409.825649309166, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("NiD+C^{*qH|1X~E%,2&v", arrayList0, 1221);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[3];
      intArray0[1] = 1221;
      intArray0[1] = 1221;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1221, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1221);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1221, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JRip jRip0 = new JRip();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = new Attribute("real", 1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("real");
      Attribute attribute2 = new Attribute("real", 2);
      Attribute attribute3 = new Attribute("numeric", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute3);
      String[] stringArray0 = new String[0];
      Attribute attribute4 = new Attribute("@end", 0);
      Attribute.main(stringArray0);
      arrayList0.add("relational");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList1.addAll((Collection<? extends Attribute>) arrayList2);
      arrayList1.add((Attribute) null);
      arrayList1.add(attribute3);
      Attribute attribute5 = new Attribute("@end", arrayList0, 3);
      Attribute.main(stringArray0);
      Attribute attribute6 = new Attribute("@attribute");
      Attribute.typeToString(attribute5);
      jRip_NominalAntd0.toString();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity(0);
      arrayList3.add(attribute3);
      arrayList3.add(attribute2);
      jRip0.getDebug();
      Instances instances0 = new Instances("@attribute", arrayList3, 2);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 3);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2409.825649309166, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2371);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2371;
      binarySparseInstance2.setValue((-53), (double) 2371);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-1997.7618213644068), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance5 = (BinarySparseInstance)binarySparseInstance1.copy();
      intArray0[0] = 2371;
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity(200003);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("6pf<KvuOCn_g", protectedProperties1);
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("did", arrayList1, 0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-265.05), intArray0, 69);
      instances0.add((Instance) binarySparseInstance5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, (-784.0477986622654), 2371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("");
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      Attribute attribute1 = new Attribute("real", 1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("real");
      Attribute attribute2 = new Attribute("real", 2);
      Attribute attribute3 = new Attribute("integer", arrayList1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute3);
      String[] stringArray0 = new String[0];
      attribute2.copy();
      Attribute.main(stringArray0);
      arrayList1.add("relational");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      arrayList2.add(attribute3);
      Attribute attribute4 = new Attribute("@end", arrayList1, 1479);
      Attribute.main(stringArray0);
      attribute4.copy((String) null);
      Attribute.typeToString(attribute4);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList1.ensureCapacity(0);
      arrayList3.add(attribute3);
      arrayList3.add(attribute2);
      arrayList1.add("real");
      Instances instances0 = new Instances("@attribute", arrayList3, 2);
      jRip_NominalAntd0.splitData(instances0, 2409.825649309166, 4);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1247);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 1247;
      intArray0[0] = 1247;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-966.0), doubleArray0);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute(".arff", instances0, protectedProperties2);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties4.forEach(biConsumer0);
      Attribute attribute1 = new Attribute("?Ukjs'x0dmRGeh<4_K", protectedProperties5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties1.values();
      jRip_NominalAntd0.value = 64.0;
      jRip_NominalAntd0.splitData(instances0, 64.0, 1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("", "", (-104));
      Locale locale0 = new Locale("relational", "string");
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayName(locale1);
      locale0.getExtensionKeys();
      Locale locale2 = Locale.JAPANESE;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Locale.lookup(arrayList0, list0);
      locale2.getDisplayName(locale0);
      locale0.getUnicodeLocaleAttributes();
      Attribute attribute1 = new Attribute((String) null, 1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      Instances instances0 = new Instances("'\n", arrayList3, 2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate1.or(predicate4);
      predicate3.negate();
      instances0.removeIf(predicate3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 3, 1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 2371;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Attribute attribute0 = new Attribute("NiD+C^{qD]kX~%,.&v", 2371);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = 2.0;
      jRip_NumericAntd0.covers(binarySparseInstance3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance4);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate1.or(predicate11);
      predicate2.and(predicate4);
      Predicate<Object> predicate13 = predicate6.or(predicate9);
      predicate13.and(predicate4);
      predicate13.or(predicate5);
      predicate8.or(predicate13);
      Predicate.isEqual((Object) properties0);
      Predicate<Object> predicate14 = predicate5.and(predicate12);
      predicate14.or(predicate8);
      predicate7.and(predicate1);
      predicate6.and(predicate14);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.toString();
      Attribute attribute0 = new Attribute("    while (v e breakpoints.sength && 0", 42);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 42;
      jRip_NumericAntd0.toString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk(8);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[2] = (double) 3562;
      doubleArray0[4] = (double) 3562;
      doubleArray0[5] = (double) 1;
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, (-6.78214234), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setOptimizations((-45));
      double double0 = (-3641.3289870211);
      Utils.SMALL = (-3641.3289870211);
      jRip0.setUsePruning(false);
      jRip0.getTechnicalInformation();
      jRip0.getOptimizations();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate6.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate9.negate();
      predicate1.or(predicate10);
      predicate2.and(predicate4);
      Predicate<Object> predicate11 = predicate6.or(predicate8);
      Predicate<Object> predicate12 = predicate11.and(predicate4);
      Predicate<Object> predicate13 = predicate11.or(predicate5);
      Predicate<Object> predicate14 = predicate7.negate();
      Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate15 = predicate5.or(predicate9);
      predicate7.and(predicate12);
      predicate8.and(predicate15);
      predicate2.or(predicate15);
      Predicate<Object> predicate16 = predicate14.negate();
      predicate16.negate();
      predicate15.or(predicate6);
      predicate4.negate();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip1 = new JRip();
      jRip1.toString();
      jRip0.setFolds(1456);
      jRip1.getCapabilities();
      jRip0.setSeed(0L);
      DenseInstance denseInstance0 = new DenseInstance(1870);
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", 480);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "mHC";
      stringArray0[1] = ">C7m,`z&6";
      Attribute attribute1 = attribute0.copy("mHC");
      attribute0.toString();
      attribute0.addStringValue(attribute1, 4156);
      stringArray0[2] = "date";
      stringArray0[3] = "@end";
      stringArray0[4] = "date";
      stringArray0[5] = "@end";
      attribute0.copy("date");
      jRip0.getTechnicalInformation();
      stringArray0[6] = "-S";
      stringArray0[7] = ">C7m,`z&6";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">C7m,`z&6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.557412142448068
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1252;
      intArray0[1] = 1252;
      intArray0[2] = 1252;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1252);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance3);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      
      binarySparseInstance3.setValue((-2319), (-1.0));
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      binarySparseInstance2.deleteAttributeAt(1252);
      Attribute attribute0 = new Attribute(" Consequent not set yet.", arrayList2, 10);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance4);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.007389172907111
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(407);
      String[] stringArray0 = new String[6];
      jRip0.enumerateMeasures();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setFolds(1456);
      jRip0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(480);
      Attribute attribute0 = new Attribute(stringArray0[1], 190);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.covers(denseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 407;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-745.0), doubleArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(denseInstance0);
      jRip_NominalAntd0.accu = (double) 0;
      jRip0.getOptions();
      jRip_NominalAntd0.copy();
      jRip0.getFolds();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Attribute attribute0 = new Attribute("4jI[Pj.mbaQZ)", (List<String>) null, protectedProperties2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean1 = jRip0.getDebug();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean1 == boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clear();
      Instances instances0 = new Instances("NiD+C+^{*qDHX~E%,<&v", arrayList0, 1221);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C+^{*qDHX~E%,<&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C+^{*qDHX~E%,<&v");
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom(1221);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8-K/O~~\r|>-UuLfD");
      try { 
        jRip0.rulesetForOneClass((-2374.2), instances0, 1221, 105.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\n\nClass ", 527);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals("\n\nClass  <= NaN", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("/");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[8];
      attribute0.enumerateValues();
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 4;
      Attribute attribute1 = new Attribute("Copy with second attribute deleted and inserted: ");
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "relational";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.0, doubleArray0);
      attribute0.copy("Set a fixed number of iterations for LogitBoost. If >= 0, this sets a fixed number of LogitBoost iterations that is used everywhere in the tree. If < 0, the number is cross-validated.");
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("/ = ", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      IBk iBk0 = new IBk((-1276));
      IBk iBk1 = new IBk((-82));
      IBk iBk2 = new IBk((-1235));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      assertFalse(inputMappedClassifier0.getDebug());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rk^5i");
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C]3^!P^|Ki ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C]3^!P^|Ki ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.getDebug();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      assertFalse(inputMappedClassifier0.getSuppressMappingReport());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate1.or(predicate11);
      predicate2.and(predicate4);
      Predicate<Object> predicate13 = predicate6.or(predicate9);
      predicate13.and(predicate4);
      predicate13.or(predicate5);
      predicate3.negate();
      predicate8.or(predicate13);
      Predicate.isEqual((Object) properties0);
      Predicate<Object> predicate14 = predicate5.and(predicate12);
      predicate1.and(predicate8);
      predicate14.or(predicate8);
      predicate7.and(predicate1);
      predicate6.and(predicate14);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.toString();
      Attribute attribute0 = new Attribute("    while (v e breakpoints.sength && 0", 42);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip_NumericAntd0.copy();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList1.parallelStream();
      linkedList1.toArray();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.toArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      linkedList3.addAll((Collection<? extends String>) linkedList4);
      linkedList3.add("");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.add((String) null);
      linkedList5.add("0es+I4QdKQ{+VK:A");
      linkedList2.removeAll(linkedList5);
      linkedList0.removeAll(linkedList3);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      jRip0.setOptions(stringArray0);
      Instances instances0 = null;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(407);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8118";
      jRip_RipperRule0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8118");
      stringArray0[1] = "8118";
      int[] intArray0 = new int[1];
      Attribute.main(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-1636.7094);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DenseInstance denseInstance0 = new DenseInstance(407);
      jRip0.foldsTipText();
      jRip0.minNoTipText();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Sum (doubles): ", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(407, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Whether pruning is performed.");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate2.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate2);
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      Predicate<Object> predicate9 = predicate7.or(predicate3);
      predicate9.or(predicate4);
      Predicate<Object> predicate10 = predicate6.and(predicate8);
      Predicate<Object> predicate11 = predicate1.and(predicate3);
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate11.or(predicate7);
      Predicate<Object> predicate14 = predicate9.negate();
      predicate10.or(predicate14);
      predicate13.and(predicate12);
      predicate7.negate();
      JRip jRip1 = new JRip();
      String string0 = jRip1.debugTipText();
      assertEquals(3, jRip1.getFolds());
      assertEquals("Whether debug information is output to the console.", string0);
      assertFalse(jRip1.getDebug());
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(jRip0.getUsePruning());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 2371;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("14N,>LC4s To", arrayList1, 2);
      binarySparseInstance1.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance2);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1288532479826054
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.setDebug(false);
      Instances instances0 = new Instances("%.$d|&.'t,p", arrayList0, 0);
      jRip0.getCheckErrorRate();
      jRip0.checkErrorRateTipText();
      jRip0.enumerateMeasures();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      Attribute attribute0 = new Attribute(".bsi", list0, (-1345));
      Attribute attribute1 = attribute0.copy("GE+<WR{O{2mp@AZ5");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      JRip jRip1 = new JRip();
      jRip1.setUsePruning(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.getAttr();
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.getSplitPoint();
      instances0.setClass(attribute1);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      int[] intArray0 = new int[16];
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[5] = 5;
      intArray0[4] = 3;
      intArray0[6] = 1;
      intArray0[6] = 2;
      decisionTable0.m_decisionFeatures = intArray0;
      double[] doubleArray0 = new double[20];
      doubleArray0[6] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 5;
      doubleArray0[4] = (double) 5;
      decisionTable0.toString();
      doubleArray0[7] = (double) 3;
      Attribute attribute0 = new Attribute("z9_8@pR~6hdJs", (-1680));
      decisionTable0.m_decisionFeatures = intArray0;
      decisionTable1.getSearchSpec();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(4147.013407, doubleArray0);
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 1479.996020913, 13.443303398861959);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 675.2;
      doubleArray0[1] = 675.2;
      doubleArray0[2] = 675.2;
      doubleArray0[3] = 675.2;
      doubleArray0[4] = 2103.9432298;
      int[] intArray0 = new int[5];
      intArray0[0] = 1678;
      intArray0[1] = 2001;
      intArray0[2] = 3413;
      intArray0[3] = (-1142);
      intArray0[4] = 2390;
      SparseInstance sparseInstance0 = new SparseInstance(675.2, doubleArray0, intArray0, 1047);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      double double0 = jRip_RipperRule0.getConsequent();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("e;4DN6", linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate2.and(predicate4);
      Predicate<Object> predicate11 = predicate6.or(predicate8);
      Predicate<Object> predicate12 = predicate11.and(predicate4);
      predicate11.or(predicate5);
      Predicate<Object> predicate13 = predicate5.or(predicate9);
      Predicate<Object> predicate14 = predicate7.and(predicate12);
      predicate8.and(predicate13);
      predicate10.negate();
      predicate2.or(predicate13);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) linkedList2);
      Attribute attribute1 = new Attribute("s%L5'f_Xf9", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Object object0 = jRip_NominalAntd0.copy();
      Predicate.isEqual(object0);
      Predicate<Object> predicate15 = predicate14.negate();
      predicate15.negate();
      predicate13.or(predicate6);
      predicate0.and(predicate15);
      predicate4.negate();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      assertEquals("If set to true, classifier may output additional info to the console.", inputMappedClassifier0.debugTipText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1221);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(1221);
      boolean[] booleanArray0 = new boolean[0];
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(105.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip0.getUsePruning();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      org.evosuite.runtime.Random.setNextRandom((-1417));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.setDebug(false);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      int[] intArray0 = new int[7];
      intArray0[1] = 2145727733;
      intArray0[2] = 2;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1757412430371352
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 1330.6521270881;
      jRip0.getCapabilities();
      jRip0.setCheckErrorRate(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", protectedProperties0);
      Attribute attribute1 = attribute0.copy("The rule covers: ");
      jRip_RipperRule0.toString(attribute1);
      jRip_RipperRule0.hasAntds();
      JRip jRip1 = new JRip();
      jRip1.setDebug(false);
      jRip1.getUsePruning();
      Attribute attribute2 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.copy();
      jRip_NominalAntd0.getAccuRate();
      jRip_NominalAntd0.copy();
      jRip_NominalAntd1.getMaxInfoGain();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("integer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // integer not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 3562;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-6.78214234);
      iBk0.pruneToK((Instances) null, doubleArray0, 1);
      IBk iBk1 = new IBk((-11));
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_dtInstances;
      Instances instances2 = decisionTable0.m_theInstances;
      SystemInUtil.addInputLine("");
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1070.0));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3926501890403795
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.toString();
      jRip0.getTechnicalInformation();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo((-3846));
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.copy();
      jRip0.getMinNo();
      jRip0.foldsTipText();
      jRip0.globalInfo();
      assertEquals((-3846.0), jRip0.getMinNo(), 0.01);
      
      jRip0.setOptions(stringArray0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      jRip0.minNoTipText();
      jRip0.setUsePruning(false);
      Attribute attribute0 = new Attribute("b5cM", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.copy("gcyr#K =&dP=*(E2lu,");
      jRip0.getCapabilities();
      jRip0.getOptions();
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getAccu();
      jRip_RipperRule0.getConsequent();
      jRip0.setSeed(1);
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1221);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockRandom mockRandom0 = new MockRandom((-4133L));
      boolean[] booleanArray0 = new boolean[0];
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(105.0);
      jRip_RipperRule0.prune(instances0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip_RipperRule0.grow(instances0);
      assertEquals(105.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C+^{*qDHX~E%,2&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C+^{*qDHX~E%,2&v");
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1221);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopy(jRip0);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent(105.0);
      assertEquals(105.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2371;
      doubleArray0[4] = 2499.1912746;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-2865.150359546), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance4.deleteAttributeAt(2371);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2371);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      binarySparseInstance6.deleteAttributeAt((-2790));
      Attribute attribute0 = new Attribute("DL72rpKu", 2371);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance2);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      int int0 = 0;
      Attribute attribute0 = new Attribute("outside", list0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      double double0 = 0.0;
      try { 
        CostMatrix.parseMatlab("|ezxT7\tPA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockRandom mockRandom0 = new MockRandom((-4133L));
      mockRandom0.nextInt(1221);
      boolean[] booleanArray0 = new boolean[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setSeed(0);
      jRip_RipperRule0.setConsequent(105.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals(0, GaussianProcesses.FILTER_NORMALIZE);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(407);
      String[] stringArray0 = new String[6];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setFolds(1456);
      DenseInstance denseInstance0 = new DenseInstance(480);
      Attribute attribute0 = new Attribute(stringArray0[1], 190);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(denseInstance0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Y^0}l>3`V&[";
      stringArray1[1] = "@end";
      stringArray1[2] = "@end";
      stringArray1[3] = ">C7m,`z&6";
      stringArray1[4] = "numeric";
      stringArray1[5] = "@end";
      stringArray1[6] = "@attribute";
      stringArray1[7] = "relational";
      stringArray1[8] = "date";
      jRip0.setOptions(stringArray1);
      jRip0.listOptions();
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      arrayList0.spliterator();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Attribute attribute0 = new Attribute("4jI[Pj.mbaQZ)", arrayList0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.getDebug();
      org.evosuite.runtime.Random.setNextRandom(50);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = (-17);
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "(BsLoU/:LZ=";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("The number of optimization runs.", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.toArray();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList4);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.removeAll(linkedList3);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.toArray();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<RuleStats> linkedList8 = new LinkedList<RuleStats>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList7, (Collection<String>) linkedList3, locale_FilteringMode0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) iBk0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate0);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate2.and(predicate6);
      predicate5.and(predicate6);
      Predicate<Object> predicate10 = predicate8.or(predicate7);
      predicate9.or(predicate0);
      Predicate<Object> predicate11 = predicate8.and(predicate2);
      Predicate<Object> predicate12 = predicate11.and(predicate4);
      Predicate<Object> predicate13 = predicate12.and(predicate7);
      predicate13.negate();
      predicate2.or(predicate8);
      predicate8.and(predicate10);
      predicate12.negate();
      Predicate<Object> predicate14 = predicate2.or(predicate5);
      predicate14.and(predicate13);
      predicate1.negate();
      JRip jRip1 = new JRip();
      jRip1.usePruningTipText();
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1221);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(105.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip_RipperRule0.grow(instances0);
      assertEquals(105.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("NiD+C^{*qD|HX~E%,2&v");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D-xRIn}X&&,s7L Y");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      org.evosuite.runtime.Random.setNextRandom((-1417));
      Attribute attribute0 = new Attribute("D-xRIn}X&&,s7L Y");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("+}iJ5}JjBBcb} 2u9Y6", 102);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      Instances instances0 = new Instances("NiD+C^{*qD|HX~E%,2&v", arrayList0, 1221);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1221;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NiD+C^{*qD|HX~E%,2&v");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.setConsequent(105.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D-xRIn}X&&,s7L Y");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      org.evosuite.runtime.Random.setNextRandom((-1417));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((byte) (-97));
      assertEquals((-97.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Filter.makeCopy((Filter) null);
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("NiD+C^{*qD|HX~E%,2&v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NiD+C^{*qD|HX~E%,2&v not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jRip_NumericAntd1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate3.negate();
      predicate5.and(predicate2);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate3.and(predicate8);
      Predicate<Object> predicate10 = predicate0.and(predicate7);
      predicate10.and(predicate9);
      predicate10.or(predicate6);
      Predicate<Object> predicate11 = predicate2.or(predicate9);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate8);
      predicate12.and(predicate2);
      Predicate<Object> predicate13 = predicate0.and(predicate5);
      Predicate<Object> predicate14 = predicate12.and(predicate13);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate11.or(predicate10);
      predicate15.negate();
      predicate12.or(predicate11);
      predicate10.and(predicate4);
      predicate3.negate();
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      
      JRip jRip1 = new JRip();
      String string0 = jRip1.toString();
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals("JRIP: No model built yet.", string0);
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)95;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.toArray();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 2371;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2371);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Attribute attribute0 = new Attribute("*cn;7", 2371);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 2371;
      jRip_NumericAntd0.covers(binarySparseInstance3);
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk(8);
      DecisionTable decisionTable0 = new DecisionTable();
      SystemInUtil.addInputLine("");
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      IBk iBk1 = new IBk(2);
      IBk iBk2 = new IBk(1);
      IBk iBk3 = new IBk(2);
      iBk1.pruneToK((Instances) null, doubleArray0, 2);
      iBk3.pruneToK((Instances) null, doubleArray0, 2145727733);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.toArray();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.toArray();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList2.removeAll(linkedList5);
      linkedList0.removeAll(linkedList3);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.toArray();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<RuleStats> linkedList8 = new LinkedList<RuleStats>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList5, locale_FilteringMode0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-520));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
