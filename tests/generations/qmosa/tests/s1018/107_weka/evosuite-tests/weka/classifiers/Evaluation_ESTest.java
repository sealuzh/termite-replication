/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:14:45 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.OneRAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.clusterers.AbstractClusterer;
import weka.clusterers.Cobweb;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.matrix.Matrix;
import weka.core.tokenizers.Tokenizer;
import weka.estimators.KernelEstimator;
import weka.estimators.MahalanobisEstimator;
import weka.estimators.NormalEstimator;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1721440787327864
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1717986916);
      intArray0[1] = 19;
      intArray0[2] = 1246;
      intArray0[3] = 3747;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      capabilities0.setMinimumNumberInstances((-1));
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.dependencies();
      TestInstances.forCapabilities(capabilities0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1080297855909604
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      int int0 = 82;
      testInstances0.setNumNominalValues(82);
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      filter0.getCapabilities();
      m5Rules0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalNominalValues((-1161));
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities1 = oneRAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      Evaluation evaluation1 = new Evaluation(instances0);
      int int1 = 1530;
      evaluation0.falseNegativeRate(1530);
      // Undeclared exception!
      try { 
        evaluation0.precision(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9429537629977367
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("D*qWh3r31IP`a4");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      TestInstances testInstances1 = new TestInstances();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances2);
      TestInstances.forCapabilities(capabilities1);
      evaluation1.falsePositiveRate((-1));
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.numTruePositives(4);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = 1;
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (-2);
      intArray0[7] = (-2);
      intArray0[8] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2142.34, intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation2.updateStatsForPredictor((-1593.1037964), sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3181226458588844
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval2.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      capabilities0.disableAllAttributeDependencies();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities1);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.rootRelativeSquaredError();
      evaluation0.falseNegativeRate((-1));
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-95);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities0 = classificationViaRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("main");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      HashSet<BinarySparseInstance> hashSet0 = new HashSet<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) instances1);
      Instances instances2 = testInstances0.getData();
      instances2.delete();
      SystemInUtil.addInputLine("subSpaceSizeTipText");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumInstances((byte) (-7));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2246858094856745
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("gm<gNh$tX'Lft,8g!");
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MAJOR = (-1565);
      double double0 = evaluation0.m_Incorrect;
      double double1 = evaluation0.meanPriorAbsoluteError();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      testInstances0.setNoClass(true);
      double double2 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      String string0 = evaluation0.toMatrixString(" Me");
      assertEquals(" Me\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.01718692134263
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning((-1456206972));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1700L));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1456206972);
      intArray0[1] = (-1456206972);
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      intArray0[5] = 1932;
      intArray0[6] = 17;
      intArray0[7] = (-1456206972);
      double double0 = evaluation0.precision(116);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.falsePositiveRate(2552);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0607597181257296
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setSeed(20);
      Evaluation.getGlobalInfo(logitBoost0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[5] = (-74);
      intArray0[1] = (-74);
      intArray0[2] = 20;
      intArray0[3] = (-74);
      intArray0[4] = (-74);
      intArray0[5] = (-74);
      intArray0[6] = (-415);
      intArray0[7] = 673;
      gainRatioAttributeEval0.postProcess(intArray0);
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.");
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      capabilities0.getAttributeCapabilities();
      evaluation0.m_ComplexityStatisticsAvailable = false;
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2212066558574524
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      double double1 = evaluation0.falseNegativeRate((-3859));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      regressionByDiscretization1.getCapabilities();
      evaluation0.recall(720);
      double double2 = evaluation0.falsePositiveRate(5488);
      assertEquals(double2, double1, 0.01);
      
      evaluation0.numFalseNegatives(63);
      evaluation0.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.seedTipText();
      OneR oneR0 = new OneR();
      double double3 = evaluation0.fMeasure(10);
      evaluation0.correct();
      double double4 = evaluation0.matthewsCorrelationCoefficient((-284810110));
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7839182078638567
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      evaluation0.falseNegativeRate((-3859));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getCapabilities();
      regressionByDiscretization0.setUseEqualFrequency(true);
      evaluation0.recall(720);
      evaluation0.falsePositiveRate(5488);
      evaluation0.numFalseNegatives(63);
      evaluation0.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(720, charArray0, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8958389728225644
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities1 = gainRatioAttributeEval0.getCapabilities();
      capabilities1.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation1 = new Evaluation(instances1);
      capabilities0.getAttributeCapabilities();
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3164648855394714
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage(0.07500000298023224);
      logitBoost0.setSeed((-2));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost1.listOptions();
      logitBoost1.setDebug(true);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      instances0.add((Instance) denseInstance0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      HashSet<BinarySparseInstance> hashSet0 = new HashSet<BinarySparseInstance>();
      capabilities0.disableAllAttributeDependencies();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.317477358555153
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage(0.07500000298023224);
      logitBoost0.setSeed((-2));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost1.listOptions();
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      HashSet<BinarySparseInstance> hashSet0 = new HashSet<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) hashSet0);
      instances0.delete();
      SystemInUtil.addInputLine(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances1.setNumInstances(0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      evaluation0.rootMeanPriorSquaredError();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) logitBoost1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0249978556221713
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities2 = wrapperSubsetEval0.getCapabilities();
      Capabilities capabilities3 = capabilities2.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities3);
      instances0.delete();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances1 = new TestInstances();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Attribute attribute0 = new Attribute("getTechnicalInformation", instances0);
      Attribute attribute1 = attribute0.copy("weka/core/Capabilities.props");
      capabilities0.testWithFail(attribute1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P=JB0<%");
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      simpleKMeans1.seedTipText();
      evaluation0.toMatrixString();
      OneR oneR0 = new OneR();
      String string0 = evaluation0.toMatrixString((String) null);
      assertEquals("null\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0456098311291666
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      sparseInstance0.toStringNoWeight(15);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7431420634218675
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTruePositiveRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances1.add((Instance) sparseInstance0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-864);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      SparseInstance sparseInstance1 = new SparseInstance(Double.NaN, doubleArray1);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader5.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.areaUnderPRC((-864));
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) vote0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7141759586685477
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTruePositiveRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-864);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      SparseInstance sparseInstance1 = new SparseInstance(Double.NaN, doubleArray1);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader5.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.areaUnderPRC((-864));
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) Double.NaN;
      objectArray0[1] = (Object) Double.NaN;
      objectArray0[2] = (Object) textDirectoryLoader5;
      try { 
        evaluation1.evaluateModel((Classifier) randomCommittee0, instances1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4968503600692964
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = (-1456206976);
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206976));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      KernelEstimator kernelEstimator0 = new KernelEstimator((-1456206976));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.toCumulativeMarginDistributionString();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialText0, (Instances) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.215023289482569
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.recall((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206976));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFPriorEntropy();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2778);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7919293214413823
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1717986916);
      intArray0[1] = 19;
      intArray0[2] = 1246;
      intArray0[3] = 3747;
      intArray0[4] = (-415);
      intArray0[5] = (-74);
      intArray0[6] = 673;
      intArray0[7] = 1278;
      gainRatioAttributeEval1.postProcess(intArray0);
      GainRatioAttributeEval gainRatioAttributeEval3 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",#R{tX%@K");
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTruePositives((-1245));
      double double0 = evaluation0.numTrueNegatives((-1983367021));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval3 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval3.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      capabilities1.disableAllAttributeDependencies();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      double double0 = evaluation0.falsePositiveRate(110);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7085549222046321
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9946341857340077
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LWL lWL0 = new LWL();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.setNumInstances(0);
      evaluation0.areaUnderROC(3);
      evaluation0.numTrueNegatives((-234));
      double double0 = evaluation0.m_SumSqrClass;
      Vote vote0 = new Vote();
      Evaluation evaluation1 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      boolean boolean0 = false;
      evaluation1.setDiscardPredictions(false);
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.7976931348623157E308;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1698284489127246
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances1 = new TestInstances();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Attribute attribute0 = new Attribute(".bsi", instances0);
      Attribute attribute1 = attribute0.copy("");
      attribute1.copy("Percentage split ('-percentage-split') is missing.");
      capabilities0.testWithFail(attribute1);
      evaluation0.priorEntropy();
      capabilities1.test(instances0);
      Attribute attribute2 = new Attribute("@data", 3);
      attribute2.enumerateValues();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      evaluation0.confusionMatrix();
      evaluation0.trueNegativeRate(1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.838689834193716
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      evaluation0.numTrueNegatives(20);
      double double0 = evaluation0.m_SumSqrClass;
      Vote vote0 = new Vote();
      evaluation0.setPriors(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.611201919257138
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LWL lWL0 = new LWL();
      M5Rules m5Rules0 = new M5Rules();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      M5Rules m5Rules1 = new M5Rules();
      m5Rules1.getCapabilities();
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Filter filter0 = filteredClassifier0.getFilter();
      filter0.getCapabilities();
      Capabilities capabilities1 = m5Rules0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalNominalValues(5);
      Instances instances0 = testInstances0.generate("cIh>VzF-:");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate((-1));
      evaluation0.precision(1);
      evaluation1.weightedFMeasure();
      try { 
        Evaluation.handleCostOption(" ", 2316);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7158498682448617
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      double double0 = evaluation0.m_SumPriorSqrErr;
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(495);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 495
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setSeed((-2276));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost0.listOptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      regressionByDiscretization0.getCapabilities();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorAbsErr = (-1487.04745);
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.listOptions();
      int int0 = (-2279);
      logitBoost1.setSeed((-2279));
      LogitBoost logitBoost2 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=.)x)/Jlen{";
      stringArray0[1] = "=.)x)/Jlen{";
      stringArray0[2] = "=.)x)/Jlen{";
      stringArray0[3] = "=.)x)/Jlen{";
      stringArray0[4] = "=.)x)/Jlen{";
      Evaluation.main(stringArray0);
      IBk iBk0 = new IBk();
      OneR oneR0 = new OneR();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("=.)x)/Jlen{", arrayList0, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5453929420108388
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setDirectory(file0);
      instances0.delete();
      double double0 = evaluation0.m_SumPriorSqrErr;
      textDirectoryLoader0.setCharSet(".arff");
      evaluation0.recall(1543);
      evaluation0.truePositiveRate(495);
      evaluation0.setDiscardPredictions(true);
      evaluation0.getHeader();
      evaluation0.areaUnderROC(4);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      textDirectoryLoader0.setDebug(false);
      doubleArray0[1] = (-5602.591);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(495);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3584837343642917
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval3 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval4 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval1.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("EPky[Q");
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Capabilities capabilities2 = capabilities0.getAttributeCapabilities();
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities2);
      evaluation0.falsePositiveRate((-1));
      evaluation1.makeDistribution((-0.4375));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setDirectory(file0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      instances0.delete();
      double double0 = evaluation0.m_SumPriorSqrErr;
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      gainRatioAttributeEval0.toString();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.07500000298023224);
      double double1 = evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.errorRate();
      double[] doubleArray1 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray1.length);
      
      double double4 = evaluation0.KBInformation();
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.788668379160148
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.m_SumPriorEntropy;
      Vote vote0 = new Vote();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedAreaUnderROC();
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1813.6316453);
      evaluation0.makeDistribution(Double.NaN);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation0.meanAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      evaluation0.falseNegativeRate((-3859));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      Vote vote0 = new Vote();
      vote0.getPreBuiltClassifiers();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 16, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.125;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (-1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      evaluation0.confusionMatrix();
      evaluation0.rootMeanSquaredError();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.616715308111606
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(69);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.falseNegativeRate(1961);
      evaluation0.toClassDetailsString((String) null);
      double double0 = evaluation0.m_SumErr;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      vote0.getPreBuiltClassifiers();
      doubleArray0[4] = (double) 1961;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) (-2);
      evaluation0.updateMargins(doubleArray0, 2, (-2));
      evaluation0.numTruePositives(300);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.484623759003385
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206976));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      KernelEstimator kernelEstimator0 = new KernelEstimator(410.280054);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.unweightedMicroFmeasure();
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.587821318696078
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.totalCost();
      double double1 = evaluation0.falseNegativeRate((-3859));
      assertEquals(0.0, double1, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setOptions((String[]) null);
      testInstances0.generate("N`6RbhMOtJ0;qUibSt[");
      testInstances0.generate("@data");
      instances0.delete();
      evaluation0.addNumericTrainClass(1.0, 543.8976786);
      evaluation0.totalCost();
      double double2 = evaluation0.KBInformation();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.m_TotalCoverage;
      double double5 = evaluation0.falsePositiveRate((-3090));
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.427051439120803
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      instances0.listIterator();
      doubleArray0[2] = 0.125;
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.priorEntropy();
      evaluation0.confusionMatrix();
      evaluation0.areaUnderROC(288);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.001637505695017
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = ":\\'IPKgS7R6-%Ou:lR<";
      evaluation0.toClassDetailsString(":'IPKgS7R6-%Ou:lR<");
      double double0 = evaluation0.m_TotalSizeOfRegions;
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      int int0 = 1194;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Object[] objectArray0 = new Object[2];
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setPeriodicPruning(1194);
      objectArray0[1] = (Object) instances0;
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialText0, instances0, 1194, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3146566630235914
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("VK$,H}&rxmv!C}y");
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      instances1.delete();
      double double0 = evaluation0.totalCost();
      double double1 = evaluation0.numFalseNegatives(1);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertNotEquals(double2, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.950448111346872
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.falseNegativeRate((-3859));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      regressionByDiscretization1.getOptions();
      regressionByDiscretization1.getCapabilities();
      evaluation0.recall(720);
      double double3 = evaluation0.falsePositiveRate(5488);
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.numFalseNegatives(63);
      evaluation0.getClassPriors();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      OneR oneR0 = new OneR();
      double double4 = evaluation0.fMeasure(10);
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.numInstances();
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.meanPriorAbsoluteError();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.seedTipText();
      OneR oneR0 = new OneR();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1135.908944, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.653071976463125
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1725;
      evaluation0.matthewsCorrelationCoefficient(1725);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanSchemeEntropy();
      evaluation1.unweightedMacroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      MahalanobisEstimator mahalanobisEstimator0 = null;
      try {
        mahalanobisEstimator0 = new MahalanobisEstimator((Matrix) null, 1725, 0.07500000298023224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.estimators.MahalanobisEstimator", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = null;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3473508904222826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206972));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(17);
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = (-1456206972);
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(488.5825290079836, intArray0, 17);
      MockRandom mockRandom2 = new MockRandom();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      evaluation0.falsePositiveRate(2014);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTruePositives(1466);
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-108.95));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -108
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning((-1456206972));
      textDirectoryLoader0.reset();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1700L));
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce((double) (-1700L), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1700
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.902383338889809
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrClass;
      testInstances0.getData();
      evaluation0.weightedAreaUnderPRC();
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.1414626421822291);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.m_Incorrect;
      assertNotEquals(double4, double2, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206972));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(17);
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = (-1456206972);
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(488.5825290079836, intArray0, 17);
      MockRandom mockRandom2 = new MockRandom();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = 488.5825290079836;
      doubleArray0[2] = (double) (-1456206972);
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 17;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(17, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(456);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 0.17499999701976776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.619378182305823
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(69);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.falseNegativeRate(1961);
      evaluation0.toClassDetailsString((String) null);
      double double0 = evaluation0.m_SumErr;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      vote0.getPreBuiltClassifiers();
      doubleArray0[4] = (double) 1961;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2983368449258386
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.useNoPriors();
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.125;
      LogitBoost[] logitBoostArray0 = new LogitBoost[3];
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoostArray0[0] = logitBoost0;
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoostArray0[1] = logitBoost1;
      LogitBoost logitBoost2 = new LogitBoost();
      logitBoostArray0[2] = logitBoost2;
      instances0.toArray(logitBoostArray0);
      doubleArray0[3] = (-1.3464704991935703);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.recall(111);
      evaluation1.truePositiveRate(1414);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1136903108));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206955));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      naiveBayesMultinomialText0.setPeriodicPruning(1484);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-291L));
      mockRandom0.nextDouble();
      textDirectoryLoader1.getOptions();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 1484;
      intArray0[1] = 1412;
      intArray0[2] = 8;
      SparseInstance sparseInstance0 = new SparseInstance((-1456206955), doubleArray0, intArray0, 2599);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      evaluation0.totalCost();
      Instance instance0 = null;
      String string0 = "";
      try { 
        evaluation0.updateStatsForPredictor(1.1000000014901161, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(119);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(119);
      MockRandom mockRandom2 = new MockRandom();
      textDirectoryLoader0.getOptions();
      MockRandom mockRandom3 = new MockRandom((-1456206972));
      mockRandom3.nextInt(32);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.125;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (-1.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.confusionMatrix();
      evaluation0.trueNegativeRate(147);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.026546887061066
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_TotalSizeOfRegions;
      double double1 = evaluation0.m_SumSqrPredicted;
      double double2 = evaluation1.falseNegativeRate(496);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      regressionByDiscretization1.getCapabilities();
      double double3 = evaluation0.recall(2);
      assertEquals(0.0, double3, 0.01);
      
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      double double4 = evaluation1.falsePositiveRate(2);
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation1.numFalseNegatives(2147483645);
      assertEquals(0.0, double5, 0.01);
      
      evaluation1.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      OneR oneR0 = new OneR();
      double double6 = evaluation0.fMeasure(0);
      assertEquals(double6, double5, 0.01);
      
      evaluation0.numTrueNegatives(5495);
      double double7 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double7, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      Instance instance0 = null;
      String string0 = "";
      MockRandom mockRandom0 = new MockRandom(1682);
      mockRandom0.nextInt(14);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, (-17), (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9995255626558266
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      instances0.spliterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = (-2834);
      Utils.SMALL = 0.07500000298023224;
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6743369294726644
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderROC();
      Instances instances1 = testInstances0.getData();
      evaluation0.toClassDetailsString();
      instances0.equalHeadersMsg(instances1);
      int[] intArray0 = new int[7];
      intArray0[0] = 46;
      intArray0[1] = 46;
      intArray0[2] = (-888);
      intArray0[3] = 111;
      intArray0[4] = 111;
      intArray0[5] = (-2);
      intArray0[6] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NEGATIVE_INFINITY, intArray0, (-1995138716));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-888);
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (-832.0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6830001083847668
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval3 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval2.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities1.getAttributeCapabilities();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.incorrect();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.538930110755563
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      int[] intArray0 = new int[4];
      int int0 = 2821;
      intArray0[0] = 2821;
      int int1 = (-802);
      intArray0[1] = (-802);
      intArray0[2] = 2821;
      intArray0[3] = 99;
      gainRatioAttributeEval0.postProcess(intArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("The independent probablity of a class\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<XML> priorityQueue0 = new PriorityQueue<XML>(comparator0);
      instances0.retainAll(priorityQueue0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Bagging bagging0 = new Bagging();
      evaluation0.getClassPriors();
      evaluation0.weightedFMeasure();
      evaluation0.toMatrixString("@relation");
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("qYnG*F[`46q>Dp", instances0, 3799, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: qYnG*F[`46q>Dp
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      Instances instances0 = testInstances0.generate(" ");
      NormalEstimator normalEstimator0 = new NormalEstimator(33.2535);
      Capabilities capabilities0 = normalEstimator0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      normalEstimator0.getCapabilities();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Bagging bagging0 = new Bagging();
      MockRandom mockRandom0 = new MockRandom((-2));
      try { 
        evaluation0.crossValidateModel((Classifier) bagging0, instances0, 6, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = testInstances0.generate(" ");
      NormalEstimator normalEstimator0 = new NormalEstimator(31.796626906925436);
      normalEstimator0.getCapabilities();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 82;
      doubleArray0[2] = 0.0;
      testInstances0.getOptions();
      doubleArray0[4] = 0.22499999403953552;
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 1903.767474118;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.seedTipText();
      OneR oneR0 = new OneR();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, (-1802), (Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.2510532028293406
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = testInstances0.generate(" ");
      NormalEstimator normalEstimator0 = new NormalEstimator(31.796626906925436);
      normalEstimator0.getCapabilities();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 82;
      doubleArray0[2] = 0.0;
      testInstances0.getOptions();
      doubleArray0[4] = 0.22499999403953552;
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 1903.767474118;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double1 = evaluation0.weightedAreaUnderROC();
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7800472091343975
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval3 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval4 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval1.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(",#R{tX%@K");
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Capabilities capabilities2 = capabilities0.getAttributeCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "numRunsTipText");
      double double0 = evaluation0.weightedAreaUnderPRC();
      capabilities2.disableAllAttributes();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.toSummaryString("\tThe number of values for nominal attributes in a rel. attribute (default 2).", false);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7080988763265408
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      int[] intArray0 = new int[4];
      int int0 = 2821;
      intArray0[0] = 2821;
      intArray0[1] = (-802);
      intArray0[2] = 32;
      intArray0[3] = (-802);
      gainRatioAttributeEval0.postProcess(intArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("The independent probablity of a class\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<XML> priorityQueue0 = new PriorityQueue<XML>(comparator0);
      instances0.retainAll(priorityQueue0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-802));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9278436656033775
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      vote0.setDebug(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString("Ui+7Y?=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.125;
      doubleArray0[3] = (-1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 111;
      intArray0[1] = 111;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E10, intArray0, 377);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instance instance0 = null;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0E-6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2486.72000414);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1387488857272077
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      instances0.delete();
      evaluation0.totalCost();
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '\'';
      charArray0[2] = 'I';
      charArray0[3] = '(';
      charArray0[4] = '3';
      charArray0[5] = 'w';
      charArray0[6] = 'q';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 200003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5929651324361664
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206942));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      KernelEstimator kernelEstimator0 = new KernelEstimator(410.280054);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedPrecision();
      evaluation0.getDiscardPredictions();
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '@';
      charArray0[2] = '1';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1456206942), charArray0, (-1456206942));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1132084237667748
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      textDirectoryLoader0.setOutputFilename(false);
      doubleArray0[0] = 0.07500000298023224;
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '@';
      charArray0[2] = 'M';
      charArray0[3] = '@';
      charArray0[4] = '';
      charArray0[5] = '1';
      charArray0[6] = 'n';
      evaluation0.num2ShortID(59, charArray0, 38);
      doubleArray0[1] = 0.0;
      Instance instance0 = null;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2060335604823573
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "distributionForInstance";
      stringArray0[1] = "<body>\n";
      stringArray0[2] = "UTVIoJR{uP|Ixw7%s:";
      j48_0.setUseLaplace(true);
      stringArray0[3] = "CT\"/L:oI)";
      stringArray0[4] = "}^l;{]\"Nr{L]){?3";
      stringArray0[5] = "nearestNeighbourSearchAlgorithmTipText";
      stringArray0[6] = ".hS";
      stringArray0[7] = "f1|4maj,V&9h*;>";
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "fLc_J2`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0205510251350907
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      Instances instances0 = testInstances0.generate(" ");
      NormalEstimator normalEstimator0 = new NormalEstimator(33.2535);
      Capabilities capabilities0 = normalEstimator0.getCapabilities();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities1);
      normalEstimator0.getCapabilities();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getAttributeCapabilities();
      evaluation0.weightedAreaUnderPRC();
      capabilities1.getAttributeCapabilities();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.5113034962979683
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toClassDetailsString("B\"Ovf#()=^ 'j");
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      evaluation0.falseNegativeRate((-3859));
      evaluation0.toClassDetailsString("getPreBuiltClassifiers");
      double double1 = evaluation0.m_SumErr;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      evaluation0.totalCost();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalseNegatives(2);
      org.evosuite.runtime.Random.setNextRandom(5);
      Vote vote1 = new Vote();
      Evaluation.makeOptionString(vote0, true);
      evaluation0.fMeasure(5);
      try { 
        Evaluation.handleCostOption(" %\n", 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("qq}8=");
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206972));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3658);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization1, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.150671984848733
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("gm<gNh$tX'Lft,8g!");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.listOptions();
      double double0 = evaluation0.m_Incorrect;
      evaluation0.meanPriorAbsoluteError();
      PipedWriter pipedWriter0 = new PipedWriter();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.seedTipText();
      OneR oneR0 = new OneR();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.806543253194114
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTruePositiveRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFMeasure();
      evaluation0.priorEntropy();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.sizeOfPredictedRegions();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0611976639656677
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances2 = new TestInstances();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Attribute attribute0 = new Attribute(" ", instances0, 4);
      evaluation0.m_MaxTarget = (double) 0;
      Attribute attribute1 = attribute0.copy("The percentage size of the validation set.(The training will continue until it is observed that the error on the validation set has been consistently getting worse, or if the training time is reached).\nIf This is set to zero no validation set will be used and instead the network will train for the specified number of epochs.");
      capabilities1.testWithFail(attribute1);
      double double0 = evaluation0.m_TotalCost;
      testInstances2.setNumClasses(5);
      capabilities1.test(instances0);
      evaluation0.numFalsePositives(2);
      testInstances1.listOptions();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2784
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.5620073618652768
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.toString();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTruePositiveRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances1.add((Instance) sparseInstance0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-864);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      SparseInstance sparseInstance1 = new SparseInstance(Double.NaN, doubleArray1);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader5.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      double double0 = evaluation0.m_MinTarget;
      evaluation1.weightedFalseNegativeRate();
      OneR oneR0 = new OneR();
      assertEquals(6, oneR0.getMinBucketSize());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4613226801589367
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.toClassDetailsString("3}6s;36NJW/PcsJ>aZ");
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      double double1 = evaluation0.falseNegativeRate((-3859));
      String string0 = evaluation0.toClassDetailsString("A{");
      assertEquals("A{\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double2 = new Integer((-3859));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      evaluation0.totalCost();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalseNegatives(206);
      org.evosuite.runtime.Random.setNextRandom(1);
      Vote vote1 = new Vote();
      BestFirst bestFirst0 = new BestFirst();
      SelectedTag selectedTag0 = bestFirst0.getDirection();
      vote1.setCombinationRule(selectedTag0);
      Evaluation.makeOptionString(vote1, true);
      double double3 = evaluation0.fMeasure(260);
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.5165470788245923
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AbstractClusterer.makeCopies(simpleKMeans0, 27);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.2519789953484786
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage(0.07500000298023224);
      logitBoost0.setSeed((-2));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost1.listOptions();
      logitBoost1.setDebug(true);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      capabilities0.enableDependency(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability1);
      TestInstances.forCapabilities(capabilities0);
      HashSet<BinarySparseInstance> hashSet0 = new HashSet<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) hashSet0);
      instances0.delete();
      SystemInUtil.addInputLine(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage(0.07500000298023224);
      logitBoost0.setSeed((-2));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost1.listOptions();
      logitBoost1.setDebug(true);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      HashSet<BinarySparseInstance> hashSet0 = new HashSet<BinarySparseInstance>();
      instances0.addAll((Collection<? extends Instance>) hashSet0);
      instances0.delete();
      SystemInUtil.addInputLine(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances1.setNumInstances(0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9381133632849246
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      int int0 = 82;
      testInstances0.setNumNominalValues(82);
      NormalEstimator normalEstimator0 = new NormalEstimator((-1));
      Capabilities capabilities0 = normalEstimator0.getCapabilities();
      capabilities0.disableAllAttributes();
      capabilities0.getAttributeCapabilities();
      normalEstimator0.getCapabilities();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.numTrueNegatives((-1));
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, testInstances0.DEFAULT_WORDS);
      evaluation0.trueNegativeRate((-839));
      AllFilter allFilter0 = new AllFilter();
      try { 
        Filter.filterFile(allFilter0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: The quick brown fox jumps over the lazy dog 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         // -z <class name>
         // \tOutputs the source code representing the trained filter.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.4877197342355832
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.totalCost();
      evaluation0.toSummaryString(false);
      double double1 = evaluation0.m_SumErr;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3}6s;36NJW/PcsJ>aZ");
      Vote vote0 = new Vote();
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce((Classifier) vote0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7080988763265408
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      int[] intArray0 = new int[4];
      intArray0[0] = 2821;
      intArray0[1] = (-802);
      capabilities1.getOtherCapabilities();
      intArray0[2] = 32;
      intArray0[3] = 99;
      gainRatioAttributeEval0.postProcess(intArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("The independent probablity of a class\n");
      TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumInstances(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SparseInstance sparseInstance0 = new SparseInstance(8);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7080988763265408
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      int[] intArray0 = new int[4];
      intArray0[0] = 2821;
      intArray0[1] = (-802);
      intArray0[2] = 32;
      intArray0[3] = 99;
      gainRatioAttributeEval0.postProcess(intArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("The independent probablity of a class\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<XML> priorityQueue0 = new PriorityQueue<XML>(comparator0);
      instances0.retainAll(priorityQueue0);
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-802), true, true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-802);
      doubleArray0[3] = (double) (-802);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) simpleLogistic0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1156582549611476
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval2 = new GainRatioAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1717986916);
      intArray0[1] = 19;
      intArray0[2] = 1246;
      intArray0[3] = 3747;
      intArray0[4] = (-415);
      intArray0[5] = (-74);
      intArray0[6] = 673;
      intArray0[7] = 1278;
      gainRatioAttributeEval1.postProcess(intArray0);
      GainRatioAttributeEval gainRatioAttributeEval3 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",#R{tX%@K");
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) (-2);
      capabilities0.getAttributeCapabilities();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(1.910762106246821, double1, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.7349818378211954
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
      
      TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances1 = new TestInstances();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Attribute attribute0 = new Attribute(" ", instances0, 4);
      evaluation0.m_MaxTarget = (double) 0;
      Attribute attribute1 = attribute0.copy("The percentage size of the validation set.(The training will continue until it is observed that the error on the validation set has been consistently getting worse, or if the training time is reached).\nIf This is set to zero no validation set will be used and instead the network will train for the specified number of epochs.");
      capabilities1.testWithFail(attribute1);
      double double0 = evaluation0.m_TotalCost;
      capabilities1.test(instances0);
      attribute1.enumerateValues();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      evaluation0.confusionMatrix();
      evaluation0.trueNegativeRate(2);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "~R(-FZDm*W");
      double double1 = evaluation0.m_SumPriorAbsErr;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFPriorEntropy();
      testInstances1.setNoClass(true);
      double double2 = evaluation0.falseNegativeRate(24);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.weightedFalseNegativeRate();
      String string0 = evaluation0.toMatrixString((String) null);
      assertEquals("null\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.230116026255602
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("toSource");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9687391800746314
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.SFMeanEntropyGain();
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-864);
      doubleArray1[3] = Double.NaN;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 327);
      evaluation0.numFalsePositives((-864));
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.recall(6);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.falsePositiveRate(1829);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation0.numTruePositives(6);
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.148815922340797
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      evaluation0.SFSchemeEntropy();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.recall(10);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(2);
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      PipedWriter pipedWriter0 = new PipedWriter();
      evaluation1.m_CoverageStatisticsAvailable = true;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage(0.07500000298023224);
      logitBoost0.setSeed((-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost1.listOptions();
      logitBoost1.setDebug(true);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.capabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("weka/core/Capabilities.props");
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      capabilities0.disableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "weka/core/Capabilities.props");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.034079085020153
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage(0.07500000298023224);
      logitBoost0.setSeed((-2));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getTechnicalInformation();
      logitBoost1.listOptions();
      logitBoost1.setDebug(true);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      OneR oneR0 = new OneR();
      evaluation0.kappa();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      try { 
        simpleKMeans0.getAssignments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The assignments are only available when order of instances is preserved (-O)
         //
         verifyException("weka.clusterers.SimpleKMeans", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      SMO sMO0 = new SMO();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("$sd++jwOK");
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.totalCost();
      try { 
        evaluation1.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.129899128884771
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("S.w");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = (-2834);
      Utils.SMALL = 0.07500000298023224;
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.247206844974067
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString("@relation", true);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.m_TotalSizeOfRegions;
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setPeriodicPruning(17);
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[2];
      mockRandom0.nextInt(1682);
      objectArray0[0] = (Object) "[X6q<[}tv(^+";
      objectArray0[1] = (Object) tokenizer0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P";
      OneR oneR0 = new OneR();
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setPeriodicPruning(17);
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[2];
      naiveBayesMultinomialText0.setNorm(0.0);
      mockRandom0.nextInt(1682);
      objectArray0[0] = (Object) "[X6q<[}tv(^+";
      objectArray0[1] = (Object) tokenizer0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P";
      stringArray0[1] = "@relation";
      stringArray0[2] = "[X6q<[}tv(^+";
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate(1041);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.getRevision();
      try { 
        simpleKMeans0.getAssignments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The assignments are only available when order of instances is preserved (-O)
         //
         verifyException("weka.clusterers.SimpleKMeans", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.5761329568077875
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = testInstances0.generate(" ");
      NormalEstimator normalEstimator0 = new NormalEstimator(33.2535);
      normalEstimator0.getCapabilities();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 82;
      regressionByDiscretization0.listOptions();
      doubleArray0[2] = 0.0;
      testInstances0.getOptions();
      doubleArray0[3] = (double) 0;
      evaluation0.KBInformation();
      evaluation0.SFEntropyGain();
      evaluation0.numFalsePositives(376);
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.recall(547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 547
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.620716111820548
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.falseNegativeRate(1961);
      evaluation0.toClassDetailsString((String) null);
      double double0 = evaluation0.m_SumErr;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      evaluation0.toClassDetailsString("A@(/i7");
      double double1 = evaluation0.m_SumPredicted;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote1 = new Vote();
      double double2 = Evaluation.MIN_SF_PROB;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalseNegatives(6);
      org.evosuite.runtime.Random.setNextRandom(1746);
      Vote vote2 = new Vote();
      Evaluation.makeOptionString(vote2, false);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.244897648359148
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("qq}8=");
      naiveBayesMultinomialText0.setPeriodicPruning((-1456206972));
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      OneR oneR0 = new OneR();
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterSizes();
      simpleKMeans0.seedTipText();
      OneR oneR1 = new OneR();
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.549251394707832
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.generate("@relation");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.seedTipText();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("classifiersTipText");
      assertEquals("classifiersTipText\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9174029618180044
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      SparseInstance sparseInstance0 = new SparseInstance(29);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Y@eZv{W[.^~yPfeswA");
      Capabilities capabilities1 = Capabilities.forInstances(instances0, false);
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedAreaUnderPRC();
      double double0 = evaluation1.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.weightedTrueNegativeRate();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation1.numInstances();
      evaluation1.getHeader();
      assertEquals(Double.NaN, evaluation1.weightedFalseNegativeRate(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.684698616776485
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.125;
      doubleArray0[3] = (-1.0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.recall(111);
      evaluation1.recall(19);
      double double1 = evaluation0.falsePositiveRate(2147483645);
      double double2 = evaluation0.pctUnclassified();
      evaluation0.areaUnderPRC(2147483645);
      double double3 = evaluation0.falseNegativeRate((-1));
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation1.avgCost();
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("\t)AE)g.: ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      regressionByDiscretization1.getCapabilities();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1783);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\t)AE)g.: ", arrayList0, 4);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      OneR oneR0 = new OneR();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<XML> priorityQueue0 = new PriorityQueue<XML>(comparator0);
      instances0.retainAll(priorityQueue0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) m5Rules1, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9278436656033775
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.148815922340797
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.07500000298023224;
      doubleArray0[2] = 0.125;
      LogitBoost[] logitBoostArray0 = new LogitBoost[3];
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoostArray0[0] = logitBoost0;
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoostArray0[1] = logitBoost1;
      LogitBoost logitBoost2 = new LogitBoost();
      logitBoostArray0[2] = logitBoost2;
      instances0.toArray(logitBoostArray0);
      doubleArray0[3] = (-1.3464704991935703);
      Instance instance0 = null;
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.rootMeanPriorSquaredError();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.recall(111);
      evaluation1.truePositiveRate(1414);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1136903108));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8109710120534392
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.07500000298023224;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.125;
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities1);
      instances0.delete();
      Evaluation.handleCostOption((String) null, (-302));
      OneR oneR0 = new OneR();
      assertEquals("If set to true, classifier may output additional info to the console.", oneR0.debugTipText());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      Evaluation.handleCostOption("", 4114);
      OneR oneR0 = new OneR();
      assertFalse(oneR0.getDebug());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "_G3kUe&'m<g\"1");
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("S.w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vote vote0 = new Vote();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)56;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(classifier0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "seedTipText";
      stringArray0[1] = "d&`*?dz*3Y)OF~aJ";
      stringArray0[2] = "tGx";
      stringArray0[3] = "getBuildRegressionTree";
      stringArray0[4] = "Cannot print distribution without '-p' option!";
      stringArray0[5] = "d)Z";
      stringArray0[6] = "{| n*";
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdditiveRegression:
         // 
         // -S
         // \tSpecify shrinkage rate. (default = 1.0, ie. no shrinkage)
         // 
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"y$_sWk):}74udR";
      stringArray0[1] = "6@9|.<CcH;eL',4}g";
      stringArray0[2] = "5JKQp+";
      stringArray0[3] = "";
      stringArray0[4] = "OdG^}Y%Tr'P";
      stringArray0[5] = "listOptions";
      stringArray0[6] = "H^e}|q2[)j_41~UZu";
      stringArray0[7] = "getTrim";
      stringArray0[8] = ":\n\n";
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(classifier0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "seedTipText";
      stringArray0[1] = "d&`*?dz*3Y)OF~aJ";
      stringArray0[2] = "tGx";
      stringArray0[3] = "getBuildRegressionTree";
      stringArray0[4] = "Cannot print distribution without '-p' option!";
      stringArray0[5] = "d)Z";
      stringArray0[6] = "{| n*";
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominal(1124);
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
