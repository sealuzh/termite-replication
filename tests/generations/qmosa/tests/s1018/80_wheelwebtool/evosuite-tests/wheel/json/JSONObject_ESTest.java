/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:15:02 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5885627134403077
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString("Expected '", 2356, 2356);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      jSONObject1.put("\"java.lang.String@0000000002\"", false);
      JSONObject jSONObject2 = jSONObject0.put("get", (double) 2356);
      Short.toUnsignedLong((short)45);
      jSONObject2.optDouble("\"java.lang.String@0000000002\"");
      jSONObject1.putOpt("aQ[", jSONObject0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Object object0 = JSONObject.NULL;
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap2 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap3 = new HashMap<Float, Byte>((short)45);
      HashMap<Object, Boolean> hashMap4 = new HashMap<Object, Boolean>();
      jSONObject2.optJSONObject("aQ[");
      Float float0 = new Float((-20.264362F));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9627675524653663
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.doubleToString(2318);
      JSONObject jSONObject1 = jSONObject0.accumulate("2318", "2318");
      Integer integer0 = new Integer(2318);
      jSONObject1.optLong("2318", (long) 2318);
      jSONObject0.optBoolean("2318", true);
      jSONObject1.optDouble("]g0vsW+?}mJ");
      Integer integer1 = new Integer(2318);
      JSONObject jSONObject2 = jSONObject1.accumulate("2318", integer1);
      jSONObject0.append("2318", integer0);
      jSONObject1.optBoolean("|", true);
      jSONObject2.optDouble("Expected '");
      jSONObject0.optInt("2318");
      jSONObject1.optLong("Expected '", (long) 0);
      jSONObject1.opt("\f");
      jSONObject2.optLong("|");
      String string1 = "$v32S}cl,!Y(qw)8g";
      try { 
        jSONObject1.getLong("$v32S}cl,!Y(qw)8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$v32S}cl,!Y(qw)8g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2981324365092715
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.quote("Exected '");
      JSONObject.quote(",\n");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject.quote("Exected '");
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(2347, 48);
      Object object0 = JSONObject.NULL;
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(786, 48);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap3 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap6 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap7 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ZYfZ2a,<1bIel>R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {ZYfZ2a,<1bIel>R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5420695413001644
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(3710.8F);
      Float.sum((-1266.3049F), (-1266.3049F));
      linkedList0.add(float0);
      Float float1 = new Float(449.2F);
      Float.max(3710.8F, 808.21094F);
      linkedList0.add(float1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(92);
      Byte byte0 = new Byte((byte)13);
      Short short0 = new Short((byte)13);
      JSONObject jSONObject1 = jSONObject0.putOpt(">H", jSONArray0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      linkedList1.poll();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject1.getJSONArray(">H");
      Long long0 = new Long((-662L));
      jSONObject1.put(">H", (Object) long0);
      String string0 = JSONObject.valueToString(byte0, 1970, 4);
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.535104129168882
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(4);
      Byte byte0 = new Byte((byte)13);
      Short short0 = new Short((short) (-1282));
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      long long0 = 0L;
      Long.getLong("false", 0L);
      jSONObject1.optInt("a\"PvtcHV", 2347);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject.valueToString(hashMap0, (-1076), (-1258));
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(2347);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2347] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.698835356944744
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject.valueToString(hashMap0, 43, 43);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("{}", hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("{}", false);
      jSONObject0.put("{}", (double) 0L);
      Short.toUnsignedLong((short)1331);
      jSONObject3.optDouble("{}");
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.536096438348476
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1953.7885035266977));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Float float0 = new Float((-1953.7885035266977));
      jSONObject2.accumulate(" o ", float0);
      JSONObject jSONObject3 = jSONObject0.put(" o ", false);
      jSONObject2.put("+I[oBz", 1.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject(boolean0);
      Integer integer0 = new Integer(78);
      jSONArray0.put(2646, (Object) boolean0);
      Float.sum(2646, 2646);
      jSONArray0.put(2646, (Object) integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "ES,nZGxJPC~ma.[M\"";
      jSONObject0.opt("{}");
      String string1 = "+Qo{";
      try { 
        jSONObject3.getDouble("+Qo{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+Qo{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.106604825019403
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(">", (-824.0));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", object0);
      jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "null");
      JSONObject jSONObject3 = jSONObject1.putOpt("", (Object) null);
      jSONObject2.toString();
      Object object2 = new Object();
      jSONObject3.toString((-1643), (-252));
      Short short0 = new Short((short)92);
      Integer.toUnsignedString((-1643));
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject3.optString("U:Cw1L4Gp");
      assertEquals(2, jSONObject1.length());
      
      long long0 = jSONObject2.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.466266517864739
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      Boolean boolean0 = Boolean.TRUE;
      String string0 = "0";
      Integer integer0 = new Integer(2347);
      try { 
        jSONObject1.append("{}", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.55951522739155
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '", 102, 12);
      Float float0 = new Float(1.0F);
      JSONObject jSONObject1 = jSONObject0.accumulate("knpj@wP1i", float0);
      jSONObject1.put("Expected '", true);
      jSONObject1.isNull("dT");
      JSONObject.quote("dT");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONObject1.optJSONArray(",\n");
      jSONObject0.getInt("knpj@wP1i");
      jSONObject0.optString(",\n", ",\n");
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ',' or ']'");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Expected a ',' or ']'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577016366913588
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float(417.17538F);
      Float.min((-803.9175F), (-803.9175F));
      linkedList0.add(float1);
      JSONObject jSONObject1 = jSONObject0.put(">H", (double) (-803.9175F));
      jSONObject0.optDouble(">H");
      Double double0 = new Double((-2877.03799821241));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">H";
      jSONObject0.optInt("+TnUvsLE$YsQxE8");
      jSONObject1.optJSONArray("+TnUvsLE$YsQxE8");
      Object object0 = JSONObject.NULL;
      String string0 = "\\u";
      jSONObject1.optString("|I/B9ORKc$SyUF:EDau", string0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(">H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of >H
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3025082215358106
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float(449.2F);
      linkedList0.add(float1);
      JSONObject jSONObject1 = jSONObject0.put(">H", (double) 449.2F);
      Byte byte0 = new Byte((byte) (-33));
      JSONObject jSONObject2 = jSONObject1.putOpt(">H", byte0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      double double0 = jSONObject2.getDouble(">H");
      assertEquals((-33.0), double0, 0.01);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.64962739463911
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Exected '");
      JSONObject jSONObject1 = jSONObject0.accumulate("\"Exected '\"", "\"Exected '\"");
      JSONObject jSONObject2 = jSONObject0.put("Exected '", false);
      jSONObject0.isNull("getparseUnsignedLong");
      JSONObject.quote(",\n");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONObject1.optJSONArray("\",\n\"");
      JSONObject.quote("Exected '");
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(2347, 48);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Short short0 = new Short((short)4088);
      jSONObject1.putOpt("\"Exected '\"", linkedList2);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      LinkedList<Object> linkedList4 = new LinkedList<Object>();
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap3 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap6 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap7 = new HashMap<Object, Boolean>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Exected '");
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject2.getInt("7i}CdGaRxq>*%#I{e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7i}CdGaRxq>*%#I{e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.435187384735725
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      Float.max(449.2F, (-1501.2599F));
      Float.isFinite(2576.9F);
      Float.max(2576.9F, 84.704F);
      Float.sum(449.2F, 2576.9F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Float, Short> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Float, Short>(70, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9314192946704223
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.optDouble("JSONArray[", (double) 0.0F);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0, 18, 18);
      Short short0 = new Short((short) (-2023));
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Double@0000000002", short0);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Double@0000000002", 0.0);
      jSONObject2.optBoolean("' and instead saw '");
      JSONObject.valueToString(double0);
      jSONObject2.optInt("java.lang.Double@0000000002", 2347);
      JSONObject.quote("{}");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONObject1.optString("\"{}\"", "JSONArray[");
      long long0 = jSONObject0.getLong("java.lang.Double@0000000002");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5441881589543667
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Float float0 = new Float((-1925.887));
      jSONObject2.accumulate(" of ", float0);
      jSONObject0.put(" of ", false);
      jSONObject2.put("+I[oBz", 1.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(111);
      JSONObject jSONObject3 = new JSONObject(boolean0);
      Integer integer0 = new Integer(87);
      jSONArray0.put(2646, (Object) boolean0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject1.optString("cop", "");
      String string0 = "\"@D*6J-?r^\\s)c";
      try { 
        jSONObject3.getLong("\"@D*6J-?r^s)c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"@D*6J-?r^s)c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7392144427309777
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("IP#BBZ", long0);
      JSONObject.numberToString(long1);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IP#BBZ";
      jSONObject0.put("java.lang.Long@0000000001", 0L);
      stringArray0[0] = "IP#BBZ";
      stringArray0[2] = "IP#BBZ";
      jSONObject0.optDouble("Missing value");
      jSONObject0.optInt("Missing value");
      JSONTokener jSONTokener0 = new JSONTokener("W|u4j:rpG");
      jSONObject0.optJSONArray("gettoUpperCase");
      jSONObject0.getInt("java.lang.Long@0000000001");
      jSONObject0.optString("gettoUpperCase", "IP#BBZ");
      jSONObject0.optString("IP#BBZ");
      Short short0 = new Short((short)39);
      jSONObject0.putOpt("IP#BBZ", short0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.736287807571432
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Exected '", (-1925.887));
      JSONObject jSONObject1 = jSONObject0.put("Exected '", false);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0);
      jSONObject2.putOpt("getgetJSONObject", jSONObject1);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject1.put("qu", (Map) hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2347, 2347);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.468042781879359
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-824.0));
      JSONObject.valueToString("Expected '", 2347, 2347);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("U:Cw1L4Gp", object0);
      JSONObject jSONObject2 = jSONObject1.put("Expected '", (-824.0));
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(2347, 2347);
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short)1232);
      hashMap1.put(float0, short0);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap3 = new HashMap<Boolean, Byte>();
      HashMap<Double, Boolean> hashMap4 = new HashMap<Double, Boolean>();
      jSONObject2.put("Expected '", (Map) hashMap2);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      jSONObject2.optJSONObject("getshortValue");
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap6 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap7 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap8 = new HashMap<Object, Boolean>();
      JSONObject jSONObject4 = jSONObject0.put("_", 47);
      jSONObject4.optJSONObject("Expected '");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.032241959479535
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Execteiw";
      jSONObject0.optDouble("Execteiw", (-1925.887));
      JSONObject.doubleToString(2363);
      JSONObject jSONObject1 = jSONObject0.accumulate("2363", "2363");
      Integer integer0 = new Integer(2363);
      jSONObject1.optLong("2363", (long) 2363);
      jSONObject0.optBoolean("2363", true);
      JSONObject jSONObject2 = jSONObject1.accumulate("2363", integer0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(12);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject2.write(writer0);
      jSONObject2.put("Y1T{)C49", true);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("2363");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 2363
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5520073352050456
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2709.0F);
      Float float1 = new Float(2709.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float2 = new Float((-1526.81F));
      linkedList0.add(float2);
      JSONObject jSONObject1 = jSONObject0.put("mi", (double) 2709.0F);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append('+');
      StringWriter stringWriter2 = new StringWriter();
      String string0 = "set";
      stringWriter1.append('R');
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "Expected '");
      stringWriter3.write("mi");
      jSONArray0.write(stringWriter0);
      jSONObject1.write(stringWriter2);
      try { 
        jSONObject1.getBoolean("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1232551363874856
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("gettrim", "gettrim");
      jSONObject1.has("gettrim");
      String string0 = ">d\"r[";
      Boolean.getBoolean("[");
      JSONObject jSONObject2 = jSONObject1.put(">d\"r[", true);
      String string1 = "V\\)^P\"va5,ak~I^<2c";
      JSONObject jSONObject3 = jSONObject2.append("V)^P\"va5,ak~I^<2c", "gettrim");
      jSONObject3.get(">d\"r[");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5029643162047286
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2347, 2347);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[3] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      Integer integer0 = new Integer(2347);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(9, 68);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(2347, 48);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap5 = new HashMap<Float, Byte>();
      jSONObject0.put("{}", false);
      String string1 = JSONObject.valueToString(hashMap2);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8176017905600426
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("UJ{", (-2009.57455473));
      Boolean boolean0 = new Boolean(true);
      JSONObject.valueToString(boolean0, 2347, 3354);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("UJ{", "java.lang.Boolean@0000000002");
      jSONObject1.put("YR:$6[=K/WKV+An", (-2009.57455473));
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Object object2 = new Object();
      JSONObject.valueToString(object2);
      Double double0 = new Double(2347);
      JSONObject jSONObject2 = new JSONObject(double0);
      String string0 = null;
      Byte byte0 = new Byte((byte)20);
      jSONObject2.putOpt((String) null, byte0);
      JSONObject.valueToString(hashMap0);
      Object object3 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = null;
      Short short0 = new Short((short)59);
      Integer integer0 = new Integer(6);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.437668949141933
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-803.9175F));
      String[] stringArray0 = new String[1];
      String string0 = "]7s- |Z_+@2";
      stringArray0[0] = "]7s- |Z_+@2";
      JSONObject jSONObject1 = jSONObject0.put("]7s- |Z_+@2", false);
      JSONObject jSONObject2 = jSONObject0.put("]7s- |Z_+@2", (-196.07));
      Short.toUnsignedLong((short)45);
      jSONObject2.get("]7s- |Z_+@2");
      Long long0 = new Long((short)45);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6056763505325393
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isremoveLast";
      JSONObject jSONObject1 = jSONObject0.putOpt("isremoveLast", "isremoveLast");
      jSONObject0.names();
      JSONObject jSONObject2 = jSONObject0.put("isremoveLast", true);
      JSONObject jSONObject3 = jSONObject2.accumulate("isremoveLast", jSONObject1);
      // Undeclared exception!
      jSONObject3.toString(745);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3412614666192675
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("U:Cw1L4Gp", object0);
      Double double0 = new Double(0.0);
      jSONObject1.accumulate("istoLowerCase", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)0);
      linkedList0.add(short0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double1 = new Double(1414.0);
      JSONObject jSONObject2 = new JSONObject(double1);
      jSONObject1.optLong("cnHU");
      jSONObject0.opt("");
      try { 
        jSONObject0.getLong("U:Cw1L4Gp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U:Cw1L4Gp\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9063256931961905
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("is", jSONArray0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.482320931778798
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("U:Cw1L4Gp", object0);
      JSONObject.valueToString("");
      Double double0 = new Double(0.0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(2347);
      StringWriter stringWriter1 = stringWriter0.append('5');
      jSONObject0.put("{_Z", 0.0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\"java.lang.String@0000000003\"");
      Writer writer0 = jSONArray0.write(stringWriter2);
      jSONObject1.write(writer0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.864119521068058
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = jSONObject0.put("Expected '", false);
      JSONObject.valueToString("{}");
      Double double0 = new Double(0.0);
      Long long0 = new Long(2347);
      JSONObject jSONObject2 = new JSONObject(long0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.putOpt("", jSONArray0);
      jSONObject1.toString();
      Object object0 = new Object();
      jSONObject0.put("", (Object) jSONObject2);
      String string0 = "xO*4a)t6zZ8O,";
      jSONObject2.isNull("xO*4a)t6zZ8O,");
      // Undeclared exception!
      jSONObject1.toString(2347, (-1254));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4984491631735537
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '", 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject2 = jSONObject1.put("\"java.lang.String@0000000002\"", false);
      jSONObject2.remove("\"java.lang.String@0000000002\"");
      jSONObject0.optDouble("ij*y*`", (double) 2347);
      JSONObject jSONObject3 = jSONObject0.put("get", (double) 2347);
      Short.toUnsignedLong((short)45);
      jSONObject3.optDouble("\"java.lang.String@0000000002\"");
      try { 
        jSONObject1.getJSONObject("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9751222864456555
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Exected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2366, 2366);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject0.put("Exected '", false);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0);
      JSONArray jSONArray0 = jSONObject2.names();
      JSONObject jSONObject3 = new JSONObject((Object) "{}");
      StringWriter stringWriter0 = new StringWriter(2366);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}");
      stringWriter1.write((-3614));
      jSONArray0.write(stringWriter1);
      Integer integer0 = new Integer(123);
      JSONArray jSONArray1 = jSONArray0.put(123, (Object) jSONObject2);
      jSONObject0.optDouble("Exected '");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray1);
      jSONObject2.optDouble("");
      try { 
        jSONObject1.getBoolean("java.lang.Short@0000000003.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000003.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      JSONObject.numberToString(long1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IP#BBZ";
      stringArray0[0] = "IP#BBZ";
      stringArray0[2] = "IP#BBZ";
      JSONTokener jSONTokener0 = new JSONTokener("W|u4j:rpG");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8628151101818307
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float(449.2F);
      Float.min((-803.9175F), (-803.9175F));
      linkedList0.add(float1);
      Integer integer0 = new Integer(1846);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(1846);
      stringWriter0.append('7');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray1.write(stringWriter1);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2339342029310227
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float((-803.9175F));
      linkedList0.add(float1);
      Float float2 = new Float(449.2F);
      Float.min((-803.9175F), (-803.9175F));
      linkedList0.add(float2);
      JSONObject jSONObject1 = jSONObject0.put(">H", (double) 449.2F);
      jSONObject1.getLong(">H");
      Byte byte0 = new Byte((byte) (-33));
      JSONObject jSONObject2 = jSONObject1.putOpt("\"\"", byte0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject2.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7994136962015674
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expecte '";
      jSONObject0.optDouble("Expecte '", (-1925.887));
      JSONObject.doubleToString(2363);
      JSONObject jSONObject1 = jSONObject0.accumulate("2363", "2363");
      Integer.divideUnsigned(2363, 8448);
      jSONObject1.optLong("2363", (long) 2363);
      jSONObject0.optBoolean("2363", true);
      jSONObject1.optBoolean("2363");
      jSONObject0.optLong("2363", 2363L);
      jSONObject0.optBoolean("|", true);
      jSONObject0.optInt("2363");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2855975925113365
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5tJE/N";
      stringArray0[1] = "";
      stringArray0[2] = "getparseDouble";
      stringArray0[3] = "isreverse";
      stringArray0[4] = "+?)5S";
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.put("true", (-1L));
      jSONObject0.optLong((String) null, 1L);
      jSONObject0.optLong("3Zud'Y");
      jSONObject0.opt("\f");
      jSONObject0.optLong("sWJxNg~b^IQpn_opZ9_");
      try { 
        jSONObject0.getLong("sWJxNg~b^IQpn_opZ9_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sWJxNg~b^IQpn_opZ9_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.836992041062908
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject0.put("Expected '", false);
      jSONObject0.put("", 0.0);
      jSONObject0.put("qu", false);
      JSONObject jSONObject2 = jSONObject0.put("", 697.8514559);
      jSONObject1.putOpt("qu", "");
      Integer integer0 = new Integer(2347);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      boolean boolean0 = jSONObject2.getBoolean("Expected '");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.447373624477274
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("DWoA");
      JSONObject jSONObject0 = new JSONObject((Object) "DWoA");
      jSONObject0.optJSONArray("DWoA");
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Double double0 = new Double(886.509621477576);
      Double.min(0.0, 886.509621477576);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      Double.min((-1396.83673), (-325.7));
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("jo", 13);
      int int0 = jSONObject2.length();
      assertEquals(9, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5762105290091295
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      linkedList0.add(float0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Boolean boolean0 = new Boolean("V");
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", 0.0);
      Integer integer0 = new Integer((-3492));
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0426700365561388
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '", 2347, 2347);
      jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject1 = jSONObject0.put("get", (double) 2347);
      short short0 = (short) (-236);
      Short short1 = new Short((short) (-236));
      long long0 = new Short((short)45);
      Short.compare((short) (-236), (short)45);
      JSONObject.valueToString(short1);
      jSONObject0.optInt("2.9079911948293830", (int) (short) (-236));
      JSONObject jSONObject2 = new JSONObject();
      String string1 = "A JSONArray text must start wit~ '['";
      jSONObject0.optDouble("A JSONArray text must start wit~ '['");
      jSONObject1.isNull("get");
      JSONObject.doubleToString(Double.NaN);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.join("k}L#o]Dezp");
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      String string0 = "}+L7!g[,=%hGk58au";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      stringArray0[3] = "\"\"";
      jSONObject0.optDouble("wheel.json.JSONTokener");
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0495758643922275
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ">";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", object0);
      JSONObject jSONObject2 = jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.putOpt("", (Object) null);
      jSONObject3.toString();
      Object object2 = new Object();
      jSONObject2.put("U:Cw1L4Gp", (-2655));
      String string1 = jSONObject2.toString(1193, 48);
      Object object3 = new Object();
      JSONObject jSONObject4 = new JSONObject(object3);
      jSONObject4.optLong(string1);
      jSONObject4.opt((String) null);
      JSONObject jSONObject5 = new JSONObject();
      try { 
        jSONObject5.getDouble("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6888090943414267
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      Float float2 = new Float(449.2F);
      Float.min((-803.9175F), (-803.9175F));
      linkedList0.add(float2);
      JSONObject jSONObject1 = jSONObject0.put(">H", (double) 449.2F);
      jSONObject0.optDouble(">H");
      Double double0 = new Double((-2877.03799821241));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">H";
      JSONObject jSONObject2 = new JSONObject(double0, stringArray0);
      jSONObject2.optInt("+TnUvsLE$YsQxE8");
      jSONObject1.optBoolean(">H");
      String string0 = "A JSONArray text must start with '['";
      try { 
        jSONObject2.getInt(">H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4619631381239797
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("Expected '", false);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", object0);
      Integer integer0 = new Integer(2347);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1807.0F);
      linkedList0.add(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      jSONObject1.put("Expected '", (Map) hashMap0);
      Byte byte0 = new Byte((byte)13);
      Short short0 = new Short((byte)13);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(2347, 142.4F);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap3 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap6 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap7 = new HashMap<Object, Boolean>();
      assertTrue(hashMap7.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.490311457029837
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      String string0 = ">H";
      String string1 = "\"\"";
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (double) 0.0F);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 92;
      StringWriter stringWriter0 = new StringWriter(2218);
      stringWriter0.append('8');
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('a');
      StringWriter stringWriter3 = stringWriter2.append('$');
      stringWriter0.append((CharSequence) ">H");
      stringWriter1.write("\"\"");
      stringWriter1.append((CharSequence) ">H");
      StringWriter stringWriter4 = new StringWriter(34);
      jSONArray0.write(stringWriter4);
      jSONObject1.write(stringWriter3);
      try { 
        jSONObject1.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1455749975725538
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.optDouble("JSONArray[", (double) 0.0F);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0, 18, 18);
      Short short0 = new Short((short) (-2023));
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Double@0000000002", short0);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Double@0000000002", 0.0);
      JSONObject.valueToString(double0);
      jSONObject2.optInt("java.lang.Double@0000000002", 2347);
      jSONObject1.optBoolean("gettoUnsignedLong", true);
      jSONObject1.optDouble("] is not a JSONObject.");
      jSONObject0.isNull(";s]Vr{E");
      jSONObject0.optString("JSONArray[", "#%p8{=c");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject2.optDouble("sh");
      jSONObject1.has("#%p8{=c");
      jSONObject1.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getLong(";s]Vr{E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";s]Vr{E\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0346467142558873
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[2] = stringArray0[0];
      jSONObject0.optDouble("Missing value");
      jSONObject0.optInt("Missing value");
      JSONTokener jSONTokener0 = new JSONTokener("W|u4j:rpG");
      jSONObject0.optJSONArray("Missing value");
      jSONObject0.optString("Missing value", stringArray0[2]);
      Short short0 = new Short((short)39);
      assertEquals((short)39, (short)short0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0462408365582765
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-135.0));
      JSONObject.valueToString("Expected '", 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject2 = jSONObject0.put("get", 0.0);
      Short short0 = new Short((short) (-236));
      Short.compare((short) (-236), (short)45);
      JSONObject.valueToString(short0);
      jSONObject0.optInt("2.9079911948293830", (int) (short) (-236));
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optBoolean("gettoUnsignedLong", false);
      jSONObject0.optDouble("A JSONArray text must start with '['");
      jSONObject2.isNull("get");
      String string0 = jSONObject2.optString("Expected '", "A JSONArray text must start with '['");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.optDouble("\"java.lang.String@0000000002\"");
      jSONObject1.optJSONObject("iscopyValueOf");
      Long long0 = Long.getLong("iscopyValueOf", (long) (short) (-236));
      String string1 = JSONObject.valueToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      float float1 = new Float(449.2F);
      float float2 = 1.0F;
      Float.sum(0.0F, 0.0F);
      linkedList0.add(float0);
      Long.getLong("e");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9691323653092128
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject0.put("", 0.0);
      JSONObject.valueToString("Expected '");
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "\"java.lang.String@0000000005\"");
      jSONObject1.toString();
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.put("{\"java.lang.String@0000000003\":java.lang.Double@0000000004,\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", (Object) null);
      jSONObject3.isNull("Expected '");
      int int0 = 13;
      try { 
        jSONObject1.getInt(")]9nN2OdH@J\"C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")]9nN2OdH@J\\\"C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.244873715509995
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer0 = new Integer((-893));
      hashMap0.put((Float) null, integer0);
      Float float0 = new Float(1.0);
      Integer integer1 = new Integer(433);
      hashMap0.put(float0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      Short short0 = new Short((short)5001);
      Short.compare((short)5001, (short)5001);
      Short.toUnsignedLong((short)61);
      JSONObject jSONObject1 = jSONObject0.append("", short0);
      jSONObject1.optLong("");
      jSONObject1.keys();
      Short.toUnsignedLong((short) (-3874));
      JSONObject.quote("");
      jSONObject1.accumulate("", "\"\"");
      jSONObject1.toString();
      String string0 = "";
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "IP#BBZ";
      Long long0 = new Long(0L);
      Long.getLong("IP#BBZ", long0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7942630972627813
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optInt("is", (-2033));
      boolean boolean0 = new Boolean("{}");
      jSONObject1.optDouble("is");
      jSONObject1.optInt((String) null);
      Double double0 = new Double(0.0);
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9543372265346894
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-1931), 1692);
      Object object0 = new Object();
      jSONObject0.accumulate(": ", ": ");
      Byte byte0 = new Byte((byte)43);
      JSONObject.valueToString(byte0);
      jSONObject0.optInt("{}", 0);
      jSONObject0.optBoolean("java.lang.Byte@0000000003", true);
      jSONObject0.optDouble("java.lang.Byte@0000000003");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("]g0vsW+?}mJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ]g0vsW+?}mJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.225242181786043
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 2347;
      JSONObject.valueToString("'", 1325, 1325);
      JSONObject jSONObject0 = new JSONObject((Object) "'");
      String string0 = null;
      Float float0 = new Float((float) 1325);
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3166059161944914
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "I/#BBZ";
      stringArray0[0] = "I/#BBZ";
      stringArray0[2] = "I/#BBZ";
      JSONTokener jSONTokener0 = new JSONTokener("W|u4j:rpG");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      linkedList0.add(float0);
      jSONObject0.put("lfkS>Q", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt((String) null, (Object) null);
      jSONObject0.optJSONArray("L%@}QAO9(K<ag4");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float(0.39947286711707075);
      Integer integer0 = new Integer((-442));
      Integer integer1 = new Integer((-442));
      Integer integer2 = new Integer((-442));
      Object object0 = new Object();
      JSONObject.getNames((Object) null);
      Integer integer3 = new Integer(105);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3752697138726195
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      float float1 = new Float(449.2F);
      linkedList0.add(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble(":c3T+/1Tm&4~cX");
      String string0 = "ishashCode";
      jSONObject0.isNull("ishashCode");
      String string1 = "A JSONArray text must start with '['";
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string2 = "Missing value";
      JSONObject jSONObject2 = new JSONObject();
      String string3 = "wheel.json.JSONObject";
      String string4 = ")Q O9O80s";
      jSONObject1.optJSONArray(")Q O9O80s");
      try { 
        Integer.valueOf("Missing value");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Missing value\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9961825601498817
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-803.9175F));
      String[] stringArray0 = new String[1];
      String string0 = "]7s- |Z_+@2";
      stringArray0[0] = "]7s- |Z_+@2";
      jSONObject0.put("]7s- |Z_+@2", false);
      jSONObject0.put("]7s- |Z_+@2", (-196.07));
      Short.toUnsignedLong((short)45);
      Long long0 = new Long((short)45);
      try { 
        jSONObject0.getJSONObject("]7s- |Z_+@2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]7s- |Z_+@2\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.615726363637287
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("J}g", 5603.8017393);
      int int0 = (-165);
      Integer integer0 = new Integer((-165));
      Integer.remainderUnsigned((-993), 4);
      try { 
        jSONObject1.put("J}g", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1125834966841346
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[3] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      Integer integer0 = new Integer(2347);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(9, 68);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(2347, 48);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap5 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap6 = new HashMap<Object, Boolean>();
      JSONObject.valueToString((Object) null);
      Float float0 = new Float((double) 9);
      jSONObject0.put("{}", (Object) float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7486002114135837
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '", 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      Short short0 = new Short((short) (-236));
      Short.toUnsignedLong((short)45);
      Short.compare((short) (-236), (short)45);
      JSONObject.valueToString(jSONObject0, (short) (-236), (short)45);
      String string0 = "2.9079911948293830";
      jSONObject0.optInt("2.9079911948293830", (int) (short) (-236));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optDouble("A JSONArray text must start with '['");
      jSONObject1.isNull("get");
      Short short1 = new Short((short)4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (double) (-236));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9429543435482035
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "Exected '";
      JSONObject.quote("Exected '");
      JSONObject.quote(",\n");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONObject.quote("Exected '");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.accumulate("get", "\",\n\"");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.008686676140466
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", object0);
      JSONObject jSONObject2 = jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject3 = new JSONObject((Object) "null");
      JSONObject jSONObject4 = jSONObject1.putOpt("", (Object) null);
      jSONObject3.toString();
      Object object2 = new Object();
      jSONObject3.toString(91, 67);
      jSONObject3.put("] not found.", (-2760));
      jSONObject4.toString((-1643), (-252));
      JSONObject jSONObject5 = new JSONObject((Object) ">");
      jSONObject2.optLong("\f", 0L);
      jSONObject3.optLong("cnHU");
      jSONObject0.opt("gettoString");
      int int0 = jSONObject4.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(57, true);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONArray0);
      jSONObject1.length();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.081600206449999
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 2347;
      JSONObject.valueToString("Expected '", 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject2 = jSONObject1.put("\"java.lang.String@0000000002\"", false);
      try { 
        jSONObject2.getString("=\rZT~};1/\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=\\rZT~};1/\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7070428560209385
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "li";
      JSONObject jSONObject1 = jSONObject0.put("li", (Object) "li");
      JSONObject jSONObject2 = jSONObject0.accumulate("Expected '", "Expected '");
      short short0 = (short) (-236);
      Short short1 = new Short((short) (-236));
      jSONObject1.optInt(":XjYK:K#0h8%)^a0");
      jSONObject2.toJSONArray((JSONArray) null);
      Short.compare((short)8, (short)16);
      Short.toUnsignedLong((short)48);
      Short.compare((short) (-236), (short)48);
      jSONObject0.optInt("5.907911948293830", (int) (short) (-236));
      JSONObject jSONObject3 = new JSONObject();
      jSONObject0.optDouble("li");
      jSONObject2.isNull("Expected '");
      try { 
        jSONObject0.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.names();
      HashMap<Float, Short> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Float, Short>(16, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      long long0 = 0L;
      Long long1 = new Long(0L);
      Long long2 = Long.getLong("IP#BBZ", long1);
      JSONObject.numberToString(long2);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IP#BBZ";
      stringArray0[0] = "IP#BBZ";
      stringArray0[2] = "IP#BBZ";
      Long.max(20, 0L);
      try { 
        jSONObject0.put(stringArray0[1], 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4387424672740177
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.valueToString(jSONObject0, 3782, 1609);
      jSONObject0.accumulate("{}", linkedList0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(1609);
      String string0 = "?%/?B3Q$";
      jSONObject0.append("?%/?B3Q$", "0");
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-14482067));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(0.39947286711707075);
      Integer integer0 = new Integer((-465));
      Integer integer1 = new Integer((-465));
      Integer integer2 = new Integer((-465));
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Integer integer3 = new Integer((-465));
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.369455405347734
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(;*^}";
      stringArray0[1] = "Sb^Okr@j6UIY";
      stringArray0[2] = "-R@X2'DQ>UZ>Z@*Mg)";
      stringArray0[3] = "ac";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6681250477410834
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float(449.2F);
      Long long0 = new Long((-152L));
      jSONObject0.accumulate("\f", long0);
      JSONObject jSONObject1 = jSONObject0.put("is", true);
      jSONObject1.put("is", 0.0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt(",:]}/\"[{;=#", object0);
      Integer integer0 = new Integer((-17));
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9983916035564597
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-803.9175F));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]7s- |Z_+@2";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      jSONObject1.put("]7s- |Z_+@2", false);
      jSONObject1.put("]7s- |Z_+@2", (-196.07));
      short short0 = (short)45;
      Short.toUnsignedLong((short)45);
      Long long0 = new Long((short)45);
      Integer integer0 = new Integer((-2863));
      HashMap<Float, Short> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Float, Short>((-30733247), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -30733247
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9317828576167506
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      linkedList0.push(float0);
      Float.sum(1.0F, (-459.6204F));
      linkedList0.add(float0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.get("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.135771889131407
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 2314;
      JSONObject.valueToString("Expected '", 2314, 2314);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject2 = jSONObject1.put("\"java.lang.String@0000000002\"", false);
      try { 
        jSONObject2.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap4 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap6 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap7 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap8 = new HashMap<Object, Boolean>();
      try { 
        jSONObject1.put((String) null, (Object) hashMap7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0617994124798322
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("U:Cw1L4Gp", object0);
      jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "null");
      JSONObject jSONObject3 = jSONObject1.putOpt("", (Object) null);
      jSONObject2.toString();
      Object object2 = new Object();
      jSONObject2.put("U:Cw1L4Gp", (-2760));
      jSONObject3.toString((-1643), (-252));
      String string0 = null;
      JSONObject jSONObject4 = new JSONObject((Object) ">");
      jSONObject2.optLong("cnHU");
      String string1 = "gettoString";
      jSONObject0.opt("gettoString");
      try { 
        jSONObject3.getDouble("+Qo{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+Qo{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.0850123995605983
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", object0);
      jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "null");
      JSONObject jSONObject3 = jSONObject1.putOpt("", (Object) null);
      jSONObject2.toString();
      Object object2 = new Object();
      jSONObject2.put("] not found.", (-2760));
      jSONObject3.toString((-1643), (-252));
      String string0 = null;
      JSONObject jSONObject4 = new JSONObject((Object) ">");
      jSONObject2.optLong("cnHU");
      String string1 = "gettoString";
      jSONObject0.opt("gettoString");
      try { 
        jSONObject3.getDouble("+Qo{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+Qo{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4973670103831394
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-1.0));
      linkedList0.offer(float0);
      JSONObject.valueToString(linkedList0, 3317, 3317);
      Integer integer0 = new Integer(3317);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(118, 9);
      HashMap<Float, Short> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Float, Short>(48, (-1078.8802F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1078.8802
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3496998122649226
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null, 2347, 93);
      JSONObject jSONObject1 = jSONObject0.accumulate("J(g}UV]N{exm", "J(g}UV]N{exm");
      jSONObject0.put("Expected '", false);
      JSONObject jSONObject2 = jSONObject0.put("tri", (double) 93);
      jSONObject2.putOpt("cop", "J(g}UV]N{exm");
      Integer integer0 = new Integer(4);
      try { 
        jSONObject1.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.03611166216486
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short short0 = new Short((short)70);
      Short.compare((short)3712, (short)70);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8200700087790564
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '");
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject2 = jSONObject0.put("get", (double) 2347);
      jSONObject1.optDouble("get", (double) 2347);
      short short0 = (short) (-236);
      Short short1 = new Short((short) (-236));
      Short.compare((short) (-236), (short)45);
      JSONObject.valueToString(short1);
      jSONObject0.optInt("2.9079911948293830", (int) (short) (-236));
      String string1 = "A JSONArray text must start with '['";
      jSONObject0.optDouble("A JSONArray text must start with '['");
      jSONObject2.isNull("get");
      jSONObject2.optString("Expected '", "A JSONArray text must start with '['");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject1.getDouble("java.lang.String@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.String@0000000002\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.500003073503495
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", object0);
      jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = new Object();
      String string0 = JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "\"java.lang.Object@0000000005\"");
      jSONObject1.putOpt("", (Object) null);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap4 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap6 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap7 = new HashMap<Float, Byte>();
      HashMap<Float, Byte> hashMap8 = new HashMap<Float, Byte>();
      jSONObject0.put("] not found.", (-1358));
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8345423744156613
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.names();
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(25, 2758.5432F);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(16, 25);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      assertTrue(hashMap4.equals((Object)hashMap3));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3200842646989344
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      jSONObject1.getString("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject2 = new JSONObject((Object) "wheel.json.JSONObject@0000000001");
      jSONObject0.put("", 0.0);
      int int0 = new Integer(2347);
      Integer integer0 = new Integer((-165));
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      int int1 = 47;
      HashMap<Float, Short> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Float, Short>(2347, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1422866175138853
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '", 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      jSONObject1.put("\"java.lang.String@0000000002\"", false);
      String string0 = "get";
      jSONObject0.put("get", (double) 2347);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, 2347, (-3049));
      Short short0 = new Short((short) (-236));
      Short.toUnsignedLong((short)45);
      Short.compare((short) (-236), (short)45);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      String string1 = "sp";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IP#BBZ";
      stringArray0[0] = "IP#BBZ";
      stringArray0[2] = "IP#BBZ";
      JSONTokener jSONTokener0 = new JSONTokener("W|u4j:rpG");
      jSONTokener0.toString();
      JSONArray jSONArray0 = new JSONArray();
      jSONTokener0.next();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(2, 9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.5880785274790163
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("R.NR$ia(oNSU1^onBrr", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("", (-1.0));
      String string0 = "gettoString";
      jSONObject2.optBoolean("gettoString", true);
      jSONObject1.optInt("");
      try { 
        jSONObject2.getJSONArray("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8132884325025693
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1953.7885035266977));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Float float0 = new Float((-1953.7885035266977));
      jSONObject2.accumulate(" o ", float0);
      jSONObject0.put(" o ", false);
      JSONObject jSONObject3 = jSONObject2.put("+I[oBz", 1.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(108);
      JSONObject jSONObject4 = new JSONObject(boolean0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject3.optJSONArray("Ex}BP+rka(Xn@E94+R");
      jSONObject3.getInt(" o ");
      jSONObject2.optString("Ex}BP+rka(Xn@E94+R", "!$&GK88");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7083084125018164
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      linkedList0.add(float0);
      JSONObject jSONObject1 = new JSONObject();
      linkedList0.add((Float) null);
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      Integer integer0 = new Integer(289);
      Integer integer1 = new Integer(73);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.pop();
      Short short0 = new Short((short) (-1884));
      Integer.toUnsignedString((-2544));
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      assertEquals(0, linkedList2.size());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9759559569891123
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      jSONObject0.optInt((String) null);
      Short short0 = new Short((short)59);
      Short.compare((short)3717, (short)59);
      JSONObject jSONObject1 = jSONObject0.append("K}v<U", "[]");
      jSONObject1.optLong("[]");
      Short.toUnsignedLong((short)0);
      jSONObject0.accumulate("sp", short0);
      JSONObject.quote("");
      JSONObject jSONObject2 = jSONObject0.accumulate("gettrim", jSONObject1);
      jSONObject0.toString();
      String string0 = "R+m</[P(]g%d]t.";
      try { 
        jSONObject2.getInt("R+m</[P(]g%d]t.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"R+m<\\/[P(]g%d]t.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.1719330103601107
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NA", (Object) "NA");
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      jSONObject1.optDouble("Expected '", 0.0);
      Short short0 = new Short((short) (-245));
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      int int0 = 70;
      HashMap<Float, Short> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Float, Short>(10, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.3843764580818716
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1DS+h";
      stringArray0[1] = "ZB3>C}`(6S~";
      stringArray0[2] = "x";
      stringArray0[3] = "/";
      stringArray0[4] = "eziKyeL";
      stringArray0[5] = "`'(%q(7v6{y65q";
      jSONObject0.optBoolean("}@]:$&'VF @,1v&", true);
      jSONObject0.accumulate("}@]:$&'VF @,1v&", "ZB3>C}`(6S~");
      jSONObject0.optDouble("z YorbbMI'w", 0.0);
      jSONObject0.optDouble("Ixl0M\\j\")Lh?Kr]J");
      int int0 = jSONObject0.optInt("L`F6]U0<a~");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.2414456828156455
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      linkedList0.add(float0);
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, (-1.0F));
      Long.getLong(">OuX=O-_l'\"EM(4e|");
      JSONObject jSONObject1 = jSONObject0.append("|zt", (Object) null);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject1.optDouble("uU[");
      try { 
        jSONArray0.getJSONObject(2246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2246] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.456135313937061
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-803.9175F));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]7s- |Z_+@2";
      JSONObject jSONObject1 = jSONObject0.put("]7s- |Z_+@2", false);
      short short0 = (short)8;
      JSONArray jSONArray0 = new JSONArray();
      Short.compare((short)8, (short)8);
      Short.toUnsignedLong((short)8);
      Short.compare((short)16, (short)8);
      jSONObject1.optInt("5.907911948293830", 8);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optDouble("]7s- |Z_+@2");
      jSONObject0.isNull("]7s- |Z_+@2");
      String string0 = "toS";
      try { 
        jSONObject0.getBoolean("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-5653), (-5653));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6654452542059688
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      Float.max(2576.9F, 84.704F);
      Float.min(2576.9F, 2576.9F);
      Float.sum(1.0F, (-459.6F));
      linkedList0.add(float0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("JSON does not allow non-finite numbers.", 1924);
      HashMap<Float, Short> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Float, Short>(70, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.1429016058013977
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5tJE/N";
      stringArray0[1] = "";
      stringArray0[2] = "getparseDouble";
      Short short0 = new Short((short)6);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("isclear", (Object) null);
      Double double0 = new Double((short)6);
      jSONObject1.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap5 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap6 = new HashMap<Object, Boolean>();
      assertTrue(hashMap6.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.351484865389781
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "toS";
      stringArray0[1] = "wheel.json.JSONObject";
      stringArray0[2] = "to";
      stringArray0[3] = "FcoXR?}";
      stringArray0[4] = "Expected '";
      stringArray0[5] = "5";
      stringArray0[6] = "re";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("[", (-1L));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(181L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5tJE/N";
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONArray.");
      JSONObject.getNames(jSONObject0);
      Integer integer0 = new Integer(101);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(3476, 3740.0283F);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(32, 101);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap5 = new HashMap<Float, Byte>();
      assertEquals(0, hashMap5.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-803.9175F));
      Float float1 = new Float(454.8108F);
      Float.min((-803.9175F), (-803.9175F));
      Integer integer0 = new Integer(3591);
      JSONObject.getNames(jSONObject0);
      Integer integer1 = new Integer(3591);
      HashMap<Float, Short> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Float, Short>((-1), 615.07F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8206949809246367
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(817L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Expected a ',' or ']'";
      stringArray0[1] = "D_!a>U";
      stringArray0[2] = ",Gkc*EEg]:Q*/";
      stringArray0[3] = "Expected a ',' or ']'";
      stringArray0[4] = "Expected '";
      stringArray0[5] = "Expected a ',' or ']'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getJSONObject("D_!a>U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D_!a>U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~5K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~5K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5823133712725188
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      Float.min(449.2F, 449.2F);
      Integer integer0 = new Integer((-1458));
      Integer integer1 = new Integer(1771);
      Integer.remainderUnsigned((-1458), (-98));
      Integer.compare(12, (-824));
      Integer.toUnsignedLong(59);
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) long0);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(12, 2725.8F);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Byte, Integer> hashMap2 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap4 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("r*XuV?i#_bD|u[p71");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of r*XuV?i#_bD|u[p71
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.03354542883793
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", object0);
      jSONObject0.put("U:Cw1L4Gp", 1.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "null");
      JSONObject jSONObject3 = jSONObject1.putOpt("", (Object) null);
      jSONObject2.toString();
      Object object2 = new Object();
      jSONObject2.toString(91, 67);
      JSONObject jSONObject4 = jSONObject2.put("] not found.", (-2760));
      jSONObject3.toString((-1643), (-252));
      String string0 = null;
      JSONObject jSONObject5 = new JSONObject((Object) ">");
      jSONObject2.optLong("cnHU");
      String string1 = "gettoString";
      jSONObject0.opt("gettoString");
      jSONObject4.optLong((String) null);
      try { 
        jSONObject3.getLong("=L-J;zS|#pJAa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=L-J;zS|#pJAa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.955418949735496
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Expected '", 2347, 2347);
      jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject jSONObject1 = jSONObject0.put("get", (double) 2347);
      Short short0 = new Short((short) (-236));
      Short.toUnsignedLong((short)45);
      Short.compare((short) (-236), (short)45);
      JSONObject.valueToString(jSONObject1, (short) (-236), (short)45);
      jSONObject0.optInt("2.9079911948293830", (int) (short) (-236));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optDouble("A JSONArray text must start with '['");
      jSONObject1.isNull("get");
      Short short1 = new Short((short)4);
      jSONObject1.putOpt("wheel.json.JSONTokener", short1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject1.getJSONArray("2.9079911948293830");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2.9079911948293830\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.2342597011327987
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("wai", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      try { 
        Integer.decode("{\"java.lang.String@0000000003\": {}}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"java.lang.String@0000000003\": {}}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1877312947999152
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject.quote("Exected '");
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(2364);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(8448, 2364);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(8448, 68);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap3 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string1 = jSONObject0.toString(194);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.doubleToString(4.206378111);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(26, 68);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      assertEquals(0, hashMap4.size());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(449.2F);
      int int0 = 39;
      Integer integer0 = new Integer(39);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(0.39947286711707075);
      Integer integer0 = new Integer((-465));
      Integer integer1 = new Integer((-465));
      Integer integer2 = new Integer((-465));
      Short short0 = new Short((short)39);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(short0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4402380383310271
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5tJE/N";
      stringArray0[1] = "";
      stringArray0[2] = "A|'g2DM<_0V8%";
      stringArray0[3] = "isreverse";
      stringArray0[4] = "+?)5S";
      stringArray0[5] = "~\"wf";
      stringArray0[6] = "Bad value from toJSONString: ";
      stringArray0[7] = "zTBKu(=f|[-mD?";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = JSONObject.valueToString("Bad value from toJSONString: ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "5tJE/N";
      stringArray0[3] = "iHsreverse";
      stringArray0[4] = stringArray0[1];
      stringArray0[5] = stringArray0[1];
      String string0 = JSONObject.quote(stringArray0[4]);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("8#_]+='Izw\"&");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8#_]+='Izw\"&";
      stringArray0[1] = "8#_]+='Izw\"&";
      stringArray0[2] = "8#_]+='Izw\"&";
      stringArray0[3] = "8#_]+='Izw\"&";
      stringArray0[4] = "8#_]+='Izw\"&";
      stringArray0[5] = "8#_]+='Izw\"&";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getString("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T-";
      stringArray0[1] = "";
      linkedList0.clear();
      stringArray0[2] = "3bp_A^e%";
      stringArray0[3] = "H/1B]$mEGFIh) Z\"";
      stringArray0[4] = "";
      stringArray0[5] = "z51)=J*u";
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      stringArray0[6] = "]ep%>75}tU38p_";
      stringArray0[7] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(46, 46);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5tJE/N";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "] is not a JSONArray.";
      stringArray0[3] = "isreverse";
      stringArray0[4] = "] is not a JSONArray.";
      stringArray0[5] = "~\"wf";
      stringArray0[8] = "$ZF";
      String string0 = JSONObject.quote("5tJE/N");
      assertEquals("\"5tJE/N\"", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Long long0 = new Long(0L);
      Short short0 = new Short((short)59);
      Short.compare((short)3712, (short)347);
      Integer integer0 = new Integer((short)0);
      String string0 = JSONObject.quote("K(vEU");
      assertEquals("\"K(vEU\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.valueToString(linkedList0, 3317, 3317);
      Integer integer0 = new Integer(3317);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(118, 9);
      HashMap<Float, Short> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Float, Short>(48, (-1078.8802F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1078.8802
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7254822612059728
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      Float.sum(1.0F, (-459.6204F));
      linkedList0.add(float0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = new Integer(39);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(1464, 1.1115377F);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Short short0 = new Short((short)6);
      Double double0 = new Double((-2644.447031));
      Double double1 = new Double(0.0);
      jSONObject0.putOpt("fo", double1);
      HashMap<Float, Short> hashMap2 = new HashMap<Float, Short>((short)6, 39);
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap4 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap5 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap6 = new HashMap<Float, Byte>();
      assertEquals(0, hashMap6.size());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short short0 = new Short((short)59);
      Short.compare((short)3712, (short)59);
      Integer integer0 = new Integer(3653);
      String string0 = JSONObject.quote("~\"wf");
      assertEquals("\"~\\\"wf\"", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(92);
      Byte byte0 = new Byte((byte)13);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedList3.clone();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject0.getJSONArray(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)88);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "isput";
      stringArray0[1] = "opt";
      stringArray0[2] = "n";
      stringArray0[3] = "jmfMj $_tZ=Y";
      stringArray0[4] = "QuNn`].Zd$/;,7";
      stringArray0[5] = "null";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean(",+K`u;[5c6qAU");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(2347);
      String string0 = "?AfUjMt/j|KM]Hqa";
      JSONTokener jSONTokener0 = new JSONTokener("yU*$7");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of yU*$7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>(2, 76);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap3 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap4 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 8;
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(8, 184.3348F);
      HashMap<Float, Short> hashMap2 = null;
      try {
        hashMap2 = new HashMap<Float, Short>(68, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.147721277969611
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      Double double0 = Double.valueOf((-442.239519519));
      JSONObject jSONObject1 = jSONObject0.accumulate("K?<Ou8Wf7)nd>h", double0);
      jSONObject1.put("K?<Ou8Wf7)nd>h", 0.0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      Double double1 = new Double((-2945.1435104484));
      JSONTokener jSONTokener0 = new JSONTokener("K?<Ou8Wf7)nd>h");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of K?<Ou8Wf7)nd>h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7320276051181858
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NA", (Object) "NA");
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      Short short0 = new Short((short) (-236));
      Short.compare((short)8, (short)16);
      Short.toUnsignedLong((short)45);
      Short.compare((short) (-236), (short)45);
      String string0 = "2.9079911948293830";
      jSONObject0.optInt("2.9079911948293830", (int) (short) (-236));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optDouble("NA");
      jSONObject1.isNull("Expected '");
      jSONObject0.optLong("Expected '", (long) (-236));
      String string1 = "] is not a Boolean.";
      jSONObject2.optLong("] is not a Boolean.");
      jSONObject2.opt("gettoString");
      jSONObject1.optLong("to");
      try { 
        jSONObject2.getLong("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.9160175838494786
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float(0.39947286711707075);
      Integer integer0 = new Integer((-465));
      Integer integer1 = new Integer((-465));
      Integer integer2 = new Integer((-465));
      Object object0 = new Object();
      Short short0 = new Short((short)2213);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bad value from toJSONString: ";
      stringArray0[1] = ")";
      stringArray0[2] = "Bad value from toJSONString: ";
      stringArray0[3] = "Bad value from toJSONString: ";
      stringArray0[4] = "$ZF";
      stringArray0[5] = "isintern";
      stringArray0[6] = "-r70LF Tl>7QepI";
      stringArray0[7] = "Bad value from toJSONString: ";
      stringArray0[8] = "$ZF";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Long long0 = new Long((-465));
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[1] = "getparseDouble";
      Integer integer0 = new Integer((-93));
      String string0 = JSONObject.quote("koQDbftS~03");
      assertEquals("\"koQDbftS~03\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.1189780617322658
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5tJE/N";
      stringArray0[1] = "";
      stringArray0[2] = "getparseDouble";
      stringArray0[3] = "isreverse";
      stringArray0[4] = "+?)5S";
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.optLong("null", 0L);
      String string0 = "LnHU";
      long long0 = new Long(0L);
      jSONObject0.opt("+?)5S");
      jSONObject0.optLong("[");
      String string1 = "=L-J;zS|#pJAa";
      try { 
        jSONObject0.getLong("48V|f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"48V|f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.139043150103852
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble("cBArtuo");
      jSONObject0.optInt("getaddLast");
      String string0 = "W|u4j:rpG";
      JSONTokener jSONTokener0 = new JSONTokener("cBArtuo");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]eqfXG VY;J 3!(";
      stringArray0[1] = "cBArtuo";
      stringArray0[2] = "W|u4j:rpG";
      stringArray0[3] = "getaddLast";
      stringArray0[4] = ",:]}/\"[{;=#";
      stringArray0[5] = "getaddLast";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getaddLast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getaddLast
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.1554742129702866
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      linkedList0.add(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(92);
      Byte byte0 = new Byte((byte)13);
      Short short0 = new Short((byte)13);
      jSONObject0.putOpt(">H", short0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.clone();
      linkedList1.poll();
      jSONObject0.optLong(">H");
      try { 
        jSONObject0.getLong("=L-J;zS|#pJAa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=L-J;zS|#pJAa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.6716497206567076
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      linkedList0.add(float0);
      String string0 = ">H";
      JSONObject jSONObject1 = jSONObject0.put(">H", (double) 449.2F);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject2 = jSONObject0.append("for", boolean0);
      String string1 = "|?VueR";
      jSONObject2.optBoolean("|?VueR", false);
      jSONObject1.optDouble("iscopyValueOf");
      jSONObject0.optInt("h^SfG >");
      String string2 = ",\n";
      jSONObject2.optJSONArray("gettrim");
      try { 
        jSONObject2.getInt("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"for\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t(!P]jRFIY&";
      stringArray0[1] = "t(!P]jRFIY&";
      stringArray0[2] = "getback";
      stringArray0[3] = "t(!P]jRFIY&";
      stringArray0[4] = "t(!P]jRFIY&";
      stringArray0[5] = "k'A(2Vl}bAhZ#Z4?$";
      stringArray0[6] = "t(!P]jRFIY&";
      JSONObject jSONObject0 = new JSONObject("t(!P]jRFIY&", stringArray0);
      jSONObject0.append("t(!P]jRFIY&", "t(!P]jRFIY&");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.9830491532464083
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", (Object) "Expected '");
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", "Expected '");
      jSONObject1.accumulate("Expected '", "Expected '");
      Integer integer0 = new Integer(3);
      Integer.remainderUnsigned((-993), (-993));
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>(4, 3);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap3 = new HashMap<Boolean, Byte>();
      HashMap<Integer, Boolean> hashMap4 = new HashMap<Integer, Boolean>();
      HashMap<Boolean, Byte> hashMap5 = new HashMap<Boolean, Byte>();
      HashMap<Byte, Integer> hashMap6 = new HashMap<Byte, Integer>();
      HashMap<Byte, Integer> hashMap7 = new HashMap<Byte, Integer>();
      HashMap<Float, Byte> hashMap8 = new HashMap<Float, Byte>();
      HashMap<Object, Boolean> hashMap9 = new HashMap<Object, Boolean>();
      assertEquals(0, hashMap9.size());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.5264126563310727
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-803.9175F));
      linkedList0.add(float0);
      Float float1 = new Float(0.0F);
      Float.sum(0.0F, (-1.0F));
      Long.getLong(">OuX=O-_l'\"EM(4e|");
      jSONObject0.append("|zt", (Object) null);
      Float.max(4106.348F, (-1.0F));
      Float.min(0.0F, 4106.348F);
      linkedList0.add(float1);
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.701316305940921
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1DS+h";
      stringArray0[1] = "ZB3>C}`(6S~";
      stringArray0[2] = "x";
      stringArray0[3] = "/";
      stringArray0[4] = "eziKyeL";
      stringArray0[5] = "`'(%q(7v6{y65q";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble("_r.^n1tj*8:f6]e-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_r.^n1tj*8:f6]e-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.898653058925091
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(3710.8F);
      linkedList0.add(float0);
      Float float1 = new Float(449.2F);
      Float.max(3710.8F, 808.21094F);
      linkedList0.add(float1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(92);
      Byte byte0 = new Byte((byte)13);
      Short short0 = new Short((byte)13);
      jSONObject0.putOpt(">H", short0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList linkedList3 = new LinkedList<Byte>();
      linkedList1.poll();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getJSONArray(">H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">H\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(449.2F);
      Float.max(2576.9F, 2576.9F);
      Float.sum(1.0F, (-459.6F));
      linkedList0.add(float0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("a[g.c`.Nhy]");
      Integer integer0 = new Integer(39);
      HashMap<Float, Short> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Float, Short>(39, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
