/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 18:33:41 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.243354668712959
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 1777L;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.152573647162874
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long(255L);
      Long long1 = new Long(2147483664L);
      Long.getLong("4hzcBt\"7p*sLx", long1);
      Range range0 = Range.ofLength(2147483664L);
      Long.getLong("4hzcBt\"7p*sLx");
      Long long2 = new Long((-9223372036854775807L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long3 = new Long((-9223372036854775807L));
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.023702366068143
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(255L);
      Long long2 = new Long(2147483664L);
      Long.compareUnsigned(255L, 255L);
      Long long3 = new Long(9223372036854775807L);
      range0.equals(long1);
      Range range1 = Range.ofLength(2147483664L);
      Range range2 = Range.of(255L, 9223372036854775807L);
      range2.complement(range1);
      Long long4 = new Long(2147483664L);
      Object object0 = new Object();
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range1.endsBefore(range0);
      range2.startsBefore(range0);
      Range range3 = Range.ofLength(4294967295L);
      range3.equals("4hzcBt\"7p*sLx");
      range1.equals(range3);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-5070L));
      range_Builder1.expandBegin(0L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(4294967295L);
      Range.Builder range_Builder3 = range_Builder0.shift((-118L));
      assertSame(range_Builder3, range_Builder2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3264610833314743
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1392L, 2147483605L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2076147329138203
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-526L), (-526L));
      Long long0 = new Long((-526L));
      Long long1 = new Long(4755L);
      Long.getLong("L!Ft2@B@#JSwb[gmu)5");
      Long long2 = new Long((-24L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean1 = range0.equals("org.jcvi.jillion.core.Range$IntRange");
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2577903234896874
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Long long0 = new Long(255L);
      Long long1 = new Long(2358L);
      Long.getLong("tsa8!>As-");
      Long long2 = new Long(1762L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      boolean boolean0 = range0.equals(object8);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5081760636690227
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long((-37L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-37L));
      Object object4 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object5 = new Object();
      boolean boolean1 = range1.equals(object4);
      assertFalse(boolean1);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3833809387280933
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Long long0 = new Long(0L);
      range1.equals(long0);
      range_Builder0.expandEnd(0L);
      Long.getLong("c9*S(m9~!>");
      Long long1 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range1.equals(object1);
      assertFalse(boolean0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertSame(range0, range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.157894418776704
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      long long1 = (-2453L);
      long long2 = 2147483647L;
      Range.of((-2453L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.split(2924L);
      List<Range> list0 = range0.split(2924L);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(32767L, 2924L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2061762080622924
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372036854775805L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775806L, long0);
      
      Long long1 = new Long(9223372036854775805L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(9223372036854775805L);
      Object object4 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      Object object5 = new Object();
      Object object6 = new Object();
      range1.equals((Object) null);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8479194886202572
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      long long1 = 9223372036854775807L;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3833365317221555
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      Long long0 = new Long((-24L));
      Long long1 = new Long((-23903L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.445301646509086
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      Long long1 = new Long(255L);
      Long long2 = new Long(1093L);
      Long long3 = new Long(9223372036854775807L);
      Long.getLong("Pwj4~VtsssWV^e*#");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range1.equals(object4);
      assertFalse(boolean0);
      
      Object object5 = new Object();
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.445015256939289
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(9223372036854775805L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long(9223372036854775805L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775805L, 9223372036854775805L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("eI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.eI
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4174550487140873
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(9223372036854775805L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775806L, long0);
      
      Long long1 = new Long(9223372036854775805L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775805L, 9223372036854775805L);
      Object object4 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3006853165187846
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long((-37L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(range0);
      Object object5 = new Object();
      boolean boolean1 = range0.equals(object4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.938769379095416
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-526L);
      Range range0 = Range.of(range_CoordinateSystem0, (-526L), (-526L));
      long long1 = (-24L);
      Range range1 = Range.of((-24L), 2161L);
      Range range2 = range0.intersection(range1);
      range0.equals(range2);
      Range range3 = Range.ofLength(3L);
      range3.endsBefore(range2);
      range3.complement(range2);
      long long2 = 66692L;
      // Undeclared exception!
      try { 
        Range.of(66692L, (-526L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.491249362862293
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 3221L, 9223372036854775807L);
      Long long0 = new Long(2147483622L);
      Long long1 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1587L), 53L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem2, 3221L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.0782912305602075
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(1L);
      range0.intersection(range1);
      range1.equals(range0);
      Range range2 = Range.ofLength(1L);
      range2.endsBefore(range0);
      range2.complement(range0);
      range1.intersects(range0);
      Range range3 = Range.of(1L, 981L);
      Range.of((-2126L));
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = Range.of((-1652L), 64443L);
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.176906881743452
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Long.getLong("d'N3\"k3`42N.WmB");
      Long long2 = new Long(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5847708121750017
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(3044L);
      range1.intersection(range0);
      range0.equals(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1691736649021247
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483623L, 2147483623L);
      long long0 = (-2256L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2256L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.44107288200258
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-878L), (-878L));
      Range range1 = Range.of((-878L), (-878L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4680838069102164
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.intersection(range0);
      range0.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(range0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Cacoes$AbstractRefereUcedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Cacoes$AbstractRefereUcedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.226936636844362
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Long.getLong("5e <)hyX|5p9o6)Iqd");
      Object object2 = new Object();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("vHU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.vHU
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.327665418939663
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      Long long1 = new Long(255L);
      Long long2 = new Long(9223372036854775807L);
      Long.getLong("4hzcBt\"7p*sLx");
      Long.getLong((String) null);
      Long long3 = new Long(2523L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long4 = new Long((-199L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.478846860596845
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1574L), 53L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem2, 3221L, 9223372036854775807L);
      Long long1 = new Long((-2383L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3127787005250524
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long((-24L));
      Long.getLong("");
      Long long1 = new Long(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.compareUnsigned((-1327L), 2147483647L);
      Long.max(1, (-8L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range0 = Range.of(1199L, 4294967295L);
      Object object8 = new Object();
      boolean boolean0 = range0.equals(object8);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9189426153651405
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.getEnd();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(3044L, long0);
      
      Long long1 = new Long(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      Range range1 = Range.of(0L);
      Object object1 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
      
      range0.iterator();
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range2 = Range.ofLength(0L);
      assertTrue(range2.isEmpty());
      
      boolean boolean2 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2450110626720554
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Long long0 = new Long(255L);
      Long long1 = new Long(2147483664L);
      Long.getLong("4hzcBt\"7p*sLx", long1);
      Range range0 = Range.ofLength(2147483664L);
      Long.getLong("4hzcBt\"7p*sLx");
      Long long2 = new Long((-9223372036854775807L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long3 = new Long((-9223372036854775807L));
      Range range1 = Range.of(2147483664L);
      Object object5 = new Object();
      Object object6 = new Object();
      Long long4 = new Long((-2383L));
      range0.equals(long1);
      assertFalse(range0.isEmpty());
      
      long long5 = range1.getLength();
      assertEquals(1L, long5);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.824048706706787
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(287L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.ofLength(9223372036854775807L);
      range1.equals(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.519309874334139
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of(2147483647L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals(object9);
      //  // Unstable assertion: assertNotSame(range0, range1);
      //  // Unstable assertion: assertFalse(range0.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.9768655772008006
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(1764L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1764L);
      Range range2 = range0.intersection(range1);
      range1.equals(range0);
      long long0 = 4294967295L;
      Range range3 = Range.ofLength(4294967295L);
      range2.endsBefore(range1);
      range3.complement(range0);
      range2.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.1892196592756745
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(255L);
      Long long2 = new Long(2147483664L);
      Long.compareUnsigned(255L, 255L);
      Long.getLong("4hzcBt\"7p*sLx", long2);
      range0.equals(long1);
      Range range1 = Range.ofLength(2147483664L);
      Range range2 = Range.of(255L, 9223372036854775807L);
      List<Range> list0 = range2.complement(range1);
      assertEquals(1, list0.size());
      
      Long long3 = new Long(2147483664L);
      Object object0 = new Object();
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range1.endsBefore(range0);
      boolean boolean0 = range2.startsBefore(range0);
      Range range3 = Range.of(4294967295L);
      Object object1 = new Object();
      boolean boolean1 = range1.equals(range2);
      assertFalse(boolean1 == boolean0);
      
      range1.iterator();
      assertFalse(range1.isEmpty());
      
      List<Range> list1 = range2.complement(range3);
      assertEquals(2, list1.size());
      
      range3.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4316365747216935
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      long long0 = 255L;
      Long long1 = new Long(255L);
      Long long2 = new Long(255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 255L, 9977L);
      long long3 = 940L;
      Range.Builder range_Builder1 = range_Builder0.expandBegin(940L);
      long long4 = 0L;
      Range.Builder range_Builder2 = range_Builder1.contractBegin(0L);
      long long5 = (-941L);
      range_Builder2.contractEnd((-941L));
      Range.Builder range_Builder3 = new Range.Builder(940L);
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(9977L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 1501L;
      long long1 = (-45L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6084590828043908
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-1123L));
      Range range1 = Range.of(range_CoordinateSystem0, (-1123L), 2147483647L);
      Range range2 = range0.intersection(range1);
      range0.equals(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(range_CoordinateSystem0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("m,-'nVuZ!$Y}'5P+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.m,-'nVuZ!$Y}'5P+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9546906610127297
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-1041L));
      range_Builder1.expandBegin((-1041L));
      range2.equals("0#QlTrxF,f9+s#G\"");
      Range range3 = range_Builder1.build();
      List<Range> list0 = range1.complement(range2);
      range3.complementFrom(list0);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.expandBegin(9223372036854775807L);
      Range.Builder range_Builder4 = range_Builder2.shift(9223372036854775807L);
      assertNotSame(range_Builder4, range_Builder0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.235215232301768
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Long long2 = new Long(4294967295L);
      Long.getLong("]&8h2\"sL");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean1 = range0.equals(object6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3006853165187846
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(1311L, 1311L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6633484831331042
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder1.shift(9223372036854771470L);
      range_Builder1.build();
      Range range0 = range_Builder1.build();
      Long long0 = new Long(0L);
      range0.equals(long0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(0L);
      range_Builder2.expandBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder2.build();
      range_Builder3.expandBegin(2837L);
      range0.equals(range_Builder1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[\"w=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[\"w=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5802739100692254
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3221L, 9223372036854775807L);
      Long long0 = new Long(2147483622L);
      Long long1 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(53L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.369554425495675
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1777L, 65535L);
      range0.equals((Object) null);
      Range.of(1777L, 1777L);
      List<Range> list0 = range0.split(1777L);
      assertEquals(36, list0.size());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.556355512110223
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range.Builder range_Builder0 = new Range.Builder(1086L, 3044L);
      Range.of(1086L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 65535L, 9223372036854775807L);
      Range.of(4294967295L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.536172892722984
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = new Long((-526L));
      Long long1 = new Long((-526L));
      Long.getLong("RB");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 2147483646L);
      Range range1 = Range.of(range_CoordinateSystem0, (-526L), 2147483647L);
      Long long2 = new Long(817L);
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-21L));
      range0.spliterator();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.409002618102703
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = 9223372036854775805L;
      Range.of(9223372036854775805L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775805L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775805L, (-362L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -362 would make range [9223372036854775805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2895857526789913
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-489L), (-489L));
      Range range1 = Range.of((-22795L), (-489L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range0.equals(object0);
      Long long0 = new Long((-22795L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
      Long long1 = new Long((-22795L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long2 = new Long(65534L);
      range1.equals((Object) null);
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean1 = range1.equals(object7);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3127787005250524
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long(2147483622L);
      Long long1 = new Long(4294967295L);
      Long long2 = new Long(1128L);
      Long.getLong("");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-117L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4748930506328812
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3605L), (-3605L));
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long((-1068L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of((-1068L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.6041342618273466
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(1777L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1376L));
      range1.equals(range0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandBegin((-86L));
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder3.shift(0L);
      assertNotSame(range_Builder4, range_Builder1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.737890277342363
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = 8L;
      Range range0 = Range.ofLength(8L);
      Range range1 = Range.of(8L);
      range0.intersection(range1);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(8L, 8L);
      range_Builder0.shift(672L);
      range_Builder0.contractBegin((-2115L));
      Range.Builder range_Builder1 = new Range.Builder(8L);
      range_Builder0.contractBegin((-761L));
      long long1 = 1L;
      Range.Builder range_Builder2 = new Range.Builder(range1);
      long long2 = (-4491L);
      Range.Builder range_Builder3 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(9223372036854772765L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long1 = new Long(1564L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1574L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1575 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.15133290117123
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1782L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-1782L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1784 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5555241154865347
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long(255L);
      Long long1 = new Long(2147483647L);
      Long.getLong("4hzcBt\"7p*sLx", long1);
      Range range0 = Range.ofLength(2147483647L);
      Long long2 = new Long((-1L));
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
      
      Object object1 = new Object();
      List<Range> list0 = range0.split(2147483647L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6857650248904683
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      range0.intersection(range1);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.shift(672L);
      range_Builder0.contractBegin((-2115L));
      Range.Builder range_Builder1 = new Range.Builder(1L);
      range_Builder0.contractBegin((-761L));
      long long1 = 1L;
      Range.Builder range_Builder2 = new Range.Builder(range1);
      long long2 = (-4491L);
      range_Builder2.contractBegin((-4491L));
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(9223372036854772765L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.025155479616861
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      range1.endsBefore(range0);
      range1.complement(range0);
      range1.intersects(range0);
      assertFalse(range0.isEmpty());
      
      Range range3 = Range.of(1L, 981L);
      Range.of((-2134L));
      Range.of((-3209L), (-881L));
      Long.getLong("$,M.bg6[ln");
      range3.equals((Object) null);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.067627525963811
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 4294967295L);
      Range range2 = Range.of((-3388L));
      range2.complement(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range2.intersects(range1);
      Range range3 = Range.of(812L, 1297L);
      Range range4 = Range.of(812L);
      Object object0 = new Object();
      boolean boolean1 = range4.equals(range3);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      range4.iterator();
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.61331010490509
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 3044L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      long long1 = 1777L;
      long long2 = 2257L;
      Range range1 = Range.of(range_CoordinateSystem0, 1777L, 2257L);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = (-4257L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-4257L), 2257L);
      range_Builder0.build();
      long long4 = 9223372036854772560L;
      Long long5 = new Long(9223372036854772560L);
      range1.equals(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-4257L), 9223372036854772560L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6061803995972634
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(3044L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(3044L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long(3044L);
      Object object7 = new Object();
      range2.equals(long0);
      assertTrue(range2.isEmpty());
      
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      boolean boolean1 = range0.equals(long1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6412419386420876
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = new Long((-24L));
      Long.getLong("L!Ft2@B@#JSwb[gmu)5");
      Long long1 = new Long((-28L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-24L), 65535L);
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6260100580384225
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 9223372036854772765L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.copy();
      long long1 = (-888L);
      range_Builder2.contractEnd((-888L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = range_Builder2.contractBegin((-242L));
      long long2 = 65535L;
      range_Builder5.contractEnd(65535L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-242L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.322767248706483
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-489L), (-489L));
      Range range1 = Range.of((-22795L), (-489L));
      boolean boolean0 = range0.equals(range1);
      range0.equals(object0);
      Long long0 = new Long((-22795L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
      Long long1 = new Long((-22795L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long2 = new Long((-489L));
      range1.equals(long2);
      assertFalse(range1.equals((Object)range0));
      
      Object object6 = new Object();
      long long3 = range0.getBegin();
      assertEquals((-489L), long3);
      
      Object object7 = new Object();
      boolean boolean1 = range0.equals(object7);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2448466701025995
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(255L);
      Long long1 = new Long(2147483664L);
      Long.getLong("4hzcBt\"7p*sLx", long1);
      Range range0 = Range.ofLength(2147483664L);
      assertFalse(range0.isEmpty());
      
      Long.getLong("4hzcBt\"7p*sLx");
      Long long2 = new Long((-9223372036854775807L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long3 = new Long((-9223372036854775807L));
      Range range1 = Range.of(2147483664L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range1.equals(object8);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-32768L), (-32768L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.165754881412656
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long((-526L));
      Long long1 = new Long(4755L);
      Long.getLong("L!Ft2@B@#JSwb[gmu)5");
      Long long2 = new Long((-24L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range0 = Range.of(652L);
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object7);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.671009746116238
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Long.getLong("d'N3\"k3`42N.WmB");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) long0, (long) long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.intersection(range0);
      Range.of(255L);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.738858495930191
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(0L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      long long0 = 1L;
      Range range2 = Range.of(1L, 1L);
      range2.complement(range1);
      Range range3 = Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 65535L;
      Range range4 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      range1.complement(range4);
      range3.isEmpty();
      long long2 = (-2147483648L);
      long long3 = 9223372034707292161L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), 9223372034707292161L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.041957015666102
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of((-2946L), (-1012L));
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2697L, 2147483647L);
      range0.complement(range2);
      Object object0 = new Object();
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.876033935185535
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.toString();
      range0.complementFrom(linkedList0);
      range0.iterator();
      Range range1 = Range.of(0L, 0L);
      range0.complement(range1);
      range0.isSubRangeOf(range1);
      Range.of(2115L, 4294967296L);
      range0.startsBefore(range1);
      range0.asRange();
      long long0 = 1317L;
      Range.ofLength(1317L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.913418426194405
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder3.expandEnd(969L);
      range_Builder1.expandBegin((-128L));
      range_Builder0.copy();
      range_Builder3.contractEnd((-128L));
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range_Builder3.expandEnd(969L);
      Range.Builder range_Builder6 = range_Builder5.contractBegin((-10L));
      range_Builder1.contractBegin((-128L));
      Range.Builder range_Builder7 = range_Builder5.contractEnd((-10L));
      range_Builder1.shift(503L);
      range_Builder7.shift((-128L));
      Range.Builder range_Builder8 = new Range.Builder(2992L);
      Range range1 = range_Builder7.build();
      range_Builder6.contractBegin((-1376L));
      range0.equals(range_Builder8);
      range_Builder4.build();
      Range.Builder range_Builder9 = new Range.Builder();
      boolean boolean0 = range1.equals(range_Builder7);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.462795068226083
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-479L), (-479L));
      Range range1 = Range.of((-22795L), (-479L));
      range1.isSubRangeOf(range0);
      range0.intersects(range1);
      long long0 = 981L;
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of((-22795L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.7271978618848522
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      range1.equals(range0);
      boolean boolean0 = range1.intersects(range0);
      Range range2 = Range.ofLength(1L);
      boolean boolean1 = range1.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range2.complement(range0);
      assertEquals(0, list0.size());
      
      range1.intersects(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      List<Range> list1 = range0.split(1L);
      assertFalse(range0.equals((Object)range1));
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.6816386218229216
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.expandEnd(969L);
      range_Builder1.expandBegin((-128L));
      range_Builder0.copy();
      range_Builder3.contractEnd((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.contractBegin((-10L));
      range_Builder4.contractEnd((-10L));
      Range.Builder range_Builder5 = new Range.Builder(2992L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7277647370506974
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-526L), (-526L));
      Long long0 = new Long((-526L));
      Long long1 = new Long(4755L);
      Long.getLong("L!Ft2@B@#JSwb[gmu)5");
      Long long2 = new Long((-24L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-3209L), 4755L);
      range1.isSubRangeOf(range0);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range2 = range1.asRange();
      Range range3 = range1.intersection(range2);
      assertSame(range2, range3);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.13695964743965
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      long long1 = 3147L;
      Range range0 = Range.of((-1574L), 3147L);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      long long2 = 699L;
      Range range2 = Range.of(3147L, 3221L);
      range0.complementFrom(list0);
      range2.complement(range1);
      range1.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2030L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3876344284752276
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long.getLong("iBWVh8LdqEnR-");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-9223372036854753013L), (-3902L));
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6227682305274422
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 1L;
      Range.ofLength(1L);
      Range range0 = Range.of(1L);
      range0.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.shift(672L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1L);
      range_Builder0.contractBegin((-761L));
      long long1 = 1L;
      Range.Builder range_Builder3 = new Range.Builder(range0);
      long long2 = (-4491L);
      range_Builder3.contractBegin((-4491L));
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(9223372036854772765L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.506198972775888
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.ofLength(1076L);
      Range range0 = Range.of(1076L, 1076L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.7444903706885775
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), (-32768L));
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), 444L);
      range1.toString();
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2147483647L;
      Range range3 = Range.of(range_CoordinateSystem2, (-32768L), 2147483647L);
      range2.complement(range3);
      range3.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of((-32768L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.846640174957425
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.contractBegin((-32768L));
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder3.contractEnd((-32768L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.expandEnd(65535L);
      range_Builder1.contractBegin((-32768L));
      range_Builder4.expandBegin((-32768L));
      range_Builder1.contractBegin(65535L);
      long long0 = 804L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(804L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7912431465179486
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Long long0 = new Long(0L);
      boolean boolean0 = range1.equals(long0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(0L);
      range_Builder2.expandBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of(527L);
      boolean boolean1 = range3.equals(range_Builder2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.8967225800255263
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      long long0 = 333L;
      Long long1 = new Long(333L);
      Range range0 = Range.of((-489L), 333L);
      Range range1 = Range.ofLength(9223372036854775806L);
      range0.intersection(range1);
      range0.complement(range1);
      long long2 = (-3023L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1714L, (-3023L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.6005775180336825
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder0.copy();
      range_Builder3.contractEnd((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.contractBegin((-1L));
      range_Builder4.contractEnd((-1L));
      Range.Builder range_Builder5 = new Range.Builder(2992L);
      Range range1 = range_Builder2.build();
      range_Builder4.expandBegin(202L);
      range_Builder1.contractBegin((-478L));
      range_Builder3.expandBegin(2837L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5497704282723213
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long((-1530L));
      Range.of(3452L);
      Range range0 = Range.of(3044L);
      Range range1 = Range.of((-1530L));
      Object object0 = new Object();
      Range.of(2413L);
      range1.endsBefore(range0);
      long long1 = (-1430L);
      // Undeclared exception!
      try { 
        Range.of((-1430L), (-1602L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.646172800757403
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      range1.equals(range_CoordinateSystem1);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(0L);
      range_Builder0.expandEnd((-989L));
      Spliterator<Long> spliterator0 = range1.spliterator();
      range_Builder0.expandBegin(2147483647L);
      range_Builder2.expandBegin(1155L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem3.toString();
      range1.asRange();
      Long long0 = new Long(2147483647L);
      range0.equals(spliterator0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.8787897476523003
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-311L));
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder(1086L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range range1 = Range.ofLength(32767L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.415398842602481
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(0L);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(1777L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.899801745052396
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(1L);
      range2.complement(range0);
      range1.intersects(range0);
      long long0 = 981L;
      Range.of(1L, 981L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.9119885507525294
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L);
      range0.intersection(range1);
      range1.equals(range0);
      Range range2 = Range.ofLength(1L);
      range2.endsBefore(range0);
      range2.complement(range0);
      Range range3 = Range.ofLength(3458L);
      range3.getEnd();
      long long0 = 65535L;
      Range.of(0L, 2267L);
      range0.getEnd();
      range0.complement(range2);
      String string0 = "U&aR^`'le";
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.821483093880831
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.ofLength(1286L);
      range0.intersects(range1);
      Range range2 = Range.of((-9223372036854775808L), (-1821L));
      range2.intersection(range0);
      range0.complement(range2);
      Object object0 = new Object();
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.960468769256269
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem3, 3044L, 3044L);
      Long long0 = new Long(3044L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem4);
      range0.equals(range_CoordinateSystem1);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem5);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-301L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5263439392403795
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 202L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      long long1 = (-376L);
      Long long2 = new Long(202L);
      range0.equals(range1);
      range_Builder1.expandEnd((-376L));
      long long3 = (-1733L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-1733L));
      long long4 = (-2254L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_Builder2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.039973758695109
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      range1.equals(range0);
      Range range3 = Range.ofLength(1L);
      range2.intersection(range1);
      boolean boolean0 = range3.endsBefore(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range3.complement(range0);
      range1.intersects(range0);
      Range range4 = Range.of(1L, 981L);
      Range.of((-2126L));
      Object object0 = new Object();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer1);
      range2.equals(list0);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range4);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.3047035882174125
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long(255L);
      Long long1 = new Long(255L);
      Long.getLong("YZ!y@@CX k!k+N5<", long1);
      Range.ofLength(255L);
      Long.getLong("YZ!y@@CX k!k+N5<");
      Long long2 = new Long((-9223372036854775807L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long3 = new Long((-9223372036854775807L));
      Range range0 = Range.of(255L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object7);
      Range range1 = Range.of(3383L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.774629133235595
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range range1 = Range.of(0L, 1L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.73473166867273
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-4501L);
      Range.of((-4501L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.contractBegin((-4501L));
      Range.Builder range_Builder3 = range_Builder2.copy();
      long long1 = 1663L;
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(1663L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.7684598981341497
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Long long0 = new Long(3044L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long1 = new Long((long) long0);
      Long long2 = new Long((long) long0);
      Range.of((-22753L));
      // Undeclared exception!
      try { 
        Range.of(3044L, (-73L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.407629051723588
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long((-24L));
      Long.getLong("");
      Long long1 = new Long(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.compareUnsigned(9993L, (-24L));
      Long.max((-3793L), 2147483647L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range0 = Range.of((-24L), (-24L));
      range0.split(570L);
      Object object8 = new Object();
      try { 
        Long.valueOf("", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6786233161228936
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      long long0 = new Long(3044L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = new Long(3044L);
      long long2 = new Long(3044L);
      Range.of((-22753L));
      // Undeclared exception!
      try { 
        Range.of(3044L, (-73L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.6809780811926065
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1086L, 1086L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range range0 = Range.ofLength(32767L);
      List<Range> list0 = range0.split(1047L);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.812023118645149
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-1652L), (-1652L));
      Long long0 = new Long((-1652L));
      Range range1 = Range.of((-1652L), (-1652L));
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(1714L, 1714L);
      Range.of((-1983L));
      Range.of(70L, 1311L);
      Range range3 = Range.of((-1652L));
      assertSame(range3, range2);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.6188192123964744
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(1925L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6371696436139227
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = range1.intersection(range0);
      range0.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(1714L, 1714L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.expandEnd((-1041L));
      Range.Builder range_Builder2 = range_Builder0.expandEnd(995L);
      Range.Builder range_Builder3 = new Range.Builder((-2644L), 1755L);
      Range.Builder range_Builder4 = range_Builder3.expandEnd(1714L);
      range_Builder4.expandEnd(2254L);
      range_Builder1.expandBegin((-128L));
      range_Builder0.expandBegin(32767L);
      Range.Builder range_Builder5 = range_Builder3.shift((-135L));
      assertNotSame(range_Builder5, range_Builder2);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.43050584153311
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-14L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.142623311874872
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 22317L;
      Range.of(range_CoordinateSystem0, 22317L, 22317L);
      Long long1 = new Long(1L);
      Long long2 = new Long(1L);
      long long3 = (-1587L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 22317L, (-1587L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.762772471049092
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      range0.complement(range0);
      range0.startsBefore(range0);
      range0.isEmpty();
      range0.isSubRangeOf(range0);
      Range.of(0L, 3499L);
      range0.getLength();
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("]J!`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.]J!`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3762680902675863
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      Long long0 = new Long((-23903L));
      Long.getLong("L!Ft2@B@#JSwb[gmu)5");
      Long long1 = new Long((-28L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long2 = new Long(0L);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      range0.equals(object11);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("L!Ft2@B@#JSwb[gmu)5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.L!Ft2@B@#JSwb[gmu)5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.1713471376575044
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(32767L);
      range0.intersects(range0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.5878087609338554
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (long) long0, (long) long0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-1625L), 2147483647L);
      Long long2 = new Long((-1625L));
      assertFalse(long2.equals((Object)long0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.5048188010013095
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 65535L);
      Long.getLong("");
      Long long0 = new Long(65535L);
      Long long1 = new Long(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long2 = new Long(0L);
      Range.of((-24L));
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object6));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(366L);
      long long0 = range0.getLength();
      assertEquals(366L, long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.361011327263587
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-45L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(0L);
      Long long2 = new Long((-45L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(1777L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.5551860126845964
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-955L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-955L), (-955L));
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~uw{~M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~uw{~M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.397329082461301
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.of(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(261L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 127L;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(127L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.791766558601775
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = "L!Ft2@B@#JSwb[gmu)5";
      Long.getLong("e }k");
      Long long2 = new Long((-28L));
      Object object0 = new Object();
      Object object1 = new Object();
      long long3 = (-836L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-836L), (-28L));
      range0.endsBefore(range1);
      long long4 = 918L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-836L), 2147483663L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -29 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin((-3232L));
      range_Builder1.expandBegin(1265L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(293L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2115L), 0L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1086L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractEnd((-1994L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1994L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4581715563647935
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.3086080259293102
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long.getLong("Range coordinates %d, %d are not vaid %s coordinats");
      Long.getLong("Range coordinates %d, %d are not vaid %s coordinats");
      long long0 = 53L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1574L), (-32L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-32L), (-1574L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.6896084242545393
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2797L), (-2797L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of((-99L));
      // Undeclared exception!
      try { 
        Range.of((-905L), (-2797L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.8871864459427456
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder3.expandEnd(969L);
      Range.Builder range_Builder5 = range_Builder1.expandBegin((-128L));
      Range.Builder range_Builder6 = range_Builder0.copy();
      range_Builder3.contractEnd((-128L));
      Range.Builder range_Builder7 = new Range.Builder(range0);
      Range.Builder range_Builder8 = range_Builder7.contractBegin((-10L));
      range_Builder1.contractBegin((-128L));
      Range.Builder range_Builder9 = range_Builder7.contractEnd((-10L));
      range_Builder1.shift(503L);
      range_Builder9.shift((-128L));
      Range.Builder range_Builder10 = new Range.Builder(2992L);
      range_Builder9.build();
      range_Builder8.contractBegin((-1376L));
      range0.equals(range_Builder10);
      range_Builder4.build();
      Range.Builder range_Builder11 = new Range.Builder();
      range_Builder4.expandBegin(2236L);
      Range.Builder range_Builder12 = range_Builder6.shift(2236L);
      assertNotSame(range_Builder12, range_Builder5);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.8295663557569863
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(969L);
      range_Builder0.build();
      range_Builder0.contractEnd((-128L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.of((-128L), 202L);
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.412622877183868
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1080L, 1080L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of(1080L, 1080L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      assertEquals(1080L, long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4299857333746484
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(969L);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-128L));
      range_Builder1.expandEnd(2147483647L);
      range_Builder0.shift(969L);
      Range.Builder range_Builder3 = new Range.Builder(2992L);
      Range.of(202L);
      range_Builder1.expandBegin(202L);
      range_Builder2.expandEnd(969L);
      Range.Builder range_Builder4 = range_Builder2.shift(21L);
      assertSame(range_Builder2, range_Builder4);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.895930895139181
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.expandEnd((-1L));
      range_Builder3.expandEnd(969L);
      range_Builder1.expandBegin((-128L));
      range_Builder0.copy();
      range_Builder3.contractEnd((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder3.expandEnd(969L);
      range_Builder4.contractBegin((-10L));
      range_Builder1.contractBegin((-128L));
      Range.Builder range_Builder5 = range_Builder4.contractEnd((-10L));
      long long1 = 503L;
      // Undeclared exception!
      try { 
        range_Builder5.contractBegin(969L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.55485034408633
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.copy();
      range_Builder1.build();
      Range range0 = range_Builder1.build();
      Long long0 = new Long(0L);
      range0.equals(long0);
      Range.Builder range_Builder3 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder4 = range_Builder3.expandBegin(0L);
      Range.Builder range_Builder5 = range_Builder2.expandBegin(0L);
      range_Builder1.contractBegin((-2254L));
      range_Builder2.expandEnd(0L);
      range_Builder5.expandEnd(1934L);
      range_Builder1.expandBegin(2101L);
      range_Builder4.expandBegin(2101L);
      Range.Builder range_Builder6 = range_Builder2.shift(2101L);
      assertSame(range_Builder6, range_Builder2);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.6231062149538995
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L));
      long long1 = (-1821L);
      Range.of((-9223372036854775808L), (-1821L));
      // Undeclared exception!
      try { 
        range0.split((-1976L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.8138575767418894
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), (-32768L));
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), 444L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      Range range2 = Range.of(range_CoordinateSystem3, (-32768L), 2147483647L);
      range1.complement(range2);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of((-32768L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long.getLong("a|yP TCm:eNISbF%Q*");
      Range range0 = Range.of(1659L, 1659L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.3970764615190254
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Long long2 = new Long(4294967295L);
      Long.getLong("]&8h2\"sL");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of(255L, 1436L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=4.083751418052064
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L);
      range0.intersection(range1);
      range1.equals(range0);
      Range range2 = Range.ofLength(1L);
      range2.endsBefore(range0);
      List<Range> list0 = range2.complement(range0);
      range1.intersects(range0);
      Range range3 = Range.of(1L, 981L);
      Range range4 = Range.of((-2126L));
      Range.of((-2126L), (-128L));
      range0.complementFrom(list0);
      range3.complement(range4);
      range4.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-4170L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.4241520531316274
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 1L;
      Range.ofLength(1L);
      long long1 = 5722L;
      Range.of(1L, 5722L);
      Range range0 = Range.ofLength(5722L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.594234652922758
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Long long0 = new Long((-24L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 65535L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      range_Builder1.contractEnd(566L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of(566L);
      Range range2 = Range.of(566L, 2992L);
      assertNotSame(range2, range1);
      
      Range range3 = Range.of(2992L);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.277514926855928
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854743041L);
      range_Builder0.build();
      range_Builder0.expandBegin(9223372036854743041L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      // Undeclared exception!
      try { 
        Range.of((-1162L), (-1611L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.942091790641094
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      long long1 = 65535L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      long long2 = 127L;
      Range range1 = Range.of(127L, 65535L);
      Range range2 = range0.intersection(range1);
      range2.complement(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-488L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.358831551304167
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(444L, 444L);
      range0.split(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(32767L, (-770L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.7933758166170866
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.endsBefore(range0);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      range1.complement(range0);
      range0.startsBefore(range1);
      range0.isEmpty();
      range0.isSubRangeOf(range1);
      Range.of(0L, 3499L);
      range1.getLength();
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("]J!`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.]J!`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.9311713308406286
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.endsBefore(range0);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(342L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range1.complement(range0);
      assertTrue(list2.equals((Object)list1));
      
      boolean boolean0 = range0.startsBefore(range1);
      range0.isEmpty();
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.of(0L, 3499L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.899201143362096
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L);
      List<Range> list0 = range2.complement(range1);
      range0.intersects(range0);
      range1.complementFrom(list0);
      Range range3 = Range.of(4294967295L, 4294967295L);
      Range.of((-1822L));
      Range range4 = Range.of(981L, 4294967295L);
      range3.complement(range2);
      Object object0 = new Object();
      range4.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1822L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=4.134010487471406
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.expandEnd(969L);
      range_Builder1.expandBegin((-128L));
      long long1 = (-10L);
      range_Builder0.copy();
      range_Builder3.contractEnd((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.contractBegin((-10L));
      range_Builder1.contractBegin((-128L));
      range_Builder4.contractEnd((-10L));
      range_Builder1.shift(503L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 65535L;
      Range range1 = Range.of(range_CoordinateSystem1, 969L, 65535L);
      long long3 = 1048L;
      Range range2 = Range.of(1048L);
      range0.complement(range2);
      range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.7914555956180216
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      range0.intersection(range0);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-1821L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin(1842L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-32768L));
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.971819532917886
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L);
      range2.complement(range1);
      range0.intersects(range0);
      Range.of(4294967295L, 4294967295L);
      Range range3 = Range.ofLength(1276L);
      Range range4 = range0.intersection(range3);
      range4.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift((-357L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder((-1435L), 2147483647L);
      range_Builder1.contractBegin((-164L));
      range_Builder0.expandBegin(484L);
      Range.Builder range_Builder4 = new Range.Builder();
      assertFalse(range_Builder4.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.531777703609688
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1574L), 53L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3221L, 9223372036854775807L);
      Long long1 = new Long((-2383L));
      range0.isSubRangeOf(range1);
      Range range2 = range0.asRange();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.698882407121706
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1574L), 53L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3221L, 9223372036854775807L);
      Long long1 = new Long((-2383L));
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.378690601290724
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder1.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      long long0 = (-2361L);
      range_Builder2.expandBegin((-2361L));
      long long1 = (-10L);
      // Undeclared exception!
      try { 
        range_Builder2.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.4279783730534703
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(991L, 991L);
      Range.of(179L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.9103732097415755
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-1821L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(995L);
      range_Builder1.expandBegin(255L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-1588L));
      range_Builder2.expandBegin((-1821L));
      range0.equals("org.jcvi.jillion.core.util.MapUtil");
      range1.iterator();
      List<Range> list1 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list1.contains(range1));
      
      range0.asRange();
      //  // Unstable assertion: assertSame(range0, range1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.313983036133241
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      Long long1 = new Long(255L);
      Long long2 = new Long(9223372036854775807L);
      Long.getLong("(d+)s*-s*(d+)");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object7);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.652960842885269
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = 202L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      long long1 = (-376L);
      Long long2 = new Long((-376L));
      range0.equals(range_Builder0);
      range_Builder0.expandEnd(202L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-128L));
      long long3 = (-2254L);
      Range.Builder range_Builder3 = range_Builder0.expandBegin((-128L));
      range_Builder3.build();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(1009L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.462099883704253
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long((-24L));
      Long.getLong("");
      Long long1 = new Long(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.compareUnsigned((-1327L), (-24L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range0 = Range.of(1199L, 4294967295L);
      Object object7 = new Object();
      Range range1 = Range.of(2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("PiQ Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse PiQ Q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Long.getLong("Range coordinates %d, %d are not vaid %s coordinats");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not vaid %s coordinats", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not vaid %s coordinats into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.6505770886522706
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1086L, 1086L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range range0 = Range.ofLength(32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.5605498726878233
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.3050008449872936
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.expandEnd(255L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(22307L);
      range_Builder1.expandBegin(1777L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1777L);
      assertSame(range_Builder0, range_Builder2);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.361416330660486
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-3209L), (-881L));
      // Undeclared exception!
      try { 
        Range.of((-128L), (-1064L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
