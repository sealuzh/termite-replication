/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 14:19:00 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.229947854228925
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.shift(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = range_Builder0.build();
      Object object0 = new Object();
      range2.equals(range1);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range0.equals(long0);
      range_Builder2.expandEnd(4027L);
      Range.Builder range_Builder3 = new Range.Builder(4027L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.231976131797723
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 9223372036854772764L;
      Range range0 = Range.ofLength(9223372036854772764L);
      range0.toString();
      range0.spliterator();
      Range range1 = Range.of(9223372036854772764L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854772764L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -6089 would make range [9223372036854772764 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.157609197123245
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 897L, 897L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range_CoordinateSystem0);
      Range range1 = range0.intersection(range0);
      Range.of(453L, 999L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1453943241204616
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-451L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("ssd6-1O", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5332703032370687
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 10L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 10L, 10L);
      long long1 = 0L;
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder3.shift(9223372036854775807L);
      Range range1 = range_Builder3.build();
      Range range2 = range_Builder3.build();
      Object object0 = new Object();
      range1.equals(range0);
      range_Builder2.expandEnd(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range1.complementFrom(list0);
      range2.complement(range1);
      range1.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-1760L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.500126442116313
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372034707292161L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      range_Builder0.expandEnd((-32768L));
      range_Builder2.expandEnd(249L);
      range_Builder2.shift(1634L);
      Range range1 = Range.of(9223372034707292161L);
      range1.complement(range0);
      range0.intersection(range1);
      Range range2 = Range.of((-1576L));
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1319142220900353
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372034707292161L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      range_Builder0.expandEnd((-32768L));
      range_Builder0.expandEnd(65536L);
      range_Builder1.shift(3675L);
      Long long0 = new Long((-1167L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.310644340215688
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(456L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder((-31990L), 527L);
      Range.Builder range_Builder5 = range_Builder1.copy();
      range_Builder3.build();
      range_Builder5.build();
      Long long1 = new Long(527L);
      range_Builder1.expandEnd(315L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-3297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.484117787631575
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1426L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-5102L), (-1426L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      range1.startsBefore(range0);
      range1.startsBefore(range0);
      range0.intersects(range1);
      range1.intersects(range0);
      range1.equals(range0);
      range0.complement(range1);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.of(32798L, 189L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1842722053625265
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.of((-1741L));
      Range.of((-350L), 897L);
      // Undeclared exception!
      try { 
        Range.of(127L, (-5079L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.306294499569181
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      range_Builder2.shift((-128L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      Range.Builder range_Builder5 = range_Builder4.expandEnd(65535L);
      range_Builder5.expandBegin(547L);
      range_Builder2.shift(65535L);
      Long long0 = new Long((-130L));
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(7206955121010L, 9223372036854774167L);
      boolean boolean1 = range0.equals(object1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0246229293492695
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 897L, 897L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder0.build();
      range_Builder1.build();
      range_Builder1.build();
      range1.equals((Object) null);
      range_Builder0.expandEnd(897L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1741L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.965527495731231
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 10L, 10L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder3.build();
      Range range2 = range_Builder3.build();
      Object object0 = new Object();
      range1.equals(range0);
      range_Builder2.expandEnd(0L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range_Builder1.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder(10L);
      boolean boolean1 = range2.equals(range_Builder4);
      assertFalse(boolean1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3683400577918663
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range0 = Range.of((-128L), 152L);
      Range.Builder range_Builder1 = new Range.Builder(1386L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294967295L);
      range_Builder0.expandBegin((-2532L));
      range_Builder3.shift((-1340L));
      range_Builder2.expandBegin(1386L);
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(886L, 4294967295L);
      range_Builder2.expandEnd(1975L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-1L), 127L);
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3744666737401596
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32798L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(32798L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder1.build();
      range_Builder1.shift(9223372036854772764L);
      Range range1 = range_Builder3.build();
      Range range2 = range_Builder3.build();
      Object object0 = new Object();
      range2.equals("org.jcvi.jillion.core.Range$CoordinateSystem");
      range_Builder0.expandEnd((-32768L));
      range2.equals(range1);
      range_Builder1.expandEnd(32798L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-1896L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3265899169691107
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of((-32768L), (-32768L));
      Range range0 = Range.of(9223372034707292161L);
      Range range1 = Range.of(9223372036854775560L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372034707292161L, 9223372036854775560L);
      long long0 = 1L;
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(9223372036854774167L);
      // Undeclared exception!
      try { 
        range_Builder2.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.326586881202635
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 345L, 32798L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(463L);
      Range range1 = Range.of(463L);
      range0.equals(range1);
      Range range2 = Range.ofLength(237L);
      range1.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3096811598127185
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), 9223372032559808514L);
      Range.Builder range_Builder1 = new Range.Builder(32798L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range range0 = range_Builder2.build();
      Range range1 = range_Builder3.build();
      range_Builder1.build();
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem0);
      Range.Builder range_Builder4 = range_Builder2.expandEnd(1301L);
      range0.equals((Object) null);
      range_Builder4.expandEnd(1618L);
      Range.Builder range_Builder5 = new Range.Builder(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3472375263717584
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-561L));
      Range range2 = Range.of(9223372034707292161L);
      range1.equals(range0);
      boolean boolean0 = range2.startsBefore(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long((-2224L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.intersects(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.340278332536644
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = 255L;
      Range range1 = Range.of(255L, 255L);
      range0.complement(range1);
      range0.isEmpty();
      Range range2 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.179819988452498
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-1741L));
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -1741 ]/0B", string0);
      
      Long long0 = new Long(428L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals("$GeZ");
      Long long1 = new Long(3570L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4100579720050908
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of((-2147483657L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals("$GeZ");
      Range.of((-1L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483657 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1757834838076997
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.of(3044L, 3044L);
      Range.Builder range_Builder0 = new Range.Builder(3044L, 9223372032559808514L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-496L));
      range0.equals(range_Builder0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854774167L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-40L));
      range_Builder2.shift(4294967295L);
      Long long1 = new Long((-40L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Space Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Space Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.87542686851175
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1696L), 4294967295L);
      range0.getEnd();
      List<Range> list0 = range0.split(4294967294L);
      List<Range> list1 = range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(248L);
      range1.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem1);
      range0.equals(list1);
      range0.isSubRangeOf(range0);
      long long0 = 127L;
      range0.split(127L);
      String string0 = "/$>GFqX6St";
      Range range2 = Range.parseRange(string0);
      range1.split(long0);
      range2.intersects(range0);
      long long1 = 9223372036854772764L;
      Range range3 = Range.of(long1);
      long long2 = range2.getLength();
      range0.complement(range2);
      range2.startsBefore(range0);
      long long3 = (-3795L);
      long long4 = 9223372032559808514L;
      Range.ofLength(long4);
      Range range4 = Range.ofLength(long3);
      range0.isEmpty();
      range2.isSubRangeOf(range0);
      range1.spliterator();
      Range range5 = range4.intersection(range0);
      range3.complement(range5);
      Range.ofLength(long2);
      range1.getLength();
      Range.CoordinateSystem.valueOf(string0);
      range0.intersection(range3);
      Range.parseRange(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3936436202766402
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.equals((Object) null);
      Range range1 = Range.of(9223372034707292161L);
      Range range2 = Range.of(9223372036854775560L);
      range1.equals(range2);
      Range.of(9223372036854775560L, 9223372036854775560L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Long long0 = new Long(255L);
      // Undeclared exception!
      try { 
        range2.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775560 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.748667907436581
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Long long0 = new Long((-4294967295L));
      range0.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range1.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      Object object1 = new Object();
      Range.of(range_CoordinateSystem0, (-4294967295L), 2147483647L);
      range1.isEmpty();
      long long1 = range2.getLength();
      //  // Unstable assertion: assertEquals(1L, long1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4784555045941623
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(32767L);
      Range.Builder range_Builder1 = new Range.Builder(32767L);
      Range.Builder range_Builder2 = new Range.Builder((-32768L), (-32768L));
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.118626888992665
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 10L, 10L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder2.build();
      Range range2 = range_Builder3.build();
      Object object0 = new Object();
      range2.equals("can not parse ");
      range_Builder1.expandEnd((-4878L));
      boolean boolean0 = range0.equals((Object) null);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      range_Builder4.expandBegin(9223372036854775807L);
      range_Builder0.expandEnd(10L);
      Range.Builder range_Builder5 = new Range.Builder(923L);
      Object object1 = new Object();
      boolean boolean1 = range0.equals(object1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.30435977998095
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 392L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-496L));
      range_Builder1.build();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      range0.equals((Object) null);
      range_Builder1.expandEnd((-496L));
      Range.Builder range_Builder2 = new Range.Builder(255L);
      range0.intersection(range1);
      Range range2 = Range.of(9223372036854775807L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1741L);
      long long1 = (-31990L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775806L, (-31990L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -31990 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5634524208074567
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(2L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.Builder range_Builder4 = new Range.Builder(2L, 2L);
      Range range3 = Range.of(1L, 1547L);
      range1.complement(range3);
      range2.intersection(range0);
      Range.of(1547L);
      Range range4 = Range.of(201L);
      assertFalse(range4.equals((Object)range0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1130764439515697
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = (-311L);
      Range range0 = Range.of((-311L));
      long long1 = new Long((-311L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-311L), 1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1597L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0185534367366813
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder3.build();
      range_Builder3.build();
      range1.equals(range0);
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.321840559086794
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range_Builder1.expandEnd(4294967295L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      boolean boolean0 = range1.intersects(range2);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.328079419751258
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(3044L, 3044L);
      Range.Builder range_Builder0 = new Range.Builder(3044L, 9223372032559808514L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long((-496L));
      range1.equals(range_Builder0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854774167L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-9223372036854775795L));
      range_Builder2.contractBegin(1L);
      range_Builder1.copy();
      range_Builder2.shift(4294967295L);
      Long long1 = new Long((-40L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.of(1303L, 9223372036854774167L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Range range3 = Range.of(3044L);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1557374914310463
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      Range.Builder range_Builder2 = range_Builder0.shift(4294967295L);
      range_Builder2.build();
      Long long0 = new Long(4294967295L);
      range1.isSubRangeOf(range0);
      range_Builder1.expandEnd(9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder(427L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5008480558274213
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-1741L));
      Long long0 = new Long(417L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-193L), 255L);
      range_Builder0.contractBegin((-1741L));
      range_Builder0.expandEnd(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2532L));
      range_Builder1.shift((-2532L));
      range_Builder1.expandBegin(255L);
      Long long1 = new Long(1975L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(886L, 4294967296L);
      range_Builder1.expandEnd((-1741L));
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(1694L, 4294967295L);
      range1.intersection(range0);
      range1.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3096811598127185
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      Range range0 = range_Builder2.build();
      assertFalse(range0.isEmpty());
      
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      Long long0 = new Long((-2147483641L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range1.equals((Object) null);
      assertSame(range1, range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.996635675779214
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range range0 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range range1 = range_Builder4.build();
      range_Builder2.build();
      Object object0 = new Object();
      range1.equals(object0);
      range_Builder0.expandEnd((-128L));
      Range.Builder range_Builder5 = new Range.Builder(4294967295L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.250556051994103
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.of(4294967039L);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.copy();
      Range range0 = range_Builder0.build();
      range_Builder1.build();
      Long long0 = new Long(127L);
      range_Builder1.expandEnd(0L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder1.shift(1086L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.118626888992665
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(4294967039L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long((-1113L));
      range0.equals((Object) null);
      range_Builder0.expandEnd((-2509L));
      range_Builder0.expandBegin((-2173L));
      range_Builder0.shift((-950L));
      Long long1 = new Long((-2509L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2685033305041302
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.equals((Object) null);
      Range range1 = Range.of(9223372034707292161L);
      Range range2 = Range.of(9223372036854775560L);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(9223372034707292161L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8414600378375487
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372036854775560L);
      boolean boolean0 = range0.startsBefore(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.248532234522519
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.of((-2296L), (-2296L));
      Range range0 = Range.of(9223372034707292161L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.203451010192645
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      range_Builder0.copy();
      Range range0 = range_Builder1.build();
      range_Builder0.shift(9223372036854775807L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      Object object0 = new Object();
      range2.equals(range1);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range0.equals(long0);
      range_Builder2.expandEnd(4027L);
      Range.Builder range_Builder3 = new Range.Builder(4027L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3336858495190693
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      range_Builder5.copy();
      range_Builder1.build();
      range_Builder1.build();
      range_Builder2.build();
      Object object0 = new Object();
      range0.equals(object0);
      range_Builder5.expandEnd((-2147483641L));
      Range.Builder range_Builder6 = new Range.Builder(32767L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.045038297295873
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = (-32768L);
      Range.of(9223372034707292161L);
      Range range0 = Range.of(9223372036854775560L);
      range0.split(9223372036854775560L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775560L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775560 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6246339636570886
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range0 = Range.of((-128L), 152L);
      Range.Builder range_Builder1 = new Range.Builder(1386L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-128L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-128L), 152L);
      boolean boolean0 = range1.equals(range2);
      Range.of(1L);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.isEmpty());
      
      Range range3 = range1.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      
      boolean boolean1 = range2.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range2.equals((Object)range3));
      assertTrue(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.212171379561746
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      Range range1 = range_Builder1.build();
      range_Builder6.build();
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.062463874143123
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.equals(range1);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3606322210485304
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      Range range0 = range_Builder2.build();
      Range range1 = range_Builder1.build();
      range_Builder1.build();
      Long long0 = new Long((-2147483641L));
      range1.equals(long0);
      Range.Builder range_Builder4 = range_Builder3.expandEnd(188L);
      Range range2 = range_Builder4.build();
      Range range3 = range_Builder2.build();
      boolean boolean0 = range1.equals(range_Builder1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder5 = range_Builder0.expandEnd(0L);
      Object object0 = new Object();
      range3.equals(range_Builder5);
      assertSame(range3, range0);
      assertNotSame(range3, range2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3131023848065775
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = (-567L);
      Range range0 = Range.of((-1741L), 453L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3498130334349314
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range.of(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0890552998538734
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372034707292161L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.build();
      range_Builder1.expandEnd(249L);
      range_Builder2.expandEnd(249L);
      range_Builder0.expandEnd(65536L);
      // Undeclared exception!
      try { 
        Range.of(2100L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(9223372036854775560L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.100152607077001
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65535L, 9223372034707292161L);
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder3.build();
      range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder4.build();
      Object object0 = new Object();
      range0.equals(object0);
      range_Builder1.expandEnd(0L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.78238202818857
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1696L), 4294967295L);
      range0.getEnd();
      List<Range> list0 = range0.split(4294967294L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(248L);
      range0.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem1);
      range0.intersects(range1);
      range0.isSubRangeOf(range0);
      long long0 = 9223372036854775807L;
      range0.split(9223372036854775807L);
      String string0 = "/$>GFqX6St";
      // Undeclared exception!
      try { 
        Range.parseRange("/$>GFqX6St");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse /$>GFqX6St into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3487828287924
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 10L, 10L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder3.shift(9223372036854775807L);
      Range range1 = range_Builder3.build();
      range_Builder3.build();
      Object object0 = new Object();
      range1.equals(range0);
      range_Builder2.expandEnd(0L);
      range0.equals(object0);
      range_Builder2.expandEnd(52918704L);
      Range.Builder range_Builder4 = new Range.Builder(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4819838966893406
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      range_Builder0.build();
      range_Builder0.shift((-32768L));
      range_Builder0.shift(32767L);
      Range.Builder range_Builder1 = new Range.Builder((-32768L), (-32768L));
      Range range1 = Range.of(392L, 65560L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      range0.intersection(range1);
      Range range2 = Range.of((-32768L));
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854772764L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854772763 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2759132737343526
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder3.build();
      Long long1 = new Long(9223372036854775807L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.872327462020019
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 897L, 897L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range_CoordinateSystem0);
      range0.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.239493573434635
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      range_Builder0.shift(32767L);
      Range.Builder range_Builder1 = new Range.Builder(32767L);
      Range.Builder range_Builder2 = new Range.Builder((-32768L), (-32768L));
      Range.of(392L, 65560L);
      Range range1 = Range.of(65535L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.422649365455091
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 10L, 10L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 1013L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      range1.startsBefore(range2);
      range0.startsBefore(range2);
      range1.intersects(range2);
      range0.intersects(range2);
      Object object0 = new Object();
      range0.equals(object0);
      range0.complement(range2);
      long long0 = 189L;
      // Undeclared exception!
      try { 
        Range.of(411L, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.0326730531644306
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      range_Builder1.shift(778L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3498130334349314
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder4.expandEnd(727L);
      Range.Builder range_Builder5 = new Range.Builder(727L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder0.shift(1884L);
      Long long1 = new Long((-2147483641L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(range_Builder3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.0970595116798196
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2944L);
      range_Builder0.build();
      range_Builder0.shift(2944L);
      Range.Builder range_Builder1 = new Range.Builder(2944L);
      Range.Builder range_Builder2 = new Range.Builder(2944L, 9223372036854775807L);
      Range.of(392L, 7211250088305L);
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.03514143279237
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.build();
      range_Builder2.build();
      range_Builder1.build();
      Object object0 = new Object();
      Range.Builder range_Builder3 = range_Builder0.expandEnd((-411L));
      range_Builder1.build();
      // Undeclared exception!
      try { 
        range_Builder3.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5429132061839597
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of(9223372034707292161L);
      Range range2 = Range.ofLength(9223372034707292161L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      range1.getBegin();
      List<Range> list0 = range1.complement(range2);
      assertFalse(range2.isEmpty());
      assertTrue(list0.contains(range1));
      
      Range range3 = range0.intersection(range1);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 9223372036854775559L;
      Range.of(9223372036854775559L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 127L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775559L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.0373858108201603
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 3044L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(3044L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(32768L, 777L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-897L), 2409L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1741L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 897L, 897L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.12862094998063
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      Long long0 = new Long(256L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3657352598673445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder((-32768L), 9223372034707292161L);
      range_Builder2.expandEnd(249L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range1 = Range.of(9223372034707292161L);
      range1.complement(range0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(1634L, 249L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5563315543488825
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(9223372034707292161L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range1 = range_Builder2.build();
      range_Builder0.expandEnd((-32768L));
      Range range2 = range1.intersection(range0);
      range_Builder1.shift(3675L);
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range2.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.501123518371007
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractBegin(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      Range range2 = Range.of(777L, 1627L);
      Range range3 = Range.of(2147483647L);
      range3.complement(range2);
      Range range4 = range2.intersection(range1);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertTrue(range4.isEmpty());
      
      Range range5 = Range.of(32768L);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      Range range6 = range_Builder0.build();
      //  // Unstable assertion: assertNotSame(range6, range0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2991434386172305
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(2147483647L);
      Object object0 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.Comparators.values();
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.498379106807994
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(3047L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(775L, 775L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersection(range2);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6230659718431593
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 100L);
      Range range1 = Range.of(1L, 0L);
      Range range2 = Range.of((-897L));
      List<Range> list0 = range2.split(1L);
      range1.complementFrom(list0);
      range2.startsBefore(range0);
      Range range3 = Range.ofLength(31872L);
      range3.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.248491018360708
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      range_Builder1.build();
      range_Builder6.build();
      Long long0 = new Long(2147483647L);
      range_Builder2.expandEnd((-1883L));
      Range.Builder range_Builder7 = new Range.Builder(7211250088305L);
      Range.Builder range_Builder8 = new Range.Builder();
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of((-159L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.6178388474058534
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Range range1 = Range.ofLength(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(3087L);
      range2.complement(range1);
      range1.startsBefore(range0);
      Range range3 = Range.ofLength(32767L);
      range3.endsBefore(range0);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.of(9223364915799000698L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.1860089723735188
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 897L, 897L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.intersection(range0);
      Range.of(453L, 999L);
      long long0 = range0.getLength();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.1693943135429787
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long long0 = new Long(1061L);
      Range range0 = Range.of((-9223372036854775804L), (-3343L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-9223372036854775804L));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.16897247470061
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.138467277902039
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.ofLength(1076L);
      Range range0 = Range.of(1076L, 1076L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.7657684880659623
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      Range.of(range_CoordinateSystem0, (-1860L), 2147483647L);
      List<Range> list0 = range2.split(2147483647L);
      range2.iterator();
      Range range3 = Range.of(0L, 2147483647L);
      List<Range> list1 = range3.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      
      range3.complement(range2);
      range3.startsBefore(range1);
      Range range4 = Range.ofLength(0L);
      range0.endsBefore(range3);
      boolean boolean1 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertTrue(boolean1);
      
      Range.of((-112L), (-112L));
      boolean boolean2 = range3.isSubRangeOf(range4);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      String string0 = range3.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 2147483646 ]/0B", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3664100760763804
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 1861L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift((-1L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-1543L), 2147483647L);
      range_Builder1.copy();
      Range range1 = range_Builder1.build();
      range_Builder0.expandBegin((-5620L));
      Range range2 = range_Builder5.build();
      Long long0 = new Long((-746L));
      Range.Builder range_Builder6 = new Range.Builder(range2);
      range_Builder6.expandEnd((-1883L));
      Range.Builder range_Builder7 = new Range.Builder(1861L);
      Range.Builder range_Builder8 = new Range.Builder();
      range_Builder6.contractEnd((-1L));
      Range.Builder range_Builder9 = range_Builder6.expandBegin(3765L);
      range_Builder9.shift((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder1);
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.014630013724273
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.build();
      range1.equals(range0);
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder3 = new Range.Builder(0L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.288072440711205
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder2.shift((-128L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(7206955121010L, 7211250088305L);
      range_Builder6.copy();
      range_Builder1.build();
      range_Builder3.build();
      Long long0 = new Long((-1L));
      range_Builder2.expandEnd(7206955121010L);
      Range.Builder range_Builder7 = new Range.Builder(9223364804129851028L);
      Range.Builder range_Builder8 = range_Builder7.expandBegin(2147483647L);
      range_Builder8.shift(1086L);
      boolean boolean0 = range0.equals(range_Builder5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.2736808758757383
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(252L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range_Builder1.expandEnd((-416L));
      Object object6 = new Object();
      Object object7 = new Object();
      Range range1 = Range.of(252L, 1436L);
      Range range2 = range0.intersection(range1);
      Object object8 = new Object();
      boolean boolean0 = range2.endsBefore(range1);
      assertTrue(range2.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.510444218103903
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range2.equals(long0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder3 = new Range.Builder(1L);
      range0.spliterator();
      Range.Builder range_Builder4 = range_Builder2.expandBegin(1543L);
      range_Builder4.expandBegin(1L);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      range0.asRange();
      Range.of(1L, 6284L);
      // Undeclared exception!
      try { 
        Range.parseRange("Space Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Space Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.413728520415479
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 1579L);
      Range.Builder range_Builder1 = new Range.Builder(29L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder0.build();
      Long long0 = new Long((-2534L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder((-2859L), 1367L);
      range_Builder4.build();
      range_Builder4.expandEnd((-2147483658L));
      Range.Builder range_Builder5 = new Range.Builder(521L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder5.expandBegin(1367L);
      range_Builder2.shift(0L);
      Object object0 = new Object();
      Range.Builder range_Builder7 = new Range.Builder(9223372036854775807L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
      
      Range range2 = range_Builder1.build();
      assertNotSame(range2, range1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0454729546677033
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long((-1047L));
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.ofLength(4352L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.411765967401743
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483632L), (-2147483632L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      range_Builder3.expandEnd(727L);
      Range.Builder range_Builder4 = new Range.Builder(727L);
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder1.expandBegin(727L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.908925258728743
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = Range.of(928L);
      Range range2 = Range.of(256L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.657648361633333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      Range.of((-515L), 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.parseRange("Y|c9-9u8L'nPv");
      range0.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.380208977181973
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      range1.intersection(range0);
      long long0 = 1069L;
      Range range2 = Range.ofLength(1069L);
      Range range3 = Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem1);
      range2.startsBefore(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.03514143279237
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder3.build();
      range_Builder3.build();
      range1.equals(range0);
      range_Builder2.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder(0L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.9285155697720837
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 10L, 10L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder3.build();
      range_Builder3.build();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      Range.Builder range_Builder4 = range_Builder2.expandEnd(0L);
      Range range2 = range_Builder0.build();
      range_Builder0.build();
      range1.equals(range_Builder4);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder5 = new Range.Builder(10L);
      boolean boolean1 = range2.equals(range0);
      assertSame(range2, range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.1602537043543175
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3047L, 3047L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 238L, 1452L);
      Range.Builder range_Builder3 = new Range.Builder(1452L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = range_Builder0.copy();
      Range range0 = range_Builder3.build();
      range_Builder5.build();
      range_Builder4.build();
      range0.equals("");
      range_Builder2.expandEnd(238L);
      Range.Builder range_Builder6 = new Range.Builder(1452L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.315039415189899
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L, 1L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.627608354513822
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(0L);
      Range.of((-1627L), 1618L);
      Range range3 = Range.of(1414L, 1618L);
      Range range4 = range2.intersection(range3);
      assertTrue(range4.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.204124054355305
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-502L));
      range_Builder0.build();
      range_Builder0.shift(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.ofLength(2346L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("\"6?T>juG\"%^+`@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.\"6?T>juG\"%^+`@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.1445801968384903
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      long long0 = 2147483647L;
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      long long1 = 7211250088305L;
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      range_Builder0.shift(265L);
      // Undeclared exception!
      try { 
        range_Builder6.contractBegin(65536L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.549999729076472
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      range_Builder4.expandEnd(727L);
      Range.Builder range_Builder5 = new Range.Builder(727L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder1.expandBegin(727L);
      range_Builder4.shift(1L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong("", (-1976L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9216576564967065
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      List<Range> list0 = range0.split(22L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3964386174376404
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      range_Builder1.build();
      Range range0 = range_Builder6.build();
      Long long0 = new Long(2147483647L);
      range_Builder2.expandEnd((-1883L));
      Range.Builder range_Builder7 = new Range.Builder(7211250088305L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder8 = new Range.Builder();
      range_Builder8.expandBegin((-32768L));
      range_Builder7.shift(3044L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5738799970084405
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(1086L);
      List<Range> list0 = range0.split(98L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.265605167125207
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3044L, 3044L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(3044L);
      Range.of(range_CoordinateSystem0, 3044L, 32768L);
      Range range1 = Range.of(3044L);
      range1.complement(range0);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.444202655698681
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-126L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(4819L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 4819L);
      range0.complement(range1);
      range0.intersection(range1);
      Range range2 = Range.of(13024L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.031514648030985
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder3.shift(2147483646L);
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.5583273281120196
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-126L), 9223372036854743289L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(4819L);
      Range range1 = Range.of(4075L);
      range0.complement(range1);
      range0.intersection(range1);
      Range range2 = Range.of(13024L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.215871484586937
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(0L, 4294967295L);
      Range range0 = range_Builder4.build();
      range_Builder2.build();
      Object object0 = new Object();
      range0.equals(object0);
      range_Builder0.expandEnd((-128L));
      Range.Builder range_Builder5 = new Range.Builder(4294967282L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3373590559809343
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 3085L, 3085L);
      Range.of(range_CoordinateSystem0, (-897L), 3085L);
      Range.of(4294967295L, 4294967295L);
      long long0 = new Long(3085L);
      Range.of((-1724L));
      // Undeclared exception!
      try { 
        Range.of((-897L), (-1859L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.219590061638439
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range range3 = range_Builder3.build();
      range_Builder0.shift(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range3.intersects(range1);
      assertSame(range3, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.098367396963841
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      Range.of((-1857L), 2080L);
      Long long0 = new Long((-1857L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-1857L), (-1857L));
      // Undeclared exception!
      try { 
        Range.of(4294967294L, 1549L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.3257167430357915
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      range_Builder2.build();
      Range range0 = range_Builder1.build();
      range_Builder1.build();
      Long long0 = new Long((-2147483641L));
      range0.equals(long0);
      Range.Builder range_Builder4 = range_Builder3.expandEnd(188L);
      range_Builder4.build();
      range_Builder2.build();
      range0.equals(range_Builder1);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder5 = new Range.Builder(485L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.422649365455091
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder4.expandEnd(727L);
      Range.Builder range_Builder5 = new Range.Builder(727L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder1.expandBegin(727L);
      range_Builder4.shift(1L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong("", (-1976L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.0146356756514834
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(255L);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      range0.getBegin();
      range_Builder1.build();
      range_Builder2.shift((-128L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(22L);
      long long0 = range0.getLength();
      assertEquals(22L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.501474862610577
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.ofLength(9223372034707292161L);
      Range range2 = Range.ofLength(9223372034707292161L);
      range1.equals(range2);
      long long0 = range2.getBegin();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      Range range3 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.532042742505944
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      Range range2 = range_Builder4.build();
      range_Builder4.expandEnd(719L);
      Range.Builder range_Builder5 = new Range.Builder(719L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder1.expandBegin(719L);
      range_Builder4.shift(9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder7 = new Range.Builder(719L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483648L), long1);
      assertSame(range1, range2);
      
      Range range3 = range_Builder5.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.349990147764081
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3047L, 3047L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(3047L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      range_Builder1.build();
      Range range0 = range_Builder6.build();
      Long long0 = new Long(2147483647L);
      range_Builder2.contractEnd((-1883L));
      Range.Builder range_Builder7 = range_Builder6.expandBegin(7211250088318L);
      range_Builder2.expandEnd((-1883L));
      Range.Builder range_Builder8 = new Range.Builder(7211250088318L);
      Range.Builder range_Builder9 = new Range.Builder();
      range_Builder9.expandBegin((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder10 = new Range.Builder(range0);
      assertFalse(range_Builder10.equals((Object)range_Builder7));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.3389266537852587
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3047L, 3047L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(3047L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      range_Builder1.build();
      Range range0 = range_Builder6.build();
      Long long0 = new Long(2147483647L);
      range_Builder2.contractEnd((-1883L));
      Range.Builder range_Builder7 = range_Builder6.expandBegin(7211250088305L);
      range_Builder2.expandEnd((-1883L));
      Range.Builder range_Builder8 = new Range.Builder(7211250088305L);
      Range.Builder range_Builder9 = new Range.Builder();
      range_Builder9.expandBegin((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder10 = new Range.Builder(range0);
      assertFalse(range_Builder10.equals((Object)range_Builder7));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.5320122569966004
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      range_Builder1.build();
      range_Builder6.build();
      Long long0 = new Long(2147483647L);
      range_Builder2.contractEnd((-1883L));
      range_Builder6.expandBegin(7211250088305L);
      range_Builder2.expandEnd((-1883L));
      Range.Builder range_Builder7 = new Range.Builder();
      Range.of((-31990L), 7211250088305L);
      Range range1 = Range.of((-4791L), (-1883L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.2946849344639157
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1994L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.042475876211333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.of((-128L));
      long long0 = (-1L);
      Range.of((-128L), (-1L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("3H#nUdo<^b::da&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.3H#nUdo<^b::da&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.9699165027121315
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-5102L), (-1426L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getEnd();
      long long0 = 1618L;
      // Undeclared exception!
      try { 
        Range.of(1618L, (-5102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1829170467218675
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of((-1737L));
      // Undeclared exception!
      try { 
        Range.of(2117L, (-1317L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1028108080271113
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.build();
      range_Builder2.shift((-128L));
      long long1 = (-1L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder();
      long long2 = 7206955121010L;
      long long3 = 7211250088305L;
      Range.Builder range_Builder5 = new Range.Builder(7206955121010L, 7211250088305L);
      Range.Builder range_Builder6 = new Range.Builder();
      Range.Builder range_Builder7 = null;
      try {
        range_Builder7 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1080L, 1080L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(1080L, long0);
      
      Range range1 = Range.of(1080L, 1080L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.0920621767534113
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1860L), 2147483647L);
      Range range0 = Range.of((-112L), (-112L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.9668267598925535
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(255L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range_Builder0.shift(255L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      boolean boolean0 = range0.equals(long0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Dl'BNK>MIar-H", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Dl'BNK>MIar-H into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.246802689847489
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      Long long0 = new Long(255L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of((-32768L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.298053423284618
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(0L);
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(3044L, 32768L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.292060485714982
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of((-32768L), (-32768L));
      String string0 = null;
      Range.of(9223372034707292161L);
      Range.of(9223372036854775560L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1174464733433953
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Object object0 = new Object();
      range_Builder0.shift(4294967295L);
      Long long0 = new Long(255L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-2716L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.471946033663411
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.of(9223372036854775559L);
      Range.of(836L, 5401L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 255L, 9223372036854772764L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1L, 836L);
      Range.of(0L);
      Range.of((-128L), 3671L);
      // Undeclared exception!
      try { 
        Range.of(5401L, (-628L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.738867755702291
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.ofLength(4294967039L);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(1L, 1L);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range3 = range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(1L);
      Range.ofLength(9223364825604687503L);
      range2.startsBefore(range0);
      range0.isEmpty();
      range3.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.1730158542022333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(1404L);
      range0.isEmpty();
      Range range1 = Range.ofLength(1404L);
      range0.isSubRangeOf(range1);
      long long0 = 102L;
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(102L, (-1724L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.3162927694333497
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(9223372036854775560L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32798L, 9223372036854775560L);
      range1.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(255L);
      Object object1 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(313L);
      Object object2 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.098084894116239
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.split(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 268L, 4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.ofLength(65536L);
      range0.split(9223372036854774167L);
      range0.split(9223372036854774167L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.1028108080271117
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range0 = range_Builder2.build();
      range_Builder2.shift((-128L));
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      Long long0 = new Long(262L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.804092856670984
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range.of(0L);
      Range range2 = Range.of(2366L);
      Range range3 = Range.of((-1336L));
      List<Range> list0 = range1.complement(range3);
      range2.intersection(range0);
      Range.of(1279L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("~mJj&yu}X;p:\"q", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ~mJj&yu}X;p:\"q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.61495098428351
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Range range1 = Range.of((-32768L), 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(3087L);
      range2.complement(range1);
      range1.startsBefore(range0);
      Range range3 = Range.ofLength(32767L);
      range3.endsBefore(range0);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.of(9223364915799000698L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.549999729076472
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483641L), (-2147483641L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder4.expandEnd(727L);
      Range.Builder range_Builder5 = new Range.Builder(727L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder4.shift(1L);
      Object object0 = new Object();
      Long long1 = new Long(727L);
      Object object1 = new Object();
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      range0.intersection(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.0708722659071896
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range range1 = range_Builder1.build();
      range_Builder3.shift(2147483646L);
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.2905023549825994
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L, 3044L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder((-31990L), (-2318L));
      Range.Builder range_Builder6 = range_Builder2.copy();
      Range range1 = range_Builder1.build();
      range_Builder6.build();
      Long long0 = new Long(2147483647L);
      range_Builder2.expandEnd((-1883L));
      Range.Builder range_Builder7 = new Range.Builder(7211250088305L);
      Range.Builder range_Builder8 = new Range.Builder();
      range_Builder8.expandBegin((-32768L));
      range1.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.226922291194512
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), 0L);
      Range.of((-98302L));
      long long0 = 3615L;
      // Undeclared exception!
      try { 
        Range.of(3615L, (-98302L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1860L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.93706654550099
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Long long0 = new Long(417L);
      Long long1 = new Long(1975L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(886L, 4294967296L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of(1694L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(718L);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.071080362736029
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = 255L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(695L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.4766094396479823
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(255L, 255L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      range0.isEmpty();
      Range range2 = range1.intersection(range0);
      Range range3 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range4 = range_Builder0.build();
      range0.complement(range2);
      boolean boolean0 = range0.startsBefore(range2);
      Range range5 = Range.ofLength(3733L);
      range1.isEmpty();
      range5.startsBefore(range0);
      Range range6 = Range.ofLength(4294967295L);
      range5.endsBefore(range2);
      range6.isSubRangeOf(range2);
      Range.ofLength(4294967295L);
      boolean boolean1 = range4.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      range1.iterator();
      assertSame(range1, range3);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.094479122532141
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1080L);
      long long0 = range0.getEnd();
      assertEquals(1080L, long0);
      
      long long1 = new Long(1080L);
      Range range1 = Range.of(range_CoordinateSystem0, 1080L, 1080L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.9306768766483344
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(255L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range0 = Range.ofLength(1022L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.1443140113476007
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }
}
