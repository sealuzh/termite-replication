/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 18:03:38 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.303986791496551
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.poll();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offer(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      linkedList0.add(nucleotide1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add(nucleotide0);
      linkedList1.retainAll(set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec1.isGap(byteArray0, 0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-2146395762));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (-326));
      byte[] byteArray1 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-2146395762));
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 5);
      defaultNucleotideCodec2.isGap(byteArray1, (-574));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-42);
      byteArray2[1] = (byte) (-42);
      byteArray2[2] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, 2141934594);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.254941749522969
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.poll();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offer(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      linkedList0.add(nucleotide1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add(nucleotide0);
      linkedList1.retainAll(set0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertEquals(2, list0.size());
      
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2146395762));
      byte[] byteArray2 = new byte[4];
      int int1 = new Integer(0);
      int int2 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      assertEquals(1, int2);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray1, 575);
      assertFalse(boolean0);
      assertEquals(4, byteArray1.length);
      
      int int3 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 144);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)11, (byte)0}, byteArray0);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.328994904961946
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.poll();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offer(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      linkedList0.add(nucleotide1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add(nucleotide0);
      linkedList1.retainAll(set0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2146395762));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-326));
      byte[] byteArray1 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec1.isGap(byteArray1, (-574));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-42);
      byteArray1[0] = (byte)118;
      byteArray2[2] = (byte)118;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor(byteArray2, 2141934594);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.201574532456365
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.poll();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offer(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      linkedList0.addFirst(nucleotide2);
      linkedList0.add(nucleotide1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add(nucleotide0);
      linkedList1.retainAll(set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide3 = Nucleotide.Unknown;
      int int0 = new Integer((-2146395762));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 2);
      byte[] byteArray1 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-2146395762));
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 5);
      defaultNucleotideCodec2.isGap(byteArray1, (-550));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-42);
      byteArray1[0] = (byte)118;
      byteArray2[2] = (byte)118;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, 2141934594);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0554878070033995
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-55);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.poll();
      linkedList1.iterator();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList1.offer(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Byte byte1 = new Byte((byte)64);
      linkedList1.removeLastOccurrence(byte1);
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      linkedList1.add(nucleotide1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.retainAll(set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte) (-55));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.28721610330696
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offer(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      linkedList0.add(nucleotide1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add(nucleotide0);
      linkedList1.retainAll(set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      Integer integer0 = new Integer((-2146395762));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-2146395762));
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 5);
      assertEquals(2, int0);
      
      defaultNucleotideCodec0.isGap(byteArray1, (-574));
      byte[] byteArray2 = new byte[3];
      byteArray2[2] = (byte) (-43);
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-326));
      assertEquals((-326), int1);
      assertEquals(4, byteArray1.length);
      
      int int2 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte) (-43));
      assertEquals(6, byteArray0.length);
      assertEquals(3, int2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3766265400583184
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-114);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-5359));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.279031166355172
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.poll();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      linkedList0.add(nucleotide1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) set0;
      objectArray0[1] = (Object) set0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) linkedList0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add(nucleotide0);
      linkedList1.retainAll(set0);
      Nucleotide nucleotide2 = Nucleotide.NotThymine;
      linkedList1.addFirst(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide3 = Nucleotide.Unknown;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-2146395762));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (-326));
      byte[] byteArray1 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-2146395762));
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 5);
      defaultNucleotideCodec2.isGap(byteArray1, (-574));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-42);
      byteArray2[1] = (byte)118;
      byteArray2[2] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, 2141934594);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      byte byte1 = (byte)10;
      byteArray0[1] = (byte)10;
      Range range0 = Range.of((long) (byte)125);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5789749288238677
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte)84;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte) (-126));
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)87;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)87;
      byteArray2[2] = (byte) (-124);
      byteArray2[3] = (byte) (-124);
      byteArray2[4] = (byte) (-126);
      byteArray2[5] = (byte)84;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1514021000852046
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray2);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 8);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec5.isGap(byteArray1, 14);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-32)}, byteArray1);
      assertFalse(boolean0);
      
      Nucleotide nucleotide2 = Nucleotide.Gap;
      defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec6.toString(byteArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(668, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)32;
      byte byte1 = (byte) (-114);
      byte byte2 = (byte)0;
      byte byte3 = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)69;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)69, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4327375754038973
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.iterator();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList1.offer(nucleotide0);
      linkedList1.add(nucleotide0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.sort((Comparator<? super Nucleotide>) null);
      linkedList2.offer(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      nucleotide1.getAllPossibleAmbiguities();
      linkedList1.add(nucleotide1);
      linkedList2.retainAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-557261312));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 3);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (-326));
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray2, 749);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.encode(nucleotide0);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray2, 2);
      Range range0 = Range.of((long) 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)114;
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-55));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1811998830306742
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 67);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4L, 4L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(2147483647L, 2147483647L);
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem3);
      Range.of(range_CoordinateSystem2, 4L, (long) 67);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray1, range0);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem4, (long) 67, 1662L);
      Range.of(range_CoordinateSystem0, (long) 67, 1662L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2987L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9119661911697396
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = 1662L;
      long long1 = 1L;
      long long2 = 1939L;
      Range range0 = Range.of(1662L, 1939L);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = 4L;
      Range range1 = Range.of(range_CoordinateSystem1, 4L, 14L);
      range1.getBegin();
      Range range2 = Range.ofLength(4L);
      range1.endsBefore(range2);
      Range range3 = Range.of(4L);
      String string0 = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)15;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0, range3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(349, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0529511989086973
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      defaultNucleotideCodec0.encode(8, iterator0);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-119);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 10L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 10 corresponds to encodedIndex 9  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 67;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 67);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4L, 4L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((long) 67, (long) 67);
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.of(range_CoordinateSystem2, 4L, (long) 67);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(range_CoordinateSystem2, (long) 67, 1662L);
      Range range2 = Range.of(range_CoordinateSystem0, (long) 67, 1662L);
      Range range3 = Range.ofLength(67);
      Range.ofLength(67);
      range3.endsBefore(range0);
      range3.complement(range2);
      long long0 = (-1L);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte) (-67);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0554878070033995
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 67);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Range.ofLength(3480L);
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      predicate1.and(predicate3);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Object object1 = new Object();
      predicate4.test(object1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.removeIf(predicate2);
      Comparator<Nucleotide> comparator0 = (Comparator<Nucleotide>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Range.of(255L, 255L);
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals("V", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0554878070033995
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 57);
      assertFalse(boolean0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Range.ofLength(3480L);
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      Predicate<Object> predicate3 = predicate0.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Object object1 = new Object();
      predicate4.test(object1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.removeIf(predicate2);
      Comparator<Nucleotide> comparator0 = (Comparator<Nucleotide>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Range.of(255L, 255L);
      String string0 = defaultNucleotideCodec1.toString(byteArray1);
      assertEquals("V", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.042141810852304
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.iterator();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList1.offer(nucleotide0);
      linkedList0.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      linkedList1.add(nucleotide1);
      nucleotide0.getAllPossibleAmbiguities();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.removeFirstOccurrence("K73fu}\"%5bq2LY");
      linkedList2.addAll((Collection<? extends String>) linkedList3);
      Predicate.isEqual((Object) null);
      linkedList0.retainAll(linkedList2);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1375731712));
      assertEquals(2, int0);
      
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide2 = Nucleotide.Keto;
      Range.ofLength(2);
      Range.of((-1L));
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals("CH", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)98;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-55);
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3871531676184436
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)91;
      byteArray1[5] = (byte)91;
      defaultNucleotideCodec0.iterator(byteArray1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)91);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.encode(nucleotide0);
      DefaultNucleotideCodec.values();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide0);
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      linkedList0.addFirst(nucleotide1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(9, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-55);
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte) (-40);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-55));
      Byte byte1 = new Byte((byte) (-56));
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-55), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byte byte1 = (byte)56;
      byteArray0[1] = (byte)56;
      byte byte2 = (byte)2;
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-55L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -55
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0953385264113553
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)7;
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-46);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2059);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 5);
      assertEquals(5, int0);
      
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-48)}, byteArray1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec2.decode(byteArray0, 1L);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = 1662L;
      long long1 = 1L;
      long long2 = 1939L;
      Range range0 = Range.of(1662L, 1939L);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = 4L;
      Range range1 = Range.of(range_CoordinateSystem1, 4L, 14L);
      Range range2 = Range.ofLength(4L);
      range1.endsBefore(range2);
      Range range3 = Range.ofLength(15L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString(range_CoordinateSystem2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)84;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6370698227701928
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Integer integer0 = new Integer((byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte)0;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)52;
      byteArray2[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0302538907749335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.iterator();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)109;
      Range range0 = Range.of((-3375L), (-3375L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-82);
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)10, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 67);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4L, 4L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((long) 67, (long) 67);
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.of(range_CoordinateSystem2, 4L, (long) 67);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(range_CoordinateSystem2, (long) 67, 1662L);
      Range range2 = Range.of(range_CoordinateSystem0, (long) 67, 1662L);
      range2.getBegin();
      Range range3 = Range.ofLength(67);
      range3.endsBefore(range0);
      range3.complement(range2);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byte byte0 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-51);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-55));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1542L, (-1704L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      int int0 = 2299;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6739548615091966
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 811);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-85));
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-48);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte) (-44), 158L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-55);
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-56);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte) (-56);
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte) (-55);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, 67);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4L, 4L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((long) 67, (long) 67);
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range2 = Range.of(range_CoordinateSystem2, 4L, (long) 67);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(range_CoordinateSystem2, (long) 67, 1662L);
      Range range3 = Range.of(range_CoordinateSystem0, (long) 67, 1662L);
      Range range4 = Range.ofLength(67);
      Range.ofLength(1840L);
      range3.isSubRangeOf(range2);
      range4.endsBefore(range0);
      range4.complement(range3);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 4 .. 66 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-55);
      byteArray0[0] = (byte) (-55);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 759L, 759L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.580614066385335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)6;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      int int0 = new Byte((byte)6);
      byteArray0[2] = (byte) (-44);
      byte byte1 = (byte)42;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)65;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)7);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6063676846108654
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-96);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)14;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4026604904230435
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.628060008682927
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)31;
      byte byte1 = (byte)77;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-3774), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)42;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8381597883911174
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)32;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)98);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 32 corresponds to encodedIndex 20  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)38;
      byte byte0 = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      int int0 = (-2837);
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-3334));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.046553971778276
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.iterator();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList1.offerLast(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList1.offer(nucleotide0);
      linkedList0.sort((Comparator<? super Nucleotide>) null);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      linkedList1.add(nucleotide1);
      nucleotide0.getAllPossibleAmbiguities();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) nucleotide0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.addAll((Collection<? extends String>) linkedList3);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      Predicate.isEqual((Object) null);
      predicate1.or(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate1.and(predicate2);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.and(predicate1);
      linkedList2.removeIf(predicate3);
      linkedList0.retainAll(linkedList2);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1375731712));
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      Nucleotide nucleotide2 = Nucleotide.Keto;
      Range range0 = Range.ofLength(3);
      Range range1 = Range.of((-1L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.580614066385335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)6);
      byteArray0[0] = (byte)6;
      byte byte0 = (byte)47;
      byteArray0[1] = (byte)47;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)86;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-2017063338L), long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.84056219079352
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Range.ofLength(3480L);
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      Predicate<Object> predicate3 = predicate0.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Object object1 = new Object();
      predicate4.test(object1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.removeIf(predicate2);
      Comparator<Nucleotide> comparator0 = (Comparator<Nucleotide>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range.of(255L, 255L);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 57);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte)124;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 1820);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.510404533308129
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.674156220683624
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte)125);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.816028897382805
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)108;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1469, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
