/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:47:13 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3683L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate1.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate9.and(predicate5);
      predicate2.negate();
      predicate2.and(predicate6);
      Predicate<Object> predicate10 = predicate0.or(predicate7);
      predicate2.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) predicate0);
      Integer integer0 = new Integer(957);
      Predicate.isEqual((Object) integer0);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate11 = predicate9.and(predicate1);
      predicate11.or(predicate8);
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.poll();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("[%eozO?54e}JXfX(Y");
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerLast((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      linkedList2.containsAll(linkedList4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode0);
      linkedList3.parallelStream();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add("[%eozO?54e}JXfX(Y");
      linkedList7.add((Locale.LanguageRange) null);
      linkedList7.add((Locale.LanguageRange) null);
      linkedList7.removeFirstOccurrence((Object) null);
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) linkedList2, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      linkedList8.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Mo7~gj|!4#',n", "offset can not start beyond current length (%d) : %d");
      hashMap0.clear();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("phd to copy can not be null", (String) null);
      hashMap1.values();
      hashMap0.put("BYTE", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.put((String) null, "Gb7j");
      hashMap1.put((String) null, "Gb7j");
      hashMap4.put("!)", "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd((String) null, (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      Map<String, String> map0 = defaultPhd0.getComments();
      List<PhdReadTag> list0 = defaultPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0, (List<PhdWholeReadItem>) null, list0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put("Mo7~gj|!4#',n", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.put("c]~q=Q#", "");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.values();
      hashMap2.put("chromatogram can not be null", "chromatogram can not be null");
      HashMap<String, String> hashMap5 = new HashMap<String, String>(331);
      hashMap3.put("Mo7~gj|!4#',n", "singleNucleotide can not be null");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Locale locale0 = new Locale("[%eozO?54e}JXfX(Y");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.poll();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("[%eozO?54e}JXfX(Y");
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerLast((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      linkedList2.containsAll(linkedList4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode0);
      linkedList3.parallelStream();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) set0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList8.add((Locale.LanguageRange) null);
      linkedList8.removeFirstOccurrence((Object) null);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) linkedList2, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      linkedList10.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Locale locale0 = new Locale("[%eozO?54e}JXfX(Y");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.poll();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("[%eozO?54e}JXfX(Y");
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerLast((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      linkedList2.containsAll(linkedList4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode0);
      linkedList3.parallelStream();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) set0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList8.add((Locale.LanguageRange) null);
      linkedList8.removeFirstOccurrence((Object) null);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      linkedList6.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) linkedList2, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      linkedList10.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      phdBuilder0.peaks((PositionSequence) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate2.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate9);
      predicate10.and(predicate8);
      predicate10.and(predicate5);
      predicate2.negate();
      predicate2.and(predicate6);
      Predicate<Object> predicate11 = predicate0.or(predicate7);
      predicate2.negate();
      Predicate.isEqual((Object) predicate11);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate13.or(predicate9);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("XQ;B", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate2.test("[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = predicate1.or(predicate0);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate7);
      predicate8.and(predicate4);
      predicate2.negate();
      predicate2.and(predicate5);
      predicate0.or(predicate6);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate0);
      predicate9.and(predicate10);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("QYGF3MU;Cu", nucleotideSequence0, qualitySequence0);
      phdBuilder0.copy();
      System.setCurrentTimeMillis(3681L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("k=", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.poll();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("k=");
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerLast((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      List<Locale> list0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList5, (Collection<Locale>) list0, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list2);
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      linkedList2.containsAll(linkedList4);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList7, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add("k=");
      linkedList8.add((Locale.LanguageRange) null);
      linkedList8.add((Locale.LanguageRange) null);
      linkedList8.removeFirstOccurrence((Object) null);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList7, (Collection<String>) linkedList2, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      linkedList5.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertFalse(phdBuilder1.equals((Object)phdBuilder0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = defaultPhdWholeReadItem0.getLines();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[8];
      List<String> list2 = defaultPhdWholeReadItem4.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(list2);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem5;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem6 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem6;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem3;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem2;
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1114795332719003
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate1.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate9.and(predicate5);
      predicate6.test((Object) null);
      predicate2.negate();
      predicate2.and(predicate6);
      Predicate<Object> predicate10 = predicate0.or(predicate7);
      predicate2.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) predicate0);
      Integer integer0 = new Integer(957);
      Predicate.isEqual((Object) integer0);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate11 = predicate9.and(predicate1);
      predicate11.or(predicate8);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("XQ;B", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks(957, 957);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(19, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      predicate1.negate();
      predicate6.test(predicate5);
      Predicate<Object> predicate7 = predicate1.or(predicate0);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate7);
      predicate8.and(predicate4);
      predicate2.negate();
      Predicate<Object> predicate9 = predicate2.and(predicate5);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate10 = predicate0.or(predicate6);
      predicate2.negate();
      Predicate.isEqual((Object) predicate10);
      predicate4.or(predicate9);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("XQ;B", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-1535), (-675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("sequence and qualities have unequal lengths", "ea,{");
      hashMap0.put("e5xM/", "ea,{");
      hashMap0.put("e5xM/", (String) null);
      hashMap0.clear();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put("YSjB^", (String) null);
      hashMap2.values();
      hashMap0.put("8uO4~M", "ea,{");
      HashMap<String, String> hashMap3 = new HashMap<String, String>(331);
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap2.put("_9'{", (String) null);
      hashMap0.put("`/8@kT!~]@EcJERA", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap5.put("FiY", (String) null);
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder(")H/`4vKCt{>axJ:[]", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap6);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Locale locale0 = new Locale("[%eozO?54e}JXfX(Y");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.poll();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("[%eozO?54e}JXfX(Y");
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      linkedList2.containsAll(linkedList4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode0);
      linkedList3.parallelStream();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) set0);
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList8.add((Locale.LanguageRange) null);
      linkedList8.removeFirstOccurrence((Object) null);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) linkedList2, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      linkedList10.parallelStream();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("[%eozO?54e}JXfX(Y", phd0.getId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(linkedList2);
      List<String> list1 = defaultPhdWholeReadItem3.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[4];
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem5;
      linkedList3.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("[%eozO?54e}JXfX(Y", phd0.getId());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = defaultPhdWholeReadItem0.getLines();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[8];
      List<String> list2 = defaultPhdWholeReadItem4.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(list2);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem5;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem6 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem6;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem3;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[5] = defaultPhdWholeReadItem4;
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem1;
      defaultPhdWholeReadItemArray0[7] = defaultPhdWholeReadItem1;
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("id can not be null", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      PhdBuilder phdBuilder2 = phdBuilder1.wholeReadItems(linkedList0);
      assertSame(phdBuilder2, phdBuilder1);
      assertSame(phdBuilder2, phdBuilder0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate4.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate9.and(predicate5);
      predicate6.or(predicate1);
      predicate7.negate();
      predicate2.and(predicate6);
      predicate2.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate11.or(predicate8);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("XQ;B", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate1.negate();
      predicate5.test(predicate4);
      predicate7.test(predicate0);
      Predicate<Object> predicate8 = predicate1.or(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate9.and(predicate5);
      predicate2.negate();
      predicate2.and(predicate6);
      Predicate<Object> predicate10 = predicate0.or(predicate7);
      Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) predicate0);
      Integer integer0 = new Integer(957);
      Predicate.isEqual((Object) integer0);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate11 = predicate9.and(predicate1);
      predicate11.or(predicate8);
      System.setCurrentTimeMillis(3681L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap3.clear();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.values();
      hashMap2.put("chromatogram can not be null", "chromatogram can not be null");
      HashMap<String, String> hashMap5 = new HashMap<String, String>(331);
      hashMap3.put("Mo7~gj|!4#',n", "singleNucleotide can not be null");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      System.setCurrentTimeMillis(331);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(3681L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[%eozO?54e}JXfX(Y");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate3.negate();
      predicate1.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate0);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate7);
      predicate8.and(predicate4);
      predicate2.negate();
      predicate2.and(predicate5);
      Predicate<Object> predicate9 = predicate0.or(predicate6);
      predicate2.negate();
      Predicate.isEqual((Object) predicate9);
      System.setCurrentTimeMillis((-1027L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0, 3622);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.put("c]~q=Q#", "");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap3.values();
      hashMap2.put("chromatogram can not be null", "chromatogram can not be null");
      HashMap<String, String> hashMap5 = new HashMap<String, String>(331);
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
