/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 14:15:32 GMT 2020
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6691825225299436
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("B=<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("^QTx*xD`.6W)<Q|-X", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(18);
      simpleNode0.setIdentifier("#");
      StringWriter stringWriter2 = new StringWriter(18);
      stringWriter2.write("j(zZ<|c");
      stringWriter2.flush();
      simpleNode0.dump("#", stringWriter2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringWriter2.write(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#");
      stringWriter2.close();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode1.jjtAddChild((Node) null, 0);
      Node[] nodeArray0 = new Node[0];
      simpleNode1.children = nodeArray0;
      simpleNode1.dump("}", stringWriter1);
      simpleNode1.dump("^QTx*xD`.6W)<Q|-X", stringWriter1);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)5;
      byte byte0 = (byte)109;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode((-672));
      simpleNode0.dump(" : ", (Writer) null);
      simpleNode0.dump("?f|Zv13SRE", (Writer) null);
      simpleNode0.setIdentifier("<LETTER>");
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("abstract");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.509137344082687
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(18);
      String string0 = ")";
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(")");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump(")", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 3293;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3293);
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">7");
      arrayList0.add("3");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      arrayList0.add("<<");
      simpleNode0.dump("YE", stringWriter0);
      assertEquals("<ImplementsList>\n  <identifier>3</identifier>\n  <identifier>*lshft</identifier>\n</ImplementsList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("!");
      StringWriter stringWriter0 = new StringWriter(18);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump(">", stringWriter1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(51);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream2, 51);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream2, 51);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.623848004006291
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("<", stringWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("<");
      stringBuffer0.reverse();
      simpleNode0.toString();
      int int1 = 31;
      CharBuffer.allocate(31);
      int int2 = (-1073741822);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1073741822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 9;
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("<");
      String string0 = "*lt";
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("*lt", stringWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(9);
      stringBuffer0.reverse();
      simpleNode0.toString();
      CharBuffer.allocate(30);
      int int1 = (-1073741822);
      CharBuffer.allocate(27);
      StringBuffer stringBuffer2 = new StringBuffer("EnumBody : <");
      StringBuffer stringBuffer3 = new StringBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'a';
      charArray0[2] = '/';
      charArray0[3] = 'K';
      charArray0[4] = 'S';
      charArray0[5] = 'x';
      charArray0[6] = '}';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 40, (-1073741822));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("<=");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<=");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.close();
      simpleNode0.dump((String) null, stringWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<=");
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("<=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-96);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.close();
      simpleNode0.dump(">", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*le</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<=");
      FileDescriptor fileDescriptor2 = new FileDescriptor();
      String string0 = simpleNode0.toString();
      assertEquals("InstanceOfExpression : <=", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1275347898191255
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParser javaParser0 = new JavaParser("</");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 18);
      simpleNode0.setIdentifier("{");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "</");
      stringWriter1.getBuffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.close();
      simpleNode0.dump("rTfHbZ6:^", stringWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",(");
      stringWriter0.append((CharSequence) "{");
      assertEquals("</<VariableDeclaratorId>\n</VariableDeclaratorId>\n{", stringWriter0.toString());
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileDescriptor fileDescriptor2 = new FileDescriptor();
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : {", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(21);
      SimpleNode simpleNode1 = new SimpleNode(21);
      simpleNode1.jjtAddChild(simpleNode0, 21);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode1.parent = (Node) simpleNode1;
      simpleNode1.jjtSetParent(simpleNode0);
      SimpleNode simpleNode2 = new SimpleNode((-1075826773));
      simpleNode2.parent = (Node) simpleNode1;
      simpleNode0.id = 1745;
      simpleNode2.jjtGetNumChildren();
      simpleNode1.jjtGetParent();
      SimpleNode simpleNode3 = (SimpleNode)simpleNode2.jjtGetParent();
      simpleNode3.parent = simpleNode2.parent;
      simpleNode2.jjtAddChild(simpleNode1, 1745);
      simpleNode2.jjtGetChild(0);
      int int0 = simpleNode2.jjtGetNumChildren();
      assertEquals(1746, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7668382315802122
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("~");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter1 = new StringWriter();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.close();
      simpleNode0.dump(">>", stringWriter1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add(">>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      simpleNode0.toString("~");
      simpleNode0.dump("~", stringWriter0);
      assertEquals("<ImplementsList>\n  <identifier>~</identifier>\n  <identifier>*rshft</identifier>\n</ImplementsList>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("YH)/#`x");
      assertEquals("YH)/#`xImplementsList : ~ : >>", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "  <identifier");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "'");
      stringWriter2.write("");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtAddChild(simpleNode1, 624);
      simpleNode1.jjtSetParent(simpleNode0);
      // Undeclared exception!
      simpleNode1.dump(">>", stringWriter1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "&&");
      stringWriter0.close();
      simpleNode0.dump("&&", stringWriter0);
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.append((CharSequence) "&&");
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      stringWriter2.close();
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 70, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7031315809655685
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.toString((String) null);
      StringWriter stringWriter0 = new StringWriter(18);
      simpleNode0.setIdentifier("&");
      simpleNode0.dump("&", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = (-1588);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      JavaParser javaParser0 = new JavaParser("\"try\"");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1184);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter(1);
      StringReader stringReader0 = new StringReader(";");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser2 = new JavaParser(javaParser0.token_source);
      Token token0 = javaParser2.token;
      javaParser2.token_source.TokenLexicalActions(token0);
      JavaParser javaParser3 = new JavaParser(javaParserTokenManager1);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 0);
      simpleNode0.dump("\"static\"", stringWriter0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(21);
      SimpleNode simpleNode1 = new SimpleNode(21);
      simpleNode1.jjtAddChild(simpleNode0, 21);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode1.parent = (Node) simpleNode1;
      simpleNode1.jjtSetParent(simpleNode0);
      SimpleNode simpleNode2 = new SimpleNode((-1075826773));
      simpleNode2.parent = (Node) simpleNode1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode1.identifiers = arrayList0;
      simpleNode0.id = 1745;
      simpleNode2.jjtGetNumChildren();
      simpleNode1.jjtGetParent();
      SimpleNode simpleNode3 = (SimpleNode)simpleNode2.jjtGetParent();
      simpleNode3.parent = simpleNode2.parent;
      simpleNode2.jjtAddChild(simpleNode1, 1745);
      simpleNode2.jjtGetChild(0);
      int int0 = simpleNode2.jjtGetNumChildren();
      assertEquals(1746, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Object object0 = new Object();
      function4.apply(object0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function4);
      function5.andThen((Function<? super String, ? extends String>) function0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      arrayList0.replaceAll(unaryOperator0);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      stringWriter0.flush();
      arrayList1.add("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"]\"");
      simpleNode0.dump("", stringWriter0);
      assertEquals("<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      function2.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Integer> function3 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ? extends Integer>) function3);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function4).apply(any());
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      function5.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function7 = function6.andThen((Function<? super String, ? extends String>) unaryOperator3);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      function8.apply(function7);
      function8.apply(function5);
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      function6.andThen((Function<? super String, ? extends String>) function8);
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function6);
      function6.andThen((Function<? super String, ? extends String>) function0);
      arrayList0.replaceAll(unaryOperator0);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      stringWriter0.flush();
      arrayList1.add(">=");
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("*lshft");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      JavaParser javaParser1 = new JavaParser(bufferedInputStream0);
      simpleNode0.jjtAddChild(simpleNode0, 1);
      simpleNode0.jjtGetChild(1);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      JavaParser javaParser2 = new JavaParser(stringReader0);
      assertFalse(javaParser2.equals((Object)javaParser0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Object object0 = new Object();
      function5.apply(stringWriter0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function5);
      function5.andThen((Function<? super String, ? extends String>) function0);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator0.compose((Function<? super String, ? extends String>) function6);
      arrayList0.replaceAll(unaryOperator0);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      stringWriter0.flush();
      arrayList1.add("}");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";(wY_|xF7!.");
      simpleNode0.dump("\"]\"", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      stringWriter0.append('u');
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-3039));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-3039));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      char[] charArray0 = new char[0];
      StringBuffer stringBuffer0 = new StringBuffer();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode1.parent = (Node) simpleNode0;
      simpleNode1.jjtSetParent(simpleNode0);
      SimpleNode simpleNode2 = new SimpleNode((-1075826773));
      simpleNode2.parent = (Node) simpleNode0;
      simpleNode0.id = 1745;
      simpleNode2.jjtGetNumChildren();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode1.jjtGetParent();
      nodeArray0[2] = simpleNode1.parent;
      nodeArray0[3] = simpleNode2.parent;
      SimpleNode simpleNode3 = (SimpleNode)simpleNode2.jjtGetParent();
      simpleNode3.parent = simpleNode2.parent;
      nodeArray0[4] = (Node) simpleNode3;
      simpleNode2.children = nodeArray0;
      simpleNode2.jjtAddChild(simpleNode1, 1745);
      simpleNode2.jjtGetChild(0);
      int int0 = simpleNode2.jjtGetNumChildren();
      assertEquals(1746, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4280557692325653
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";");
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      stringReader0.read(charArray0);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 53);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('P');
      simpleNode0.dump(">7", stringWriter0);
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild(nodeArray0[1], 10);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(nodeArray0[7], (-233));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -233
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      unaryOperator0.apply(object0);
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Object object1 = new Object();
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 565);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('X');
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump(">=", stringWriter0);
      simpleNode0.jjtGetChild(0);
      assertEquals(566, simpleNode0.jjtGetNumChildren());
      
      SimpleNode simpleNode1 = new SimpleNode(75);
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      function1.compose((Function<? super String, ?>) unaryOperator0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function6 = function5.andThen((Function<? super String, ? extends String>) function4);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<String, String> function8 = unaryOperator4.andThen((Function<? super String, ? extends String>) function7);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      function4.andThen((Function<? super String, ? extends String>) function8);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.replaceAll(unaryOperator3);
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      stringWriter0.flush();
      arrayList2.add((String) null);
      // Undeclared exception!
      try { 
        simpleNode0.dump("EnmBody", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemInUtil.addInputLine("*rshft");
      JavaParser javaParser0 = new JavaParser("~ig\"D10");
      javaParser0.getToken(1172);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 113);
      Node[] nodeArray0 = new Node[8];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 7);
      JavaParser javaParser1 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, (-2736));
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      Node node0 = simpleNode1.parent;
      nodeArray0[5] = null;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('.');
      stringWriter0.write(1);
      // Undeclared exception!
      try { 
        simpleNode0.dump("~ig\"D10", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.add(">=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      simpleNode0.dump("oH7/IBG]@~l", stringWriter0);
      assertEquals("<ImplementsList>\n  <identifier>*ge</identifier>\n</ImplementsList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 434;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser("&&");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1801251892));
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1801251892));
      simpleNode0.jjtAddChild(simpleNode1, 18);
      SimpleNode simpleNode2 = new SimpleNode((-1801251892));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode2, (-1798));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1798
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1074787335));
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9459347757561138
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "  <identifier");
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("Na.p\"U>Z\"EBka");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      Token token0 = javaParser0.token;
      javaParserTokenManager0.TokenLexicalActions(token0);
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager1);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 0);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode2.dump("InstanceOhExpression", stringWriter2);
      CharBuffer.wrap((CharSequence) "Na.p\"U>Z\"EBka");
      javaParser1.MultiplicativeExpression();
      simpleNode2.toString();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      stringReader0.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4742);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0000");
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '&';
      charArray0[2] = '\\';
      charArray0[3] = 'n';
      stringReader0.read(charArray0);
      charArray0[4] = '>';
      charArray0[5] = 'k';
      charArray0[6] = ')';
      charArray0[7] = '2';
      charArray0[8] = ' ';
      stringReader0.read(charArray0);
      SimpleNode simpleNode0 = new SimpleNode((-1436197818));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1436197818
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("*lshft");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      JavaParser javaParser1 = new JavaParser(bufferedInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, 10);
      simpleNode1.jjtAddChild(simpleNode0, 1);
      simpleNode1.jjtGetChild(1);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtOpen();
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'F';
      charArray0[2] = 'B';
      stringReader0.read(charArray0);
      JavaParser javaParser2 = new JavaParser(stringReader0);
      Node node0 = javaParser2.currNode;
      assertNull(node0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtAddChild((Node) null, 2);
      simpleNode0.jjtGetChild(1);
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-397));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -397
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function0);
      function1.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Integer> function2 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function6 = function5.andThen((Function<? super String, ? extends String>) function4);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends String>) function6);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function7);
      function5.andThen((Function<? super String, ? extends String>) function6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.replaceAll(unaryOperator4);
      stringWriter0.flush();
      arrayList0.add("EnmBody");
      SimpleNode simpleNode0 = new SimpleNode(364);
      // Undeclared exception!
      try { 
        simpleNode0.toString("ZB[efN`]]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 364
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'M';
      charArray0[2] = 'Y';
      charArray0[3] = 'd';
      charArray0[4] = 'Z';
      charArray0[5] = '9';
      charArray0[6] = '~';
      charArray0[7] = '6';
      charArray0[8] = 'm';
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
