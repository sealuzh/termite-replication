/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:44:33 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0974033676362451
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      StringWriter stringWriter0 = new StringWriter(2858);
      StringReader stringReader0 = new StringReader("9");
      StringWriter stringWriter1 = stringWriter0.append('{');
      stringWriter1.write((-958));
      stringWriter1.write("");
      stringWriter1.flush();
      simpleNode0.setIdentifier("<=");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.skip(2858);
      mockFileInputStream0.release();
      mockFileInputStream0.getChannel();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<PushbackInputStream> enumeration2 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<PushbackInputStream> enumeration3 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      mockFileInputStream0.release();
      JavaParser javaParser0 = new JavaParser(sequenceInputStream3);
      JavaParser javaParser1 = new JavaParser(stringReader0);
      simpleNode0.dump(" .8I {MH5,;v", stringWriter0);
      simpleNode0.dump(" .8I {MH5,;v", stringWriter0);
      assertEquals("{\uFC42<RelationalExpression>\n  <identifier>*le</identifier>\n</RelationalExpression>\n<RelationalExpression>\n  <identifier>*le</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("RelationalExpression : <=", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(">=");
      StringBuffer stringBuffer0 = new StringBuffer(">=");
      StringBuffer stringBuffer1 = new StringBuffer();
      char[] charArray0 = new char[6];
      stringBuffer1.trimToSize();
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'M';
      StringBuffer stringBuffer2 = stringBuffer1.append(charArray0);
      stringBuffer2.chars();
      StringBuffer stringBuffer3 = new StringBuffer(37);
      stringBuffer3.codePoints();
      StringBuffer stringBuffer4 = new StringBuffer();
      StringBuffer stringBuffer5 = new StringBuffer();
      StringBuffer stringBuffer6 = new StringBuffer(37);
      stringBuffer3.chars();
      StringBuffer stringBuffer7 = new StringBuffer();
      StringBuffer stringBuffer8 = new StringBuffer(">=");
      stringBuffer8.chars();
      stringBuffer0.chars();
      StringBuffer stringBuffer9 = new StringBuffer(">=");
      StringBuffer stringBuffer10 = new StringBuffer();
      StringBuffer stringBuffer11 = new StringBuffer(">=");
      simpleNode0.dump("WL", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*ge</identifier>\n</NameList>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("WL");
      assertEquals("WLNameList : >=", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("<");
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<PushbackInputStream> enumeration2 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.mark(0);
      Enumeration<PushbackInputStream> enumeration3 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      sequenceInputStream2.available();
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<PushbackInputStream> enumeration4 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      Enumeration<PushbackInputStream> enumeration5 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration5).hasMoreElements();
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      Enumeration<PushbackInputStream> enumeration6 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration6);
      sequenceInputStream4.close();
      sequenceInputStream3.markSupported();
      Enumeration<InputStream> enumeration7 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration7).hasMoreElements();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(enumeration7);
      sequenceInputStream5.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream7);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream1);
      sequenceInputStream5.available();
      bufferedInputStream1.mark((-1913020746));
      SequenceInputStream sequenceInputStream8 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream3);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit : <", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-107);
      byteArray0[3] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("y#6i9ZZ$B$^");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.markSupported();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 964);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OP|S[3#p ");
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      SystemInUtil.addInputLine("OP|S[3#p ");
      stringReader0.reset();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("OP|S[3#p ", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((byte)118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7445901885653372
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("y#6i9ZZ$B$^");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.markSupported();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 964);
      simpleNode1.parent = (Node) simpleNode0;
      simpleNode0.jjtAddChild(simpleNode1, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OP|S[3#p ");
      SystemInUtil.addInputLine("OP|S[3#p ");
      stringReader0.reset();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("OP|S[3#p ", stringWriter0);
      SimpleNode simpleNode2 = (SimpleNode)simpleNode1.jjtGetParent();
      simpleNode0.jjtAddChild(simpleNode1, (byte)123);
      simpleNode0.jjtGetChild((byte)118);
      simpleNode2.dump("instanceof", stringWriter0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(124, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0682924484507355
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      char[] charArray0 = new char[2];
      StringWriter stringWriter0 = new StringWriter('\u0082');
      stringWriter0.write(18);
      stringWriter0.write(",");
      charArray0[1] = '\u0082';
      simpleNode0.setIdentifier(",");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<PushbackInputStream> enumeration2 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      sequenceInputStream3.read(byteArray0, (int) (byte)17, 3754);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream1);
      sequenceInputStream4.markSupported();
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration4);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream5);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream3);
      bufferedInputStream1.mark((byte)17);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-3701L));
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream3, pipedInputStream0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("D~uN0n/ 1<ptrwY8|Q", stringWriter0);
      assertEquals("\u0012,<VariableDeclaratorId>\n  <identifier>,</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : ,", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0682924484507355
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      char[] charArray0 = new char[2];
      StringWriter stringWriter0 = new StringWriter('\u0082');
      stringWriter0.write(18);
      stringWriter0.write("9");
      charArray0[1] = '\u0082';
      simpleNode0.setIdentifier("9");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream0.close();
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream1.mark((-38420141));
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream3);
      simpleNode0.dump("9", stringWriter0);
      assertEquals("\u00129<VariableDeclaratorId>\n  <identifier>9</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : 9", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0700510288097067
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier("9");
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.release();
      mockFileInputStream0.getChannel();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      simpleNode0.id = 48;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-2643L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 48);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("EENo5=d${XK", stringWriter0);
      simpleNode1.jjtAddChild(simpleNode0, 803);
      stringWriter0.flush();
      simpleNode0.jjtAddChild(simpleNode1, 0);
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      simpleNode0.dump("9", stringWriter0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'M';
      charArray0[2] = 'Y';
      charArray0[3] = 'd';
      simpleNode0.jjtSetParent(simpleNode0);
      charArray0[4] = 'Z';
      charArray0[5] = '9';
      charArray0[6] = '~';
      charArray0[1] = '6';
      charArray0[8] = '~';
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(22);
      String string0 = "9";
      simpleNode0.setIdentifier("9");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 93;
      StringWriter stringWriter1 = new StringWriter();
      String string1 = "Literal";
      StringReader stringReader0 = new StringReader("Literal");
      String string2 = "{";
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("&&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier("Y");
      StringWriter stringWriter0 = new StringWriter(2858);
      StringReader stringReader0 = new StringReader("9");
      StringReader stringReader1 = new StringReader(" .8I {MH5,;v");
      JavaParser javaParser0 = new JavaParser(stringReader1);
      StringReader stringReader2 = new StringReader("9");
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '9';
      charArray0[5] = '>';
      stringReader2.read(charArray0);
      stringReader2.reset();
      stringReader2.skip(0L);
      StringReader stringReader3 = new StringReader(":_0J3@bq*oj!lFA");
      StringReader stringReader4 = new StringReader("+4j\"OJCWG&d");
      stringReader4.read();
      StringReader stringReader5 = new StringReader("8E]whlw,ST(\"+4-tA");
      stringReader4.ready();
      stringReader1.read();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader5.mark(2858);
      stringReader1.mark(2858);
      StringReader stringReader6 = new StringReader(" .8I {MH5,;v");
      StringReader stringReader7 = new StringReader("RelationalEhxpressio");
      stringReader7.mark(43);
      simpleNode0.dump("8E]whlw,ST(\"+4-tA", stringWriter0);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      StringBuffer stringBuffer0 = new StringBuffer("<<");
      StringBuffer stringBuffer1 = stringBuffer0.append(true);
      stringBuffer0.ensureCapacity(0);
      StringBuffer stringBuffer2 = new StringBuffer(0);
      StringBuffer stringBuffer3 = new StringBuffer("<<");
      stringBuffer2.append("c*!$rCHV[,;UACk{V");
      stringBuffer1.ensureCapacity(0);
      StringBuffer stringBuffer4 = new StringBuffer();
      char[] charArray0 = new char[3];
      StringBuffer stringBuffer5 = stringBuffer3.append(charArray0);
      StringBuffer stringBuffer6 = new StringBuffer("<<");
      stringBuffer6.reverse();
      stringBuffer6.append(charArray0);
      StringBuffer stringBuffer7 = new StringBuffer("<<");
      StringBuffer stringBuffer8 = new StringBuffer("c*!$rCHV[,;UACk{V");
      StringBuffer stringBuffer9 = new StringBuffer("<<");
      StringBuffer stringBuffer10 = new StringBuffer();
      stringBuffer2.chars();
      StringBuffer stringBuffer11 = new StringBuffer(0);
      StringBuffer stringBuffer12 = new StringBuffer();
      stringBuffer12.chars();
      stringBuffer5.chars();
      StringBuffer stringBuffer13 = new StringBuffer("il|1GWsJt>B_");
      StringBuffer stringBuffer14 = new StringBuffer();
      StringBuffer stringBuffer15 = new StringBuffer(851);
      simpleNode0.dump("\"native\"", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lshft</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("<<");
      assertEquals("<<CompilationUnit : <<", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(93);
      StringReader stringReader0 = new StringReader("Literal");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "{");
      stringWriter0.write("N[-h8W|+@B2m~pIQ.");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(10);
      StringWriter stringWriter5 = new StringWriter();
      stringWriter5.close();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = new StringWriter(2263);
      stringWriter2.getBuffer();
      StringWriter stringWriter8 = stringWriter7.append((CharSequence) "N[-h8W|+@B2m~pIQ.");
      StringWriter stringWriter9 = new StringWriter();
      simpleNode0.dump(">kIrsc~>HY", stringWriter8);
      assertEquals("N[-h8W|+@B2m~pIQ.<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter8.toString());
      assertEquals("N[-h8W|+@B2m~pIQ.<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter7.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8001573041913385
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter(2335);
      StringWriter stringWriter1 = new StringWriter(10);
      StringReader stringReader0 = new StringReader(">");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter2 = new StringWriter();
      StringReader stringReader1 = new StringReader("&&");
      stringReader0.read();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.read(byteArray0, 2335, 3226);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream2.read();
      simpleNode0.dump("PQtWF", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*gt</identifier>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0783934585517456
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">=");
      SimpleNode simpleNode0 = new SimpleNode(10);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("~");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringWriter0.append((CharSequence) ">=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      StringReader stringReader0 = new StringReader("L2<,,J@I%p8jsB/\"*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      simpleNode0.dump("~", stringWriter0);
      assertEquals(">=<EnumConstant>\n  <identifier>*gt</identifier>\n  <identifier>~</identifier>\n</EnumConstant>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : > : ~", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7048561013731942
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter(2335);
      stringWriter0.write(2530);
      StringBuffer stringBuffer0 = new StringBuffer("</identifs[ier>");
      simpleNode0.id = 10;
      StringBuffer stringBuffer1 = new StringBuffer("&");
      StringBuffer stringBuffer2 = new StringBuffer("</identifs[ier>");
      stringBuffer2.append(true);
      char[] charArray0 = new char[1];
      stringBuffer2.ensureCapacity((-2477));
      stringWriter0.write("</");
      stringBuffer2.append(charArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[0] = 'a';
      stringBuffer2.chars();
      stringBuffer2.append(charArray0);
      stringBuffer2.append((float) 10);
      StringBuffer stringBuffer3 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer2);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write("&");
      simpleNode0.dump(":", stringWriter2);
      simpleNode0.toString("(?vdV:;EgoP");
      simpleNode0.toString("Z/Cye7uE=TKa");
      simpleNode0.dump(";", stringWriter1);
      assertEquals("\u09E2</</identifs[ier>true\u0000a10.0<EnumConstant>\n</EnumConstant>\n", stringWriter1.toString());
      assertEquals("\u09E2</</identifs[ier>true\u0000a10.0<EnumConstant>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5421123099033152
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter(37);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<PushbackInputStream> enumeration2 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration3);
      sequenceInputStream0.mark(2327);
      Enumeration<PushbackInputStream> enumeration4 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration4);
      Enumeration<PushbackInputStream> enumeration5 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration5);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte) (-11);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-45);
      sequenceInputStream0.read(byteArray1, (int) (byte)0, (-372314826));
      sequenceInputStream4.skip(1795L);
      sequenceInputStream4.read(byteArray0);
      sequenceInputStream1.mark(2048);
      Enumeration<InputStream> enumeration6 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration6);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream1);
      bufferedInputStream1.mark((-10400458));
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream3);
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream6, bufferedInputStream0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<NameList>\n</NameList>\n", stringWriter0.toString());
      
      simpleNode0.toString("<=");
      String string0 = simpleNode0.toString();
      assertEquals("NameList : ", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.release();
      mockFileInputStream0.close();
      mockFileInputStream0.getChannel();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      SimpleNode simpleNode0 = new SimpleNode((-122607198));
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode1 = new SimpleNode((-157));
      StringBuffer stringBuffer0 = new StringBuffer(10);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode1;
      simpleNode1.children = nodeArray0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        simpleNode1.dump("Bwq|kdL", stringWriter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3423697177621
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("y#6i9ZZ$B$^");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.markSupported();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 964);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OP|S[3#p ");
      SystemInUtil.addInputLine("OP|S[3#p ");
      stringReader0.reset();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("OP|S[3#p ", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((byte)118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.30835984793397
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*lt");
      StringReader stringReader0 = new StringReader("y#6i9ZZ$B$^");
      JavaParser javaParser0 = new JavaParser("OP|S[3#p ");
      stringReader0.markSupported();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 2);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 964);
      simpleNode0.jjtAddChild(simpleNode1, 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OP|S[3#p ");
      SystemInUtil.addInputLine("OP|S[3#p ");
      stringReader0.reset();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("OP|S[3#p ", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((byte)118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2213836861256668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">=");
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(10);
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(10);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">MusUFlPS|, (\"P");
      StringWriter stringWriter2 = new StringWriter(48);
      StringReader stringReader1 = new StringReader("8E]whlw,ST(\"+4-tA");
      stringReader1.read();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader2 = new StringReader("8E]whlw,ST(\"+4-tA");
      stringReader2.mark(1255);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringReader2.mark(117);
      StringReader stringReader3 = new StringReader(">MusUFlPS|, (\"P");
      stringReader2.mark(56);
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*gt</identifier>\n</EnumConstant>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("9");
      assertEquals("9EnumConstant : >", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4118090007716961
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("y#6i9ZZ$B$^");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.markSupported();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 2);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 964);
      simpleNode0.jjtAddChild(simpleNode1, 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OP|S[3#p ");
      SystemInUtil.addInputLine("OP|S[3#p ");
      stringReader0.reset();
      simpleNode0.jjtAddChild(simpleNode1, (byte)123);
      assertEquals(124, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9487605215810104
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringReader stringReader0 = new StringReader("{");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 71);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode1.children = nodeArray0;
      simpleNode1.jjtAddChild(simpleNode0, 1);
      simpleNode1.jjtAddChild(simpleNode0, 1);
      try { 
        javaParser0.Name();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: {
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 66, 66, 66);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 688);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetChild(6);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1518), 373, 373);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1518));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(13);
      String string0 = "ForStatement";
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringReader stringReader0 = new StringReader("ForStatement");
      stringReader0.read();
      stringReader0.mark(51);
      SimpleNode simpleNode1 = new SimpleNode(13);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump("ForStatement", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (byte) (-50));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("</identifs[ier");
      StringBuffer stringBuffer1 = new StringBuffer("&");
      StringBuffer stringBuffer2 = new StringBuffer(2335);
      StringBuffer stringBuffer3 = stringBuffer2.append(true);
      char[] charArray0 = new char[3];
      stringBuffer3.ensureCapacity(2335);
      StringBuffer stringBuffer4 = new StringBuffer();
      stringBuffer4.appendCodePoint(2335);
      stringBuffer4.append(charArray0);
      StringBuffer stringBuffer5 = stringWriter0.getBuffer();
      stringBuffer5.append(charArray0);
      StringBuffer stringBuffer6 = stringBuffer2.append(charArray0);
      StringBuffer stringBuffer7 = new StringBuffer();
      stringBuffer2.chars();
      stringBuffer6.append((float) 10);
      StringBuffer stringBuffer8 = new StringBuffer();
      stringWriter0.write("</identifs[ier");
      simpleNode0.dump("&", stringWriter0);
      assertEquals("\u0000\u0000\u0000</identifs[ier", stringWriter0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringReader stringReader0 = new StringReader("*le");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 59);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      SimpleNode simpleNode1 = new SimpleNode(1);
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -676
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3104907257139957
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 36);
      javaParser0.RelationalExpression();
      StringWriter stringWriter0 = new StringWriter(79);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('~');
      simpleNode0.dump("OU*", stringWriter1);
      try { 
        javaParser0.EnumDeclaration((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      StringReader stringReader1 = new StringReader(">");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'I';
      charArray0[2] = '\'';
      charArray0[3] = 'm';
      stringReader1.read(charArray0);
      stringReader1.read();
      stringReader1.read();
      stringReader1.ready();
      stringReader1.read();
      char[] charArray1 = new char[0];
      stringReader1.markSupported();
      stringReader1.read(charArray1);
      SimpleNode simpleNode0 = new SimpleNode((-1));
      stringReader1.skip(0L);
      stringReader1.read(charArray1);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(37);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<PushbackInputStream> enumeration1 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration2);
      sequenceInputStream0.mark(2327);
      Enumeration<PushbackInputStream> enumeration3 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      sequenceInputStream0.skip((-327L));
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration3);
      Enumeration<PushbackInputStream> enumeration4 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration4);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream3.skip(1795L);
      sequenceInputStream3.read(byteArray0);
      sequenceInputStream0.mark(37);
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2327, 37);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.available();
      bufferedInputStream0.mark((-66863044));
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream2);
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream6, sequenceInputStream1);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream4);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 2327);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2327
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("CompilationUnit");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-82961201));
      simpleNode0.jjtSetParent((Node) null);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(21);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter(93);
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      charArray0[5] = '%';
      stringWriter0.write(charArray0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter4 = new StringWriter('%');
      StringWriter stringWriter5 = new StringWriter(21);
      stringWriter4.write("<<");
      stringWriter4.write(">=");
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = new StringWriter(21);
      StringWriter stringWriter8 = new StringWriter();
      stringWriter2.close();
      StringWriter stringWriter9 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("w<4JRW@(?DJlJvpaD");
      StringWriter stringWriter10 = new StringWriter(787);
      stringWriter10.write("w<4JRW@(?DJlJvpaD");
      StringWriter stringWriter11 = new StringWriter();
      stringWriter9.getBuffer();
      StringWriter stringWriter12 = new StringWriter(787);
      StringWriter stringWriter13 = new StringWriter();
      StringWriter stringWriter14 = stringWriter0.append((CharSequence) stringBuffer0);
      StringWriter stringWriter15 = new StringWriter();
      simpleNode0.dump("KT\"}N.6b3O", stringWriter14);
      assertEquals("%%%%%%%%\u0000w<4JRW@(?DJlJvpaD<MethodDeclaration>\n  <identifier>*lshft</identifier>\n</MethodDeclaration>\n", stringWriter14.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("MethodDeclaration : <<", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("9<");
      StringBuffer stringBuffer0 = new StringBuffer("9<");
      StringBuffer stringBuffer1 = stringBuffer0.append(true);
      stringBuffer0.ensureCapacity(0);
      StringBuffer stringBuffer2 = new StringBuffer(0);
      StringBuffer stringBuffer3 = stringBuffer2.append(false);
      stringBuffer1.ensureCapacity(0);
      StringBuffer stringBuffer4 = new StringBuffer(0);
      StringBuffer stringBuffer5 = stringWriter0.getBuffer();
      stringBuffer5.ensureCapacity((-114307594));
      stringBuffer1.appendCodePoint(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      StringBuffer stringBuffer6 = stringBuffer3.append(charArray0);
      StringBuffer stringBuffer7 = new StringBuffer(0);
      StringBuffer stringBuffer8 = new StringBuffer("9<");
      StringBuffer stringBuffer9 = new StringBuffer('{');
      StringBuffer stringBuffer10 = new StringBuffer('{');
      stringBuffer8.append(charArray0);
      StringBuffer stringBuffer11 = new StringBuffer("9<");
      StringBuffer stringBuffer12 = new StringBuffer(0);
      StringBuffer stringBuffer13 = new StringBuffer();
      stringBuffer11.chars();
      stringBuffer6.append(0.0F);
      SystemInUtil.addInputLine("9<");
      StringBuffer stringBuffer14 = new StringBuffer('{');
      stringWriter0.append((CharSequence) stringBuffer10);
      simpleNode0.dump("G=$l:b|", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>9<</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit : 9<", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.getChannel();
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.release();
      mockFileInputStream1.getChannel();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration3);
      sequenceInputStream1.read();
      mockFileInputStream1.getChannel();
      StringReader stringReader0 = new StringReader("Y'\"Jw'DU9\"dS");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.toString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      StringReader stringReader0 = new StringReader("y#6i9ZZ$B$^");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.markSupported();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)123);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 964);
      simpleNode0.jjtAddChild(simpleNode1, (byte)123);
      simpleNode0.identifiers = null;
      SystemInUtil.addInputLine("OP|S[3#p ");
      stringReader0.reset();
      simpleNode0.jjtGetChild((byte)123);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 71);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      SimpleNode simpleNode1 = new SimpleNode(73);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode0.jjtAddChild(simpleNode1, 2956);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.jjtGetChild(73);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'M';
      charArray0[2] = 'Y';
      charArray0[3] = 'd';
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      charArray0[4] = 'Z';
      charArray0[5] = '9';
      charArray0[6] = '~';
      charArray0[7] = '6';
      charArray0[8] = 'm';
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
