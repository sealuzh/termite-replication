/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 13:59:00 GMT 2020
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6618980820553624
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      xPathLexer1.colon();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.number();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer4.star();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer("dRI!\"");
      xPathLexer5.slashes();
      xPathLexer2.dots();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.675238731078135
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      xPathLexer1.colon();
      xPathLexer1.rightParen();
      xPathLexer1.whitespace();
      xPathLexer1.or();
      xPathLexer1.and();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      xPathLexer2.not();
      xPathLexer0.dollar();
      xPathLexer2.or();
      xPathLexer2.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("dRI!\"");
      xPathLexer3.rightBracket();
      xPathLexer3.number();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.not();
      xPathLexer0.nextToken();
      xPathLexer1.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer3.colon();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      Token token1 = xPathLexer6.slashes();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6346782120245948
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&Ib;}E@r96");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("'<5PRxF");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("n>vLc(r&}TCy");
      xPathLexer2.leftBracket();
      xPathLexer2.comma();
      xPathLexer2.nextToken();
      xPathLexer2.equals();
      Token token0 = xPathLexer2.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8995506388503058
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (26) (c)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.minus();
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("erken.saxpath.XPathLexer", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.or();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (c)");
      xPathLexer1.div();
      Token token10 = xPathLexer1.minus();
      assertEquals(6, token10.getTokenType());
      assertEquals("[", token10.getTokenText());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (26) (c)");
      xPathLexer0.number();
      Token token12 = xPathLexer1.notEquals();
      assertEquals(" (", token12.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      Token token13 = xPathLexer1.nextToken();
      assertEquals(30, token13.getTokenType());
      assertEquals("26", token13.getTokenText());
      
      xPathLexer4.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
      assertEquals("[", token14.getTokenText());
      
      Token token15 = xPathLexer0.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer0.rightParen();
      assertEquals(2, token16.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3291382364917832
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.not();
      Token token1 = xPathLexer0.at();
      assertEquals("y", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      xPathLexer1.and();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("8", token3.getTokenText());
      
      Token token4 = xPathLexer1.not();
      assertEquals(",", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(":", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      xPathLexer1.or();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.minus();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("[H", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.div();
      Token token10 = xPathLexer3.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals("d", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer4.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
      
      xPathLexer4.consume((-46));
      Token token14 = xPathLexer4.rightParen();
      assertEquals(2, token14.getTokenType());
      
      int int0 = xPathLexer4.currentPosition();
      assertEquals((-44), int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6949328046375842
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.or();
      Token token0 = new Token(2, "dRI!\"", 2, 2);
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer2.at();
      xPathLexer2.equals();
      xPathLexer0.number();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3660048848119122
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.not();
      Token token0 = xPathLexer0.equals();
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.not();
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("/", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.colon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("[", token4.getTokenText());
      
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token7 = xPathLexer2.nextToken();
      assertEquals(2, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      Token token8 = xPathLexer1.leftParen();
      assertEquals("8", token8.getTokenText());
      assertEquals(1, token8.getTokenType());
      
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      Token token9 = xPathLexer1.literal();
      assertNull(token9);
      
      xPathLexer1.equals();
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer3.setPreviousToken(token1);
      assertEquals(":", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer1.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("8,:y/k[HfJ");
      Token token14 = xPathLexer3.comma();
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals(" (", token15.getTokenText());
      
      Token token16 = xPathLexer2.not();
      assertEquals(23, token16.getTokenType());
      
      Token token17 = xPathLexer0.rightBracket();
      assertEquals(4, token17.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6974451754661986
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("&", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer1.or();
      Token token5 = xPathLexer1.dollar();
      assertEquals("&", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(";", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("I", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("}E", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("@", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("UfVPJT[_UK.@");
      XPathLexer xPathLexer3 = new XPathLexer("'p\"hV[k(U");
      Token token10 = xPathLexer3.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      xPathLexer3.mod();
      Token token11 = xPathLexer3.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals("p", token11.getTokenText());
      
      Token token12 = xPathLexer3.nextToken();
      assertEquals("", token12.getTokenText());
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6637395636602066
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("3", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      Token token1 = xPathLexer1.colon();
      assertEquals("d", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer2.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("L", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("@3foL9'");
      Token token6 = xPathLexer4.nextToken();
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("R", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("9", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("@3foL9'");
      Token token9 = xPathLexer4.identifierOrOperatorName();
      assertEquals("3foL9", token9.getTokenText());
      
      Token token10 = xPathLexer4.nextToken();
      assertEquals("", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("dRI!\"");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer3.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer1.colon();
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer8.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
      assertEquals("'", token15.getTokenText());
      
      Token token16 = xPathLexer7.identifierOrOperatorName();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5395215941650056
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.colon();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer1.minus();
      xPathLexer0.dollar();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer3.minus();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.number();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.equals();
      xPathLexer4.comma();
      xPathLexer5.notEquals();
      xPathLexer2.number();
      xPathLexer1.leftBracket();
      Token token1 = xPathLexer4.identifierOrOperatorName();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.584600458999208
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("y", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("/", token2.getTokenText());
      
      xPathLexer0.setXPath("~7h3<Uwl]Qr52");
      XPathLexer xPathLexer1 = new XPathLexer("~7h3<Uwl]Qr52");
      Token token3 = xPathLexer0.colon();
      assertEquals("~", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("7", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer1.number();
      Token token6 = xPathLexer1.dollar();
      assertEquals("h", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer1.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("3", token8.getTokenText());
      
      Token token9 = xPathLexer1.leftParen();
      assertEquals("3", token9.getTokenText());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("~7h3<Uwl]Qr52");
      Token token11 = xPathLexer2.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("Uw", token12.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("8,:y/k[HfJ");
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer1.minus();
      assertEquals("l", token14.getTokenText());
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer2.leftBracket();
      assertEquals(3, token15.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token16 = xPathLexer0.comma();
      assertEquals(32, token16.getTokenType());
      
      Token token17 = xPathLexer1.notEquals();
      assertEquals(22, token17.getTokenType());
      
      Token token18 = xPathLexer0.not();
      assertEquals(23, token18.getTokenType());
      assertEquals("l", token18.getTokenText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2245718982304656
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("^C5Wy}* >");
      Token token0 = xPathLexer1.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer1.rightParen();
      Token token2 = xPathLexer1.rightParen();
      assertEquals("5", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("^C5Wy}* >");
      xPathLexer3.number();
      xPathLexer3.number();
      xPathLexer1.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals("^C5Wy}* >", token5.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer3.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("^", token7.getTokenText());
      
      Token token8 = xPathLexer4.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer1.number();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer("^C5Wy}* >");
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer6.equals();
      assertEquals("^", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer6.comma();
      assertEquals("C", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token12 = xPathLexer7.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer2.leftParen();
      assertEquals(1, token14.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3957522778273184
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("3", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      Token token2 = xPathLexer1.colon();
      assertEquals("d", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer2.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals("L", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("@3foL9'");
      Token token6 = xPathLexer4.nextToken();
      assertEquals("@", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer3.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("dRI!\"");
      XPathLexer xPathLexer6 = new XPathLexer("@3foL9'");
      xPathLexer6.number();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("9'", token9.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("dRI!\"");
      Token token10 = xPathLexer8.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("dRI", token10.getTokenText());
      
      xPathLexer6.equals();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token11 = xPathLexer8.star();
      assertEquals("!", token11.getTokenText());
      
      Token token12 = xPathLexer8.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("\"", token12.getTokenText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.565628989827557
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer1.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer1.or();
      Token token10 = xPathLexer1.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer1.div();
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5090896070006539
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("FUd#?]46TC-%L79Q3V");
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer0.leftParen();
      xPathLexer1.doubleColon();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.not();
      xPathLexer2.doubleColon();
      xPathLexer2.dots();
      xPathLexer2.not();
      xPathLexer1.setXPath("");
      xPathLexer1.leftBracket();
      xPathLexer0.comma();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2831496306802077
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("^C5Wy}* >");
      xPathLexer1.not();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer("^C5Wy}* >");
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer3.pipe();
      xPathLexer4.nextToken();
      xPathLexer3.minus();
      XPathLexer xPathLexer5 = new XPathLexer("^C5Wy}* >");
      xPathLexer5.doubleColon();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer1.number();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer4.equals();
      xPathLexer0.star();
      xPathLexer0.equals();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.590735097025814
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dots();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.not();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      xPathLexer1.colon();
      Token token4 = xPathLexer1.rightParen();
      assertEquals("R", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer1.whitespace();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer0.or();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer1.leftParen();
      assertEquals(1, token7.getTokenType());
      
      xPathLexer1.colon();
      xPathLexer1.not();
      Token token8 = xPathLexer1.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token14 = xPathLexer2.comma();
      assertEquals("c", token14.getTokenText());
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals("om", token15.getTokenText());
      
      Token token16 = xPathLexer0.not();
      assertEquals(23, token16.getTokenType());
      
      Token token17 = xPathLexer1.rightBracket();
      assertEquals(4, token17.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.284392061687077
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.equals();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.equals();
      Token token1 = xPathLexer0.dollar();
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("y", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("k[", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("H", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.rightBracket();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("bRT?x:OhmIt38&K<");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(",", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer3.slashes();
      XPathLexer xPathLexer5 = new XPathLexer("!-=hbGd7_UtA");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      xPathLexer6.rightBracket();
      xPathLexer4.identifierOrOperatorName();
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("8,:y/k[HfJ");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token9 = xPathLexer4.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer7.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("8", token10.getTokenText());
      
      Token token11 = xPathLexer5.colon();
      assertEquals("!", token11.getTokenText());
      
      Token token12 = xPathLexer7.rightBracket();
      assertEquals(",", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer8.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6138569358872106
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer0.div();
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token14 = xPathLexer1.rightParen();
      assertEquals(2, token14.getTokenType());
      
      xPathLexer1.or();
      Token token15 = xPathLexer0.doubleColon();
      assertEquals(19, token15.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4975766387230849
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dots();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.not();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.dots();
      assertEquals("m.", token2.getTokenText());
      assertEquals(14, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token3.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.at();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.setXPath("ce");
      Token token7 = xPathLexer0.dollar();
      assertEquals("c", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("e", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      xPathLexer1.setXPath(")");
      Token token13 = xPathLexer1.nextToken();
      assertEquals(")", token13.getTokenText());
      assertEquals(2, token13.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("gV");
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer2.comma();
      assertEquals(32, token15.getTokenType());
      assertEquals("g", token15.getTokenText());
      
      Token token16 = xPathLexer2.nextToken();
      assertEquals(15, token16.getTokenType());
      
      Token token17 = xPathLexer2.doubleColon();
      assertEquals(19, token17.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5869622744278662
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("Bn0y~gc@ozRd*XQ8S<$");
      xPathLexer1.colon();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer1.number();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer4.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer3.equals();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1661005431741382
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":/^f42%e-M|Y<H'");
      Token token0 = xPathLexer0.slashes();
      assertEquals(":/", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.setXPath("ce");
      XPathLexer xPathLexer2 = new XPathLexer(":/^f42%e-M|Y<H'");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(":", token3.getTokenText());
      
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("ce");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.number();
      xPathLexer2.or();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer4.nextToken();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token5 = xPathLexer6.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer4.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer6.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("ce");
      xPathLexer0.number();
      Token token8 = xPathLexer2.notEquals();
      assertEquals("^f", token8.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("p&+Ga^.V(PmICd");
      Token token9 = xPathLexer6.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer7.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("c", token10.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token11 = xPathLexer4.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer8.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer3.leftParen();
      assertEquals("c", token13.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0738075155019584
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tWJql=");
      Token token0 = xPathLexer0.not();
      assertEquals("t", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("W", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("ql", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4304415446511338
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":/^f42%e-M|Y<H'");
      Token token0 = xPathLexer0.slashes();
      assertEquals(":/", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.setXPath("ce");
      XPathLexer xPathLexer2 = new XPathLexer(":/^f42%e-M|Y<H'");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(":", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token4 = xPathLexer3.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer3.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(":I;9~WWehrZs/");
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.div();
      Token token8 = xPathLexer2.nextToken();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer5.equals();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.relationalOperator();
      xPathLexer6.not();
      Token token9 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals("c", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer4.dollar();
      assertEquals(":", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.not();
      assertEquals("e", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7678388572746404
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer3.notEquals();
      xPathLexer2.comma();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.notEquals();
      xPathLexer0.not();
      Token token0 = xPathLexer5.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.608574463999166
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.leftParen();
      assertEquals("O", token2.getTokenText());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.identifier();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.equals();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.div();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token10 = xPathLexer1.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("u?jO1A{$>nW");
      Token token12 = xPathLexer2.nextToken();
      assertEquals(15, token12.getTokenType());
      assertEquals("u", token12.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("\"d; 9");
      Token token13 = xPathLexer3.equals();
      assertEquals("\"", token13.getTokenText());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.655991423433459
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer1.number();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.or();
      Token token8 = xPathLexer2.pipe();
      assertEquals("c", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      Token token9 = xPathLexer1.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("om.werken.saxpath.Token", token11.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.minus();
      Token token12 = xPathLexer2.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("h%`Y%[cy/=MQF2)n");
      xPathLexer4.div();
      Token token13 = xPathLexer4.slashes();
      assertEquals(11, token13.getTokenType());
      assertEquals("h", token13.getTokenText());
      
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer0.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer2.leftParen();
      assertEquals(1, token16.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5582958375070544
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.setXPath("FUd#?]46TC-%L79Q3V");
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("U", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.equals();
      assertEquals("d", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("#", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("?", token8.getTokenText());
      
      xPathLexer1.doubleColon();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.not();
      xPathLexer2.leftParen();
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token10 = xPathLexer2.dots();
      assertEquals(13, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token11 = xPathLexer4.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer4.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token13 = xPathLexer4.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer5.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer5.not();
      assertEquals(23, token15.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.487503259362539
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("^C5Wy}* >");
      xPathLexer1.not();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer1.rightParen();
      xPathLexer0.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.number();
      xPathLexer0.dollar();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2753376481209968
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.colon();
      Token token0 = xPathLexer1.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer1.star();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      Token token5 = xPathLexer1.not();
      assertEquals("r", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals("ke", token6.getTokenText());
      
      xPathLexer2.dots();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer2.leftBracket();
      Token token8 = xPathLexer4.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("e7}a/CTm@'");
      Token token12 = xPathLexer6.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("e", token12.getTokenText());
      
      xPathLexer6.operatorName();
      xPathLexer4.leftParen();
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer4.pipe();
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.consume((-594));
      xPathLexer0.equals();
      xPathLexer0.consume(61);
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4957008122458284
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      xPathLexer1.colon();
      xPathLexer0.and();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      xPathLexer2.or();
      xPathLexer0.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("@3foL9'");
      xPathLexer4.nextToken();
      xPathLexer2.minus();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer("@3foL9'");
      XPathLexer xPathLexer6 = new XPathLexer("PzXY9r,");
      xPathLexer6.number();
      XPathLexer xPathLexer7 = new XPathLexer("PzXY9r,");
      xPathLexer7.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer("PzXY9r,");
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.at();
      xPathLexer0.colon();
      xPathLexer8.rightBracket();
      XPathLexer xPathLexer11 = new XPathLexer("dRI!\"");
      xPathLexer11.slashes();
      Token token0 = xPathLexer10.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5144904766804035
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token1 = xPathLexer1.colon();
      assertEquals("c", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.number();
      assertEquals(31, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals("w", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.leftBracket();
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("e", token8.getTokenText());
      
      Token token9 = xPathLexer4.at();
      assertEquals("c", token9.getTokenText());
      
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer3.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      xPathLexer4.operatorName();
      xPathLexer4.leftParen();
      Token token13 = xPathLexer1.leftBracket();
      assertEquals("r", token13.getTokenText());
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer2.pipe();
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3891564237570382
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("~7h3<Uwl]Qr52");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.equals();
      xPathLexer6.minus();
      xPathLexer5.or();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7571184861492344
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BnvO j0Nfe]");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("BnvO j0Nfe]");
      Token token1 = xPathLexer1.minus();
      assertEquals("B", token1.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("uJOrpE5");
      xPathLexer0.colon();
      Token token2 = xPathLexer2.rightParen();
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer2.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals("OrpE5", token4.getTokenText());
      
      xPathLexer2.number();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals(" ", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("BnvO j0Nfe]");
      xPathLexer3.or();
      xPathLexer2.pipe();
      xPathLexer3.nextToken();
      Token token8 = xPathLexer1.leftParen();
      assertEquals("j", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(" ", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals("j", token10.getTokenText());
      
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer2.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer4.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("BnvO j0Nfe]");
      Token token15 = xPathLexer5.comma();
      assertEquals(32, token15.getTokenType());
      assertEquals("B", token15.getTokenText());
      
      Token token16 = xPathLexer1.notEquals();
      assertEquals(22, token16.getTokenType());
      assertEquals("0N", token16.getTokenText());
      
      Token token17 = xPathLexer2.not();
      assertEquals(23, token17.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7002156538439777
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("FUd#?]46TC-%L79Q3V");
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("F", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("?]", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("46", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("TC-%L79Q3V", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.minus();
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setXPath("");
      XPathLexer xPathLexer5 = new XPathLexer("- (");
      Token token11 = xPathLexer5.leftParen();
      assertEquals("-", token11.getTokenText());
      
      Token token12 = xPathLexer4.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals("C", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.517515237488285
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("j", token1.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      Token token2 = xPathLexer0.star();
      assertEquals("u", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.equals();
      assertEquals("O", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("1", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("{", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("$>", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("nW", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer0.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      xPathLexer2.minus();
      xPathLexer3.setXPath("g9R<y$Any%;UeB");
      Token token12 = xPathLexer2.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer0.comma();
      assertEquals("[", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.getPreviousToken();
      assertEquals("", token14.getTokenText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7683732845526965
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("co", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer1.currentPosition();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals("com.werken.saxpath.XPathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("e", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.equals();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      xPathLexer2.equals();
      xPathLexer1.leftParen();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      Token token7 = xPathLexer2.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals("n", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer1.star();
      assertEquals(20, token12.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer6.dollar();
      assertEquals(26, token14.getTokenType());
      
      Token token15 = xPathLexer0.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer5.pipe();
      assertEquals(17, token16.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.353010714672204
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("~7h3<Uwl]Qr52");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.equals();
      xPathLexer6.minus();
      xPathLexer5.or();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.consume((-2948));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5780297708627802
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.setXPath("}jz=Ae.;");
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer1.dollar();
      xPathLexer1.or();
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer1.minus();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.number();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.consume(8);
      xPathLexer0.nextToken();
      xPathLexer1.equals();
      xPathLexer0.comma();
      xPathLexer2.div();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer2.number();
      xPathLexer0.mod();
      Token token1 = xPathLexer1.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6642152333847857
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.equals();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("8", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("8", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer1.doubleColon();
      xPathLexer1.literal();
      xPathLexer0.comma();
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("8", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("y", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals("/", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals(32, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.minus();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("k[", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer3.number();
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("HfJ", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer2.star();
      assertEquals(20, token12.getTokenType());
      assertEquals(":", token12.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer6.minus();
      Token token13 = xPathLexer6.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer4.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer2.number();
      assertEquals(30, token15.getTokenType());
      
      Token token16 = xPathLexer4.dots();
      assertEquals(",", token16.getTokenText());
      assertEquals(13, token16.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.670256585895382
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.colon();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer1.number();
      assertEquals(".", token4.getTokenText());
      assertEquals(31, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals("werken.saxpath.Token", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("GSU?m\"R;y.&7Lt(V");
      xPathLexer0.or();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("?", token10.getTokenText());
      
      xPathLexer0.not();
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      xPathLexer0.dots();
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer2.leftBracket();
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("+F8x=*'heC%+5e");
      Token token15 = xPathLexer2.comma();
      assertEquals("\"", token15.getTokenText());
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer1.notEquals();
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer0.not();
      assertEquals(23, token17.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.223398854549468
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      xPathLexer1.or();
      Token token2 = xPathLexer1.dollar();
      assertEquals("I", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(";", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("&", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("I;", token5.getTokenText());
      
      Token token6 = xPathLexer1.star();
      assertEquals("}", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("m:x5^[esA}q8QK]");
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("m", token7.getTokenText());
      
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(":", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer1.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals("x5", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals("}", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      assertEquals("E@", token12.getTokenText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2847812919524906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("P@C;|Ic&");
      xPathLexer0.nextToken();
      xPathLexer1.LA(32);
      xPathLexer1.leftParen();
      xPathLexer1.star();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer2.isIdentifierChar('');
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer2.number();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.notEquals();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.colon();
      xPathLexer3.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      xPathLexer2.equals();
      xPathLexer5.minus();
      Token token1 = xPathLexer5.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9127192978146597
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      xPathLexer0.consume();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (c)");
      xPathLexer1.whitespace();
      xPathLexer1.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer1.slashes();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.dollar();
      xPathLexer1.number();
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("[ (26) (c)");
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer0.colon();
      xPathLexer1.not();
      xPathLexer1.doubleColon();
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer0.leftBracket();
      xPathLexer3.comma();
      xPathLexer2.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer1.literal();
      Token token2 = xPathLexer0.slashes();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2089368527360045
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("^C5Wy}* >");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer1.rightParen();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      xPathLexer0.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer("^C5Wy}* >");
      xPathLexer3.number();
      xPathLexer3.number();
      xPathLexer1.or();
      xPathLexer0.pipe();
      Token token2 = xPathLexer3.nextToken();
      assertEquals("^C5Wy}* >", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer3.minus();
      assertEquals("^", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer4.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token7 = xPathLexer1.number();
      assertEquals("5", token7.getTokenText());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals("Wy", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("^C5Wy}* >");
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer6.equals();
      assertEquals("^", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer6.comma();
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token12 = xPathLexer7.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8327174767378593
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("#", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.equals();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("N", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.equals();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      xPathLexer0.minus();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals("j9", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals("c", token10.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer2.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E", token12.getTokenText());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer1.dollar();
      assertEquals(26, token14.getTokenType());
      
      Token token15 = xPathLexer1.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer2.pipe();
      assertEquals(17, token16.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8800308052929193
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.consume((-3363));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.365139241927946
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("u?jO1A{$>nW");
      int int0 = (-1533);
      xPathLexer1.consume((-1533));
      xPathLexer1.dollar();
      xPathLexer0.and();
      // Undeclared exception!
      try { 
        xPathLexer1.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6626035079775137
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.star();
      xPathLexer1.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.equals();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer2.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.doubleColon();
      xPathLexer3.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer5.minus();
      xPathLexer3.or();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.operatorName();
      Token token0 = xPathLexer5.and();
      assertNull(token0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5111321595172695
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.colon();
      xPathLexer0.and();
      xPathLexer1.nextToken();
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token0 = xPathLexer3.nextToken();
      xPathLexer3.minus();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer2.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer6.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.number();
      xPathLexer5.equals();
      Token token1 = xPathLexer6.identifierOrOperatorName();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.154110198154021
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("j", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      Token token4 = xPathLexer0.star();
      assertEquals("u", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("?", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("1", token8.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('W');
      Token token9 = xPathLexer0.star();
      assertEquals("{", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('b');
      assertTrue(boolean0);
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals("$", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      char char0 = xPathLexer0.LA(47);
      assertEquals('\uFFFF', char0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer0.relationalOperator();
      assertEquals(">", token11.getTokenText());
      assertEquals(9, token11.getTokenType());
      
      xPathLexer1.operatorName();
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer1.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.669234441239332
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fV]*r.");
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals("f", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("nK{zSXtCQUhy#Ed;!5%");
      xPathLexer1.equals();
      xPathLexer1.currentPosition();
      xPathLexer0.mod();
      xPathLexer1.number();
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("nK{zSXtCQUhy#Ed;!5%");
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("]", token3.getTokenText());
      
      xPathLexer2.and();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("{zSXtCQUhy#Ed;!5%", token4.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer2.or();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("{", token5.getTokenText());
      
      xPathLexer1.nextToken();
      Token token6 = xPathLexer2.minus();
      assertEquals("n", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer2.doubleColon();
      assertEquals("K{", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("dRI!\"");
      xPathLexer3.number();
      Token token8 = xPathLexer3.notEquals();
      assertEquals("dR", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer2.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("z", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("fV]*r.");
      Token token11 = xPathLexer5.comma();
      assertEquals("f", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals("#E", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer1.number();
      assertEquals("", token13.getTokenText());
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5215690170338725
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("{", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.pipe();
      assertEquals("G", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("2", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token5 = xPathLexer2.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals("{", token6.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer1.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("J{G2n<");
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer5.number();
      xPathLexer0.slashes();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer("J{G2n<");
      Token token8 = xPathLexer7.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("J", token8.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer3.dots();
      assertEquals(13, token10.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token11 = xPathLexer1.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("2", token11.getTokenText());
      
      xPathLexer10.rightBracket();
      Token token12 = xPathLexer3.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5958753127832566
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      Token token2 = xPathLexer0.star();
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.colon();
      assertEquals("?", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("1", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("A", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("{$", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(9, token9.getTokenType());
      assertEquals(">", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.or();
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("W", token10.getTokenText());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer1.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer1.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer2.dots();
      assertEquals(13, token15.getTokenType());
      
      Token token16 = xPathLexer1.minus();
      assertEquals(6, token16.getTokenType());
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer2.leftBracket();
      Token token17 = xPathLexer0.comma();
      assertEquals("u", token17.getTokenText());
      assertEquals(32, token17.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6055814623235292
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      xPathLexer1.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.leftBracket();
      xPathLexer1.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer1.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("J{G2n<");
      xPathLexer0.minus();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer5.number();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      xPathLexer2.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer(") (");
      xPathLexer6.star();
      xPathLexer0.equals();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.dollar();
      xPathLexer3.operatorName();
      Token token0 = xPathLexer8.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.312256571702985
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.LA(109);
      xPathLexer0.at();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3562810155707323
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("j", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("u?jO1A{$>nW");
      Token token9 = xPathLexer1.rightBracket();
      assertEquals("u", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals("?jO1A{$>nW", token10.getTokenText());
      
      xPathLexer0.LA(107);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer2.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer2.at();
      assertEquals(16, token12.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0126758453675744
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.getXPath();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4670687468349475
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("j", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("u", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("A{", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("$", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(">", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals("n", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("W", token10.getTokenText());
      
      xPathLexer0.div();
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      
      xPathLexer1.or();
      Token token13 = xPathLexer0.doubleColon();
      assertEquals(19, token13.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5111321595172695
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.colon();
      xPathLexer0.and();
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer3.minus();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.number();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer6.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.number();
      Token token1 = xPathLexer5.equals();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6201261959301274
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.colon();
      xPathLexer1.and();
      xPathLexer1.nextToken();
      xPathLexer1.not();
      xPathLexer1.dollar();
      xPathLexer1.or();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer1.minus();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      xPathLexer2.pipe();
      xPathLexer2.number();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer2.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.star();
      xPathLexer3.equals();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5496641813216696
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("#", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("N", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setXPath("ce");
      Token token5 = xPathLexer0.dollar();
      assertEquals("c", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer0.setXPath("Y?QB+}+|\"#|\"M");
      XPathLexer xPathLexer1 = new XPathLexer("0#qNr8j9-cE[");
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
      assertEquals("0", token14.getTokenText());
      
      Token token15 = xPathLexer0.comma();
      assertEquals("Y", token15.getTokenText());
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer1.nextToken();
      assertEquals((-1), token16.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3679049271655557
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer4.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer4.leftParen();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer4.not();
      assertEquals("o", token8.getTokenText());
      
      Token token9 = xPathLexer2.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer3.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("/=C(OYKX%f!On[");
      Token token14 = xPathLexer2.comma();
      assertEquals(32, token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.Token");
      Token token15 = xPathLexer6.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals("co", token15.getTokenText());
      
      Token token16 = xPathLexer5.not();
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.245632657036396
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer1.colon();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer2.and();
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("&I;}E@rR969");
      Token token7 = xPathLexer3.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("&I", token7.getTokenText());
      
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("&I;}E@rR969");
      Token token9 = xPathLexer4.leftBracket();
      assertEquals("&", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.comma();
      assertEquals("r", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer4.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("I", token11.getTokenText());
      
      Token token12 = xPathLexer1.equals();
      assertEquals("R", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4484086498064754
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.LA(19);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar('/');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer0.consume((-1533));
      xPathLexer1.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4388149769737753
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer1.number();
      Token token2 = xPathLexer1.colon();
      assertEquals(";", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("}", token4.getTokenText());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer2.and();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer3.rightBracket();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("E", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("=QXT~^TL E{i");
      Token token9 = xPathLexer4.rightBracket();
      assertEquals("=", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("=QXT~^TL E{i");
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer6.notEquals();
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token12 = xPathLexer7.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token13 = xPathLexer4.star();
      assertEquals(20, token13.getTokenType());
      assertEquals("Q", token13.getTokenText());
      
      Token token14 = xPathLexer4.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals("X", token14.getTokenText());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4577408455164542
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("h\n0;qok{sMG:C7YR");
      Token token9 = xPathLexer4.literal();
      assertNull(token9);
      
      xPathLexer2.number();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer("h\n0;qok{sMG:C7YR");
      xPathLexer5.leftParen();
      Token token10 = xPathLexer3.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer5.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer3.comma();
      Token token12 = xPathLexer5.rightBracket();
      assertEquals("0", token12.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer5.number();
      assertEquals("", token14.getTokenText());
      assertEquals(30, token14.getTokenType());
      
      Token token15 = xPathLexer5.leftParen();
      assertEquals(";", token15.getTokenText());
      assertEquals(1, token15.getTokenType());
      
      Token token16 = xPathLexer0.comma();
      assertEquals(32, token16.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3924021973882441
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      String string0 = "";
      xPathLexer0.setXPath("");
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.pipe();
      xPathLexer1.nextToken();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9034007581809185
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "@3foL9'";
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.consume((-3091));
      xPathLexer0.endPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8088041602436575
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.equals();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.equals();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("r", token6.getTokenText());
      
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer1.number();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("8j", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("9", token10.getTokenText());
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals("-", token11.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token12 = xPathLexer2.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer0.identifierOrOperatorName();
      assertNull(token13);
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
      
      xPathLexer1.dollar();
      Token token15 = xPathLexer1.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer2.pipe();
      assertEquals(17, token16.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6614054569922252
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("j", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("?", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("u?jO1A{$>nW");
      Token token8 = xPathLexer0.leftParen();
      assertEquals("{", token8.getTokenText());
      
      Token token9 = xPathLexer2.colon();
      assertEquals("u", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.not();
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals("$>", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer4.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer4.minus();
      Token token13 = xPathLexer3.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(")");
      xPathLexer2.div();
      Token token14 = xPathLexer2.comma();
      assertEquals(32, token14.getTokenType());
      assertEquals("?", token14.getTokenText());
      
      Token token15 = xPathLexer5.notEquals();
      assertEquals(22, token15.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.number();
      Token token16 = xPathLexer0.minus();
      assertEquals("n", token16.getTokenText());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.42622272114457
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("O", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer1.rightBracket();
      xPathLexer1.rightBracket();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("jO1A", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(107);
      assertEquals('\uFFFF', char0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftBracket();
      assertEquals("{", token10.getTokenText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.2161929761058627
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.colon();
      assertEquals("/", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.not();
      assertEquals(",", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer1.or();
      Token token3 = xPathLexer0.pipe();
      assertEquals("k", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(3, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("y", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("Hf", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals("/k", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      Token token9 = xPathLexer2.equals();
      assertEquals("d", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer3.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer3.comma();
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7248834243610955
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token2 = xPathLexer1.colon();
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightParen();
      assertEquals("o", token3.getTokenText());
      
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.number();
      assertEquals(31, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer1.number();
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("w", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.or();
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("erken.saxpath.Token", token8.getTokenText());
      
      xPathLexer0.leftParen();
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer1.not();
      Token token10 = xPathLexer2.literal();
      assertNotNull(token10);
      assertEquals(27, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer2.leftBracket();
      assertEquals(3, token14.getTokenType());
      assertEquals("k", token14.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token15 = xPathLexer1.comma();
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer2.notEquals();
      assertEquals("en", token16.getTokenText());
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer0.not();
      assertEquals(23, token17.getTokenType());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.831382046862302
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.equals();
      assertEquals(",", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token1 = xPathLexer1.minus();
      assertEquals("8", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(",", token3.getTokenText());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals(":", token4.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer1.comma();
      assertEquals("y", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      xPathLexer1.operatorName();
      xPathLexer1.consume();
      Token token7 = xPathLexer0.dollar();
      assertEquals("[", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer1.pipe();
      xPathLexer1.or();
      Token token9 = xPathLexer0.pipe();
      assertEquals("H", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("f", token11.getTokenText());
      
      Token token12 = xPathLexer1.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer1.leftBracket();
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token15 = xPathLexer2.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7946905431041746
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.setXPath(")");
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer1 = new XPathLexer("-*`Qsu>P_OP\"`R^`O");
      xPathLexer1.pipe();
      xPathLexer0.equals();
      xPathLexer1.or();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer0.leftBracket();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-581));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1255761360637633
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token1 = xPathLexer1.comma();
      assertEquals("&", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer1.colon();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("E", token4.getTokenText());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer2.and();
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      Token token6 = xPathLexer3.rightBracket();
      assertEquals("B", token6.getTokenText());
      
      Token token7 = xPathLexer3.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer1.slashes();
      assertEquals("r", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("eO#C$IzLS|G[#.eJ[,");
      Token token11 = xPathLexer6.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("e", token11.getTokenText());
      
      xPathLexer5.not();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer4.dots();
      assertEquals(13, token13.getTokenType());
      
      xPathLexer4.minus();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer2.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer3.not();
      assertEquals(23, token15.getTokenType());
      assertEquals("3", token15.getTokenText());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.664104747578224
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("O", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("/", token0.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("Y", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("b<I!e");
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("/=C(OYKX%f!On[");
      Token token11 = xPathLexer2.whitespace();
      assertEquals("", token11.getTokenText());
      assertEquals((-2), token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("jp");
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer4.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer4.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      Token token15 = xPathLexer4.equals();
      assertEquals(21, token15.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SLg7d@Az[8,[_");
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.consume((-644));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6680107838530719
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.consume((-1997));
      xPathLexer0.leftParen();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6435956529229068
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer1.identifier();
      xPathLexer1.number();
      xPathLexer1.setXPath("0#qNr8j9-cE[");
      Token token0 = xPathLexer1.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer1.currentPosition();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer2.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token3 = xPathLexer1.equals();
      assertEquals("#", token3.getTokenText());
      
      xPathLexer3.leftParen();
      Token token4 = xPathLexer2.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("qN", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer3.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("r8j9-cE", token8.getTokenText());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer5.dollar();
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer5.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6107561330496505
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('a');
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.consume(111);
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.and();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6394152060425629
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(21, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals("C", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token7.getTokenText());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("Y", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.mod();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer("x)@3X}\"}4w=v.");
      Token token9 = xPathLexer0.leftBracket();
      assertEquals("K", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("X", token10.getTokenText());
      
      xPathLexer1.nextToken();
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8830957085870634
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) (c)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("werken.saxpath.XPathLexer", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      xPathLexer1.comma();
      Token token13 = xPathLexer1.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer1.star();
      assertEquals(20, token15.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7603083314680048
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.not();
      Token token0 = xPathLexer0.equals();
      assertEquals(",", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.number();
      Token token1 = xPathLexer0.not();
      assertEquals(":", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.colon();
      xPathLexer1.and();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      xPathLexer1.minus();
      Token token3 = xPathLexer1.dollar();
      assertEquals(":", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer1.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer1.minus();
      assertEquals("y", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("Hf", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("J", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dRI!\"");
      XPathLexer xPathLexer3 = new XPathLexer();
      char char0 = xPathLexer1.LA(2);
      assertEquals('k', char0);
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("/", token10.getTokenText());
      
      Token token11 = xPathLexer1.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer3.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer3.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4260898933559112
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(":", token1.getTokenText());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      XPathLexer xPathLexer2 = new XPathLexer("M");
      Token token3 = xPathLexer2.dollar();
      assertEquals("M", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer2.colon();
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("k[", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals("H", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("8,:y/k[HfJ");
      Token token8 = xPathLexer4.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("8", token8.getTokenText());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("J", token10.getTokenText());
      
      Token token11 = xPathLexer4.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6692338903268154
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.star();
      assertEquals("I", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      char char0 = xPathLexer0.LA(7);
      assertEquals('6', char0);
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("@r", token7.getTokenText());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("R969", token8.getTokenText());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Peg>_:;d52");
      xPathLexer0.or();
      int int0 = (-776);
      xPathLexer0.consume((-776));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6392983564102055
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.leftParen();
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.equals();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer0.equals();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token14 = xPathLexer1.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals("c", token14.getTokenText());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.443128749938715
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.dots();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0812195403033036
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("3", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("o", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals("L", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7437518930054958
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("OYKX", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.number();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer2.or();
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer1.leftParen();
      assertEquals(1, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.not();
      assertEquals("T", token9.getTokenText());
      
      xPathLexer2.literal();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals("f!", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token11 = xPathLexer4.dots();
      assertEquals(13, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer("/=C(OYKX%f!On[");
      Token token13 = xPathLexer7.comma();
      assertEquals("/", token13.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer8.notEquals();
      assertEquals(22, token14.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("/=C(OYKX%f!On[");
      Token token15 = xPathLexer9.not();
      assertEquals("/", token15.getTokenText());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6701198898068172
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5310752357931334
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token0 = xPathLexer1.pipe();
      assertEquals("&", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.dollar();
      Token token2 = xPathLexer1.colon();
      assertEquals(";", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer2.and();
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer3.rightBracket();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("E", token6.getTokenText());
      
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer("=QXT~^TL E{i");
      Token token7 = xPathLexer4.rightBracket();
      assertEquals("=", token7.getTokenText());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(",");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer5.nextToken();
      assertEquals(32, token10.getTokenType());
      assertEquals(",", token10.getTokenText());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer6.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer5.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4259510678852483
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer0.at();
      xPathLexer1.setXPath("ce");
      xPathLexer1.dollar();
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      xPathLexer1.colon();
      xPathLexer1.not();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.4410152780267027
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-284));
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.077217670433708
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.6701198898068172
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      xPathLexer0.consume((-849));
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4447927346752143
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('X');
      assertTrue(boolean0);
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer0.whitespace();
      assertEquals((-2), token15.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7571520097943134
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals("C", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      Token token3 = xPathLexer1.at();
      assertEquals("{", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token5.getTokenText());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.mod();
      xPathLexer2.and();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('8');
      assertFalse(boolean0);
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("X", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer2.or();
      Token token12 = xPathLexer2.pipe();
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.955208875587853
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.isIdentifierChar('^');
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(2, token3.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.438769483462873
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.or();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("~S))&FqyK>g,+f");
      Token token8 = xPathLexer2.nextToken();
      assertEquals(1, token8.getTokenType());
      assertEquals("(", token8.getTokenText());
      
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer7.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer5.notEquals();
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer("[ (");
      XPathLexer xPathLexer10 = new XPathLexer("~S))&FqyK>g,+f");
      xPathLexer10.nextToken();
      Token token13 = xPathLexer10.equals();
      assertEquals("~", token13.getTokenText());
      
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token14 = xPathLexer11.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer9.slashes();
      assertEquals("[", token15.getTokenText());
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3275840811879942
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(")");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("&I;}E@rR969", token1.getTokenText());
      
      Token token2 = xPathLexer2.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("hwY1*UkL3UKl~Mr");
      Token token6 = xPathLexer5.dots();
      assertEquals("h", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("&I;}E@rR969");
      Token token7 = xPathLexer5.minus();
      assertEquals("w", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("+2VXJHRK9Z");
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer7.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("+", token9.getTokenText());
      
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer7.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("2", token11.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token12 = xPathLexer8.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token13 = xPathLexer6.dollar();
      assertEquals(26, token13.getTokenType());
      assertEquals("&", token13.getTokenText());
      
      XPathLexer xPathLexer10 = new XPathLexer("M1PFM*");
      xPathLexer10.operatorName();
      Token token14 = xPathLexer1.leftParen();
      assertEquals(1, token14.getTokenType());
      assertEquals("I", token14.getTokenText());
      
      Token token15 = xPathLexer0.identifier();
      assertEquals(15, token15.getTokenType());
      
      Token token16 = xPathLexer4.equals();
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6737309197398251
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      xPathLexer1.colon();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.number();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer4.star();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer("dRI!\"");
      xPathLexer5.slashes();
      xPathLexer2.dots();
      xPathLexer0.minus();
      xPathLexer1.literal();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-862));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.2058953942284143
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("^C5Wy}* >");
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer2.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer1.rightParen();
      Token token3 = xPathLexer1.rightParen();
      assertEquals("5", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("^C5Wy}* >");
      Token token5 = xPathLexer3.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
      
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer3.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer4.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token9 = xPathLexer7.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer7.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7578703377706324
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.colon();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("O", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer2.number();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("KX", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals("f", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      xPathLexer2.nextToken();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.not();
      assertEquals("/", token9.getTokenText());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer3.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("co", token11.getTokenText());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      assertEquals("!", token12.getTokenText());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals("O", token14.getTokenText());
      assertEquals(3, token14.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token15 = xPathLexer4.comma();
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer4.notEquals();
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer2.not();
      assertEquals(23, token17.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      boolean boolean0 = xPathLexer0.isIdentifierChar('j');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.7577297984393996
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.3662893177133655
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.831382046862302
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BnvO j0Nfe]");
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("BnvO j0Nfe]");
      xPathLexer1.minus();
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer0.slashes();
      xPathLexer1.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer1.pipe();
      xPathLexer0.or();
      xPathLexer1.pipe();
      xPathLexer1.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.colon();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      xPathLexer1.leftBracket();
      xPathLexer2.leftBracket();
      xPathLexer1.relationalOperator();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.268404894023627
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.not();
      assertEquals("H", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.rightBracket();
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      XPathLexer xPathLexer2 = new XPathLexer("bRT?x:OhmIt38&K<");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(",", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("!-=hbGd7_UtA");
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("f", token7.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      Token token8 = xPathLexer6.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer3.literal();
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer6.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer3.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer2.leftBracket();
      assertEquals(3, token12.getTokenType());
      assertEquals("b", token12.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("8,:y/k[HfJ");
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      assertEquals("J", token13.getTokenText());
      
      Token token14 = xPathLexer7.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals("8,", token14.getTokenText());
      
      Token token15 = xPathLexer1.not();
      assertEquals(23, token15.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.919930214096115
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";Rp5|p:3WwT-j;]");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.literal();
      assertNotNull(token0);
      assertEquals(27, token0.getTokenType());
      assertEquals("Rp5|p:3WwT-j", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0873616506748907
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.pipe();
      xPathLexer1.plus();
      xPathLexer0.dollar();
      xPathLexer1.colon();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer0.rightParen();
      xPathLexer1.and();
      xPathLexer1.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.rightParen();
      xPathLexer2.leftBracket();
      xPathLexer4.minus();
      xPathLexer3.LA(124);
      xPathLexer1.rightParen();
      xPathLexer4.at();
      Token token0 = xPathLexer2.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.162234449971926
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.at();
      String string0 = "dRI!\"";
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4095197579265741
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.star();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals("T", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.equals();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer1.equals();
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("6~", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("/=C(OYKX%f!On[");
      Token token9 = xPathLexer3.comma();
      assertEquals("/", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(")T", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
      
      xPathLexer3.nextToken();
      xPathLexer2.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("k", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer0.equals();
      Token token12 = xPathLexer5.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer5.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8313296280713895
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("u[L,Hok$U_");
      xPathLexer1.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals("L", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("u[L,Hok$U_");
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals(",", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer3.leftBracket();
      assertEquals("u", token10.getTokenText());
      
      Token token11 = xPathLexer1.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals("[", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer3.nextToken();
      assertEquals("L", token14.getTokenText());
      assertEquals(15, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer0.dollar();
      assertEquals(26, token15.getTokenType());
      
      xPathLexer5.operatorName();
      xPathLexer0.leftParen();
      Token token16 = xPathLexer1.leftBracket();
      assertEquals(3, token16.getTokenType());
      
      Token token17 = xPathLexer4.pipe();
      assertEquals(17, token17.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.748935456059888
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.at();
      assertEquals("o", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.or();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      xPathLexer0.consume(121);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token13 = xPathLexer1.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer1.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.0981394963538036
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.dollar();
      Token token3 = xPathLexer1.colon();
      assertEquals(";", token3.getTokenText());
      
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      assertEquals("}", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer2.and();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      xPathLexer3.rightBracket();
      Token token7 = xPathLexer3.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer3.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer4.minus();
      assertEquals("c", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer3.leftBracket();
      assertEquals(3, token10.getTokenType());
      assertEquals("?", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer(") (");
      Token token11 = xPathLexer4.comma();
      assertEquals("o", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer5.notEquals();
      assertEquals(") ", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer5.not();
      assertEquals(23, token13.getTokenType());
      assertEquals("(", token13.getTokenText());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.9259803095879825
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[AN)Jrw*}Dz.yy");
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3287087991796365
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u[L,Hok$U_");
      Token token0 = xPathLexer0.star();
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("[", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(",", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer3 = new XPathLexer("&I;}E@rR969");
      Token token5 = xPathLexer2.leftBracket();
      assertEquals("c", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer3.at();
      assertEquals("&", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer4.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.operatorName();
      Token token10 = xPathLexer3.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer4.pipe();
      assertEquals(17, token11.getTokenType());
  }
}
