/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:48:43 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3609242771569385
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.setXPath("}jz=Ae.;");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("}", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.star();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.equals();
      assertEquals("z", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("=", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.pipe();
      assertEquals("A", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("e.", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("7x]");
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals("7", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("7x]");
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals("x]", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("7x]");
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("7", token11.getTokenText());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer1.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.div();
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer3.star();
      assertEquals(20, token15.getTokenType());
      assertEquals("7", token15.getTokenText());
      
      Token token16 = xPathLexer1.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer0.not();
      assertEquals(23, token17.getTokenType());
      
      Token token18 = xPathLexer1.number();
      assertEquals(30, token18.getTokenType());
      
      Token token19 = xPathLexer4.leftBracket();
      assertEquals(3, token19.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.982963361890253
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ys");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      XPathLexer xPathLexer2 = new XPathLexer("ys");
      xPathLexer2.at();
      xPathLexer0.dots();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.dots();
      xPathLexer3.colon();
      xPathLexer4.number();
      xPathLexer2.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.plus();
      xPathLexer1.minus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer6.number();
      xPathLexer3.notEquals();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer6.nextToken();
      xPathLexer6.equals();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer1.minus();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer8.star();
      XPathLexer xPathLexer12 = new XPathLexer(".BJ#tMfvzzQMK]qN>W");
      assertFalse(xPathLexer12.equals((Object)xPathLexer11));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.093572769639509
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.setXPath("}jz=Ae.;");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.star();
      assertEquals("j", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.setXPath("UdifsR4AqCsCTELHbt");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer0.operatorName();
      xPathLexer1.and();
      xPathLexer0.setXPath("}jz=Ae.;");
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer1.or();
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer2.star();
      XPathLexer xPathLexer4 = new XPathLexer("u[L,Hok$U_");
      Token token8 = xPathLexer4.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer3.at();
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("T&K'Pb|@");
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer4.nextToken();
      assertEquals(3, token11.getTokenType());
      
      xPathLexer0.operatorName();
      Token token12 = xPathLexer1.leftParen();
      assertEquals(1, token12.getTokenType());
      
      Token token13 = xPathLexer4.identifier();
      assertEquals("L", token13.getTokenText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9675374762195665
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("&Ib;}E@r96");
      xPathLexer1.setXPath("LF< W-;j2");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.and();
      xPathLexer0.setXPath("");
      Token token1 = xPathLexer1.pipe();
      assertEquals("F", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("?JgsY");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("?JgsY");
      Token token3 = xPathLexer1.leftParen();
      assertEquals(" ", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer3.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("LF< W-;j2");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.leftParen();
      Token token6 = xPathLexer4.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("L", token6.getTokenText());
      
      xPathLexer4.mod();
      xPathLexer5.div();
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer5.identifier();
      Token token8 = xPathLexer3.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("gsY", token9.getTokenText());
      
      Token token10 = xPathLexer4.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token11 = xPathLexer4.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("<", token11.getTokenText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3115061840013373
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      xPathLexer1.identifier();
      Token token0 = xPathLexer0.whitespace();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.nextToken();
      xPathLexer1.number();
      Token token1 = xPathLexer0.dollar();
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("3", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals("f", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.not();
      xPathLexer2.not();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("@3foL9'");
      Token token7 = xPathLexer3.notEquals();
      assertEquals("@3", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer3.nextToken();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer4.equals();
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer4.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer4.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer4.comma();
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer3.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer7.not();
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0946481812577957
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      assertEquals("G", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer1.leftParen();
      assertEquals("{", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals("G", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("n", token5.getTokenText());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("2", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer1.number();
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("hD0F7./t6*~xH");
      Token token9 = xPathLexer4.plus();
      assertEquals("h", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer0.number();
      Token token11 = xPathLexer4.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("D0", token11.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer4.nextToken();
      assertEquals(15, token12.getTokenType());
      
      xPathLexer3.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer6.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer4.number();
      assertEquals("", token14.getTokenText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.249628396283806
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Y", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("K", token3.getTokenText());
      
      xPathLexer0.colon();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("n[", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      assertEquals("n", token7.getTokenText());
      
      xPathLexer0.colon();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
      
      xPathLexer0.notEquals();
      Token token15 = xPathLexer0.number();
      assertEquals(30, token15.getTokenType());
      
      Token token16 = xPathLexer1.colon();
      assertEquals(18, token16.getTokenType());
      assertEquals("i", token16.getTokenText());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.181528699534014
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|WDg2=#B~");
      Token token0 = xPathLexer0.dots();
      assertEquals("|", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token1 = xPathLexer1.not();
      assertEquals("8", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("#", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer1.colon();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("y", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      Token token5 = xPathLexer2.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(11, token6.getTokenType());
      assertEquals("/", token6.getTokenText());
      
      Token token7 = xPathLexer2.number();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("B", token8.getTokenText());
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals(",", token9.getTokenText());
      
      xPathLexer1.or();
      Token token10 = xPathLexer2.pipe();
      assertEquals(":", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("y", token11.getTokenText());
      
      xPathLexer0.leftParen();
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("/", token12.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token13 = xPathLexer3.not();
      assertEquals(23, token13.getTokenType());
      
      xPathLexer0.literal();
      Token token14 = xPathLexer0.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer0.minus();
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer3.leftBracket();
      assertEquals(3, token16.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("8,:y/k[HfJ");
      Token token17 = xPathLexer4.comma();
      assertEquals(32, token17.getTokenType());
      assertEquals("8", token17.getTokenText());
      
      Token token18 = xPathLexer1.notEquals();
      assertEquals(22, token18.getTokenType());
      assertEquals("k[", token18.getTokenText());
      
      Token token19 = xPathLexer0.number();
      assertEquals(30, token19.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6486225913078103
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "8,:y/k[HfJ";
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.setXPath(") (");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.setXPath("^@1}=dVN|H9%_|");
      xPathLexer0.nextToken();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9969250633400788
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token0.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dRI!\"");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.number();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      Token token4 = xPathLexer3.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.minus();
      assertEquals("\"", token5.getTokenText());
      
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("co", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer5.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer5.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer1.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer7.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.036896714428378
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals("y", token1.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.setXPath("~7h3<Uwl]Qr52");
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("~", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      Token token4 = xPathLexer2.leftParen();
      assertEquals("8", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer5.identifier();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer6.minus();
      assertEquals(6, token10.getTokenType());
      
      xPathLexer5.or();
      xPathLexer0.operatorName();
      Token token11 = xPathLexer3.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer4.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6576887518962564
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.setXPath("}jz=Ae.;");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("*ielA!3");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.pipe();
      xPathLexer1.or();
      xPathLexer1.identifier();
      xPathLexer1.colon();
      xPathLexer1.not();
      xPathLexer1.consume((-794));
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.star();
      xPathLexer0.minus();
      XPathLexer xPathLexer3 = new XPathLexer("U");
      // Undeclared exception!
      try { 
        xPathLexer1.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9421340646026501
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.setXPath("}jz=Ae.;");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.star();
      assertEquals("=", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("A", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("e.", token4.getTokenText());
      assertEquals(14, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(";", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("0eKY|/V,,&<j");
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token12 = xPathLexer7.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer5.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer5.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer3.leftBracket();
      assertEquals(3, token15.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2482701035978216
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("{$>nW", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.colon();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("{", token3.getTokenText());
      
      xPathLexer2.whitespace();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.or();
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer1.nextToken();
      Token token8 = xPathLexer2.leftParen();
      assertEquals("o", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("$", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("dRI!\"");
      Token token10 = xPathLexer4.not();
      assertEquals("d", token10.getTokenText());
      
      xPathLexer4.literal();
      Token token11 = xPathLexer3.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer2.dots();
      assertEquals(14, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      assertEquals(">", token13.getTokenText());
      
      Token token14 = xPathLexer2.leftBracket();
      assertEquals(3, token14.getTokenType());
      assertEquals("w", token14.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("dRI!\"");
      Token token15 = xPathLexer3.comma();
      assertEquals(32, token15.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token16 = xPathLexer6.notEquals();
      assertEquals(22, token16.getTokenType());
      
      xPathLexer0.number();
      Token token17 = xPathLexer4.number();
      assertEquals("", token17.getTokenText());
      assertEquals(30, token17.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.925617139327881
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l,h%)Nl(:(HL");
      Token token0 = xPathLexer0.dots();
      assertEquals("l", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("h", token2.getTokenText());
      
      char char0 = xPathLexer0.LA(109);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.star();
      assertEquals(")", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("N", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('\uFFFF');
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("(", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals(":", token8.getTokenText());
      
      xPathLexer0.div();
      Token token9 = xPathLexer0.rightBracket();
      assertEquals("(", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('J');
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.not();
      assertEquals("H", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.056524815122694
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.or();
      Token token0 = xPathLexer0.slashes();
      assertEquals("C", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      Token token1 = xPathLexer0.at();
      assertEquals("K", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%f!On[", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("i{T6kTIV");
      Token token6 = xPathLexer2.minus();
      assertEquals("i", token6.getTokenText());
      
      Token token7 = xPathLexer2.notEquals();
      assertEquals("{T", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("!", token8.getTokenText());
      
      Token token9 = xPathLexer0.equals();
      assertEquals("O", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.minus();
      assertEquals(6, token10.getTokenType());
      
      xPathLexer0.star();
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer3.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.08710377389594
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("u[L,Hok$U_");
      XPathLexer xPathLexer2 = new XPathLexer("Bv3?fr|l0w@NI");
      xPathLexer2.rightBracket();
      xPathLexer1.rightBracket();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.728417474591923
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("{", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      xPathLexer1.setXPath("J{G2n<");
      xPathLexer0.setXPath("J{G2n<");
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("J", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      Token token5 = xPathLexer1.not();
      assertEquals("{", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("G2", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("tkL7\"");
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("n", token8.getTokenText());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer2.nextToken();
      Token token10 = xPathLexer0.equals();
      assertEquals("n", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer2.dots();
      assertEquals("\"", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3314996107100754
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      xPathLexer1.pipe();
      Token token1 = xPathLexer0.whitespace();
      String string0 = token1.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.nextToken();
      xPathLexer1.number();
      Token token2 = xPathLexer0.dollar();
      assertEquals("o", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.pipe();
      assertEquals("L", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("", token4.getTokenText());
      
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer3.literal();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("@3foL9'");
      Token token7 = xPathLexer4.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("@3", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer4.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("foL9", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer5.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.minus();
      Token token10 = xPathLexer5.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer5.equals();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer9 = new XPathLexer("@3foL9'");
      Token token11 = xPathLexer9.not();
      assertEquals("@", token11.getTokenText());
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer4.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.174811278992076
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      xPathLexer2.star();
      xPathLexer1.at();
      xPathLexer2.dots();
      xPathLexer1.nextToken();
      xPathLexer2.number();
      xPathLexer2.dollar();
      xPathLexer0.notEquals();
      xPathLexer2.nextToken();
      Token token0 = xPathLexer2.equals();
      xPathLexer1.minus();
      xPathLexer1.comma();
      xPathLexer0.div();
      xPathLexer1.pipe();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer2.or();
      xPathLexer3.doubleColon();
      Token token1 = xPathLexer2.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8786407713430757
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("n", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer1.nextToken();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer1.or();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("J{G2n<");
      xPathLexer2.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer2.equals();
      assertEquals("J", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer4.notEquals();
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("dRI!\"");
      XPathLexer xPathLexer6 = new XPathLexer("dRI!\"");
      Token token12 = xPathLexer6.nextToken();
      assertEquals("dRI", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer6.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("!", token13.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9729641906359585
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("8", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(":", token2.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer1.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("z Qn6Yme");
      xPathLexer1.leftParen();
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals("k", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      xPathLexer2.literal();
      Token token11 = xPathLexer4.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer5.dots();
      assertEquals("z", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      xPathLexer5.minus();
      Token token13 = xPathLexer4.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("o_+K1pF%\"cam|CFB");
      Token token14 = xPathLexer5.comma();
      assertEquals("Q", token14.getTokenText());
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer6.notEquals();
      assertEquals("o_", token15.getTokenText());
      
      xPathLexer6.nextToken();
      Token token16 = xPathLexer6.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer6.minus();
      assertEquals(6, token17.getTokenType());
      assertEquals("1", token17.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2042392272504285
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("y", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.setXPath(") (");
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.equals();
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.setXPath("8,:y/k[HfJ");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.setXPath(") (");
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.pipe();
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("8", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(")", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("o", token6.getTokenText());
      
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(",", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals(":y", token9.getTokenText());
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer3.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertNull(token12);
      
      xPathLexer4.equals();
      Token token13 = xPathLexer0.dollar();
      assertEquals("/", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer3.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1664571385834073
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.star();
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token3.getTokenText());
      
      xPathLexer1.number();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("%", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer2.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer3.number();
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("i{", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token9 = xPathLexer6.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("T", token10.getTokenText());
      
      Token token11 = xPathLexer3.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals(" ", token11.getTokenText());
      
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
      assertEquals("", token12.getTokenText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1896153171410266
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.at();
      assertEquals("o", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.minus();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.leftBracket();
      xPathLexer1.slashes();
      xPathLexer0.doubleColon();
      xPathLexer1.comma();
      xPathLexer1.literal();
      xPathLexer1.operatorName();
      xPathLexer1.consume();
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.pipe();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer2.slashes();
      Token token5 = xPathLexer3.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("EU?!");
      Token token7 = xPathLexer4.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer3.dots();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer4.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("?", token10.getTokenText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.235487915053986
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("?", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.leftParen();
      assertEquals("O", token3.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("u?jO1A{$>nW");
      XPathLexer xPathLexer3 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer4.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("u", token6.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer3.literal();
      xPathLexer2.doubleColon();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer4.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("Ubk-C");
      Token token11 = xPathLexer4.at();
      assertEquals("j", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer5.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("Ub", token12.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("u?jO1A{$>nW");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer6.comma();
      assertEquals(32, token14.getTokenType());
      assertEquals("u", token14.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("u?jO1A{$>nW");
      Token token15 = xPathLexer8.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer2.nextToken();
      assertEquals("O1A", token16.getTokenText());
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2184200748703296
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.or();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      char char0 = xPathLexer1.LA(109);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.star();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('\uFFFF');
      xPathLexer0.setXPath("iTVa*shM`Gl0)-=");
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token3.getTokenText());
      
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.consume(109);
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("i", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token6 = xPathLexer0.slashes();
      assertEquals("T", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('8');
      assertTrue(boolean1 == boolean0);
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer2.or();
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.098193252402442
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals("C", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("Y", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer4.literal();
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer3.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("KX", token7.getTokenText());
      
      Token token8 = xPathLexer0.equals();
      assertEquals("%", token8.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer5.relationalOperator();
      XPathLexer xPathLexer9 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token9 = xPathLexer9.equals();
      assertEquals("i", token9.getTokenText());
      
      Token token10 = xPathLexer3.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer2.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      xPathLexer7.relationalOperator();
      Token token12 = xPathLexer6.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer3.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer9.plus();
      assertEquals("{", token14.getTokenText());
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0543628348132557
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.equals();
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("8", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer1.or();
      xPathLexer1.comma();
      xPathLexer1.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(",", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("qq{8N:0QA)>2.I");
      Token token5 = xPathLexer1.pipe();
      assertEquals("q", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.slashes();
      assertEquals(12, token7.getTokenType());
      assertEquals("y/", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("k", token8.getTokenText());
      
      Token token9 = xPathLexer1.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("{", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("8", token12.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      char char0 = xPathLexer2.LA(1028);
      assertEquals('\uFFFF', char0);
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      assertEquals("N", token13.getTokenText());
      
      Token token14 = xPathLexer0.at();
      assertEquals("[", token14.getTokenText());
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9952063270725031
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.literal();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.equals();
      xPathLexer6.minus();
      xPathLexer5.or();
      xPathLexer0.operatorName();
      xPathLexer3.plus();
      xPathLexer4.rightParen();
      Token token0 = xPathLexer6.or();
      assertNull(token0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2270394685414825
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("{", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.pipe();
      assertEquals("G", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("hD0F7./t6*~xH");
      Token token5 = xPathLexer2.leftBracket();
      assertEquals("h", token5.getTokenText());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer1.comma();
      assertEquals("G", token7.getTokenText());
      
      xPathLexer0.isIdentifierChar('a');
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("J{G2n<");
      xPathLexer0.minus();
      xPathLexer2.or();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer4.leftParen();
      assertEquals("J", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("J{G2n<");
      Token token9 = xPathLexer5.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("J", token9.getTokenText());
      
      Token token10 = xPathLexer5.not();
      assertEquals("{", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      xPathLexer5.literal();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer2.dots();
      assertEquals("D", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer5.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer4.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("hD0F7./t6*~xH");
      Token token15 = xPathLexer5.comma();
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer2.notEquals();
      assertEquals("0F", token16.getTokenText());
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer1.number();
      assertEquals("2", token17.getTokenText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.197907414142015
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("hD0F7./t6*~xH");
      Token token4 = xPathLexer2.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("h", token4.getTokenText());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("n<", token6.getTokenText());
      
      xPathLexer0.number();
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("G", token7.getTokenText());
      
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.number();
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals("2", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer1.plus();
      assertEquals("n", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("hD0F7./t6*~xH");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      xPathLexer5.number();
      Token token13 = xPathLexer3.notEquals();
      assertEquals(22, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer3.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      Token token15 = xPathLexer6.equals();
      assertEquals(21, token15.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token16 = xPathLexer0.not();
      assertEquals(23, token16.getTokenType());
      
      Token token17 = xPathLexer3.number();
      assertEquals(30, token17.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9492033373072868
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("&Ib;}E@r96");
      xPathLexer1.setXPath("LF< W-;j2");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer1.colon();
      assertEquals("L", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.and();
      xPathLexer0.setXPath("");
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("?JgsY");
      xPathLexer2.plus();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals(" ", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer3.setPreviousToken((Token) null);
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("J", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer0.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer5.nextToken();
      Token token12 = xPathLexer4.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("[", token12.getTokenText());
      
      Token token13 = xPathLexer4.literal();
      assertNull(token13);
      
      Token token14 = xPathLexer1.dollar();
      assertEquals(26, token14.getTokenType());
      assertEquals("W", token14.getTokenText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8068924646715228
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer2.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.star();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer2.nextToken();
      xPathLexer1.number();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      String string0 = null;
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.836859473631331
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      xPathLexer0.setXPath(") (");
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(")", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.setXPath("^@1}=dVN|H9%_|");
      Token token3 = xPathLexer0.pipe();
      assertEquals("^", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("1", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("}", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("No-'l");
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("8,:y/k[HfJ");
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(21, token10.getTokenType());
      assertEquals("=", token10.getTokenText());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer3.leftParen();
      assertEquals("8", token11.getTokenText());
      
      Token token12 = xPathLexer3.identifier();
      assertEquals("", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.039951430811574
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("3", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.colon();
      assertEquals("f", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("o", token8.getTokenText());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertNull(token12);
      
      Token token13 = xPathLexer2.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.041075991208757
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      assertEquals("G", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      xPathLexer1.whitespace();
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer2.leftParen();
      assertEquals("{", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals("G", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("T", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("2", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(" ", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer2.mod();
      xPathLexer2.and();
      XPathLexer xPathLexer4 = new XPathLexer("J{G2n<");
      Token token10 = xPathLexer2.leftBracket();
      assertEquals("c", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token11 = xPathLexer5.comma();
      assertEquals("i", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer7.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.78952279255849
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&;}E@rR969");
      xPathLexer0.setXPath("&;}E@rR969");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("&;}E@rR969", token0.getTokenText());
      
      xPathLexer0.setXPath("&;}E@rR969");
      xPathLexer1.pipe();
      xPathLexer1.or();
      Token token1 = xPathLexer1.dollar();
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer1.colon();
      assertEquals("}", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
      
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer2 = new XPathLexer("f)MTINMB:1;07k]y");
      xPathLexer2.pipe();
      xPathLexer1.or();
      Token token4 = xPathLexer2.pipe();
      assertEquals(")", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals("E", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.slashes();
      assertEquals("M", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.doubleColon();
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer4.relationalOperator();
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("r", token9.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("`et@bZ8");
      Token token10 = xPathLexer6.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer3.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("`et@bZ8");
      Token token12 = xPathLexer7.equals();
      assertEquals("`", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer5.doubleColon();
      assertEquals(19, token13.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7575827984108483
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.consume((-594));
      xPathLexer0.equals();
      xPathLexer0.consume(61);
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3700805859917082
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.star();
      assertEquals("<", token1.getTokenText());
      
      xPathLexer0.setXPath("0K$%PnIRX`[S%.U");
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("K", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("0K$%PnIRX`[S%.U");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      Token token6 = xPathLexer4.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("J{G2n<");
      Token token8 = xPathLexer5.slashes();
      assertEquals("J", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer5.notEquals();
      assertEquals("{G", token10.getTokenText());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer3.dots();
      assertEquals("0", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("J{G2n<");
      Token token12 = xPathLexer7.star();
      assertEquals("J", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer7.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("{", token13.getTokenText());
      
      xPathLexer6.or();
      Token token14 = xPathLexer7.pipe();
      assertEquals(17, token14.getTokenType());
      assertEquals("G", token14.getTokenText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2862406779817728
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      xPathLexer1.identifier();
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.star();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer2.rightParen();
      xPathLexer2.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.number();
      xPathLexer2.or();
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer2.leftParen();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.not();
      xPathLexer2.literal();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1901115383971708
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.plus();
      assertEquals("8", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer1.leftParen();
      Token token4 = xPathLexer0.star();
      assertEquals("/", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer1.at();
      Token token5 = xPathLexer0.dots();
      assertEquals("k", token5.getTokenText());
      
      Token token6 = xPathLexer1.at();
      assertEquals("m", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.leftParen();
      assertEquals("[", token8.getTokenText());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals("Hf", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer3.nextToken();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer1.notEquals();
      assertEquals("we", token13.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token14 = xPathLexer3.nextToken();
      assertEquals(",", token14.getTokenText());
      assertEquals(32, token14.getTokenType());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      Token token15 = xPathLexer1.equals();
      assertEquals("r", token15.getTokenText());
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer6.rightBracket();
      assertEquals(4, token16.getTokenType());
      
      Token token17 = xPathLexer4.leftBracket();
      assertEquals(3, token17.getTokenType());
      
      xPathLexer7.relationalOperator();
      Token token18 = xPathLexer5.notEquals();
      assertEquals(22, token18.getTokenType());
      
      Token token19 = xPathLexer1.nextToken();
      assertEquals("ken.saxpath.XPathLexer", token19.getTokenText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9971110020917284
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(":", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath("~7h3<Uwl]Qr52");
      Token token3 = xPathLexer0.star();
      assertEquals("~", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.equals();
      assertEquals("U", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("8,:y/k[HfJ");
      Token token6 = xPathLexer2.leftParen();
      assertEquals("8", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.colon();
      assertEquals("l", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer5.identifier();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("]", token11.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer6.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer5.or();
      xPathLexer0.operatorName();
      Token token14 = xPathLexer3.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer4.rightParen();
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.374431987859964
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      xPathLexer1.identifier();
      Token token1 = xPathLexer0.whitespace();
      String string0 = token1.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.nextToken();
      xPathLexer1.not();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("L", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals("foL9'", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("f", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer("@3foL9'");
      xPathLexer3.not();
      xPathLexer3.literal();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("9'", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("@3foL9'");
      Token token9 = xPathLexer4.notEquals();
      assertEquals("@3", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer4.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("foL9", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      xPathLexer5.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer6.getPreviousToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer5.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer5.equals();
      assertEquals(21, token13.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer2.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer5.comma();
      assertEquals(32, token15.getTokenType());
      
      xPathLexer4.notEquals();
      Token token16 = xPathLexer8.not();
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9217210249982601
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.getPreviousToken();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer1.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.dots();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer4.comma();
      int int0 = xPathLexer2.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.consume((-2948));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9442003588307903
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.nextToken();
      xPathLexer1.leftParen();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer1.notEquals();
      xPathLexer2.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      xPathLexer0.minus();
      xPathLexer1.doubleColon();
      xPathLexer3.number();
      xPathLexer0.notEquals();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer4.equals();
      xPathLexer3.comma();
      xPathLexer1.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.dots();
      xPathLexer0.rightBracket();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1938092091319663
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.equals();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.equals();
      Token token1 = xPathLexer0.dollar();
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("y", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer0.number();
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer4.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("8,:y/k[HfJ");
      Token token11 = xPathLexer5.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("8", token11.getTokenText());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      xPathLexer4.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer4.equals();
      assertEquals(21, token15.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0544377903839797
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      xPathLexer1.leftParen();
      Token token2 = xPathLexer0.star();
      assertEquals("y", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer1.at();
      xPathLexer0.dots();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("[H", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer3.nextToken();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer3.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer3.nextToken();
      assertEquals(32, token10.getTokenType());
      assertEquals(",", token10.getTokenText());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      Token token11 = xPathLexer4.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer6.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer4.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      xPathLexer7.relationalOperator();
      Token token14 = xPathLexer5.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer1.nextToken();
      assertEquals((-1), token15.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.13105542959278
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("bRT?x:OhmIt38&K<");
      xPathLexer1.notEquals();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      xPathLexer1.minus();
      xPathLexer0.doubleColon();
      xPathLexer3.number();
      xPathLexer0.notEquals();
      xPathLexer2.nextToken();
      xPathLexer0.equals();
      xPathLexer2.comma();
      xPathLexer1.div();
      XPathLexer xPathLexer4 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer2.nextToken();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.minus();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8557314837349712
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&;}E@rR969");
      xPathLexer0.setXPath("&;}E@rR969");
      Token token0 = xPathLexer1.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer2.nextToken();
      xPathLexer2.leftParen();
      xPathLexer2.star();
      Token token1 = xPathLexer2.at();
      assertEquals(" ", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals(1, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer3.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("l1Da,>K+hph{wJqO=V");
      Token token8 = xPathLexer4.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("@r", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer1.nextToken();
      assertEquals("R969", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      xPathLexer5.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer4.star();
      assertEquals("l", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.240131792248163
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("jO1A", token0.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("i", token2.getTokenText());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer1.number();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals(" c", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("0eKY|/V,&<j");
      xPathLexer1.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      Token token9 = xPathLexer4.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer3.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      Token token11 = xPathLexer3.equals();
      assertEquals("e", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      xPathLexer5.rightBracket();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals("n", token12.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token13 = xPathLexer7.number();
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9897689426284941
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("^C5Wy}* >");
      xPathLexer1.not();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer1.rightParen();
      xPathLexer0.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.number();
      xPathLexer0.dollar();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.217723519096834
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.or();
      Token token0 = xPathLexer0.slashes();
      assertEquals("o", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token1.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("Q7-iTS\u0002]xEZ;mjyzT");
      xPathLexer1.star();
      Token token2 = xPathLexer1.at();
      assertEquals("7", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer1.number();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer1.minus();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("xE", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer3.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token11 = xPathLexer5.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer5.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("Id*_1");
      Token token13 = xPathLexer7.star();
      assertEquals(20, token13.getTokenType());
      assertEquals("I", token13.getTokenText());
      
      xPathLexer5.equals();
      Token token14 = xPathLexer7.plus();
      assertEquals("d", token14.getTokenText());
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9043318700569905
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.at();
      assertEquals("i", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(")");
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(")", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("bRT?x:OhmIt38&K<");
      Token token5 = xPathLexer3.number();
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(")");
      Token token6 = xPathLexer4.leftBracket();
      assertEquals(")", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.comma();
      assertEquals("T", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer3.slashes();
      assertEquals("b", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(")");
      xPathLexer2.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer3.nextToken();
      assertEquals("RT", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("bRT?x:OhmIt38&K<");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.equals();
      xPathLexer7.equals();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token11 = xPathLexer9.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token13 = xPathLexer10.equals();
      assertEquals("i", token13.getTokenText());
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1223395533248601
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.consume((-1997));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.89273265880442
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("u?jO1A{$>nW");
      int int0 = (-1533);
      xPathLexer1.consume((-1533));
      xPathLexer1.dollar();
      xPathLexer0.and();
      xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer1.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9958928106183955
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.slashes();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(" ", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(1, token7.getTokenType());
      assertEquals("(", token7.getTokenText());
      
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer4.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer4.comma();
      assertEquals(32, token13.getTokenType());
      assertEquals(" ", token13.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token15 = xPathLexer7.not();
      assertEquals(23, token15.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6527909369403004
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("j", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("O", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("?", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token5 = xPathLexer0.slashes();
      assertEquals("O", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("1", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('W');
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("{", token7.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('b');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("$", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.LA(47);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer0.relationalOperator();
      assertEquals(9, token9.getTokenType());
      assertEquals(">", token9.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer1.rightParen();
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.190549626993022
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(":", token2.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      xPathLexer1.rightParen();
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("k", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("z Qn6Yme");
      xPathLexer1.leftParen();
      xPathLexer1.colon();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
      
      Token token10 = xPathLexer2.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer5.nextToken();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer5.dots();
      assertEquals(13, token12.getTokenType());
      assertEquals(" ", token12.getTokenText());
      
      xPathLexer5.minus();
      Token token13 = xPathLexer4.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("o_+K1pF%\"cam|CFB");
      xPathLexer1.div();
      Token token14 = xPathLexer5.comma();
      assertEquals("n", token14.getTokenText());
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer6.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals("o_", token15.getTokenText());
      
      xPathLexer6.nextToken();
      Token token16 = xPathLexer6.plus();
      assertEquals("K", token16.getTokenText());
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer6.minus();
      assertEquals("1", token17.getTokenText());
      assertEquals(6, token17.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.035636825929717
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("{", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("J{G2n<");
      xPathLexer1.whitespace();
      Token token2 = xPathLexer1.dots();
      assertEquals("{", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("J{G2n<");
      xPathLexer2.equals();
      Token token3 = xPathLexer2.notEquals();
      assertEquals("{G", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("G", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("J{G2n<");
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer("J{G2n<");
      Token token5 = xPathLexer4.number();
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("J{G2n<");
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("2", token6.getTokenText());
      
      Token token7 = xPathLexer3.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("{", token7.getTokenText());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals("2", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("{l{b>s!ID'/o< K;q=");
      Token token9 = xPathLexer6.rightBracket();
      assertEquals("{", token9.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer3.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer6.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("l", token11.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("b9EC TH8'Y`Z<_WRO}p");
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer7.equals();
      xPathLexer3.equals();
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("n", token12.getTokenText());
      
      Token token13 = xPathLexer4.dollar();
      assertEquals("J", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer8.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals("b", token14.getTokenText());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0442087346059963
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("?", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("jO1A", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      Token token3 = xPathLexer1.at();
      assertEquals("i", token3.getTokenText());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(9, token5.getTokenType());
      
      xPathLexer1.number();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      Token token6 = xPathLexer0.leftParen();
      assertEquals("W", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer2.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer2.minus();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("!gx.iN}W");
      Token token9 = xPathLexer1.number();
      assertEquals("", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer2.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer4.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      xPathLexer1.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer3.star();
      assertEquals("!", token14.getTokenText());
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer1.equals();
      assertEquals("6", token15.getTokenText());
      assertEquals(21, token15.getTokenType());
      
      xPathLexer5.plus();
      Token token16 = xPathLexer0.comma();
      assertEquals(32, token16.getTokenType());
      
      Token token17 = xPathLexer0.plus();
      assertEquals(5, token17.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8081243402980265
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.LA(109);
      xPathLexer0.at();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0511963239268964
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.leftParen();
      assertEquals("u", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("j", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("O1A{$>nW", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("O", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer("r");
      Token token8 = xPathLexer0.not();
      assertEquals("1", token8.getTokenText());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals("r", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      Token token11 = xPathLexer4.notEquals();
      assertEquals("u?", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer3.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer2.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer1.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer3.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer6.equals();
      assertEquals(21, token15.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token16 = xPathLexer9.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer4.comma();
      assertEquals("j", token17.getTokenText());
      assertEquals(32, token17.getTokenType());
      
      Token token18 = xPathLexer9.notEquals();
      assertEquals(22, token18.getTokenType());
      
      Token token19 = xPathLexer1.not();
      assertEquals(23, token19.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5075212061923167
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.getXPath();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.2043815193263216
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.slashes();
      assertEquals("8", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer1.equals();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      xPathLexer1.at();
      xPathLexer0.dots();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("m", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("[", token7.getTokenText());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer2.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("8,:y/k[HfJ");
      Token token11 = xPathLexer1.number();
      assertEquals("", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer3.nextToken();
      assertEquals("8", token12.getTokenText());
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer1.notEquals();
      assertEquals("we", token13.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token14 = xPathLexer3.nextToken();
      assertEquals(32, token14.getTokenType());
      assertEquals(",", token14.getTokenText());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      Token token15 = xPathLexer4.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer6.rightBracket();
      assertEquals(4, token16.getTokenType());
      
      xPathLexer4.leftBracket();
      xPathLexer7.relationalOperator();
      Token token17 = xPathLexer5.notEquals();
      assertEquals(22, token17.getTokenType());
      
      Token token18 = xPathLexer1.nextToken();
      assertEquals("rken.saxpath.XPathLexer", token18.getTokenText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.212203444586633
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer1.dollar();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("i{# c6~)Qk=kIV");
      xPathLexer5.leftParen();
      xPathLexer6.colon();
      xPathLexer5.not();
      xPathLexer3.literal();
      xPathLexer1.doubleColon();
      xPathLexer6.rightBracket();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.equals();
      xPathLexer0.equals();
      xPathLexer1.dollar();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token1 = xPathLexer9.equals();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8631410769673686
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("U*^10I k=}I@3");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("{", token0.getTokenText());
      
      Token token1 = xPathLexer1.plus();
      assertEquals("U", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("G", token2.getTokenText());
      
      Token token3 = xPathLexer1.colon();
      assertEquals("*", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("2", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer1.rightParen();
      Token token6 = xPathLexer0.equals();
      assertEquals("n", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.rightBracket();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("<", token7.getTokenText());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("J{G2n<");
      Token token9 = xPathLexer5.rightParen();
      assertEquals("J", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token10 = xPathLexer6.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer3.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7036155738235765
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.dots();
      assertEquals("8", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer1.or();
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(18, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("y", token3.getTokenText());
      
      xPathLexer1.star();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer0.number();
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(11, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      xPathLexer1.minus();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token9 = xPathLexer2.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer2.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer6.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer4.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8004678397083307
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("&I;}E@rR969", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.star();
      Token token2 = xPathLexer1.at();
      assertEquals("&", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("&I;}E@rR969");
      Token token3 = xPathLexer2.dots();
      assertEquals("&", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals("I", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.number();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("I", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token7 = xPathLexer3.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer2.equals();
      assertEquals("}", token8.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.notEquals();
      Token token9 = xPathLexer4.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer4.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer3.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.973530153322117
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.LA(19);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer0.consume((-1533));
      xPathLexer1.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.024624518419914
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer1.equals();
      Token token2 = xPathLexer0.slashes();
      assertEquals("Y", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.equals();
      XPathLexer xPathLexer3 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer3.doubleColon();
      assertEquals("i{", token4.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("rz0Qp[!<x!Mf1x");
      Token token5 = xPathLexer5.notEquals();
      assertEquals("rz", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("i", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token7 = xPathLexer7.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.identifier();
      Token token8 = xPathLexer5.nextToken();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token9 = xPathLexer9.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      assertEquals("K", token10.getTokenText());
      
      xPathLexer0.or();
      xPathLexer9.operatorName();
      Token token11 = xPathLexer7.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer2.rightParen();
      assertEquals("{", token12.getTokenText());
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4004421782992615
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "@3foL9'";
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.consume((-3091));
      xPathLexer0.endPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.331984779070358
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("L9'", token3.getTokenText());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.dollar();
      assertEquals("L", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token2);
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      Token token7 = xPathLexer1.colon();
      assertEquals("@", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer("@3foL9'");
      xPathLexer2.literal();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("N(Kz.RA)/NS@");
      Token token9 = xPathLexer3.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("N", token9.getTokenText());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer1.minus();
      assertEquals("3", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer2.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer0.not();
      assertEquals(23, token15.getTokenType());
      
      xPathLexer0.number();
      Token token16 = xPathLexer4.rightBracket();
      assertEquals(4, token16.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.117530013635376
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer1.at();
      xPathLexer1.dots();
      xPathLexer0.nextToken();
      xPathLexer1.number();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.minus();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("0eKY|/V,&<j");
      xPathLexer1.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      xPathLexer4.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      xPathLexer3.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      xPathLexer3.equals();
      xPathLexer5.rightBracket();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9789359250357663
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer3.number();
      xPathLexer0.notEquals();
      xPathLexer3.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer5.notEquals();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6890175830897594
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer1.dots();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(",", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer2.slashes();
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(":", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("8", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer2.at();
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer4.nextToken();
      xPathLexer0.number();
      Token token7 = xPathLexer1.pipe();
      assertEquals("y", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.plus();
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.number();
      Token token9 = xPathLexer1.notEquals();
      assertEquals("/k", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer4.nextToken();
      Token token10 = xPathLexer8.equals();
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token11 = xPathLexer9.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer2.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer5.nextToken();
      assertEquals((-1), token13.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6094948285242203
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("o", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals("L", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer1.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4000132112714083
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.colon();
      xPathLexer1.rightParen();
      xPathLexer1.whitespace();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.number();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.colon();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer3.relationalOperator();
      xPathLexer2.notEquals();
      Token token2 = xPathLexer0.nextToken();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.233996058051717
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      String string0 = "ce";
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('R');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.dollar();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.consume((-581));
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-581));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1646047179888583
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("C", token2.getTokenText());
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.star();
      assertEquals("O", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("Y", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("X%f!On[", token6.getTokenText());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("X", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token9 = xPathLexer3.minus();
      assertEquals("[", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer4.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer("/=C(OYKX%f!On[");
      Token token11 = xPathLexer6.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer4.notEquals();
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer6.nextToken();
      assertEquals(11, token13.getTokenType());
      assertEquals("/", token13.getTokenText());
      
      xPathLexer4.equals();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer7.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer5.star();
      assertEquals(20, token15.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.equals();
      Token token16 = xPathLexer7.plus();
      assertEquals(5, token16.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SLg7d@Az[8,[_");
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.consume((-644));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1619866874675298
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.consume((-1997));
      xPathLexer0.leftParen();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0270767419136395
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BnvO j0Nfe]");
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("BnvO j0Nfe]");
      Token token0 = xPathLexer1.minus();
      assertEquals("B", token0.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer0.slashes();
      xPathLexer1.doubleColon();
      xPathLexer0.comma();
      xPathLexer1.number();
      Token token1 = xPathLexer0.dollar();
      assertEquals(" ", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("BnvO j0Nfe]");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("BnvO j0Nfe]");
      Token token2 = xPathLexer3.slashes();
      assertEquals("B", token2.getTokenText());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(" j", token5.getTokenText());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(";l+VT,|");
      Token token7 = xPathLexer3.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token8 = xPathLexer0.number();
      assertEquals("0", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("N", token9.getTokenText());
      
      Token token10 = xPathLexer2.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("N", token10.getTokenText());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("f", token11.getTokenText());
      
      Token token12 = xPathLexer3.star();
      assertEquals("v", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals(15, token13.getTokenType());
      assertEquals("fe", token13.getTokenText());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.leftParen();
      xPathLexer2.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9246439442712338
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("No-'l");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("No-", token3.getTokenText());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.2437342663811863
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals("C", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("O", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.at();
      assertEquals("{", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token6.getTokenText());
      
      xPathLexer1.number();
      Token token7 = xPathLexer1.pipe();
      assertEquals("c", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("K", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer3.number();
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("i{", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer0.nextToken();
      assertEquals("X", token11.getTokenText());
      
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("%", token12.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer2.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer5.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4070988740355914
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(",", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.dollar();
      assertEquals("/", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("k", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("[", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      char char0 = xPathLexer0.LA(7);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("f", token6.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-1));
      char char1 = xPathLexer0.LA((-1));
      assertEquals('H', char1);
      
      xPathLexer0.or();
      xPathLexer0.div();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1610655069946354
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("Fg,*");
      xPathLexer1.number();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("Fg,*");
      xPathLexer5.minus();
      xPathLexer4.star();
      xPathLexer5.equals();
      xPathLexer0.plus();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5296701741127758
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.slashes();
      String string0 = "i{T c6~)Tk=kIV";
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("/=C(OYKX%f!On[");
      XPathLexer xPathLexer4 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1677048383390476
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("&", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.LA(7);
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("E", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("@r", token7.getTokenText());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("R969", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Peg>_:;d52");
      xPathLexer0.or();
      int int0 = (-776);
      xPathLexer0.consume((-776));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.137928493396507
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.leftParen();
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer0.equals();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token14 = xPathLexer1.equals();
      assertEquals("c", token14.getTokenText());
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0278958319072258
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer1.LA(109);
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.getXPath();
      xPathLexer1.at();
      xPathLexer1.dots();
      xPathLexer1.nextToken();
      xPathLexer1.number();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer2.nextToken();
      xPathLexer0.colon();
      xPathLexer2.not();
      xPathLexer1.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer3.leftBracket();
      xPathLexer0.comma();
      xPathLexer2.at();
      xPathLexer3.star();
      xPathLexer4.nextToken();
      xPathLexer2.operatorName();
      xPathLexer3.leftParen();
      xPathLexer1.and();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2571478687100512
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.star();
      assertEquals("$", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals("{", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(9, token5.getTokenType());
      
      xPathLexer1.number();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      xPathLexer1.and();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.number();
      Token token8 = xPathLexer1.pipe();
      assertEquals("T", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer1.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.comma();
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer5.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.minus();
      assertEquals(6, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.star();
      XPathLexer xPathLexer8 = new XPathLexer(".BJ#tMfvzzQMK]qN>W");
      Token token14 = xPathLexer8.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9040217456240887
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals("j", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.nextToken();
      xPathLexer1.leftParen();
      xPathLexer0.star();
      Token token2 = xPathLexer1.at();
      assertEquals("?", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("j", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("$", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.colon();
      assertEquals("O", token6.getTokenText());
      
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.not();
      xPathLexer0.literal();
      Token token7 = xPathLexer3.doubleColon();
      assertEquals("u?", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      Token token8 = xPathLexer4.notEquals();
      assertEquals("u?", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("jO1A", token9.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer2.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer1.minus();
      assertEquals(6, token10.getTokenType());
      assertEquals("1", token10.getTokenText());
      
      Token token11 = xPathLexer3.star();
      assertEquals("{", token11.getTokenText());
      
      Token token12 = xPathLexer6.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token13 = xPathLexer9.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer4.comma();
      assertEquals(32, token14.getTokenType());
      assertEquals("j", token14.getTokenText());
      
      Token token15 = xPathLexer9.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer1.not();
      assertEquals("A", token16.getTokenText());
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.165069384756312
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7783330088867726
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer1.colon();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("&I;}E@rR969");
      xPathLexer2.nextToken();
      Token token2 = xPathLexer3.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer3.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.minus();
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer3.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer3.comma();
      assertEquals("}", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token12 = xPathLexer7.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("c", token12.getTokenText());
      
      xPathLexer4.operatorName();
      xPathLexer2.leftParen();
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token14 = xPathLexer9.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0236061774919727
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer1.pipe();
      xPathLexer0.plus();
      xPathLexer1.dollar();
      xPathLexer0.equals();
      xPathLexer1.colon();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer2.not();
      xPathLexer3.doubleColon();
      xPathLexer3.star();
      xPathLexer2.minus();
      XPathLexer xPathLexer4 = new XPathLexer("m:x5^[esA}q8QK]");
      xPathLexer1.leftBracket();
      xPathLexer4.identifier();
      xPathLexer3.comma();
      xPathLexer3.nextToken();
      xPathLexer2.equals();
      Token token0 = xPathLexer3.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.147326525217065
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer3.number();
      xPathLexer0.notEquals();
      xPathLexer3.number();
      xPathLexer0.nextToken();
      xPathLexer3.equals();
      XPathLexer xPathLexer4 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer4.notEquals();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.126645438972221
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("u?jO1A{$>nW");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(26, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals("u", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(">", token4.getTokenText());
      
      Token token5 = xPathLexer1.at();
      assertEquals("?", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals("j", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("nW", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("O", token9.getTokenText());
      
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer("r");
      xPathLexer0.not();
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer3.doubleColon();
      assertEquals("r", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("u?jO1A{$>nW");
      Token token12 = xPathLexer4.notEquals();
      assertEquals("u?", token12.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer3.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer2.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer1.minus();
      assertEquals("1", token14.getTokenText());
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer3.star();
      assertEquals(20, token15.getTokenType());
      
      Token token16 = xPathLexer6.equals();
      assertEquals(21, token16.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token17 = xPathLexer9.plus();
      assertEquals(5, token17.getTokenType());
      
      Token token18 = xPathLexer4.comma();
      assertEquals("j", token18.getTokenText());
      assertEquals(32, token18.getTokenType());
      
      xPathLexer9.notEquals();
      Token token19 = xPathLexer1.not();
      assertEquals("A", token19.getTokenText());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.863725215149263
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "&I;}E@rR969";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      xPathLexer1.pipe();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.927501764513189
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-284));
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4368089938639468
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      xPathLexer1.literal();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dots();
      xPathLexer2.minus();
      XPathLexer xPathLexer3 = new XPathLexer("N(Kz.RA)/NS@");
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer3.not();
      xPathLexer4.nextToken();
      xPathLexer1.literal();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.164237536865641
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      xPathLexer0.consume((-849));
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.582255316300377
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("{x^fp:7N{||xVkC");
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("{", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.dollar();
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("{x^fp:7N{||xVkC");
      xPathLexer2.operatorName();
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("{x", token4.getTokenText());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals("f", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals("p", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer3.doubleColon();
      assertEquals("Bv", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("Bv3?fr|l0w@NI");
      xPathLexer5.or();
      Token token9 = xPathLexer5.star();
      assertEquals("B", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      boolean boolean0 = xPathLexer4.isIdentifierStartChar('o');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer6.operatorName();
      Token token11 = xPathLexer4.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer6.at();
      assertEquals(16, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("3", token13.getTokenText());
      
      Token token14 = xPathLexer0.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.601231368988989
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.or();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("*d`T{;<l<qF?16`/6{");
      Token token1 = xPathLexer1.plus();
      assertEquals("*", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dollar();
      Token token2 = xPathLexer2.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(":", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      assertEquals("d", token4.getTokenText());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("*d`T{;<l<qF?16`/6{");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer0.minus();
      assertEquals("y", token7.getTokenText());
      
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer6 = new XPathLexer("Bv3?fr|l0w@NI");
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      boolean boolean0 = xPathLexer5.isIdentifierStartChar('^');
      assertFalse(boolean0);
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token9 = xPathLexer3.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer1.operatorName();
      Token token10 = xPathLexer1.leftParen();
      assertEquals("`", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer6.identifier();
      assertEquals("Bv3", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token12 = xPathLexer1.equals();
      assertEquals("T", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer7.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer6.doubleColon();
      assertEquals(19, token14.getTokenType());
      assertEquals("?f", token14.getTokenText());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4523187021774486
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.isIdentifierChar('^');
      xPathLexer0.isIdentifierChar('^');
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(2, token3.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.3566246684239922
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token1 = xPathLexer1.pipe();
      assertEquals("&", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.dollar();
      Token token3 = xPathLexer1.colon();
      assertEquals(";", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.dollar();
      assertEquals("}", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      xPathLexer2.rightParen();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals("E", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals("r", token11.getTokenText());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7032197464641436
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token0 = xPathLexer1.pipe();
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer1.dollar();
      Token token3 = xPathLexer1.colon();
      assertEquals(";", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      xPathLexer2.rightParen();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      Token token7 = xPathLexer3.rightBracket();
      xPathLexer3.rightBracket();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("E", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer1.setPreviousToken(token7);
      assertEquals(4, token7.getTokenType());
      assertEquals("B", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals("@", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.048056464279869
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token1 = xPathLexer0.identifier();
      assertEquals("0", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setXPath("ce");
      Token token5 = xPathLexer0.dollar();
      assertEquals("c", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("e", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer0.setXPath("Y?QB+}+|\"#|\"M");
      XPathLexer xPathLexer1 = new XPathLexer("0#qNr8j9-cE[");
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer0.comma();
      assertEquals("Y", token15.getTokenText());
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer1.nextToken();
      assertEquals((-1), token16.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.162050126681218
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.not();
      Token token2 = xPathLexer0.equals();
      assertEquals("O", token2.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      Token token3 = xPathLexer0.at();
      assertEquals("{", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.not();
      assertEquals(">", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("n", token6.getTokenText());
      
      xPathLexer0.or();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("W", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer0.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.nextToken();
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.notEquals();
      Token token13 = xPathLexer1.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer1.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer3.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-862));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3545042820684197
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("O", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.at();
      assertEquals("{", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals("T", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token7.getTokenText());
      
      xPathLexer1.number();
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals("YK", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer1.minus();
      assertEquals("~", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer1.comma();
      assertEquals(")", token12.getTokenText());
      assertEquals(32, token12.getTokenType());
      
      xPathLexer1.div();
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      assertEquals("X", token13.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer0.or();
      Token token14 = xPathLexer0.doubleColon();
      assertEquals("%f", token14.getTokenText());
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer0.nextToken();
      assertEquals(23, token15.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.252235292944894
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.1424975058922238
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.or();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.pipe();
      assertEquals("%", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer4.or();
      Token token5 = xPathLexer4.leftParen();
      assertEquals("/", token5.getTokenText());
      
      Token token6 = xPathLexer4.colon();
      assertEquals("=", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      xPathLexer3.literal();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("f!", token8.getTokenText());
      
      Token token9 = xPathLexer4.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("C", token9.getTokenText());
      
      Token token10 = xPathLexer2.minus();
      assertEquals("o", token10.getTokenText());
      
      Token token11 = xPathLexer1.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.div();
      xPathLexer5.comma();
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals(15, token13.getTokenType());
      assertEquals("On", token13.getTokenText());
      
      Token token14 = xPathLexer4.plus();
      assertEquals(5, token14.getTokenType());
      assertEquals("(", token14.getTokenText());
      
      Token token15 = xPathLexer4.comma();
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer4.dollar();
      assertEquals("Y", token16.getTokenText());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.2210590054928083
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer1.at();
      xPathLexer1.dots();
      xPathLexer0.nextToken();
      xPathLexer1.consume();
      xPathLexer1.number();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.minus();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("0eKY|/V,&<j");
      xPathLexer1.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer4.nextToken();
      xPathLexer4.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      xPathLexer3.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer2.star();
      xPathLexer3.equals();
      xPathLexer5.rightBracket();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.3039265660269868
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("'j` kU#dd[7LK_|");
      xPathLexer2.colon();
      xPathLexer1.not();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("}jz=Ae.;");
      xPathLexer3.dots();
      XPathLexer xPathLexer4 = new XPathLexer("'j` kU#dd[7LK_|");
      Token token0 = xPathLexer4.minus();
      xPathLexer3.operatorName();
      xPathLexer1.comma();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.at();
      XPathLexer xPathLexer6 = new XPathLexer("u[L,Hok$U_");
      xPathLexer6.star();
      xPathLexer0.nextToken();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.leftParen();
      xPathLexer3.identifier();
      xPathLexer6.plus();
      Token token1 = xPathLexer4.dots();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.797861655568488
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(":", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.at();
      assertEquals("y", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(11, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.dollar();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("b!wx");
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("k", token6.getTokenText());
      
      Token token7 = xPathLexer3.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer1.slashes();
      XPathLexer xPathLexer5 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer6.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer6.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer0.equals();
      assertEquals("[", token10.getTokenText());
      
      xPathLexer6.equals();
      Token token11 = xPathLexer6.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.7571485790583585
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token1 = xPathLexer1.pipe();
      assertEquals("&", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.dollar();
      Token token3 = xPathLexer1.colon();
      assertEquals(";", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer2.rightParen();
      xPathLexer2.and();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      Token token7 = xPathLexer1.notEquals();
      assertEquals("E@", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      xPathLexer3.rightBracket();
      Token token8 = xPathLexer3.rightBracket();
      assertEquals("v", token8.getTokenText());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("rR969", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.identifier();
      char char0 = xPathLexer4.LA(124);
      assertEquals('\uFFFF', char0);
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer2.rightBracket();
      assertEquals(4, token12.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7665124600052433
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.equals();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(":", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      assertNotNull(token3);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("k[", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("H", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("f", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("bRT?x:OhmIt38&K<");
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer2.at();
      assertEquals("b", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer3.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer1.rightParen();
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("Aj7}W8|8?");
      xPathLexer2.rightBracket();
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.rightParen();
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5732626281805184
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.rightParen();
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      xPathLexer0.rightBracket();
      Token token8 = xPathLexer2.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("r+PzXY9r");
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6508287993376625
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.160346022310744
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(18, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.equals();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      xPathLexer1.at();
      xPathLexer0.dots();
      Token token5 = xPathLexer1.at();
      assertEquals("m", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(".", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer2.not();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("Hf", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("8,:y/k[HfJ");
      Token token10 = xPathLexer1.number();
      assertEquals(30, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.nextToken();
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.mod();
      xPathLexer5.dots();
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer5.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token14 = xPathLexer7.comma();
      assertEquals("c", token14.getTokenText());
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer1.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer7.not();
      assertEquals(23, token16.getTokenType());
      assertEquals("o", token16.getTokenText());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1787955943629966
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("y", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("k[", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("J", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("bRT?x:OhmIt38&K<");
      xPathLexer2.colon();
      Token token5 = xPathLexer1.not();
      assertEquals("8", token5.getTokenText());
      
      xPathLexer0.consume(33);
      Token token6 = xPathLexer2.doubleColon();
      assertEquals("RT", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer("8,:y/k[HfJ");
      Token token8 = xPathLexer1.slashes();
      assertEquals(":", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer2.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("?", token9.getTokenText());
      
      xPathLexer4.minus();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer2.equals();
      assertEquals("x", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer7.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer6.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer4.not();
      assertEquals(23, token14.getTokenType());
      
      Token token15 = xPathLexer0.number();
      assertEquals(30, token15.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.671271324052301
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("&I;}E@rR969");
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.dollar();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(";", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      xPathLexer2.rightParen();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Bv3?fr|l0w@NI");
      xPathLexer3.rightBracket();
      Token token7 = xPathLexer3.rightBracket();
      assertEquals("v", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("E", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("@", token10.getTokenText());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.45767082697593
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.9503748217465766
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dots();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("N(Kz.RA)/NS@");
      xPathLexer2.comma();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.7365133272898206
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      xPathLexer1.rightParen();
      xPathLexer0.and();
      xPathLexer1.equals();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer("4Pj3=nD=OAK-5Y]S");
      xPathLexer2.leftParen();
      xPathLexer2.colon();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer1.doubleColon();
      xPathLexer3.dots();
      xPathLexer3.minus();
      xPathLexer3.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("4Pj3=nD=OAK-5Y]S");
      xPathLexer4.div();
      xPathLexer0.notEquals();
      xPathLexer1.plus();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token0 = xPathLexer5.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8003123335808624
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QILNREQsQ^`");
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }
}
