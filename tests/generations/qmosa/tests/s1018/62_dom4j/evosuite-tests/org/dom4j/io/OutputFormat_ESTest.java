/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:48:42 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2306267181564126
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-newles";
      stringArray0[1] = "UTF-8";
      int int0 = 2147483645;
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2274219259109698
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("TbtN<$");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-padText";
      stringArray0[1] = "TbtN<$";
      stringArray0[2] = "TbtN<$";
      stringArray0[3] = "-padText";
      stringArray0[4] = "TbtN<$";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-expagdEmptyfdybEv>A";
      outputFormat0.parseOptions(stringArray1, 0);
      stringArray1[3] = "-padText";
      stringArray1[4] = "TbtN<$";
      stringArray1[6] = "TbtN<$";
      stringArray1[7] = "-padText";
      String[] stringArray2 = new String[4];
      stringArray2[2] = "TbtN<$";
      outputFormat0.parseOptions(stringArray0, 3);
      outputFormat0.parseOptions(stringArray2, 2278);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-3753));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3753
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.077485751661063
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-trimText";
      stringArray0[0] = "-trimText";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "-trimText";
      stringArray1[1] = "-trimText";
      stringArray1[2] = "-lineSeara4or";
      stringArray1[0] = "-omitEncoding";
      stringArray1[4] = "!U\"uEsHyJJRjt7VJ&`";
      outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1227638606994965
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = new OutputFormat("-newlines", true, "-newlines");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "DwHIRIay[xo";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "-newlines";
      stringArray0[6] = "-newlines";
      stringArray0[7] = "-newlines";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-newlines", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals(2, int0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isTrimText());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isXHTML());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isPadText());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isNewlines());
      assertEquals("  ", outputFormat2.getIndent());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.762064591127935
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, (String) null);
      OutputFormat.createCompactFormat();
      outputFormat0.setPadText(false);
      String string0 = outputFormat0.getEncoding();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertNull(string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      String string1 = outputFormat2.getEncoding();
      assertEquals("UTF-8", string1);
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertEquals(0, outputFormat3.getNewLineAfterNTags());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertFalse(outputFormat3.isPadText());
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isNewlines());
      assertFalse(outputFormat3.isXHTML());
      assertFalse(outputFormat3.isOmitEncoding());
      assertFalse(outputFormat3.isSuppressDeclaration());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertTrue(outputFormat3.isTrimText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0095656777988737
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "TbtN<$";
      stringArray0[1] = "TbtN<$";
      stringArray0[2] = "TbtN<$";
      stringArray0[3] = "-suppressDeclaration";
      outputFormat0.parseOptions(stringArray0, 3);
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setIndentSize(2358);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "TbtN<$";
      stringArray1[1] = "TbtN<$";
      outputFormat0.parseOptions(stringArray0, 3);
      stringArray1[2] = "-suppressDeclaration";
      stringArray1[3] = "-suppressDeclaration";
      stringArray1[4] = "-lineSeara4or";
      outputFormat1.parseOptions(stringArray1, 3);
      outputFormat1.parseOptions(stringArray1, 3);
      int int0 = (-1222);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1222));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1222
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5783111392288376
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("j%NGI.", true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isXHTML();
      assertFalse(boolean0);
      
      outputFormat0.setIndent(true);
      outputFormat0.setXHTML(true);
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[18];
      stringArray0[1] = "-lineSeparator";
      stringArray0[3] = "-eWpandEmptyrh9VZaC+b";
      stringArray0[4] = "j%NIeI'0e";
      outputFormat0.setNewLineAfterDeclaration(true);
      stringArray0[5] = "j%NGI.";
      stringArray0[6] = "-lineSeparator";
      stringArray0[7] = "j%NGI.";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getEncoding();
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4406055751636426
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1093375311441345
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xhtml-xhtml-timTedt";
      stringArray0[1] = "-xhtml-xhtml-timTedt";
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "-xhtml-xhtml-timTedt";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-xhtml-xhtml-timTedt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1048724527561897
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(2, int0);
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isPadText());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isTrimText());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals("  ", outputFormat2.getIndent());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isNewlines());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat2.getEncoding());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-lineSeparator", false, "v0@2}?Bh~hw]0c^U&");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isExpandEmptyElements();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-expandEmpty-lineSeparator";
      stringArray0[1] = "v0@2}?Bh~hw]0c^U&";
      stringArray0[2] = "v0@2}?Bh~hw]0c^U&";
      stringArray0[3] = "-expandEmpty-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.922496759508184
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndent("");
      outputFormat0.getEncoding();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1209620588976943
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-omiEncodng";
      stringArray0[1] = "-expandEmpty-newles";
      stringArray0[2] = "-omiEncodng";
      stringArray0[3] = "-expandEmpty-newles";
      stringArray0[5] = "-omiEncodng";
      stringArray0[6] = "-omiEncodng";
      stringArray0[7] = "-omiEncodng";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.269925105825106
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-trimTedt";
      stringArray0[2] = "-trimTedt";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "-trimTedt";
      stringArray0[5] = "-trimTedt";
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setOmitEncoding(true);
      assertTrue(outputFormat1.isOmitEncoding());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndentSize(2);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat3.isOmitEncoding());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9598083393209311
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "-lineSeparator";
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "8h~6";
      stringArray0[2] = "-lineSeparator";
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", true);
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("Pi<u");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.37326739880075
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("M.K+l*bX");
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "-lineSeparator";
      stringArray0[6] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1234257470756686
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-eWpandEmptyrh9VZaC+b";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "j%NGI.";
      stringArray0[5] = "-lineSeparator";
      stringArray0[6] = "-eWpandEmptyrh9VZaC+b";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-lineSeparator", outputFormat0.getLineSeparator());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("UTF-8", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6593685009187538
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      outputFormat0.setEncoding(stringArray0[0]);
      stringArray0[3] = "Invalid attribute quote character (";
      stringArray0[3] = stringArray0[1];
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewlines());
      assertEquals("  ", outputFormat2.getIndent());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertTrue(outputFormat2.isTrimText());
      assertTrue(outputFormat2.isPadText());
      assertFalse(outputFormat2.isSuppressDeclaration());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setIndent(true);
      outputFormat1.setNewLineAfterNTags((-1994091956));
      outputFormat0.setSuppressDeclaration(true);
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.setOmitEncoding(true);
      outputFormat0.setIndentSize(3659);
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setIndent("");
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-2293));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2293
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0850162128140806
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding("RsD");
      outputFormat0.setPadText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("RsD");
      outputFormat0.setEncoding("RsD");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-oHitEnc#din";
      stringArray0[1] = "RsD";
      stringArray0[2] = "RsD";
      stringArray0[3] = "RsD";
      stringArray0[4] = "RsD";
      outputFormat0.setLineSeparator("RsD");
      stringArray0[5] = "RsD";
      stringArray0[6] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 249);
      outputFormat0.setIndent("RsD");
      assertEquals("RsD", outputFormat0.getIndent());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1590087786957057
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent("");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setNewLineAfterNTags(2);
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[6] = "";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("");
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndentSize(882);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndentSize(2);
      outputFormat0.isTrimText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndentSize((-1988));
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(false);
      assertEquals(2, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0257505895352663
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[10];
      OutputFormat outputFormat0 = new OutputFormat("f?(K#/s|XL[WK,GRIu+", true, (String) null);
      outputFormat0.setPadText(true);
      outputFormat0.setXHTML(true);
      assertEquals("f?(K#/s|XL[WK,GRIu+", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize((-702));
      outputFormat0.getIndent();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      outputFormat0.setIndent((String) null);
      outputFormat1.parseOptions(stringArray0, 13);
      outputFormat1.parseOptions(stringArray0, 1331);
      outputFormat0.setSuppressDeclaration(false);
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = new OutputFormat("", true);
      assertEquals("", outputFormat1.getIndent());
      
      outputFormat1.setIndent("");
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat outputFormat2 = new OutputFormat();
      assertFalse(outputFormat2.isXHTML());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndent("-indentSize");
      outputFormat0.setNewlines(true);
      outputFormat0.isNewlines();
      OutputFormat outputFormat1 = new OutputFormat("-indentSize");
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6752433653001075
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("_3N2/.!%:");
      outputFormat0.setIndent("");
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndentSize(0);
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setIndent("_3N2/.!%:");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "  ";
      stringArray0[1] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("Invalid attribute quote character (");
      outputFormat0.setIndent("1o3M27)");
      assertEquals("1o3M27)", outputFormat0.getIndent());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-triTet";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1587);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 2286);
      int int1 = (-136535526);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-triTet";
      stringArray1[1] = "-xhtml&padText";
      stringArray1[2] = "-triTet";
      stringArray1[3] = "-triTet";
      stringArray1[4] = "g`Y}r";
      stringArray1[5] = "&h";
      stringArray1[6] = "";
      stringArray1[7] = "-triTet";
      outputFormat0.parseOptions(stringArray1, 2286);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-136535526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -136535526
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("_3N2/.!%:");
      OutputFormat outputFormat1 = new OutputFormat("", true, "[}q{");
      OutputFormat outputFormat2 = new OutputFormat("[}q{", false);
      outputFormat1.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7257348275872986
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "nm9GCC$n(q0`N/Q";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nm9GCC$n(q0`N/Q";
      stringArray0[1] = "nm9GCC$n(q0`N/Q";
      stringArray0[2] = "nm9GCC$n(q0`N/Q";
      stringArray0[3] = "nm9GCC$n(q0`N/Q";
      stringArray0[4] = "nm9GCC$n(q0`N/Q";
      stringArray0[5] = "nm9GCC$n(q0`N/Q";
      stringArray0[6] = "nm9GCC$n(q0`N/Q";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-triTet";
      stringArray1[1] = "nm9GCC$n(q0`N/Q";
      stringArray1[2] = "nm9GCC$n(q0`N/Q";
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "&padText";
      stringArray0[8] = "TbtN<$";
      stringArray0[2] = "TbtN<$";
      stringArray0[3] = "&padText";
      stringArray0[4] = "TbtN<$";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-expagdEmptyfdybEv>A";
      outputFormat0.getNewLineAfterNTags();
      stringArray1[3] = "&padText";
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-lineSeparator", false, "v0@2}?Bh~hw]0c^U&");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-expandEmpty-lineSeparator", outputFormat0.getIndent());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9440256153973703
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding", true);
      outputFormat0.setXHTML(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("owCO06tD;xz");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isXHTML();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent("owCO06tD;xz");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-expandEmptyfdybEv>A";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8f#Q0|FA[,n:WRR";
      stringArray0[1] = "VzyG";
      stringArray0[2] = "63]!<L0+IWE";
      stringArray0[3] = ".)fC#G..dRe$'";
      stringArray0[4] = " ";
      stringArray0[5] = "-xhtml-lineSeara4or";
      outputFormat0.setAttributeQuoteCharacter('\"');
      stringArray0[6] = "Sq{E$Za";
      stringArray0[7] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -244
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.293018751448789
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndent(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.setXHTML(false);
      outputFormat0.isTrimText();
      outputFormat1.setLineSeparator("0yX@F*Nw7.Vfz>");
      outputFormat0.setNewLineAfterNTags(1562);
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isXHTML();
      outputFormat1.setIndent(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isOmitEncoding();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0yX@F*Nw7.Vfz>";
      stringArray0[1] = "0yX@F*Nw7.Vfz>";
      stringArray0[2] = "0yX@F*Nw7.Vfz>";
      outputFormat2.setXHTML(true);
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, (-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -126
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tw^?IRIay[#";
      stringArray0[2] = "tw^?IRIay[#";
      stringArray0[3] = "tw^?IRIay[#";
      OutputFormat outputFormat0 = new OutputFormat("tw^?IRIay[#", false);
      assertEquals("tw^?IRIay[#", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.938311329683084
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("eziKyeLm0L`", false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent("eziKyeLm0L`");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setPadText(false);
      outputFormat0.setIndentSize(0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-723));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -723
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\"sv[Obpew&dG/L6S2c");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("rh+VZa");
      assertEquals("rh+VZa", outputFormat0.getIndent());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isTrimText();
      boolean boolean0 = true;
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[10];
      outputFormat0.setPadText(false);
      stringArray0[2] = "";
      stringArray0[3] = "q*Kya02t7lD=4Q";
      stringArray0[4] = "";
      stringArray0[5] = "q*Kya02t7lD=4Q";
      stringArray0[6] = "q*Kya02t7lD=4Q";
      stringArray0[7] = "q*Kya02t7lD=4Q";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.691735059102455
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("_3N2/.!%:");
      outputFormat0.setIndent("");
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.setLineSeparator("");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.getIndent();
      outputFormat0.setIndent("_3N2/.!%:");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_3N2/.!%:";
      stringArray0[3] = "";
      stringArray0[2] = "";
      stringArray0[5] = "_3N2/.!%:";
      stringArray0[6] = "_3N2/.!%:";
      stringArray0[7] = "";
      stringArray0[8] = "";
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals("_3N2/.!%:", outputFormat0.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.147576009616535
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("-padText");
      outputFormat0.setIndentSize(48);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals("                                                ", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("Uds");
      outputFormat0.setIndent("-padText");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals("-padText", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("q*Kya02t7lD=4Q");
      outputFormat0.setEncoding("");
      OutputFormat outputFormat1 = new OutputFormat();
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setIndent("UTF-8");
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[4] = "";
      outputFormat0.setIndent("~%wcJ1RW=.VU");
      assertEquals("~%wcJ1RW=.VU", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-1141));
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tw^?IRIay[#";
      stringArray0[1] = "tw^?IRIay[#";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "tw^?IRIay[#";
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", true, "tw^?IRIay[#");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("tw^?IRIay[#", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("Invalid attribute quote character (", outputFormat0.getIndent());
      assertEquals('\"', char0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.662578246413737
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-triTet";
      stringArray0[1] = "2Sh";
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags((-818));
      assertEquals((-818), outputFormat1.getNewLineAfterNTags());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("N|]('&4", true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isXHTML();
      outputFormat0.setIndent(true);
      outputFormat0.setPadText(false);
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[18];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "f?(K#/s|XL[WK,GRIu+";
      stringArray0[3] = "-eWpandEmptyrh9VZaC+b";
      stringArray0[4] = "j%NIeI'0e";
      outputFormat0.setNewLineAfterDeclaration(true);
      stringArray0[5] = "N|]('&4";
      stringArray0[6] = "j%NIeI'0e";
      stringArray0[7] = "N|]('&4";
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setSuppressDeclaration(true);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2665523914311523
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f?(K#/s|XL[WK,GRIu+";
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      stringArray0[1] = "f?(K#/s|XL[WK,GRIu+";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isPadText());
      
      stringArray0[2] = "\n";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "pUp";
      stringArray0[6] = "8NbC'Mf&2-";
      stringArray0[7] = "f?(K#/s|XL[WK,GRIu+";
      OutputFormat.createCompactFormat();
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setPadText(false);
      outputFormat1.setSuppressDeclaration(false);
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      boolean boolean0 = outputFormat0.isNewlines();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("-indentSize", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("[yQ U|]uK)JoW~IR)");
      assertEquals("[yQ U|]uK)JoW~IR)", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QWsp<,\"8Q}gfa?Df";
      stringArray0[1] = "3NXB4Hot+~~P#e";
      stringArray0[2] = "\"f";
      stringArray0[3] = "-oHitEnc#din";
      OutputFormat outputFormat0 = new OutputFormat("1xlM%0Y^aHNr*u", true);
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(2, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("1xlM%0Y^aHNr*u", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6488041417305412
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&!,y|]=..<Ms", false, "t`%?");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat outputFormat1 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TbtN<$";
      stringArray0[1] = "&!,y|]=..<Ms";
      stringArray0[2] = "TbtN<$";
      OutputFormat outputFormat2 = new OutputFormat();
      assertFalse(outputFormat2.isOmitEncoding());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("8h~6", true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (})
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.7257348275872986
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "2Sh";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ur`XI%/ 0Yh2C$Da";
      stringArray0[1] = "2Sh";
      stringArray0[2] = "2Sh";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.123302061237697
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-xhtml-xhtml-timTedt";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-xhtml-xhtml-timTedt";
      stringArray1[1] = "Go=SE]5D h";
      OutputFormat.createPrettyPrint();
      outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isXHTML());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "tw^?IRIay[#";
      stringArray0[1] = "8h~H";
      stringArray0[2] = "8h~H";
      stringArray0[3] = "-lineSeparator";
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator");
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", string0);
      assertEquals("-lineSeparator", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
  }
}
