/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:29:59 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.150619822595644
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.resolveEntity("^t@~hZ2JOyh_sgR(wZ", "//tmp/X8omO.Q>`..&fZ1,0X8omO.Q>`..&fZ1,");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.createDefaultEntityResolver("");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl0.setParent(xMLFilterImpl2);
      xMLFilterImpl1.characters((char[]) null, (byte) (-95), (byte)28);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      InputSource inputSource1 = new InputSource((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.getXMLFilter();
      sAXReader0.getErrorHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("4r+S+~8n");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("4r+S+~8n", "string");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("");
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3674724429174536
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getDocumentFactory();
      sAXReader0.getErrorHandler();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@353aa423 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter1 = null;
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.getLength();
      attributeListImpl0.clear();
      parserAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[1] = '5';
      parserAdapter0.ignorableWhitespace(charArray0, (-11), (-11));
      parserAdapter0.characters(charArray0, 39, 2911);
      char[] charArray1 = new char[20];
      charArray1[0] = '5';
      charArray1[1] = '5';
      charArray1[2] = '5';
      charArray1[3] = '5';
      String string0 = null;
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", xMLFilterImpl3);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("//tmp/Y%*+2IL$C<0.tmp");
      String string0 = "3xBTGx;cakY~TkQ7c^";
      File file0 = MockFile.createTempFile("//tmp/org.jaxen.dom4j.DocumentNavigator$Singleton1org.jaxen.dom4j.DocumentNavigator$Singleton", "//tmp/Y%*+2IL$C<0.tmp");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/Y%*+2IL$C<0.TMP\". Nested exception: Invalid encoding name \"//TMP/Y%*+2IL$C<0.TMP\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.setEncoding("6f~;Z)rv/>;:Ki7");
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          MockURL.getFtpExample();
          String string0 = "//home/ubuntu/termite/projects/62_dom4j/This Attribute is read only and cannot be changed/This Attribute is read only and cannot be changed0This Attribute is read only and cannot be changed";
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor264.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor264.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("X8omOi.Q>`..&fZ,");
      sAXReader_SAXEntityResolver0.uriPrefix = "3j`p[3LPx3ID;@`{[Y";
      sAXReader_SAXEntityResolver0.resolveEntity("H_D}--o<A{", "");
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("3j`p[3LPx3ID;@`{[Y");
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"3J`P[3LPX3ID;@`{[Y\". Nested exception: Invalid encoding name \"3J`P[3LPX3ID;@`{[Y\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3502595610634747
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/X8omOi.Q>`..&fZ,0X8omOi.Q>`..&fZ,");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "X8omOi.Q>`..&fZ,");
      File file0 = MockFile.createTempFile("X8omOi.Q>`..&fZ,", "X8omOi.Q>`..&fZ,", (File) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      file0.setReadOnly();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("X8omOi.Q>`..&fZ,");
      sAXReader0.createDefaultEntityResolver("f3JZ%C");
      sAXReader0.setEntityResolver(sAXReader_SAXEntityResolver0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///tmp/X8omOi.Q>`..&fZ,0X8omOi.Q>`..&fZ, : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.418521658670515
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getEncoding();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)15);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D=N>r;!}DJh)fN");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H_D}--o<A{");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl1.getContentHandler();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read("H_D}--o<A{");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte byte0 = (byte) (-60);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-60));
      byteArrayInputStream0.close();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.mark((-2477));
      byteArrayInputStream0.skip((byte) (-60));
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "{nL;!8stE+]2Z'!Ny7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document {nL;!8stE+]2Z'!Ny7 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2263282181113064
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("KW");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("comment()", "//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("jp VS:#KT-");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("Validation not supported for XMLReader: ");
      sAXReader_SAXEntityResolver2.uriPrefix = "Validation not supported for XMLReader: ";
      sAXReader_SAXEntityResolver2.resolveEntity("//tmp/ile:/0ile:", "zN5+\u0002J");
      StringReader stringReader0 = new StringReader("//tmp/ile:/0ile:");
      StringReader stringReader1 = new StringReader("[G8A4nEMXb8");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setFeature("http://xml.org/sax/features/namespaces", false);
      InputSource inputSource1 = sAXReader_SAXEntityResolver2.resolveEntity("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", "KW");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.722973226438147
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = QName.get(")*/d,yb.K", ")*/d,yb.K");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.setEncoding(")*/d,yb.K");
      sAXReader0.getEncoding();
      sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(")*/d,yb.K");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")*/d,yb.K");
      qName0.toString();
      sAXReader_SAXEntityResolver0.uriPrefix = ")*/d,yb.K";
      qName0.toString();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, ")*/d,yb.K");
      sAXReader0.createXMLReader();
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.253253709276892
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource("QkCsUNtaF0P");
      StringReader stringReader0 = new StringReader("QkCsUNtaF0P");
      inputSource0.setCharacterStream(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document QkCsUNtaF0P : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3340105861575124
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("ER{e%u%%dC^c");
      InputSource inputSource0 = new InputSource(stringReader0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.335000195261916
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2205812649881578
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl0.getDTDHandler();
      parserAdapter0.ignorableWhitespace(charArray0, 7933, 1273);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      xMLFilterImpl0.characters(charArray0, 1273, 2782);
      StringReader stringReader0 = new StringReader("]%Q7mA4NuZ/*1Q");
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte byte0 = (byte)47;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)47;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 57;
      byteArrayInputStream0.mark(57);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockURI.URI("T");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.isIncludeInternalDTDDeclarations();
      namespaceStack0.addNamespace("T", "* -bg;'KXR9sO");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      namespaceStack1.getNamespaceForPrefix("AxH'kJD{V` yXFT>L");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack2 = new NamespaceStack(defaultDocumentFactory0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack3 = new NamespaceStack(documentFactory0);
      String string0 = "Text";
      String string1 = "c2G";
      namespaceStack0.getAttributeQName("D", "c2G", "http://xml.org/sax/features/namespaces");
      namespaceStack3.toString();
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      QName qName0 = new QName("//tmp/X8omOi.Q>`..&fZ,0X8omOi.Q>`..&fZ,", (Namespace) null);
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      // Undeclared exception!
      try { 
        dOMDocument0.normalizeDocument();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet.
         //
         verifyException("org.dom4j.dom.DOMDocument", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("^@~hZ2JOyh_sgR(wZ", ">A");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      try { 
        pipedOutputStream1.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eobgZ\"Aw*K|:R+L(7");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)47;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark(57);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("_HL?1))'#;c", "_HL?1))'#;c");
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.getLength();
      attributeListImpl0.clear();
      parserAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[1] = '5';
      parserAdapter0.ignorableWhitespace(charArray0, (-11), (-11));
      parserAdapter0.characters(charArray0, 39, 2911);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.setContentHandler(xMLFilterImpl0);
      parserAdapter2.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      xMLFilterImpl3.characters(charArray0, 39, 1944);
      SAXReader sAXReader0 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-44);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEntityResolver((EntityResolver) null);
      MockFile.createTempFile("_2xQp{]fdE", "_2xQp{]fdE", (File) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.dom4j.tree.LazyList$Entry");
      MockFile.createTempFile("//tmp/tmp/tmp/file:/0file:0file:0", (String) null);
      MockFile mockFile0 = new MockFile((File) null, "//tmp/tmp/file:/0file:0file:");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.619647932264738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/org.jaxen.dom4j.DocumentNavigator$Singleton1org.jaxen.dom4j.DocumentNavigator$Singleton", "Validation not supported for XMLReader: ");
      String string0 = "J:pE@sL<& ";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("J:pE@sL<& ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("<Qdg{l%");
      sAXReader_SAXEntityResolver2.resolveEntity("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", ":*'Q;GnkXCD,,");
      sAXReader_SAXEntityResolver1.resolveEntity(":*'Q;GnkXCD,,", "J:pE@sL<& ");
      StringReader stringReader0 = new StringReader("Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl1.getDTDHandler();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      parserAdapter0.startElement("\fls'Tm/", attributeListImpl0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl2.endPrefixMapping("c");
      handlerBase0.endElement("c");
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      charArray0[1] = 'F';
      parserAdapter0.ignorableWhitespace(charArray0, 0, 0);
      parserAdapter0.characters(charArray0, 39, 2911);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter1.setContentHandler(xMLFilterImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      xMLFilterImpl3.characters(charArray0, 3148, 1944);
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2801532702240896
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("^@~hZ2JOyh_sgR(wZ", "#>A");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader_SAXEntityResolver0.uriPrefix = "#>A";
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      StringReader stringReader0 = new StringReader("[G8A4nEMXb8");
      StringReader stringReader1 = new StringReader("[G8A4nEMXb8");
      sAXReader_SAXEntityResolver0.resolveEntity("", "E{AQrocNxaCXNOo");
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4a579456 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hLyK(a@iq");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      InputSource inputSource0 = new InputSource("//tmp/tmp/file:/0file:0file:");
      SAXReader sAXReader1 = new SAXReader((String) null, true);
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = null;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      MockURI.URI("T");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setStringInternEnabled(true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMElement dOMElement0 = new DOMElement("C/e_n4`Ie}N(");
      DOMDocument dOMDocument0 = new DOMDocument();
      Namespace namespace0 = Namespace.get("C/e_n4`Ie}N(");
      QName qName0 = new QName("C/e_n4`Ie}N(", namespace0);
      defaultDocumentFactory0.createElement(qName0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.toString();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack0.getAttributeQName("//tmp/Error on line 0Error on line ", " [", "org.dom4j.tree.NamespaceStack@17 Stack: []");
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.toString();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespaceStack0.getQName((String) null, "C/e_n4`Ie}N(", "org.dom4j.tree.NamespaceStack@1c Stack: []");
      namespaceStack2.toString();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      QName qName1 = new QName("org.dom4j.tree.NamespaceStack@17 Stack: []", namespace1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write((byte[]) null, (int) (byte) (-128), 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte byte0 = (byte)47;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)47;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 57;
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark(57);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte byte0 = (byte) (-125);
      byte[] byteArray0 = new byte[10];
      byteArray0[5] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-125));
      byteArrayInputStream0.close();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip((byte)0);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "{nL;!stE+]2\"Z'!Ny7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document {nL;!stE+]2\"Z'!Ny7 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = (byte) (-125);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[5] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-125));
      byteArrayInputStream0.close();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.mark((byte) (-125));
      byteArrayInputStream0.skip((byte) (-125));
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "{nL;!stE+]2\"Z'!Ny7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document {nL;!stE+]2\"Z'!Ny7 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.clear();
      parserAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[1] = '5';
      parserAdapter0.ignorableWhitespace(charArray0, (-11), (-11));
      parserAdapter0.characters(charArray0, 39, 2911);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.setContentHandler(xMLFilterImpl0);
      parserAdapter2.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      IndexedElement indexedElement0 = new IndexedElement(":");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&BEa/5@^U6vx'B");
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      InputSource inputSource0 = new InputSource("QkCsUNtaF0P");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertFalse(defaultDocument0.isReadOnly());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/a^\u0004+dkB<.%d>YaU^C-0H_D}--o<A{");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aJub");
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("S8>:]aV)|\"NPbOWH8");
      MockFile.createTempFile("2M2{{EC+3v]", "aJub", (File) mockFile0);
      MockFile.createTempFile("file://", "t;5rSS1");
      MockFile.createTempFile("2M2{{EC+3v]", "CharacterData node is read only: ", (File) mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "file://");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cp.%*3hKAV;?pX)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cp.%*3hKAV;?pX)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      File file0 = null;
      File file1 = MockFile.createTempFile("_2xQp{]fE", "_2xQp{]fE", (File) null);
      try { 
        sAXReader0.read(file1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3872942996011255
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Namespace namespace0 = new Namespace("apos", "apos");
      QName qName0 = QName.get("apos", namespace0, "apos");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      try { 
        sAXReader0.read("apos");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/apos (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/apos (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.isValidating();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      assertFalse(xMLFilterImpl1.equals((Object)xMLFilterImpl0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.getErrorHandler();
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      sAXReader1.isValidating();
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      
      sAXReader0.createDefaultEntityResolver("6,?0iiNAH}@k}");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cp.%*3hKAV;?pX)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cp.%*3hKAV;?pX)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H_D}--o\"<g{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getNamespaceForPrefix("Cp.%*3hKAV;?pX)");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        sAXReader0.setFeature("Cp.%*3hKAV;?pX)", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: Cp.%*3hKAV;?pX)
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte byte0 = (byte)36;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      InputSource inputSource0 = new InputSource((String) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5310e1ca Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5310e1ca Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Namespace namespace0 = new Namespace("apos", (String) null);
      QName qName0 = QName.get("apos", namespace0, (String) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      qName0.getQualifiedName();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-84);
      try { 
        bufferedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.440140500251581
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.removeHandler("");
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("X8omOi.Q>`..&fZ,", "X8omOi.Q>`..&fZ,", (File) null);
      file0.getAbsolutePath();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/tmp/X8omOi.Q>`..&fZ,0X8omOi.Q>`..&fZ,");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IndexedElement indexedElement0 = new IndexedElement("!(jGhw[  <#'wDt'/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/X8omO.Q>`..&{fZ,0X8omO.Q>`..&{fZ,");
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      ElementStack elementStack0 = new ElementStack();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4074486105937747
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      SAXReader sAXReader0 = new SAXReader(false);
      Object object4 = new Object();
      sAXReader0.setIgnoreComments(true);
      String string0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      parserAdapter0.startDocument();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.clear();
      parserAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[1] = '5';
      parserAdapter0.ignorableWhitespace(charArray0, (-11), (-11));
      parserAdapter0.characters(charArray0, 39, 2911);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.setContentHandler(xMLFilterImpl0);
      parserAdapter2.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      xMLFilterImpl3.characters(charArray0, 39, 1944);
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("&BEa/5@^U6vx'B");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/tmp/org.jaxen.dom4j.DocumentNavigator$Singleton1org.jaxen.dom4j.DocumentNavigator$Singleton0/tmp/Y%*+2IL$C<0.tmp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader();
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'z';
      charArray0[2] = 'O';
      charArray0[3] = 'u';
      charArray0[4] = ',';
      parserAdapter0.endDocument();
      charArray0[5] = '';
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      charArray0[6] = '$';
      charArray0[7] = '';
      charArray0[8] = 'v';
      parserAdapter0.ignorableWhitespace(charArray0, (-1470), (-1470));
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl1.characters(charArray0, 59, (-1470));
      try { 
        sAXReader0.setXMLReaderClassName("Error on line ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Error on line  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXParseException sAXParseException0 = new SAXParseException("//tmp/xmlns:0xmlns:", "org.jaxen.expr.DefaultXPathFactory", "", 32, (-1614));
      xMLFilterImpl0.error(sAXParseException0);
      xMLFilterImpl0.processingInstruction("org.jaxen.expr.DefaultXPathFactory", "org.dom4j.tree.DefaultDocumentType");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte byte0 = (byte)47;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)47;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark((byte)47);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1773151079980804
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl2.getContentHandler();
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl1.getDTDHandler();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      parserAdapter0.startElement("\flsTmi/", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[19] = 'F';
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.startElement("\flsTmi/", attributeListImpl0);
      xMLFilterImpl2.endPrefixMapping("\flsTmi/");
      handlerBase0.endElement("\flsTmi/");
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      charArray0[1] = 'F';
      parserAdapter0.characters(charArray0, 39, 2911);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.setContentHandler(xMLFilterImpl0);
      parserAdapter2.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      xMLFilterImpl3.characters(charArray0, 3148, 'F');
      SAXReader sAXReader0 = new SAXReader(parserAdapter1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      InputSource inputSource0 = new InputSource("//tlp/a^N4+dkB<.%W>YaU^C-CH_D-]o<A{");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      StringReader stringReader0 = new StringReader("bfgh5*ya#i(TR");
      InputSource inputSource0 = new InputSource(stringReader0);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(parserAdapter0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      parserAdapter0.ignorableWhitespace(charArray0, (-4786), (-4786));
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.characters(charArray0, 2728, (-513));
      try { 
        sAXReader1.setXMLReaderClassName(":Dku@_o{@Su3");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class :Dku@_o{@Su3 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      try { 
        sAXReader0.setProperty("Rz<@NYfIxz`", object1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'Rz<@NYfIxz`' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      sAXReader0.setStripWhitespaceText(true);
      assertTrue(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile.createTempFile("//tmp/file:/0file:", "//tmp/file:/0file:", (File) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/file:/0file:");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.getDocumentFactory();
      documentFactory0.createDocument("//tmp/file:/0file:");
      IndexedElement indexedElement0 = new IndexedElement("&x5O$>v^p62-\"Bj");
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&x5O$>v^p62-\"Bj");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      File file0 = MockFile.createTempFile("X8omOi.Q>`..&fZ,", "X8omOi.Q>`..&fZ,", (File) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      EvoSuiteFile evoSuiteFile0 = null;
      file0.getAbsolutePath();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/c?nw%Q,/)Xj0c?nw%Q,/)Xj");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl0.getDTDHandler();
      HandlerBase handlerBase0 = new HandlerBase();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl4.setDTDHandler(handlerBase0);
      char[] charArray0 = new char[0];
      parserAdapter0.ignorableWhitespace(charArray0, (-3372), (-3372));
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl4.setParent(parserAdapter1);
      parserAdapter0.endDocument();
      xMLFilterImpl4.characters(charArray0, 92, 2986);
      MockFile mockFile0 = new MockFile("F8JL0?%|0~Jj?Y%\"");
      mockFile0.toURL();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("Not supported yet.");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.clear();
      parserAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[1] = '5';
      parserAdapter0.ignorableWhitespace(charArray0, (-11), (-11));
      parserAdapter0.characters(charArray0, 39, 2911);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.setContentHandler(xMLFilterImpl0);
      parserAdapter2.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      xMLFilterImpl3.characters(charArray0, 39, 1944);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eobgZ\"Aw*K|:R+L(7");
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl1.getDTDHandler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      charArray0[1] = 'F';
      parserAdapter0.ignorableWhitespace(charArray0, 0, 0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      xMLFilterImpl3.characters(charArray0, 3148, 1944);
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      sAXReader0.setXMLReader(xMLFilterImpl5);
      try { 
        sAXReader0.setXMLReaderClassName("F8JL0?%|0~Jj?Y%\"");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class F8JL0?%|0~Jj?Y%\" not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.821130325493228
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      boolean boolean0 = true;
      sAXReader0.getXMLReader();
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isIgnoreComments();
      String string0 = "obq SZ 9zW\"Ij}~";
      StringReader stringReader0 = new StringReader("obq SZ 9zW\"Ij}~");
      DOMDocument dOMDocument0 = new DOMDocument("obq SZ 9zW\"Ij}~");
      sAXReader0.setIgnoreComments(true);
      String string1 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("L0i&yS0o$|}<");
      String string2 = "org.dom4j.dom.DOMEntityReference";
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.dom.DOMEntityReference");
      sAXReader_SAXEntityResolver0.resolveEntity("L0i&yS0o$|}<", "L0i&yS0o$|}<");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "L0i&yS0o$|}<";
      stringArray0[2] = "obq SZ 9zW\"Ij}~";
      ElementHandler elementHandler0 = null;
      int int0 = (-391);
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, (-391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.821130325493228
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.getXMLReader();
      sAXReader0.setIgnoreComments(false);
      sAXReader0.isIgnoreComments();
      StringReader stringReader0 = new StringReader("obq SZ 9zW\"Ij}~");
      DOMDocument dOMDocument0 = new DOMDocument("obq SZ 9zW\"Ij}~");
      sAXReader0.setIgnoreComments(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("L0i&yS0o$|}<");
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.dom.DOMEntityReference");
      sAXReader_SAXEntityResolver0.resolveEntity("L0i&yS0o$|}<", "L0i&yS0o$|}<");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "L0i&yS0o$|}<";
      stringArray0[2] = "obq SZ 9zW\"Ij}~";
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, (-391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cp.%*lhKAV;ZpX)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H_D}--o\"<g{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader0.setProperty("", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("#(", "http://xml.org/sax/features/string-interning", "#(", (-2639), (-2639));
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/X8omOi.Q>`..&fZ,0X8omOi.Q>`..&fZ,", locatorImpl1, sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("lEMVZ2_@2Z9j98Kpa!", "lEMVZ2_@2Z9j98Kpa!", "http://xml.org/sax/features/string-interning", 37, 16, sAXParseException1);
      xMLFilterImpl0.fatalError(sAXParseException2);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      parserAdapter0.startDocument();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      attributeListImpl0.clear();
      parserAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", attributeListImpl0);
      char[] charArray0 = new char[21];
      charArray0[1] = '5';
      parserAdapter0.ignorableWhitespace(charArray0, (-11), (-11));
      parserAdapter0.characters(charArray0, 39, 2911);
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      try { 
        sAXReader0.setProperty("&BEa/5@^U6vx'B", parserAdapter0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '&BEa/5@^U6vx'B' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("X8omOi.Q>`..&fZ,");
      sAXReader_SAXEntityResolver0.uriPrefix = "//tmp/_2xQp{]fE0:9:*VE.fYdymJU";
      sAXReader_SAXEntityResolver0.resolveEntity("H_D}--o<A{", "$");
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader0 = new SAXReader(true);
      IndexedElement indexedElement0 = new IndexedElement("pRJCn'v@:dIM@*");
      int int0 = 39;
      PipedInputStream pipedInputStream0 = new PipedInputStream(39);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("L");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/L (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/L (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      StringReader stringReader0 = new StringReader("3xTGx;ckY~TQj@^");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      MockURI.URI("T");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.addNamespace("l,8;e)0sz", "FKvgA;R=s\f7n{>");
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack1.getNamespaceForPrefix(">]uDgs^JQLlQ7a$O[hW");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack2 = new NamespaceStack(defaultDocumentFactory1);
      NamespaceStack namespaceStack3 = new NamespaceStack(defaultDocumentFactory1);
      namespaceStack3.toString();
      // Undeclared exception!
      try { 
        defaultDocumentFactory1.createText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Adding text to an XML document must not be null
         //
         verifyException("org.dom4j.DefaultDocumentFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      File file0 = MockFile.createTempFile("X8omOi.Q>`..&fZ,", ">k2qGM*Z|.h<f", (File) null);
      EvoSuiteFile evoSuiteFile0 = null;
      MockFile mockFile0 = new MockFile(file0, "X8omOi.Q>`..&fZ,");
      mockFile0.getAbsolutePath();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k]");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockFile0.getCanonicalFile();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDocumentFactory();
      URI uRI0 = MockURI.aFTPURI;
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = "* -bg;'KXR9sO";
      namespaceStack0.addNamespace("T", "* -bg;'KXR9sO");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      namespaceStack1.getNamespaceForPrefix("AxH'kJD{V` yXFT>L");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack2 = new NamespaceStack();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack3 = new NamespaceStack(documentFactory0);
      String string1 = "Text";
      namespaceStack0.getAttributeQName("D", "c2G", "http://xml.org/sax/features/namespaces");
      namespaceStack3.toString();
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      QName qName0 = new QName("//tmp/X8omOi.Q>`..&fZ,0X8omOi.Q>`..&fZ,", (Namespace) null);
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      // Undeclared exception!
      try { 
        dOMDocument0.normalizeDocument();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet.
         //
         verifyException("org.dom4j.dom.DOMDocument", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      IndexedElement indexedElement0 = new IndexedElement("pRJCv@:dIM@A*");
      PipedInputStream pipedInputStream0 = new PipedInputStream(65);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      InputSource inputSource0 = new InputSource("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK");
      DOMDocument dOMDocument0 = new DOMDocument("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK");
      assertFalse(dOMDocument0.isReadOnly());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setValidation(false);
      Object object4 = new Object();
      String string0 = null;
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H_D}--o<A{");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vd).k}Vwvu>,");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("H_D}--o<A{");
      XMLReader xMLReader0 = null;
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl2.startDocument();
      xMLFilterImpl2.getContentHandler();
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(parserAdapter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#R)M7,[L%NQK=&");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      assertFalse(sAXReader0.isValidating());
      
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      IndexedElement indexedElement0 = new IndexedElement("pRJCv@:dIM@Ae*");
      PipedInputStream pipedInputStream0 = new PipedInputStream(65);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      xMLReaderAdapter0.startElement("//tmp/EgGLlY|`&F'NMoNISK0EgGLlY|`&F'NMoNISK", "", "", attributesImpl1);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      sAXReader0.addHandler("y4!fpy I~", pruningDispatchHandler1);
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      assertEquals("Document", defaultDocument0.getNodeTypeName());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getFileExample();
          URL uRL1 = MockURL.URL(uRL0, "//home/ubuntu/termite/projects/62_dom4j/This Attribute is read only and cannot be changed/This Attribute is read only and cannot be changed0This Attribute is read only and cannot be changed");
          try { 
            sAXReader0.read(uRL1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor264.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor264.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      String string0 = "Rz<@NYfIxz`";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Rz<@NYfIxz`", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Rz<@NYfIxz` not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
