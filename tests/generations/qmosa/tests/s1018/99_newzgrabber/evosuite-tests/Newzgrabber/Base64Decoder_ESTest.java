/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 18:29:37 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5478183549676735
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[2] = '-';
      charArray0[3] = 'T';
      Object[][] objectArray0 = new Object[6][7];
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[15];
      objectArray1[0] = (Object) '-';
      objectArray1[1] = (Object) 'T';
      objectArray1[2] = (Object) '-';
      objectArray1[3] = (Object) '-';
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = object0;
      objectArray1[6] = (Object) mockPrintStream0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      mockPrintStream0.print(objectArray1[2]);
      mockPrintStream0.println();
      mockPrintStream0.println((double) (byte)0);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      mockPrintStream0.print((Object) defaultTableModel0);
      mockPrintStream0.println();
      mockPrintStream0.println(0.0);
      mockPrintStream0.println((-916));
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      Newzgrabber.verbose = false;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-19939), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(5L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7569036587561297
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object object0 = new Object();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      mockPrintStream0.print((Object) ".");
      mockPrintStream0.println();
      mockPrintStream0.println((-1630.06574));
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(".");
      mockFileOutputStream0.flush();
      mockFileInputStream0.markSupported();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(mockFileInputStream0, 3);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
      BufferedCustomInputStream bufferedCustomInputStream2 = new BufferedCustomInputStream(bufferedCustomInputStream0, false);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
      base64Decoder1.decodeStream();
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream2, mockPrintStream0);
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream1, (OutputStream) null);
      base64Decoder3.decodeStream();
      Base64Decoder base64Decoder4 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder4.decodeStream();
      Base64Decoder base64Decoder5 = new Base64Decoder(bufferedCustomInputStream2, (OutputStream) null);
      base64Decoder5.setBegin(false);
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder4.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder3.decodeStream();
      base64Decoder3.decodeStream();
      base64Decoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-99987), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5454782777089596
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[2] = '-';
      charArray0[3] = 'T';
      Object[][] objectArray0 = new Object[6][7];
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[10];
      objectArray1[0] = (Object) '-';
      objectArray1[2] = (Object) '-';
      objectArray1[3] = (Object) 'T';
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = object0;
      objectArray1[6] = (Object) mockPrintStream0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      mockPrintStream0.print(objectArray1[2]);
      mockPrintStream0.println();
      mockPrintStream0.println((double) (byte)0);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      mockPrintStream0.print((Object) defaultTableModel0);
      mockPrintStream0.println();
      mockPrintStream0.println(0.0);
      mockPrintStream0.println((-916));
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      Newzgrabber.verbose = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(5L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6434378057986889
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.println(true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.MARKLIMIT = 117;
      base64Decoder0.decodeStream();
      boolean boolean0 = base64Decoder0.foundbegin;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      bufferedCustomInputStream0.setTempfile("e");
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder1.decodeStream();
      base64Decoder1.setLineCount(117);
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder1.setLineCount(117);
      base64Decoder2.foundbegin = false;
      base64Decoder2.ABORT = false;
      base64Decoder2.decodeStream();
      Newzgrabber.verbose = true;
      base64Decoder2.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder2.decodeStream();
      //  // Unstable assertion: assertEquals((-110011), mockFileInputStream0.available());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.516906849137531
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("s`Ujh $`");
      char[] charArray0 = new char[19];
      charArray0[1] = 'T';
      charArray0[2] = '-';
      Object[][] objectArray0 = new Object[6][7];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) 'T';
      objectArray1[1] = (Object) '\u0000';
      objectArray1[2] = (Object) '\u0000';
      objectArray1[3] = (Object) 'T';
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[8];
      Object object0 = new Object();
      objectArray2[4] = object0;
      objectArray2[5] = (Object) mockPrintStream0;
      objectArray2[6] = (Object) "s`Ujh $`";
      objectArray2[7] = (Object) mockPrintStream0;
      objectArray0[1] = objectArray1;
      Object[] objectArray3 = new Object[5];
      objectArray3[0] = (Object) '-';
      objectArray3[1] = (Object) mockPrintStream0;
      objectArray3[2] = (Object) 'T';
      objectArray3[3] = (Object) '-';
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[8];
      Object object1 = new Object();
      objectArray4[0] = object1;
      objectArray4[1] = (Object) '-';
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[3];
      objectArray5[0] = (Object) mockPrintStream0;
      objectArray5[1] = (Object) '-';
      objectArray5[2] = object1;
      objectArray0[4] = objectArray5;
      objectArray0[5] = objectArray4;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      mockPrintStream0.print((Object) defaultTableModel0);
      objectArray4[0] = (Object) '.';
      mockPrintStream0.println();
      mockPrintStream0.println((double) (byte)0);
      mockPrintStream0.println((int) (byte)0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      assertEquals(3L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7536544019628768
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("N~v{sJn6d8 2$V4$E%5");
      char[] charArray0 = new char[19];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'T';
      objectArray0[1] = (Object) 'T';
      objectArray0[3] = (Object) 'T';
      Object[] objectArray1 = new Object[8];
      Object object0 = new Object();
      objectArray1[4] = object0;
      objectArray1[6] = (Object) "N~v{sJn6d8 2$V4$E%5";
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) 'T';
      objectArray2[1] = (Object) mockPrintStream0;
      objectArray2[2] = (Object) 'T';
      objectArray2[3] = (Object) 'T';
      Object[] objectArray3 = new Object[8];
      Object object1 = new Object();
      objectArray3[0] = object1;
      objectArray3[1] = (Object) 'T';
      objectArray3[0] = (Object) '\u001A';
      mockPrintStream0.println();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("N~v{sJn6d8 2$V4$E%5");
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.foundbegin = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals((-20000), mockFileInputStream0.available());
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9242454193926204
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/99_newzgrabber");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
      mockFileInputStream0.read();
      mockFileInputStream0.skip((byte)0);
      mockFileInputStream0.skip((byte)0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "e");
      Object[] objectArray0 = new Object[9];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("s`Ujh $`");
      printStream0.println((double) (byte)0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "s`Ujh $`");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream("s`Ujh $`");
      printStream0.printf("A{N{3{wW", objectArray0);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(mockFileInputStream1, 1009, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, printStream0);
      bufferedCustomInputStream1.available();
      mockFileInputStream1.mark((byte)0);
      base64Decoder0.ABORT = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      mockFileOutputStream0.getChannel();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals((-69988), mockFileInputStream1.available());
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6169201818989155
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
      MockPrintStream mockPrintStream0 = new MockPrintStream("s`Ujh $`");
      mockPrintStream0.println(true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("s`Ujh $`");
      mockPrintStream0.print((Object) mockFileInputStream0);
      mockPrintStream0.println();
      mockPrintStream0.println((double) (byte)0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream("s`Ujh $`");
      mockFileOutputStream0.flush();
      mockFileInputStream1.markSupported();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder0.updateProgress();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(mockFileInputStream1, false);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
      base64Decoder1.decodeStream();
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder1.setReader(bufferedCustomInputStream1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "s`Ujh $`";
      stringArray0[1] = "s`Ujh $`";
      stringArray0[2] = "215";
      stringArray0[3] = "s`Ujh $`";
      stringArray0[4] = "s`Ujh $`";
      Newzgrabber.main(stringArray0);
      base64Decoder1.decodeStream();
      base64Decoder1.setBegin(false);
      Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream1, mockFileOutputStream0);
      base64Decoder3.decodeStream();
      base64Decoder3.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder2.decodeStream();
      base64Decoder3.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder2.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder3.decodeStream();
      base64Decoder3.decodeStream();
      //  // Unstable assertion: assertEquals((-89929), mockFileInputStream1.available());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5192469263962449
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s`Ujh $`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockFile mockFile0 = new MockFile("s`Ujh $`");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0);
      DebugGraphics.logStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.UK;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = object0;
      mockPrintStream1.printf("fVhw+@#l6aKXR9* %nL", objectArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream1);
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Base64Decoder base64Decoder0 = new Base64Decoder((BufferedCustomInputStream) null, (OutputStream) null);
      int int0 = 50;
      base64Decoder0.updateProgress();
      base64Decoder0.MARKLIMIT = 50;
      base64Decoder0.setOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Base64Decoder", e);
      }
  }
}
