/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:26:19 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("9a7P3p=.h\".jar");
      ImprovedFile improvedFile1 = new ImprovedFile("9a7P3p=.h\".jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9a7P3p=.h\".jar";
      archiveScanner0.setExcludes(stringArray0);
      DirectoryScanner.matchPath("9a7P3p=.h\".jar", "9a7P3p=.h\".jar");
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector1;
      improvedFile1.delete();
      DirectoryScanner.matchPath(":1=o.][TV~|U'XVl5", "9a7P3p=.h\".jar");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("9a7P3p=.h\".jar");
      Object object0 = new Object();
      vector1.add(object0);
      archiveScanner0.processArchive(improvedFile0, "9a7P3p=.h\".jar");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(":1=o.][TV~|U'XVl5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.application.errors.properties");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.lts.application.errors.properties";
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)47;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 8212);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)47);
      pushbackInputStream0.available();
      archiveScanner0.setExcludes(stringArray0);
      byteArrayInputStream0.markSupported();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector1;
      bufferedInputStream0.close();
      bufferedInputStream0.markSupported();
      bufferedInputStream0.mark(4232);
      pushbackInputStream0.unread(10);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "com.lts.application.errors.properties");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "'k?";
      ImprovedFile improvedFile0 = new ImprovedFile("'k?", "'k?");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      DirectoryScanner.matchPath(string0, string0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("pr!&Vu7YkI", "pr!&Vu7YkI");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setExcludes((String[]) null);
      String string0 = ":1=o.][TV~U'XVl5";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsIncluded = vector0;
      DirectoryScanner.matchPath("pr!&Vu7YkI", ":1=o.][TV~U'XVl5");
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("pr8!&V^u7YkI", "pr8!&V^u7YkI");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String string0 = "muDI_";
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector1;
      Vector<Object> vector2 = new Vector<Object>();
      DirectoryScanner.matchPath("pr8!&V^u7YkI", ":1=.3[TVhb'XV*5");
      improvedFile0.deleteOnExit();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pr8!&V^u7YkI";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("DPz=d!<)=3JC.jar1DPz=d!<)=3JC.jar.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("R");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.dirsExcluded = null;
      archiveScanner0.setExcludes((String[]) null);
      DirectoryScanner.matchPatternStart("R", "R");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "R";
      vector0.containsAll(archiveScanner0.dirsExcluded);
      System.setCurrentTimeMillis(0L);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(":1=o.][TV~|U'XVl5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("!");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes((String[]) null);
      archiveScanner0.dirsExcluded = null;
      archiveScanner0.setExcludes((String[]) null);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("sl=Ntd0t/I.`");
      archiveScanner0.dirsNotIncluded = vector0;
      DirectoryScanner.matchPath("!", ":1=o.][TV~|U'XVl5");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(":1=o.][TV~|U'XVl5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5534001935705906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("2cP]*pn!vw<[uy4:bQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner1.dirsExcluded = vector2;
      archiveScanner0.includes = archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS;
      ImprovedFile improvedFile1 = ImprovedFile.createTempDirectory(".WAR", "muDI_", (File) improvedFile0);
      vector2.clear();
      archiveScanner0.setBasedir("IO error scanning directory ");
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      String string0 = "?O";
      String string1 = "Error while trying to remove temp directory, ";
      String string2 = "IKma";
      improvedFile0.createTempDir(string1, string2);
      boolean boolean0 = true;
      archiveScanner0.scandir(improvedFile1, string0, boolean0);
      long long0 = 1000000L;
      improvedFile1.setReadOnly();
      System.setCurrentTimeMillis(long0);
      archiveScanner0.dirsNotIncluded = archiveScanner1.dirsExcluded;
      String string3 = null;
      boolean boolean1 = false;
      archiveScanner0.scandir(improvedFile0, string3, boolean1);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      String string4 = null;
      archiveScanner1.scandir(improvedFile1, string4, boolean1);
      long long1 = 1L;
      System.setCurrentTimeMillis(long1);
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      System.setCurrentTimeMillis(archiveScanner1.ARCHIVE);
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@d[X");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      DirectoryScanner.matchPath("@d[X", "@d[X");
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.processDirectory(improvedFile0, "@d[X", true);
      assertFalse(improvedFile0.canWrite());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lt.#pplication.err*s.proerties", "com.lt.#pplication.err*s.proerties");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.lt.#pplication.err*s.proerties";
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[7] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 8191);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)47);
      bufferedInputStream0.available();
      byteArrayInputStream0.skip((byte)0);
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      pushbackInputStream0.available();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pushbackInputStream0);
      pushbackInputStream0.available();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(10);
      bufferedInputStream0.read();
      vector0.add((InputStream) null);
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      archiveScanner0.setIncludes(stringArray0);
      byteArrayInputStream0.markSupported();
      bufferedInputStream0.close();
      bufferedInputStream0.mark((byte)47);
      pushbackInputStream0.unread(10);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "com.lt.#pplication.err*s.proerties", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@d[X");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>(2);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.setBasedir("@d[X");
      Object object0 = new Object();
      vector0.add(object0);
      archiveScanner0.includes = archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner1.includes = archiveScanner0.includes;
      long long0 = (-1L);
      System.setCurrentTimeMillis(2);
      long long1 = 2619L;
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector2;
      vector2.add("kz");
      System.setCurrentTimeMillis(2619L);
      archiveScanner0.processArchive(improvedFile0, "The system has encountered an severe error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  The details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.");
      vector1.add((Object) improvedFile0);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      vector1.listIterator();
      long long2 = 1L;
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(long2);
      System.setCurrentTimeMillis(long0);
      assertFalse(long0 == long2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@d[X");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      DirectoryScanner.matchPath("@d[X", "@d[X");
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)47);
      byteArrayInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)47);
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      pushbackInputStream0.available();
      Vector<InputStream> vector2 = new Vector<InputStream>();
      String[] stringArray0 = new String[0];
      archiveScanner0.setExcludes(stringArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      archiveScanner0.setIncludes(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.lts.application.errors.properties/com.lts.application.errors.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      bufferedInputStream0.mark(283);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "ory ", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/@d[X
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.application.errors.properties", "com.lts.application.errors.properties");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.lts.application.errors.properties";
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)47;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 8191);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)47);
      byteArrayInputStream0.skip((-28L));
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      pushbackInputStream0.available();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      pushbackInputStream0.available();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(10);
      bufferedInputStream0.read();
      vector0.add((InputStream) pushbackInputStream0);
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      archiveScanner0.setIncludes(stringArray0);
      byteArrayInputStream0.markSupported();
      bufferedInputStream0.close();
      bufferedInputStream0.mark((byte)47);
      pushbackInputStream0.unread(10);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "com.lts.application.errors.properties", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/com.lts.application.errors.properties/com.lts.application.errors.properties
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lt.#pplication.err*s.proerties", "com.lt.#pplication.err*s.proerties");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.lt.#pplication.err*s.proerties";
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 8191);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)47);
      bufferedInputStream0.available();
      byteArrayInputStream0.skip((byte)0);
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      pushbackInputStream0.available();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pushbackInputStream0);
      pushbackInputStream0.available();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(10);
      bufferedInputStream0.read();
      vector0.add((InputStream) null);
      byteArrayInputStream0.close();
      pushbackInputStream0.markSupported();
      archiveScanner0.setIncludes(stringArray0);
      byteArrayInputStream0.markSupported();
      bufferedInputStream0.close();
      bufferedInputStream0.mark((byte)47);
      pushbackInputStream0.unread(10);
      archiveScanner0.processDirectory(improvedFile0, "com.lt.#pplication.err*s.proerties", true);
      assertEquals(0L, improvedFile0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/rt6it?g&.4y}lDg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pr!&Vu7YkI.jar");
      ImprovedFile improvedFile0 = new ImprovedFile("/rt6it?g&.4y}lDg");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[0];
      archiveScanner0.includes = stringArray0;
      improvedFile0.createTempDir("pr!&Vu7YkI.jar", "pr!&Vu7YkI.jar");
      archiveScanner0.filesExcluded = null;
      File file0 = archiveScanner0.basedir;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "/rt6it?g&.4y}lDg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      vector1.replaceAll(unaryOperator0);
      Object object1 = new Object();
      vector1.add((Object) vector0);
      vector0.add(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      vector1.add(object4);
      Object object5 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      vector3.add(object2);
      Vector<Object> vector4 = new Vector<Object>();
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("^VES", "^VES");
      Vector<Object> vector5 = new Vector<Object>();
      DirectoryScanner.matchPatternStart(".ear", ".WAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".WAR";
      archiveScanner0.setIncludes(stringArray0);
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".tmp", ".tmp");
      improvedFile0.delete();
      improvedFile0.mkdirs();
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "");
      ImprovedFile.createTempImprovedFile("x&6.]ND>=U", "x&6.]ND>=U", improvedFile1);
      improvedFile0.setLastModified(128L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile2 = new ImprovedFile("");
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile1, "DPz=d!<)=3JC0N^VES.jar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".WAYR", "k$<2OI[L%|K!");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("k$<2OI[L%|K!");
      mockFile0.setExecutable(false);
      mockFile0.toURL();
      File file0 = mockFile0.getAbsoluteFile();
      File file1 = MockFile.createTempFile("k$<2OI[L%|K!", ".WAYR");
      mockFile0.createNewFile();
      file1.setReadable(false);
      mockFile0.setWritable(false);
      mockFile0.renameTo(file0);
      File file2 = file1.getCanonicalFile();
      mockFile0.setExecutable(true);
      file2.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile.createTempFile("k$<2OI[L%|K!", "k$<2OI[L%|K!");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      file2.setExecutable(false);
      ImprovedFile improvedFile0 = new ImprovedFile(file2, "WG\"gh5kPu*{|?K5@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(file0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        mockFile0.getCanonicalFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "104`^;`KH=`");
      improvedFile0.delete();
      improvedFile0.mkdirs();
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, ".WAR.jar");
      ImprovedFile improvedFile2 = ImprovedFile.createTempImprovedFile("104`^;`KH=`", "104`^;`KH=`", improvedFile1);
      improvedFile2.getCanonicalFile();
      improvedFile2.setExecutable(false);
      improvedFile0.deleteOnExit();
      improvedFile0.delete();
      improvedFile1.getAbsolutePath();
      ImprovedFile improvedFile3 = ImprovedFile.createTempDirectory("/home/ubuntu/termite/projects/78_caloriecount/.WAR/104`^;`KH=`/.WAR.jar", ".WAR.jar", (File) improvedFile1);
      improvedFile2.setReadable(false);
      MockFile.createTempFile("Error trying to remove archive staging directory, ", ".WAR", (File) improvedFile3);
      File file0 = improvedFile1.getAbsoluteFile();
      MockFile mockFile0 = new MockFile(file0, "Error trying to remove archive staging directory, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile3);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      long long1 = (-214L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".WAYR", "k$<,OI(ML%|K!");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("k$<,OI(ML%|K!");
      mockFile0.setExecutable(true);
      mockFile0.toURL();
      File file0 = mockFile0.getAbsoluteFile();
      mockFile0.delete();
      File file1 = MockFile.createTempFile("k$<,OI(ML%|K!", ".WAYR");
      mockFile0.createNewFile();
      file1.setReadable(false);
      mockFile0.setWritable(false);
      mockFile0.renameTo(file0);
      File file2 = file1.getCanonicalFile();
      mockFile0.setExecutable(true);
      file2.deleteOnExit();
      file1.setReadOnly();
      file2.mkdirs();
      file1.delete();
      file2.getAbsolutePath();
      ImprovedFile improvedFile0 = new ImprovedFile(file2);
      file2.setReadable(false);
      MockFile mockFile2 = new MockFile("]Pz=dk<)=3JC.jar");
      MockFile mockFile3 = new MockFile("k$<,OI(ML%|K!");
      file1.setReadable(true, true);
      MockFile mockFile4 = new MockFile(mockFile0, "/tmp/k$<,OI(ML%|K!0.WAYR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      file2.setReadable(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k$<,OI(ML%|K!";
      stringArray0[2] = ".WAYR";
      stringArray0[3] = "]Pz=dk<)=3JC.jar";
      archiveScanner0.isArchive(mockFile3);
      long long0 = 3305L;
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) function0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      predicate8.test(predicate3);
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate5);
      Predicate<Object> predicate11 = predicate4.negate();
      predicate1.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate5.test("ZuFy");
      Predicate<Object> predicate13 = predicate12.or(predicate6);
      predicate10.test(predicate4);
      Predicate<Object> predicate14 = predicate12.and(predicate6);
      predicate5.negate();
      Predicate<Object> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate5.or(predicate1);
      Predicate<Object> predicate17 = predicate5.or(predicate15);
      Predicate<Object> predicate18 = predicate13.negate();
      predicate2.negate();
      Predicate<Object> predicate19 = predicate11.negate();
      Predicate<Object> predicate20 = predicate7.or(predicate19);
      Predicate<Object> predicate21 = predicate14.or(predicate20);
      predicate9.or(predicate1);
      predicate17.or(predicate3);
      Predicate<Object> predicate22 = predicate16.negate();
      predicate3.test(predicate21);
      predicate22.negate();
      predicate18.or(predicate6);
      predicate0.test(predicate16);
      ImprovedFile improvedFile0 = new ImprovedFile("ZuFy");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "ZuFy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, ZuFy
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) function0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      predicate4.negate();
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      predicate1.test(predicate6);
      predicate3.test("4$b7qGs2lkc>a>1AyS'");
      Predicate<Object> predicate9 = predicate8.or(predicate4);
      predicate3.or(predicate0);
      predicate5.test(predicate2);
      Predicate<Object> predicate10 = predicate8.and(predicate4);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate0.negate();
      predicate2.test(predicate7);
      predicate3.or(predicate0);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      predicate9.negate();
      Predicate<Object> predicate14 = predicate9.negate();
      predicate6.negate();
      Predicate<Object> predicate15 = predicate5.or(predicate14);
      Predicate<Object> predicate16 = predicate10.or(predicate15);
      Predicate<Object> predicate17 = predicate2.negate();
      predicate0.or(predicate17);
      predicate11.or(predicate0);
      predicate13.or(predicate0);
      predicate4.negate();
      predicate0.test(predicate16);
      Predicate<Object> predicate18 = predicate13.and(predicate6);
      predicate16.and(predicate3);
      predicate4.or(predicate18);
      predicate9.test(predicate11);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "4$b7qGs2lkc>a>1AyS'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("WRR");
      MockFile mockFile1 = new MockFile("WRR", "WRR");
      mockFile1.mkdir();
      mockFile0.setExecutable(true);
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile("WRR");
      mockFile1.getCanonicalPath();
      mockFile1.setReadable(false);
      MockFile mockFile3 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/WRR/WRR");
      mockFile0.setExecutable(false);
      mockFile3.deleteOnExit();
      mockFile2.delete();
      mockFile1.deleteOnExit();
      mockFile3.getAbsolutePath();
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile3);
      mockFile2.renameTo(mockFile1);
      mockFile0.setReadOnly();
      URI uRI0 = MockURI.aHttpURI;
      mockFile0.getCanonicalPath();
      URI uRI1 = mockFile0.toURI();
      MockFile mockFile4 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/WRR/WRR", "WRR");
      mockFile4.mkdirs();
      MockFile mockFile5 = new MockFile(uRI1);
      MockFile mockFile6 = new MockFile(mockFile3, "+'W;hl_*g#r");
      mockFile5.delete();
      mockFile5.delete();
      mockFile5.setWritable(false, false);
      mockFile5.mkdirs();
      mockFile0.toURL();
      mockFile5.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile3.setWritable(false);
      mockFile0.deleteOnExit();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "p~4Q))]DCP^,/;@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("");
      mockFile0.setExecutable(false);
      mockFile0.createNewFile();
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      File file0 = mockFile0.getAbsoluteFile();
      mockFile0.getCanonicalPath();
      mockFile0.createNewFile();
      mockFile1.setReadable(true);
      File file1 = file0.getCanonicalFile();
      mockFile0.setExecutable(true);
      file1.deleteOnExit();
      file0.delete();
      file1.getAbsolutePath();
      file1.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile(file1);
      mockFile0.createNewFile();
      file1.setReadable(true);
      file1.setReadOnly();
      File file2 = MockFile.createTempFile(".WAR", ".WAR", (File) mockFile1);
      File file3 = file2.getAbsoluteFile();
      MockFile mockFile2 = new MockFile(file1, "Yp+mUpqkd^+ 8x");
      file3.mkdirs();
      file3.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      file1.setWritable(true);
      mockFile0.deleteOnExit();
      System.setCurrentTimeMillis((-2721L));
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "/home/ubuntu/termite/projects/78_caloriecount", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("");
      mockFile0.setExecutable(false);
      mockFile0.createNewFile();
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      File file0 = mockFile0.getAbsoluteFile();
      mockFile0.getCanonicalPath();
      mockFile0.createNewFile();
      mockFile1.setReadable(true);
      File file1 = file0.getCanonicalFile();
      mockFile0.setExecutable(true);
      file1.deleteOnExit();
      file0.delete();
      file1.getAbsolutePath();
      file1.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile(file1);
      mockFile0.createNewFile();
      file1.setReadable(true);
      file1.setReadOnly();
      File file2 = MockFile.createTempFile(".WAR", ".WAR", (File) mockFile1);
      File file3 = file2.getAbsoluteFile();
      MockFile mockFile2 = new MockFile(file1, "Yp+mUpqkd^+ 8x");
      file3.mkdirs();
      file3.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      file1.setWritable(true);
      System.setCurrentTimeMillis(0);
      int int0 = archiveScanner0.toFileType(mockFile2);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("WRR");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("WRR");
      mockFile0.setExecutable(true);
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile("WRR");
      mockFile0.getCanonicalPath();
      mockFile1.setReadable(false);
      MockFile mockFile3 = new MockFile("WRR", "WRR");
      mockFile0.setExecutable(false);
      mockFile3.deleteOnExit();
      mockFile2.delete();
      mockFile1.deleteOnExit();
      mockFile3.getAbsolutePath();
      mockFile3.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile3);
      mockFile2.renameTo(mockFile1);
      mockFile0.setReadOnly();
      mockFile0.toURI();
      mockFile3.setReadable(false);
      mockFile3.setReadOnly();
      mockFile0.getCanonicalPath();
      mockFile3.toURI();
      MockFile mockFile4 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/WRR/WRR", "WRR");
      mockFile4.mkdirs();
      File file0 = mockFile4.getAbsoluteFile();
      MockFile mockFile5 = new MockFile(mockFile3, "Yp+mUpkd+ 8x");
      file0.delete();
      file0.delete();
      file0.setWritable(false, false);
      file0.mkdirs();
      file0.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile3.setWritable(false);
      mockFile0.deleteOnExit();
      int int0 = archiveScanner0.toFileType(file0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("WRR");
      MockFile mockFile1 = new MockFile("WRR", "WRR");
      mockFile1.mkdir();
      mockFile0.setExecutable(true);
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile("WRR");
      mockFile1.getCanonicalPath();
      mockFile1.setReadable(false);
      MockFile mockFile3 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/WRR/WRR");
      mockFile0.setExecutable(false);
      mockFile3.deleteOnExit();
      mockFile2.delete();
      mockFile1.deleteOnExit();
      mockFile3.getAbsolutePath();
      mockFile3.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile3);
      mockFile2.renameTo(mockFile1);
      mockFile0.setReadOnly();
      URI uRI0 = MockURI.aHttpURI;
      mockFile0.getCanonicalPath();
      URI uRI1 = mockFile0.toURI();
      MockFile mockFile4 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/WRR/WRR", "WRR");
      mockFile4.mkdirs();
      MockFile mockFile5 = new MockFile(uRI1);
      MockFile mockFile6 = new MockFile(mockFile3, "+'W;hl_*g#r");
      mockFile5.delete();
      mockFile5.delete();
      mockFile5.setWritable(false, false);
      mockFile0.toURL();
      mockFile5.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile3.setWritable(false);
      mockFile0.deleteOnExit();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "p~4Q))]DCP^,/;@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("WRR");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("WRR");
      mockFile0.setExecutable(true);
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile("WRR");
      mockFile1.getCanonicalPath();
      mockFile1.setReadable(false);
      mockFile0.setExecutable(false);
      mockFile1.deleteOnExit();
      mockFile2.delete();
      mockFile1.getAbsolutePath();
      mockFile1.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      mockFile2.renameTo(mockFile1);
      mockFile0.setReadOnly();
      URI uRI0 = MockURI.aHttpURI;
      mockFile0.setReadable(false);
      mockFile0.getCanonicalPath();
      mockFile2.toURI();
      MockFile mockFile3 = new MockFile("/home/ubuntu/termite/projects/78_caloriecount/WRR", "WRR");
      mockFile3.mkdirs();
      File file0 = mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile(mockFile0, "+'W;hl_*g#r");
      file0.delete();
      file0.delete();
      file0.setWritable(false, false);
      file0.mkdirs();
      file0.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile1.setWritable(false);
      mockFile0.deleteOnExit();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "/home/ubuntu/termite/projects/78_caloriecount/WRR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile("");
      mockFile0.setExecutable(false);
      mockFile0.createNewFile();
      mockFile1.deleteOnExit();
      mockFile0.toURL();
      File file0 = mockFile0.getAbsoluteFile();
      mockFile0.getCanonicalPath();
      mockFile0.createNewFile();
      mockFile1.setReadable(true);
      File file1 = file0.getCanonicalFile();
      mockFile0.setExecutable(true);
      file1.deleteOnExit();
      file0.delete();
      file1.getAbsolutePath();
      file1.setReadOnly();
      ImprovedFile improvedFile0 = new ImprovedFile(file1);
      mockFile0.createNewFile();
      file1.setReadable(true);
      file1.setReadOnly();
      File file2 = MockFile.createTempFile(".WAR", ".WAR", (File) mockFile1);
      File file3 = file2.getAbsoluteFile();
      ImprovedFile improvedFile1 = new ImprovedFile("/home/ubuntu/termite/projects/78_caloriecount", ".WAR");
      file3.mkdirs();
      file3.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      file1.setWritable(true);
      mockFile0.deleteOnExit();
      System.setCurrentTimeMillis((-2721L));
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "/home/ubuntu/termite/projects/78_caloriecount", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      vector1.add((Object) vector0);
      vector0.add(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      vector1.add(object4);
      Object object5 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      vector3.add(object2);
      Vector<Object> vector4 = new Vector<Object>();
      DirectoryScanner.matchPath("j^r@X:R@>?]t;`Aki", "j^r@X:R@>?]t;`Aki");
      Object object6 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("^VES", "o4N9.<O{pQE^sx]IsB");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) function0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      Predicate<Object> predicate8 = predicate0.negate();
      predicate8.test(predicate3);
      predicate4.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate5);
      Predicate<Object> predicate10 = predicate4.negate();
      predicate10.negate();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate12 = predicate11.or(predicate6);
      predicate9.test(predicate4);
      Predicate<Object> predicate13 = predicate11.and(predicate6);
      predicate5.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate5.or(predicate1);
      Predicate<Object> predicate16 = predicate5.or(predicate14);
      Predicate<Object> predicate17 = predicate12.negate();
      predicate2.negate();
      predicate3.negate();
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate19 = predicate7.or(predicate18);
      predicate13.or(predicate19);
      predicate16.or(predicate3);
      predicate15.negate();
      predicate16.and(predicate9);
      predicate17.or(predicate6);
      predicate9.and(predicate4);
      predicate6.test(predicate0);
      ImprovedFile improvedFile0 = new ImprovedFile("*V42~3qJ~$SM!T");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) function0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate5);
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate9.negate();
      predicate13.or(predicate6);
      predicate10.test(predicate4);
      Predicate<Object> predicate14 = predicate13.and(predicate6);
      predicate5.negate();
      Predicate<Object> predicate15 = predicate12.negate();
      predicate5.or(predicate1);
      Predicate<Object> predicate16 = predicate5.or(predicate15);
      predicate2.negate();
      Predicate<Object> predicate17 = predicate3.negate();
      Predicate<Object> predicate18 = predicate17.negate();
      Predicate<Object> predicate19 = predicate7.or(predicate18);
      predicate14.or(predicate19);
      predicate11.and(predicate18);
      Predicate<Object> predicate20 = predicate10.negate();
      predicate16.and(predicate20);
      predicate16.or(predicate3);
      predicate19.negate();
      predicate16.and(predicate10);
      predicate8.or(predicate6);
      predicate10.and(predicate4);
      predicate9.test(predicate15);
      ImprovedFile improvedFile0 = new ImprovedFile("*V42~3Jx~$SMAT");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "*V42~3Jx~$SMAT", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/*V42~3Jx~$SMAT
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      vector0.replaceAll(unaryOperator0);
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      vector0.add(object1);
      Object object2 = new Object();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      vector0.add(object5);
      Object object6 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      vector1.add((Object) unaryOperator0);
      Vector<Object> vector3 = new Vector<Object>();
      Object object7 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile("91XJmN?qNv", "kjl-B");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(392L);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }
}
