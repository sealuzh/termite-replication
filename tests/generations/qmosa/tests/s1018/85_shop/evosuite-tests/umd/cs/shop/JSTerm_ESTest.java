/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 13:37:10 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9036866883376182
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      StringReader stringReader1 = new StringReader("Szl3[mn]+G:GhgA|");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.nval = streamTokenizer1.nval;
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.removeAllElements();
      System.setCurrentTimeMillis(29L);
      Predicate.isEqual((Object) null);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3345491092125656
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate3.test(jSSubstitution1);
      predicate6.and(predicate4);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm2.isVariable());
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(boolean0);
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3);
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply("m})[E2A!aH2$/");
      jSSubstitution0.addElement("m})[E2A!aH2$/");
      unaryOperator1.apply("m})[E2A!aH2$/");
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super JSSubstitution, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      jSTerm0.add((Object) "#'bn7$Ag$fdo");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "GeHH3$,&\"yq+(a(|)");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate1.negate();
      predicate0.or(predicate3);
      predicate3.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      boolean boolean0 = jSTerm1.isEval();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.220636797977266
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Szl3[mn]+G:GhgA|");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Szl3[mn]+G:GhgA|");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      predicate3.or(predicate5);
      predicate6.negate();
      predicate5.and(predicate3);
      Predicate<Object> predicate8 = predicate3.and(predicate5);
      predicate1.and(predicate4);
      predicate4.negate();
      predicate8.negate();
      predicate0.and(predicate7);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.lastElement();
      jSTerm2.makeVariable();
      jSTerm0.isGround();
      predicate2.negate();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super JSSubstitution, ?>) function1);
      Function<Object, Object> function2 = Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      jSTerm1.call();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3716223367649403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      StringReader stringReader1 = new StringReader("Szl3[mn]+G:GhgA|");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm1.isEmpty();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addElement(jSTerm2);
      UnaryOperator.identity();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm4 = jSTerm1.call();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm0.standardizerTerm();
      jSTerm5.equals(jSTerm6);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2AUaH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.addElement("m})[E2AUaH2$/");
      unaryOperator1.apply("m})[E2AUaH2$/");
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function0.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super JSSubstitution, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      jSTerm0.add((Object) "#'bn7$Ag$fdo");
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2AUaH2$/");
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution0.addElement("m})[E2AUaH2$/");
      unaryOperator1.apply("m})[E2AUaH2$/");
      Function<Object, Object> function1 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      jSSubstitution0.add((Object) function0);
      jSTerm0.add((Object) "#'bn7$Ag$fdo");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2AUaH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution0.addElement("m})[E2AUaH2$/");
      unaryOperator1.apply("m})[E2AUaH2$/");
      Function<Object, Object> function1 = Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.compose((Function<? super JSSubstitution, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      jSSubstitution0.add((Object) function0);
      jSTerm0.add((Object) "#'bn7$Ag$fdo");
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8192897823758827
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.addElement("m})[E2A!aH2$/");
      unaryOperator1.apply("m})[E2A!aH2$/");
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function1 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function2 = unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function1);
      unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function2);
      unaryOperator1.compose((Function<? super JSSubstitution, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.print();
      jSTerm0.add((Object) "#'bn7$Ag$fdo");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.addElement("m})[E2A!aH2$/");
      unaryOperator1.apply("m})[E2A!aH2$/");
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function1 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function2 = unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function1);
      unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function2);
      unaryOperator1.compose((Function<? super JSSubstitution, ?>) unaryOperator2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(33);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Ut2,gDe^XKcgeAK\"B`");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      predicate2.negate();
      predicate3.negate();
      predicate5.and(predicate3);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate2.and(predicate6);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.backquote = 109;
      JSJshopVars.semicolon = 109;
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.remove(109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 109
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.118960974100362
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>TuQvXj4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightBrac = (-1);
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?6[H$>TuQvXj4ngD3");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      jSSubstitution1.removeIf(predicate3);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9911388966130941
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%qi}|#N@t1*t");
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader(".");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(true);
      long long0 = (-776L);
      System.setCurrentTimeMillis((-776L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      stringReader0.read();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 39;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9865302366210547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.print();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m})[E2A!aH2$/");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.and(predicate0);
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm2.standardizerTerm();
      JSJshopVars.lessT = (-3960);
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.setSize(2);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3377074313239086
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.nval = streamTokenizer1.nval;
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(29L);
      Predicate.isEqual((Object) null);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.whitespaceChars(1163, 41);
      streamTokenizer2.wordChars(1163, (-4));
      jSTerm1.standardizerTerm();
      JSJshopVars.leftBrac = 41;
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.eolIsSignificant(true);
      System.setCurrentTimeMillis((-4));
      jSTerm1.print();
      streamTokenizer1.eolIsSignificant(true);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-547L));
      jSTerm1.cloneT();
      JSJshopVars.apostrophe = (-4);
      System.setCurrentTimeMillis(1475L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8460525146995628
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      StringReader stringReader1 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 1;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) unaryOperator0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader1 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StringReader stringReader2 = new StringReader("u}uKG");
      StringReader stringReader3 = new StringReader("?");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(false);
      long long0 = (-776L);
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6117969454556231
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Szl3[mn]+G:GhgA|");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.lastElement();
      Predicate.isEqual((Object) "Szl3[mn]+G:GhgA|");
      jSSubstitution0.add((Object) "Szl3[mn]+G:GhgA|");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Object object0 = new Object();
      jSSubstitution0.removeAllElements();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm1.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm1.elementAt(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate2);
      predicate2.negate();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9784402046800444
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSJshopVars.lessT = (-3960);
      jSTerm1.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm3.equals(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Szl3[mn]+G:GhgA|");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      unaryOperator0.apply(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.instance(jSTerm2);
      jSSubstitution3.sort((Comparator) null);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      jSSubstitution0.removeElements(jSSubstitution3);
      Object object0 = new Object();
      unaryOperator0.apply(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.add((Object) unaryOperator1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.colon = 61;
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Szl3[mn]+G:GhgA|");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Szl3[mn]+G:GhgA|");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate3.or(predicate5);
      predicate6.negate();
      predicate5.and(predicate3);
      Predicate<Object> predicate9 = predicate3.and(predicate5);
      Predicate<Object> predicate10 = predicate1.and(predicate4);
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate0.and(predicate7);
      jSTerm0.lastElement();
      jSTerm0.isGround();
      predicate2.negate();
      predicate10.and(predicate11);
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate5.or(predicate13);
      predicate10.negate();
      predicate14.negate();
      predicate15.and(predicate7);
      predicate1.and(predicate10);
      Predicate.isEqual((Object) predicate2);
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader(".");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      jSTerm1.add((Object) ".");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      Object object1 = jSTerm0.lastElement();
      jSSubstitution0.add(object1);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-12);
      JSJshopVars.exclamation = (-12);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = (-12);
      jSTerm0.add((Object) ".");
      JSJshopVars.rightBrac = (-12);
      JSJshopVars.slash = (-12);
      JSJshopVars.interrogation = (-12);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.366483648412628
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isEmpty();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution4 = jSTerm4.matches(jSTerm2);
      JSTerm jSTerm5 = jSTerm0.cloneT();
      jSTerm0.call();
      jSTerm5.call();
      jSSubstitution4.add((Object) jSTerm3);
      StringReader stringReader0 = new StringReader("^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1;
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      jSTerm0.add((Object) "oB_?c");
      JSJshopVars.rightBrac = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9110175397125628
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.print();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m})[E2A!aH2$/");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      predicate2.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate6);
      predicate2.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) stringReader0);
      predicate0.and(predicate5);
      Predicate<Object> predicate9 = predicate7.and(predicate5);
      predicate1.or(predicate9);
      jSTerm1.clone();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate5);
      predicate8.negate();
      predicate10.and(predicate6);
      predicate6.negate();
      predicate1.or(predicate8);
      StringReader stringReader1 = new StringReader("BO}u!E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.markSupported();
      jSTerm0.ensureCapacity(43);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      jSTerm1.equals(jSTerm0);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.subList((-1445421684), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1445421684
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.157963565450758
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
      
      JSJshopVars.verticalL = 1;
      JSJshopVars.interrogation = 1;
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean1);
      
      JSJshopVars.apostrophe = 1;
      jSSubstitution0.setSize(1);
      JSJshopVars.rightBrac = 1;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.rightPar = (int) 'Z';
      JSJshopVars.interrogation = 1;
      jSTerm2.subList(1, 1);
      JSJshopVars.colon = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.leftBrac = 1;
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertNotSame(jSTerm2, jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.quoteChar(979);
      StringReader stringReader1 = new StringReader("");
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      StringReader stringReader0 = new StringReader(".");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      jSTerm0.add((Object) "oy_xc");
      JSJshopVars.rightBrac = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oy_xc");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate.isEqual((Object) predicate0);
      predicate5.and(predicate4);
      predicate3.or(predicate6);
      predicate1.test(predicate4);
      StringReader stringReader1 = new StringReader("nil");
      StringReader stringReader2 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7170759801988817
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.retainAll(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.ensureCapacity((-2));
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm4, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.addElements(jSSubstitution1);
      StringReader stringReader0 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) unaryOperator0);
      jSTerm0.add((Object) "] ");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Szl3[mn]+G:GhgA|");
      StringReader stringReader0 = new StringReader("q+&X$!?^,p9?T");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("v8*y,qw&E");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      stringReader0.skip(1165L);
      StringReader stringReader2 = new StringReader("v8*y,qw&E");
      stringReader2.reset();
      StringReader stringReader3 = new StringReader("?");
      StringReader stringReader4 = new StringReader("call");
      stringReader4.reset();
      StringReader stringReader5 = new StringReader("v8*y,qw&E");
      System.setCurrentTimeMillis(0L);
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9770061729088613
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "2%?i}|#N@t1*t");
      jSTerm0.clone();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      Predicate.isEqual((Object) null);
      jSTerm0.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>TuQvXj4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.markSupported();
      jSTerm0.ensureCapacity(43);
      jSSubstitution0.add((Object) "?6[H$>TuQvXj4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution0.iterator();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>TuQvXj4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      System.setCurrentTimeMillis((-102L));
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis((-2092L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      System.setCurrentTimeMillis((-1777L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2002L));
      System.setCurrentTimeMillis((-1777L));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8486855577264172
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      StringReader stringReader2 = new StringReader("m");
      StringReader stringReader3 = new StringReader("6~\r8 eC1A\"r9Fd2Q");
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("?");
      StringReader stringReader5 = new StringReader("~U/;|8Zx");
      stringReader4.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.quoteChar(2994);
      StringReader stringReader6 = new StringReader("<");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader5);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9770061729088613
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.containsAll(jSTerm0);
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm2.matches(jSTerm1, jSSubstitution5);
      jSSubstitution5.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm0.applySubstitutionT(jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8735105206455303
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.containsAll(jSTerm0);
      jSSubstitution4.removeAllElements();
      JSSubstitution jSSubstitution5 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSSubstitution5.add((Object) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution5);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader3 = new StringReader("u}uKG");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.quoteChar(44);
      streamTokenizer0.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader3 = new StringReader("u}uKG");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      StringReader stringReader4 = new StringReader("u}uKG");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSJshopVars.verticalL = 1;
      JSJshopVars.interrogation = 1;
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean1);
      
      JSJshopVars.apostrophe = 1;
      jSSubstitution0.setSize(1);
      JSJshopVars.rightBrac = 1;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.rightPar = (int) 'Z';
      JSJshopVars.interrogation = 1;
      jSTerm2.subList(1, 1);
      JSJshopVars.colon = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.leftBrac = 1;
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.154783153373369
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StringReader stringReader1 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader2 = new StringReader("Unexpected ) while reading Predicate");
      StringReader stringReader3 = new StringReader("u}uKG");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      StringReader stringReader4 = new StringReader("u}uKG");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      System.setCurrentTimeMillis((-4));
      StringReader stringReader5 = new StringReader("`");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution0));
      
      jSSubstitution4.add((Object) stringReader4);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm0.standardizerTerm();
      jSTerm2.cloneT();
      jSTerm0.standardizerTerm();
      assertEquals("[Unexpected]", jSTerm0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.26352987314321
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm0.call();
      streamTokenizer0.parseNumbers();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader(".");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0316900029887046
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars(61, 61);
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      StringReader stringReader2 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader2);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.equals(jSTerm3);
      jSTerm2.equals(jSTerm1);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8018185525433373
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "2%?i}|#N@t1*t");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      predicate3.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) stringReader0);
      predicate6.and(predicate0);
      predicate6.or(predicate5);
      jSTerm0.equals(jSTerm0);
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.194474390789038
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.containsAll(jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      Object object0 = jSTerm3.clone();
      jSSubstitution3.add(object0);
      jSSubstitution3.add((Object) "9\"AO@\"D.(zf Zk1$");
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>TuQvXj4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate.isEqual((Object) null);
      predicate2.and(predicate0);
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      jSTerm0.isGround();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.2963611597910563
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StringReader stringReader1 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parseList(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      jSTerm0.parseList(streamTokenizer1);
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isVariable();
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      assertEquals((-4), streamTokenizer1.ttype);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.168416367967306
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.ordinaryChar((-4185));
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(32);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.insertElementAt(jSSubstitution1, 2);
      streamTokenizer0.pushBack();
      stringReader0.read();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.toStr();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.isConstant();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.addElements(jSSubstitution1);
      StringReader stringReader1 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.isConstant();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      assertFalse(predicate3.equals((Object)predicate2));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      stringReader1.skip(0L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'f';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader(".");
      StringReader stringReader3 = new StringReader("0jv0");
      stringReader0.reset();
      boolean boolean0 = stringReader1.ready();
      CharBuffer.allocate(6);
      StringReader stringReader4 = new StringReader("ceil");
      StringReader stringReader5 = new StringReader("ksJ'");
      stringReader5.read();
      StringReader stringReader6 = new StringReader("Line : ");
      stringReader6.skip(0L);
      stringReader5.mark(6);
      stringReader6.reset();
      stringReader1.reset();
      stringReader5.read(charArray0);
      StringReader stringReader7 = new StringReader("0jv0");
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean1 = jSTerm0.isEval();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9869667702348366
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.addElements(jSSubstitution1);
      StringReader stringReader1 = new StringReader("?6[H$>YuQvbj\"4ngD3");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm3.isFunction());
      assertEquals("[?%%%0]", jSTerm4.toString());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) stringReader0);
      predicate6.or(predicate5);
      predicate5.test((Object) null);
      StringReader stringReader2 = new StringReader("nil");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-V0|1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      StringReader stringReader1 = new StringReader("");
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      StringReader stringReader2 = new StringReader("jX");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.slashSlashComments(false);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(2546L);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("2.0 ", stringBuffer0.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Ut2,gDe^XKcgeAK\"B`");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      predicate2.negate();
      predicate3.negate();
      predicate5.and(predicate3);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate2.and(predicate6);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 26;
      JSJshopVars.lessT = 26;
      JSJshopVars.apostrophe = 26;
      jSTerm0.isGround();
      JSJshopVars.colon = 26;
      System.setCurrentTimeMillis((-4848L));
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-990L));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.410513557114838
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars(64, 1);
      streamTokenizer0.quoteChar(1022);
      StringReader stringReader1 = new StringReader("");
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader2 = new StringReader("dm{$z|>OSJ[R");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.slashSlashComments(true);
      System.setCurrentTimeMillis(979);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.410513557114838
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars(64, 1);
      streamTokenizer0.quoteChar(1022);
      StringReader stringReader1 = new StringReader("");
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader2 = new StringReader("dm{$z|>OSJ[R");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.slashSlashComments(true);
      System.setCurrentTimeMillis(979);
      System.setCurrentTimeMillis(13L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StringReader stringReader1 = new StringReader("3{olRM");
      StringReader stringReader2 = new StringReader("3{olRM");
      stringReader2.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(1823L);
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-V0|1");
      boolean boolean0 = false;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ?>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator1);
      jSSubstitution1.removeElements(jSSubstitution0);
      Object object0 = new Object();
      unaryOperator2.apply(object0);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unexpected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4548671092662881
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = ".";
      StringReader stringReader1 = new StringReader(".");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>TuQvXj4ngD3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      stringReader0.reset();
      Predicate.isEqual((Object) "?6[H$>TuQvXj4ngD3");
      jSTerm1.matches((JSTerm) null);
      // Undeclared exception!
      try { 
        jSTerm1.elementAt(2166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2166 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.2700181519104905
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer2);
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
