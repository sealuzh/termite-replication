/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 16:52:44 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.601407867759606
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-2);
      JSJshopVars.dot = (-2);
      JSJshopVars.equalT = (-2);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm0.matches(jSTerm0);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8316620655136404
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.clear();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5216051625270866
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.dot = 850;
      jSTerm2.removeAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8133465262345525
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      predicate0.negate();
      Object object0 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      predicate3.negate();
      predicate3.test(predicate2);
      predicate1.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.ensureCapacity(60);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate0);
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = jSTerm1.matches(jSTerm3);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution4);
      jSTerm2.applySubstitutionT(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution4.add((Object) "?6[H$>Y2uQvbj\"4ngD3");
      jSTerm1.standardizerTerm();
      jSSubstitution3.addElement(jSTerm4);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4758556591237255
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'Z';
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "C");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5642810620656986
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution4.replaceAll(unaryOperator0);
      jSSubstitution4.add((Object) jSSubstitution5);
      JSJshopVars.exclamation = 134;
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution4.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.674450479242588
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      int int0 = (-2);
      JSJshopVars.dot = (-2);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.equalT = (-2);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.isGround();
      jSTerm1.makeEval(true);
      jSTerm0.matches(jSTerm1);
      jSTerm1.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4753613586866123
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "C");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution3);
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution4.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) "C");
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution5);
      jSTerm3.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(37);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.equals(jSTerm3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution7);
      jSTerm1.removeElement(jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution6);
      jSTerm4.applySubstitutionT(jSSubstitution6);
      jSTerm4.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3461780422886362
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(134);
      Integer integer1 = new Integer((-544));
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4439923457092316
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "?6[H$>Y2uQvbj\"4ngD3";
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      predicate0.negate();
      predicate0.or(predicate0);
      predicate0.negate();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2066904960586546
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm2.standardizerTerm();
      int int0 = (-13);
      jSSubstitution3.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.495314098265754
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSJshopVars.exclamation = 46;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution4.replaceAll(unaryOperator0);
      jSSubstitution4.add((Object) jSSubstitution5);
      JSJshopVars.exclamation = 134;
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSSubstitution6;
      jSTerm2.listIterator();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.436957355402602
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "JK");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.lessT = (-1);
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "JK");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate5);
      predicate6.and(predicate3);
      Predicate<Object> predicate7 = predicate4.and(predicate2);
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate1.negate();
      predicate9.negate();
      Predicate<Object> predicate10 = predicate6.or(predicate9);
      Predicate<Object> predicate11 = predicate0.and(predicate2);
      predicate11.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate4);
      predicate3.or(predicate12);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate12.or(predicate8);
      predicate10.and(predicate14);
      predicate7.negate();
      Predicate<Object> predicate15 = predicate13.and(predicate9);
      predicate5.and(predicate15);
      predicate5.test(predicate2);
      // Undeclared exception!
      try { 
        jSTerm3.set((-1), predicate3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5282814991178286
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution4.replaceAll(unaryOperator0);
      jSSubstitution4.add((Object) jSSubstitution5);
      JSJshopVars.exclamation = 134;
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSSubstitution6;
      jSSubstitution5.toArray(objectArray0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.applySubstitutionT(jSSubstitution5);
      jSTerm0.applySubstitutionT(jSSubstitution6);
      jSSubstitution6.clone();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution7);
      jSSubstitution5.iterator();
      System.setCurrentTimeMillis(33);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.and(predicate1);
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5572661404461452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      StringReader stringReader0 = new StringReader("48%fkeR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.494213318532335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "C");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      jSSubstitution0.trimToSize();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.applySubstitutionPF(jSSubstitution4);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      Integer integer0 = new Integer((-3254));
      jSTerm2.toStr();
      assertEquals("[C, [C]]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("JK");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "JK");
      Integer integer0 = new Integer(1027);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Integer integer1 = new Integer(1027);
      Integer integer2 = new Integer((-1263));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-2));
      jSTerm0.add((Object) integer1);
      jSTerm0.firstElement();
      Integer integer2 = new Integer((-3));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3674276411690234
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      JSJshopVars.apostrophe = 123;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution1.ensureCapacity(123);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm4.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.236527550270932
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2769130758173466
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) "/");
      jSTerm0.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Ln : ");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m})[E2A!aH2$/");
      predicate0.or(predicate0);
      // Undeclared exception!
      try { 
        jSTerm0.remove((-243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -243
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ".";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "m";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      jSTerm0.add((Object) "m");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9501702784519184
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "m})[E2A!aH2$/";
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Ln : ");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.655334723195454
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      streamTokenizer0.whitespaceChars(0, 0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate4.and(predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      predicate3.or(predicate0);
      predicate0.or(predicate5);
      predicate1.test((Object) null);
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals("[?%%%, null]", jSTerm0.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.536062315080832
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      StringReader stringReader0 = new StringReader("u");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "u");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isFunction();
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      jSTerm0.standardizerTerm();
      JSJshopVars.apostrophe = 1;
      JSJshopVars.lessT = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.rightBrac = 1;
      jSSubstitution0.spliterator();
      JSJshopVars.percent = (-1);
      JSJshopVars.slash = 0;
      jSTerm1.cloneT();
      JSJshopVars.apostrophe = (-893);
      JSJshopVars.colon = 0;
      JSJshopVars.leftBrac = (-893);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-V0|1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      jSTerm0.add((Object) "oB_?c");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4728179086644992
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "C");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      jSSubstitution0.trimToSize();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.applySubstitutionPF(jSSubstitution5);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.isGround();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution7.add((Object) "C");
      jSSubstitution8.setSize(2);
      jSSubstitution4.add((Object) jSSubstitution8);
      jSSubstitution7.removeElements(jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution7);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution4);
      assertEquals("[C, [C]]", jSTerm0.toString());
      assertTrue(jSTerm4.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2048808582476624
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Object object0 = new Object();
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      predicate5.test(predicate3);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate<Object> predicate7 = predicate2.and(predicate6);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate0.or(predicate0);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate1);
      predicate4.and(predicate10);
      predicate8.or(predicate9);
      predicate0.negate();
      Predicate<Object> predicate12 = predicate2.or(predicate8);
      Predicate<Object> predicate13 = predicate7.negate();
      predicate7.and(predicate12);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate14 = predicate11.negate();
      predicate13.negate();
      Predicate<Object> predicate15 = predicate10.negate();
      Predicate<Object> predicate16 = predicate15.or(predicate9);
      predicate16.or(predicate10);
      predicate13.or(predicate1);
      Integer integer0 = new Integer((-1));
      predicate14.test(integer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[14];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 1;
      jSTerm0.addElement("m");
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.dot = 114;
      System.setCurrentTimeMillis((-4848L));
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.addElement((Object) null);
      StringReader stringReader1 = new StringReader("m})[E2A!aH2$/");
      StringReader stringReader2 = new StringReader("+");
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis(6);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.233869742961962
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) "/");
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.ensureCapacity((-457));
      jSTerm0.standardizerTerm();
      jSTerm2.clone();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = ".";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5892367791961544
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("hV'A|tOlX8");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hV'A|tOlX8");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.lessT = (int) '\u0000';
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5892367791961544
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("hV'A|tOlX8");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hV'A|tOlX8");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.lessT = (-1);
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4592991379312594
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.slash = (-3193);
      jSTerm1.add((Object) null);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSJshopVars.greaterT = 134;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.equals(jSTerm2);
      JSJshopVars.exclamation = 134;
      jSSubstitution1.add((Object) "4.0");
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution2.remove((Object) jSSubstitution1);
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSSubstitution6;
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "?6[H$>Y2uQvbj\"4ngD3";
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-4));
      jSSubstitution0.add((Object) stringReader0);
      JSJshopVars.astherisk = (-4);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "?6[H$>Y2uQvbj\"4ngD3";
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      jSTerm0.add((Object) "?6[H$>Y2uQvbj\"4ngD3");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.print();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) (-1));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      predicate2.or(predicate3);
      // Undeclared exception!
      try { 
        jSTerm0.remove((-243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -243
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.sval = "Line : ";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5772048011382633
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.491555624066988
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      jSSubstitution0.containsAll(jSTerm1);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(134);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution4.replaceAll(unaryOperator0);
      jSSubstitution4.add((Object) jSSubstitution5);
      JSJshopVars.exclamation = 134;
      JSTerm jSTerm4 = new JSTerm();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSSubstitution6;
      jSSubstitution5.toArray(objectArray0);
      jSTerm4.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4911096335219876
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity(134);
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution5.replaceAll(unaryOperator0);
      jSSubstitution5.add((Object) jSSubstitution6);
      JSJshopVars.exclamation = 134;
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution5.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution7 = jSTerm0.matches(jSTerm2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSSubstitution7;
      jSSubstitution6.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.395994380645311
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.assignFailure();
      JSJshopVars.apostrophe = 134;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharBuffer.wrap((CharSequence) "WH=Xa\")l");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7314233917906585
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.call();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8800221234841177
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8515037185653487
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      StringReader stringReader2 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "m})[E2A!aH2$/");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.315352224393084
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GU`KAE3)aHWjyF");
      StringReader stringReader1 = new StringReader("kTR+INd%&=tlh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7112725272475133
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer((-3));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StringReader stringReader1 = new StringReader("Expecting constant symbol as term");
      StringReader stringReader2 = new StringReader("1l;%X>T?$ ]");
      StringReader stringReader3 = new StringReader("4S'g ,'#DY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader("4S'g ,'#DY");
      StringReader stringReader5 = new StringReader("1l;%X>T?$ ]");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSJshopVars.lessT = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1032191624484695
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Object object0 = new Object();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      Predicate<Object> predicate5 = predicate1.and(predicate3);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      predicate1.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate1);
      predicate4.and(predicate8);
      predicate4.or(predicate7);
      predicate0.negate();
      Predicate<Object> predicate10 = predicate2.or(predicate2);
      Predicate<Object> predicate11 = predicate6.negate();
      predicate6.and(predicate10);
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate12 = predicate9.negate();
      predicate11.negate();
      predicate11.negate();
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate13.or(predicate7);
      predicate14.or(predicate8);
      predicate11.or(predicate1);
      Integer integer0 = new Integer((-1));
      predicate12.test(integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "n@9BW$7yK~";
      StringReader stringReader0 = new StringReader("n@9BW$7yK~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSJshopVars.greaterT = 91;
      jSTerm0.iterator();
      JSJshopVars.dot = 62;
      JSJshopVars.flagLevel = 62;
      JSJshopVars.lessT = 2485;
      jSTerm0.iterator();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.56900474164515
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.ordinaryChar((-4185));
      streamTokenizer0.eolIsSignificant(true);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(32);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.insertElementAt(jSSubstitution1, 2);
      streamTokenizer0.pushBack();
      stringReader0.read();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.toStr();
      jSTerm1.matches(jSTerm0);
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      
      jSTerm0.call();
      boolean boolean1 = jSTerm0.isConstant();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = 1;
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader1 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 2;
      jSTerm0.isConstant();
      StringReader stringReader1 = new StringReader("Line : ");
      StringReader stringReader2 = new StringReader("93%d?#Pd1~x pMf");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "93%d?#Pd1~x pMf");
      int int0 = 33;
      JSJshopVars.VarCounter = 33;
      System.setCurrentTimeMillis(33);
      System.setCurrentTimeMillis(2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader(".");
      stringReader0.read();
      stringReader0.ready();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, 56, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0876987819993174
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      Integer integer0 = new Integer(39);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertTrue(jSTerm1.isVariable());
      
      Integer integer1 = new Integer((-3));
      Integer integer2 = new Integer((-3));
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isFunction());
      assertEquals(5, stringBuffer0.length());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      char[] charArray0 = null;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8942561364730204
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      jSTerm0.call();
      StringReader stringReader0 = new StringReader(".");
      char[] charArray0 = null;
      stringReader0.ready();
      int int0 = 1;
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, 56, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      Predicate<Object> predicate6 = predicate2.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate1);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      Predicate<Object> predicate9 = predicate3.negate();
      predicate9.or(predicate7);
      predicate5.negate();
      predicate5.negate();
      Predicate<Object> predicate10 = predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate4);
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate11 = predicate6.and(predicate10);
      Predicate<Object> predicate12 = predicate6.or(predicate8);
      Predicate<Object> predicate13 = predicate10.negate();
      predicate12.or(predicate13);
      predicate11.negate();
      predicate2.and(predicate7);
      Predicate<Object> predicate14 = predicate0.negate();
      Predicate<Object> predicate15 = predicate14.or(predicate5);
      predicate9.or(predicate15);
      predicate7.negate();
      boolean boolean0 = predicate12.test(predicate9);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jsterm:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSJshopVars.exclamation = (-16);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution5 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution5.fail());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "m";
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "m";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "m";
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "2%?i}|#N@t1*t");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) stringReader0);
      predicate7.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) null);
      predicate4.test(predicate8);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-2));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-V|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.552985392975941
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      StringReader stringReader0 = new StringReader("u");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "u");
      JSJshopVars.coma = 665;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.colon = 1;
      jSTerm0.equals(jSTerm1);
      JSJshopVars.slash = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.interrogation = 1;
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.makeEval(true);
      assertTrue(jSTerm2.isEval());
      
      JSJshopVars.apostrophe = 1;
      JSJshopVars.lessT = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.rightBrac = 1;
      jSSubstitution0.spliterator();
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 0;
      JSJshopVars.rightPar = 1;
      JSJshopVars.apostrophe = 33;
      JSJshopVars.colon = 0;
      JSJshopVars.leftBrac = 0;
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis((-2470L));
      System.setCurrentTimeMillis(33);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.cloneT();
      assertFalse(jSTerm3.isConstant());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2054480732221378
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals(1, jSSubstitution1.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Object object0 = new Object();
      Predicate<Object> predicate4 = Predicate.isEqual(object0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate0);
      Predicate<Object> predicate7 = predicate2.and(predicate1);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate3.or(predicate0);
      Predicate<Object> predicate9 = predicate5.and(predicate2);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate0.negate();
      predicate11.or(predicate6);
      Predicate<Object> predicate14 = predicate12.negate();
      predicate10.and(predicate9);
      Predicate<Object> predicate15 = predicate1.or(predicate4);
      Predicate<Object> predicate16 = predicate15.negate();
      Predicate<Object> predicate17 = predicate14.or(predicate4);
      Predicate<Object> predicate18 = predicate5.negate();
      predicate9.and(predicate1);
      predicate10.test(predicate9);
      predicate5.negate();
      Predicate<Object> predicate19 = predicate0.or(predicate15);
      predicate18.or(predicate13);
      predicate13.negate();
      predicate17.negate();
      predicate16.and(predicate8);
      predicate8.test(predicate19);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      StringReader stringReader0 = new StringReader(".");
      int int0 = 43;
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, 43, 532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.and(predicate1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.001192908978559
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      int int0 = 43;
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, 43, 532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-514L));
      System.setCurrentTimeMillis((-514L));
      System.setCurrentTimeMillis((-514L));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7500181519104905
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parseList(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      StringReader stringReader0 = new StringReader("u");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate4);
      Predicate<Object> predicate8 = predicate3.and(predicate6);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.or(predicate3);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate12 = predicate2.and(predicate4);
      predicate7.or(predicate8);
      Predicate<Object> predicate13 = predicate3.or(predicate6);
      predicate5.negate();
      Predicate<Object> predicate14 = predicate11.or(predicate12);
      predicate10.negate();
      Predicate<Object> predicate15 = predicate5.or(predicate6);
      Predicate<Object> predicate16 = predicate13.or(predicate11);
      Predicate<Object> predicate17 = predicate6.or(predicate3);
      predicate17.and(predicate14);
      Predicate<Object> predicate18 = predicate12.negate();
      Predicate.isEqual((Object) predicate18);
      predicate15.or(predicate9);
      predicate3.negate();
      predicate10.or(predicate8);
      predicate7.or(predicate10);
      predicate0.negate();
      Predicate<Object> predicate19 = predicate6.negate();
      predicate5.or(predicate19);
      predicate14.test(predicate16);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      StringReader stringReader0 = new StringReader("u");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.colon = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.minus = 1;
      jSSubstitution0.add((Object) "u");
      JSJshopVars.interrogation = 1;
      JSJshopVars.apostrophe = 1;
      JSJshopVars.lessT = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.rightBrac = 1;
      jSSubstitution0.spliterator();
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 0;
      JSJshopVars.rightPar = 1;
      JSJshopVars.colon = 0;
      JSJshopVars.leftBrac = 0;
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis((-2470L));
      System.setCurrentTimeMillis(1);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
