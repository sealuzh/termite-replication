/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 17:11:39 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.listIterator();
      jSTerm0.add((Object) ".ot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) ".ot");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(" ) ");
      stringReader0.skip(1L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.listIterator();
      String string0 = "G.ot";
      jSTerm0.add((Object) "G.ot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4118090007716961
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm2.iterator();
      jSTerm1.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.trimToSize();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) "G.ot");
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "G.ot";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm1.toArray(objectArray0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.trimToSize();
      System.setCurrentTimeMillis((-5));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0329233799129258
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "not");
      jSTerm0.clone();
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm0.add((Object) jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSPredicateForm1);
      jSTerm1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.setSize((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSTerm0.removeAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.trimToSize();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) "not");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution2);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution2.trimToSize();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) null);
      jSTerm1.firstElement();
      jSSubstitution4.add((Object) jSSubstitution3);
      jSSubstitution4.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) unaryOperator0);
      StringReader stringReader0 = new StringReader("not");
      stringReader0.read();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.279474828595471
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.add((Object) "");
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.listIterator();
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm3);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.clonePF();
      jSPredicateForm4.clear();
      jSSubstitution0.add((Object) jSPredicateForm5);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.applySubstitutionPF(jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm2);
      jSPredicateForm6.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.matches(jSPredicateForm6, jSSubstitution1);
      jSPredicateForm2.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8212146057008812
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.listIterator();
      jSTerm0.add((Object) ".ot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) ".ot");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(" ) ");
      stringReader0.skip(1L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertEquals(1, jSSubstitution2.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r(Ew{SP6jk'#4yS\"");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(114, (-197));
      streamTokenizer0.whitespaceChars(114, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer3.slashStarComments(true);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.wordChars((-1071), (-4));
      streamTokenizer1.ordinaryChars(1851, (-4));
      streamTokenizer0.whitespaceChars(1851, 943);
      streamTokenizer2.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.parseNumbers();
      streamTokenizer5.slashStarComments(false);
      streamTokenizer5.commentChar((-197));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader0);
      streamTokenizer10.ordinaryChar((-4));
      StreamTokenizer streamTokenizer11 = new StreamTokenizer(stringReader0);
      streamTokenizer11.quoteChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer9);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-3));
      jSTerm1.add((Object) "not");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-2163));
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "G.ot");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) "G.ot");
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "G.ot";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm1.toArray(objectArray0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.trimToSize();
      System.setCurrentTimeMillis((-5));
      Integer integer0 = new Integer((-1145229071));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.setSize(1);
      jSTerm0.ensureCapacity((-3));
      jSTerm0.isGround();
      jSTerm1.add((Object) "not");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.addAll((Collection) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.iterator();
      jSSubstitution0.ensureCapacity(1);
      jSTerm1.trimToSize();
      System.setCurrentTimeMillis((-3));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "not");
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.130407608851355
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "al");
      jSTerm0.standarizerPredicateForm();
      JSJshopVars.rightBrac = (-12);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSSubstitution0.add((Object) "al");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.spliterator();
      jSTerm0.matches(jSPredicateForm0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.apostrophe = (-12);
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("aW$w)");
      JSJshopVars.coma = (-12);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r(ow{SOQP6je'#4S\"");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.ttype = (-4);
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.sval = "r(ow{SOQP6je'#4S\"";
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.commentChar(114);
      streamTokenizer3.slashStarComments(false);
      streamTokenizer1.pushBack();
      streamTokenizer3.commentChar((-4));
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = ':';
      charArray0[2] = 'K';
      charArray0[3] = '/';
      charArray0[4] = 'R';
      charArray0[5] = '&';
      charArray0[6] = '%';
      charArray0[7] = 'U';
      stringReader0.read(charArray0);
      streamTokenizer0.whitespaceChars((-4), 114);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars((-4), 0);
      streamTokenizer0.quoteChar(1963);
      jSTerm0.add((Object) streamTokenizer4);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3548015058139915
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) stringReader0;
      streamTokenizer1.whitespaceChars((-2), (-1));
      streamTokenizer1.wordChars((-2541), (-2541));
      jSTerm0.firstElement();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.pushBack();
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.parseNumbers();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSTerm1.elementAt((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zu/1X1IO~jK-");
      stringReader0.mark(1801);
      StringReader stringReader1 = new StringReader("zu/1X1IO~jK-");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1801);
      CharBuffer charBuffer1 = CharBuffer.allocate(1801);
      stringReader1.read(charBuffer0);
      stringReader1.read(charArray0);
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("zy?t");
      stringReader2.read(charArray0);
      stringReader2.skip(1801);
      stringReader1.reset();
      stringReader1.read(charBuffer0);
      stringReader1.skip(4L);
      stringReader0.mark(0);
      stringReader1.reset();
      stringReader0.read();
      stringReader2.read(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "zu/1X1IO~jK-";
      objectArray0[1] = (Object) charBuffer1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add(objectArray0[1]);
      jSTerm0.add((Object) "ow");
      jSTerm0.trimToSize();
      System.setCurrentTimeMillis((-1077L));
      jSTerm0.equals((JSPredicateForm) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.add((Object) "not");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("not");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r(ow{SOQP6je'#4S\"");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer1.nval = (-1400.9011131);
      streamTokenizer2.whitespaceChars((-4), (-326114488));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.ttype = 1963;
      streamTokenizer1.commentChar((-55));
      streamTokenizer1.pushBack();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.commentChar((-326114488));
      streamTokenizer1.whitespaceChars((-4), 0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-1145229071), 1963);
      streamTokenizer0.nval = (double) 1963;
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(&{R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 5;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar(0);
      streamTokenizer3.wordChars(5, (-4));
      streamTokenizer3.ttype = 5;
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.commentChar((-4));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nval = 906.464743;
      streamTokenizer1.slashStarComments(false);
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer2.whitespaceChars((-4), (-1994997811));
      streamTokenizer4.lowerCaseMode(true);
      streamTokenizer2.commentChar((-4));
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      streamTokenizer9.quoteChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(4328);
      System.setCurrentTimeMillis((-975L));
      long long0 = 2582L;
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Iu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[4] = (Object) "0(Iu";
      streamTokenizer1.nval = (double) (-3);
      objectArray0[5] = (Object) "0(Iu";
      streamTokenizer2.whitespaceChars((-3), (-2));
      jSTerm0.firstElement();
      streamTokenizer2.whitespaceChars((-3), 1898);
      objectArray0[6] = (Object) null;
      objectArray0[0] = (Object) null;
      objectArray0[5] = (Object) streamTokenizer2;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer2.ordinaryChar((-555));
      streamTokenizer3.resetSyntax();
      jSTerm0.print();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashStarComments(false);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9618914281192987
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "nPt";
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSJshopVars.rightPar = 495;
      System.setCurrentTimeMillis(495);
      jSPredicateForm1.isEmpty();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSTerm0.clonePF();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) 495;
      objectArray0[2] = (Object) jSPredicateForm1;
      objectArray0[3] = (Object) jSPredicateForm3;
      jSPredicateForm2.setSize(40);
      objectArray0[4] = (Object) "nPt";
      objectArray0[6] = (Object) jSPredicateForm4;
      jSPredicateForm4.toArray(objectArray0);
      jSPredicateForm4.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7626128465233226
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.add((Object) "");
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.listIterator();
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm3.print();
      System.setCurrentTimeMillis(2582L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0293573067381674
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.containsAll(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.firstElement();
      jSPredicateForm2.add((Object) jSPredicateForm0);
      jSPredicateForm0.iterator();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm4.removeElement(jSTerm1);
      // Undeclared exception!
      try { 
        jSPredicateForm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4024143638191546
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "/=g_qfc+");
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.listIterator();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm2);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.clonePF();
      jSPredicateForm3.clear();
      jSSubstitution0.add((Object) jSPredicateForm4);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm5.addAll((Collection) jSSubstitution0);
      jSPredicateForm2.addAll((Collection) jSSubstitution1);
      jSPredicateForm5.containsAll(jSSubstitution0);
      assertEquals("[[/=g_qfc+, [[/=g_qfc+]]], [/=g_qfc+, [[/=g_qfc+]]], [/=g_qfc+, [[/=g_qfc+]]]]", jSSubstitution0.toString());
      
      jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution0);
      jSPredicateForm2.standarizerPredicateForm();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      assertEquals(23, stringBuffer0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7467125471159415
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.containsAll(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      Object[] objectArray0 = new Object[2];
      jSPredicateForm2.add((Object) jSTerm0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSPredicateForm2;
      jSPredicateForm0.toArray(objectArray0);
      jSTerm0.add(objectArray0[0]);
      jSPredicateForm1.toStr();
      jSPredicateForm0.iterator();
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8023698246308038
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      System.setCurrentTimeMillis(41);
      jSPredicateForm1.isEmpty();
      jSPredicateForm2.addElement("nPt");
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSTerm0.clonePF();
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) jSPredicateForm1;
      objectArray0[3] = (Object) jSPredicateForm3;
      objectArray0[4] = (Object) "nPt";
      objectArray0[6] = (Object) jSPredicateForm4;
      jSPredicateForm4.toArray(objectArray0);
      jSPredicateForm3.add(objectArray0[3]);
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r(Ew{SP6jk'#4yS\"");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(114, (-197));
      streamTokenizer0.whitespaceChars(114, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.wordChars((-1071), (-4));
      streamTokenizer1.ordinaryChars(1851, (-4));
      streamTokenizer0.whitespaceChars(1851, 943);
      streamTokenizer2.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.parseNumbers();
      streamTokenizer5.slashStarComments(false);
      streamTokenizer5.commentChar((-197));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader0);
      streamTokenizer10.ordinaryChar((-4));
      StreamTokenizer streamTokenizer11 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(">hR{q;kXU");
      String string0 = "j6Gmzyi=u@e98g";
      StringReader stringReader1 = new StringReader("j6Gmzyi=u@e98g");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader(" . ");
      char[] charArray0 = new char[1];
      stringReader2.mark(0);
      charArray0[0] = '#';
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader("=");
      stringReader3.reset();
      stringReader0.markSupported();
      stringReader2.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(1, 1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.nval = 0.0;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-4);
      streamTokenizer2.commentChar(1);
      streamTokenizer0.wordChars((-4), (-457));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.wordChars(1, (-2812));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      jSTerm0.firstElement();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer2.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.pushBack();
      streamTokenizer2.ordinaryChar((-1));
      streamTokenizer1.ordinaryChar(1);
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer2.quoteChar((-934));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis((-775L));
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(1801);
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      stringReader1.read(charBuffer0);
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.skip(1801);
      stringReader0.mark(0);
      stringReader1.markSupported();
      stringReader0.mark(479);
      StringReader stringReader3 = new StringReader("QKV?wj");
      stringReader3.mark(3558);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      stringReader3.read(charBuffer1);
      StringReader stringReader4 = new StringReader("");
      stringReader0.ready();
      stringReader2.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r(ow{SOQP6je'#4S\"");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.nval = (-1400.9011131);
      streamTokenizer2.whitespaceChars((-4), 1479);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.ttype = 1963;
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.commentChar(1479);
      streamTokenizer3.slashStarComments(false);
      streamTokenizer1.pushBack();
      streamTokenizer3.commentChar(1479);
      streamTokenizer3.whitespaceChars((-4), 0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars(1963, 0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.ordinaryChars((-1145229071), 1963);
      streamTokenizer0.nval = (double) 1963;
      streamTokenizer2.commentChar((-4));
      streamTokenizer4.eolIsSignificant(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.sort((Comparator) null);
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) unaryOperator0);
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4870010937437317
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "W&*)");
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.add((Object) "W&*)");
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.listIterator();
      jSTerm0.add((Object) "G.ot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) jSTerm2);
      Integer integer0 = new Integer((-3));
      jSTerm1.add((Object) integer0);
      jSTerm2.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2578501017122745
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "Bnot");
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm2.iterator();
      jSTerm1.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("Y,z<D;r;`hu:h*NG#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-189L));
      jSTerm3.add((Object) jSTerm4);
      jSTerm0.add((Object) jSTerm1);
      jSTerm3.trimToSize();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "G.ot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) "G.ot");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(1, 1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.nval = 0.0;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer2.commentChar((-235049671));
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ordinaryChars((-2), (-4));
      streamTokenizer2.whitespaceChars((-4), (-2));
      jSTerm0.firstElement();
      streamTokenizer1.commentChar((-4));
      jSTerm0.add((Object) "0.0");
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer2.pushBack();
      streamTokenizer2.ordinaryChar((-4));
      Object object0 = new Object();
      stringReader0.skip((-2));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer2.whitespaceChars((-2), (-2));
      streamTokenizer1.ordinaryChars((-235049671), (-235049671));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0622805296543079
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "G.ot");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) "G.ot");
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "G.ot";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.add((Object) jSTerm1);
      Integer integer0 = new Integer((-5));
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis((-775L));
      StringReader stringReader0 = new StringReader("zu/1X1IO~jK>");
      stringReader0.mark(1801);
      StringReader stringReader1 = new StringReader("zu/1X1IO~jK>");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1801);
      CharBuffer.allocate(1801);
      stringReader1.read(charBuffer0);
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.read(charArray0);
      stringReader2.skip(1801);
      stringReader1.reset();
      stringReader1.read(charBuffer0);
      stringReader1.skip((-17L));
      stringReader0.mark(0);
      stringReader0.read();
      stringReader1.markSupported();
      stringReader2.skip(1788L);
      stringReader0.mark(479);
      StringReader stringReader3 = new StringReader("QKVw");
      stringReader3.ready();
      char[] charArray1 = new char[1];
      stringReader2.read(charArray1);
      stringReader3.mark(3558);
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      stringReader3.read(charBuffer1);
      StringReader stringReader4 = new StringReader("zu/1X1IO~jK>");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.8646617728338635
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) stringReader0;
      streamTokenizer1.whitespaceChars(58, (-1));
      objectArray0[4] = (Object) "0(u";
      streamTokenizer1.nval = (double) (-4);
      objectArray0[5] = (Object) "0(u";
      streamTokenizer2.whitespaceChars((-4), (-2));
      objectArray0[6] = (Object) null;
      streamTokenizer1.sval = null;
      objectArray0[7] = (Object) streamTokenizer2;
      streamTokenizer1.ordinaryChar((-2));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer2.ordinaryChar((-1));
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      objectArray0[2] = (Object) 'q';
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.pushBack();
      streamTokenizer3.pushBack();
      streamTokenizer3.parseNumbers();
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      boolean boolean1 = jSTerm1.equals((JSPredicateForm) jSTerm2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9100616913901243
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "G.ot");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeFunction();
      jSSubstitution0.add((Object) "G.ot");
      jSTerm0.ensureCapacity((-5));
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "G.ot";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm1.toArray(objectArray0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.trimToSize();
      System.setCurrentTimeMillis((-5));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.136459541396528
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "G.ot");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) "G.ot");
      jSTerm1.add((Object) "G.ot");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "G.ot";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm1.toArray(objectArray0);
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.trimToSize();
      System.setCurrentTimeMillis((-5));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "G.ot");
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "G.ot");
      jSTerm0.add((Object) "G.ot");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.trimToSize();
      System.setCurrentTimeMillis((-5));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = 106;
      JSJshopVars.equalT = 586;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.add((Object) "}ol");
      jSTerm0.add((Object) "}ol");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.166897259307602
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.containsAll(jSPredicateForm1);
      jSPredicateForm2.isEmpty();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      jSPredicateForm4.isEmpty();
      jSPredicateForm3.trimToSize();
      jSPredicateForm4.standarizerPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm5.isEmpty();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.equals(jSPredicateForm4);
      jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm2.clonePF();
      jSPredicateForm0.equals(jSPredicateForm5);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm4.clonePF();
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm8);
      assertTrue(boolean0);
      
      jSPredicateForm8.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      assertEquals(10, jSTerm0.capacity());
      assertNotSame(jSPredicateForm2, jSPredicateForm7);
      assertEquals(5, stringBuffer0.length());
      assertNotSame(jSPredicateForm2, jSPredicateForm6);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.805736827997807
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.containsAll(jSPredicateForm0);
      jSPredicateForm1.isEmpty();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm3.print();
      jSPredicateForm1.trimToSize();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm4.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm3.remove(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f~&ZO)#");
      StringReader stringReader1 = new StringReader("f~&ZO)#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(1, 1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.nval = 0.0;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer2.commentChar(1);
      streamTokenizer0.wordChars((-4), (-457));
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ordinaryChars((-2), (-4));
      streamTokenizer2.whitespaceChars((-4), (-2));
      jSTerm0.firstElement();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer2.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.pushBack();
      streamTokenizer2.ordinaryChar((-1));
      stringReader0.skip((-2));
      jSTerm0.add((Object) stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.ttype = (-2);
      streamTokenizer0.ordinaryChars((-4), (-2));
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.quoteChar((-934));
      streamTokenizer2.whitespaceChars((-2), (-2));
      streamTokenizer1.ordinaryChars((-2), (-2));
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-975L));
      StringReader stringReader0 = new StringReader("zt");
      stringReader0.mark(1803);
      StringReader stringReader1 = new StringReader("zt");
      char[] charArray0 = new char[1];
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("ua7m0s");
      stringReader0.reset();
      stringReader2.mark(1803);
      stringReader2.markSupported();
      stringReader2.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader2.close();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.282528655797431
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.containsAll(jSPredicateForm1);
      jSPredicateForm2.isEmpty();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      jSPredicateForm3.equals(jSPredicateForm2);
      jSPredicateForm3.trimToSize();
      jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm7.isEmpty();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.equals(jSPredicateForm4);
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.clonePF();
      jSPredicateForm3.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm5.clonePF();
      jSPredicateForm9.equals(jSPredicateForm1);
      jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution0);
      jSPredicateForm4.clonePF();
      assertNotSame(jSPredicateForm2, jSPredicateForm8);
      
      jSPredicateForm6.equals(jSPredicateForm1);
      boolean boolean0 = jSPredicateForm7.equals(jSPredicateForm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = jSPredicateForm5.matches((JSPredicateForm) jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertNotSame(jSPredicateForm5, jSPredicateForm9);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(1800);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1800);
      stringReader0.reset();
      stringReader0.skip(1800);
      CharBuffer charBuffer1 = CharBuffer.allocate(1800);
      stringReader0.read(charArray0);
      charBuffer0.put(charArray0);
      stringReader0.read(charArray0);
      IntStream intStream0 = charBuffer0.codePoints();
      StringReader stringReader1 = new StringReader("zy*t");
      stringReader1.read(charArray0);
      stringReader1.ready();
      stringReader0.read(charArray0);
      charBuffer0.put('d');
      stringReader0.read();
      stringReader1.skip(1800);
      stringReader0.reset();
      stringReader0.read(charBuffer1);
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.markSupported();
      stringReader2.skip(1L);
      StringReader stringReader3 = new StringReader("");
      stringReader0.read(charArray0);
      StringReader stringReader4 = new StringReader("zy*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      jSTerm0.add(0, (Object) intStream0);
      jSTerm0.add((Object) "");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.add((Object) "no");
      jSTerm0.add((Object) "no");
      jSTerm0.add((Object) jSTerm0);
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      jSTerm0.add((Object) "not");
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Q|=+.A2R>,>df");
      jSTerm0.add((Object) "wJQe%P_^%OeC`WZ[");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r(Ew{SP6jk'#4yS\"");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(114, (-197));
      streamTokenizer0.whitespaceChars(114, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(488, (-4137));
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer0.whitespaceChars(1851, 914);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.commentChar((-197));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader0);
      streamTokenizer10.ordinaryChar((-4));
      StreamTokenizer streamTokenizer11 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(1800);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1800);
      stringReader0.reset();
      stringReader0.skip(1800);
      CharBuffer charBuffer1 = CharBuffer.allocate(1800);
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charBuffer1.chars();
      StringReader stringReader1 = new StringReader("zy*t");
      stringReader1.read(charArray0);
      stringReader1.ready();
      stringReader0.read(charArray0);
      charBuffer0.put('d');
      stringReader0.read();
      stringReader1.skip(1800);
      stringReader0.reset();
      stringReader0.read(charBuffer1);
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.markSupported();
      stringReader2.skip(1L);
      StringReader stringReader3 = new StringReader("");
      stringReader0.read(charArray0);
      StringReader stringReader4 = new StringReader("zy*t");
      stringReader4.read(charBuffer0);
      stringReader0.markSupported();
      stringReader4.ready();
      stringReader2.read(charBuffer0);
      stringReader0.mark(33);
      StringReader stringReader5 = new StringReader("");
      stringReader2.markSupported();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Iu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.whitespaceChars((-4), 1898);
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-3718);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.ordinaryChar((-561));
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nval = (-4.0);
      streamTokenizer4.slashSlashComments(false);
      streamTokenizer4.pushBack();
      streamTokenizer4.slashStarComments(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zu/1X1IO~jK>");
      stringReader0.mark(1801);
      StringReader stringReader1 = new StringReader("zu/1X1IO~jK>");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1801);
      CharBuffer charBuffer1 = CharBuffer.allocate(1801);
      stringReader1.read(charBuffer0);
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.read(charArray0);
      stringReader2.skip(1801);
      stringReader0.ready();
      stringReader1.reset();
      stringReader1.read(charBuffer0);
      stringReader0.mark(12);
      stringReader0.read();
      stringReader1.markSupported();
      stringReader2.skip(1788L);
      stringReader0.mark(479);
      StringReader stringReader3 = new StringReader("QKVw");
      stringReader3.ready();
      stringReader2.mark(12);
      char[] charArray1 = new char[1];
      stringReader3.skip(0);
      stringReader2.read(charArray1);
      stringReader3.mark(3558);
      CharBuffer charBuffer2 = CharBuffer.allocate('\u0000');
      charBuffer2.read(charBuffer1);
      charBuffer2.flip();
      stringReader3.read(charBuffer2);
      StringReader stringReader4 = new StringReader("zu/1X1IO~jK>");
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      System.setCurrentTimeMillis((-775L));
      StringReader stringReader0 = new StringReader("G");
      stringReader0.mark(1801);
      StringReader stringReader1 = new StringReader("G");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1801);
      stringReader0.reset();
      stringReader1.skip(1801);
      CharBuffer.allocate(1801);
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.ready();
      stringReader2.read(charArray0);
      stringReader0.read();
      stringReader2.skip(1801);
      stringReader1.ready();
      stringReader0.reset();
      stringReader1.read(charBuffer0);
      StringReader stringReader3 = new StringReader("zy*t");
      stringReader3.markSupported();
      stringReader3.skip(1L);
      StringReader stringReader4 = new StringReader("umd.cs.shop.JSParserError");
      stringReader4.ready();
      stringReader1.read(charArray0);
      StringReader stringReader5 = new StringReader("zy*t");
      stringReader5.ready();
      stringReader3.read(charBuffer0);
      stringReader1.mark(33);
      StringReader stringReader6 = new StringReader("G");
      stringReader3.markSupported();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zu/1X1IO~jK-");
      stringReader0.mark(1801);
      StringReader stringReader1 = new StringReader("zu/1X1IO~jK-");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(1801);
      CharBuffer.allocate(1801);
      stringReader1.read(charBuffer0);
      stringReader1.read(charArray0);
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("zy*t");
      stringReader2.read(charArray0);
      stringReader2.skip(1801);
      stringReader1.reset();
      stringReader1.read(charBuffer0);
      stringReader1.skip(4L);
      stringReader0.mark(0);
      stringReader0.read();
      stringReader2.read(charArray0);
      stringReader1.markSupported();
      stringReader2.skip(1788L);
      stringReader0.mark(479);
      StringReader stringReader3 = new StringReader("QKVw");
      stringReader3.ready();
      char[] charArray1 = new char[1];
      stringReader2.read(charArray1);
      stringReader3.mark(3558);
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      stringReader3.read(charBuffer1);
      StringReader stringReader4 = new StringReader("zu/1X1IO~jK-");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("not");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
