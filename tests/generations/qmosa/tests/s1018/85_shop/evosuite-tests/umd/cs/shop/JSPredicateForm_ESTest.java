/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 14:18:31 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[4]);
      Object object0 = new Object();
      objectArray0[2] = object0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1103L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3ciYH1DO],");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.wordChars((-4), (-4));
      StringReader stringReader1 = new StringReader("3ciYH1DO],");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("QR9zx7|");
      streamTokenizer3.resetSyntax();
      StringReader stringReader3 = new StringReader("QR9zx7|");
      char[] charArray0 = new char[5];
      streamTokenizer3.ttype = (int) 'f';
      charArray0[1] = '\u0014';
      streamTokenizer2.ttype = (int) '\u0014';
      charArray0[3] = '>';
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.commentChar(102);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      streamTokenizer4.sval = null;
      stringReader0.close();
      streamTokenizer1.ordinaryChar(87);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer6.nextToken();
      streamTokenizer6.pushBack();
      jSPredicateForm0.print();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer3);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("A+4B4vANom]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      int int0 = 1730;
      jSTerm1.add((Object) "Z\"L|TV");
      // Undeclared exception!
      try { 
        jSTerm0.elementAt(1730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1730 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[0]);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) jSTerm0;
      objectArray1[1] = (Object) jSTerm0;
      objectArray1[2] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray1);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      jSTerm0.add(object0);
      objectArray0[2] = object0;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      StringReader stringReader1 = new StringReader("0(u");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars(2698, (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars(50, (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.sval = null;
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-6254807), (-3));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.call();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer3);
      jSTerm0.add((Object) jSTerm2);
      jSTerm2.spliterator();
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.remove(1837);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1837
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.clone();
      int int0 = (-40);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "no~");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[0]);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "no~";
      objectArray0[3] = (Object) "no~";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5333821677189523
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "f~&ZO)#";
      StringReader stringReader0 = new StringReader("f~&ZO)#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSJshopVars.astherisk = 41;
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      jSPredicateForm1.equals(jSPredicateForm0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm2.clonePF();
      jSPredicateForm3.spliterator();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSJshopVars.greaterT = (-951);
      jSPredicateForm1.matches(jSPredicateForm2);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "no");
      Object object0 = jSTerm0.clone();
      int int0 = (-40);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.remove(object0);
      jSTerm0.sort(comparator0);
      jSTerm0.add(object0);
      jSTerm0.forEach(consumer0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.remove((-1066));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1066
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[0]);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      System.setCurrentTimeMillis((-3429L));
      System.setCurrentTimeMillis((-5482L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-482L));
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.add((Object) null);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[5] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[0] = object0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(object0);
      jSSubstitution0.add(objectArray0[2]);
      jSSubstitution0.add(objectArray0[3]);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "|gCm");
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("({");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[0]);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      jSTerm0.add(objectArray0[3]);
      Object object1 = new Object();
      Object object2 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object3 = new Object();
      jSTerm0.add((Object) null);
      Integer integer0 = new Integer(0);
      jSSubstitution0.add((Object) integer0);
      Object object4 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer3.wordChars((-2774), 63);
      streamTokenizer5.whitespaceChars((-1450), (-4));
      stringReader0.skip(179L);
      streamTokenizer5.resetSyntax();
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.slashSlashComments(false);
      streamTokenizer6.pushBack();
      streamTokenizer3.ttype = 0;
      streamTokenizer5.pushBack();
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer6.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[0]);
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.spliterator();
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      jSTerm0.removeElement(objectArray0[4]);
      objectArray0[2] = object0;
      jSTerm0.toArray(objectArray0);
      Integer integer0 = new Integer(62);
      jSTerm0.firstElement();
      System.setCurrentTimeMillis(1788L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2945451658448959
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f~&ZO)#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) null);
      Predicate<JSTerm> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      predicate0.negate();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm4.add(41, (Object) jSPredicateForm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41 > 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-653L));
      System.setCurrentTimeMillis((-134L));
      System.setCurrentTimeMillis((-5482L));
      System.setCurrentTimeMillis((-653L));
      long long0 = (-472L);
      System.setCurrentTimeMillis((-472L));
      System.setCurrentTimeMillis((-653L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("0(u");
      jSPredicateForm0.add((Object) "0(u");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-842);
      Integer integer0 = new Integer((-842));
      jSTerm0.remove((Object) integer0);
      jSTerm0.add((Object) "H6ot");
      jSTerm0.add((Object) integer0);
      jSTerm0.clone();
      int int1 = (-40);
      Integer integer1 = new Integer((-40));
      jSTerm0.add((Object) integer1);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      StringReader stringReader1 = new StringReader("0(u");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars(2698, (-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars(50, (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.sval = null;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-6254807), (-3));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer4.pushBack();
      streamTokenizer5.pushBack();
      streamTokenizer3.wordChars((-4), (-6254807));
      streamTokenizer5.whitespaceChars((-2), (-6254807));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer5.nextToken();
      jSTerm1.add((Object) streamTokenizer1);
      streamTokenizer5.whitespaceChars((-4), (-3));
      streamTokenizer6.parseNumbers();
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer4.whitespaceChars((-4), (-6254807));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6609958145862922
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nPt");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm0.containsAll(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm0);
      jSPredicateForm2.clonePF();
      JSJshopVars.slash = (-366172151);
      JSSubstitution jSSubstitution0 = null;
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      jSPredicateForm1.removeAll(jSPredicateForm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.standarizerPredicateForm();
      JSJshopVars.rightBrac = (-3);
      jSPredicateForm2.stream();
      jSPredicateForm5.toStr();
      jSPredicateForm4.clonePF();
      jSPredicateForm3.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) jSTerm0;
      jSTerm0.add(objectArray0[0]);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) jSTerm0;
      jSTerm0.clear();
      objectArray0[4] = (Object) jSTerm0;
      objectArray1[2] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray1);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[1] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      jSTerm0.add(object0);
      objectArray0[2] = object0;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "n0oa");
      jSSubstitution0.add((Object) "not");
      Object object1 = new Object();
      jSSubstitution0.add(object0);
      jSSubstitution0.add(object1);
      jSSubstitution0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm2.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.7595473914748635
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(not");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(no");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2186L);
      System.setCurrentTimeMillis((-653L));
      System.setCurrentTimeMillis(2186L);
      System.setCurrentTimeMillis(2186L);
      System.setCurrentTimeMillis((-653L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2798L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-653L));
      System.setCurrentTimeMillis(1814L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2798L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1814L);
      System.setCurrentTimeMillis(1814L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2125L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StringReader stringReader1 = new StringReader("0(u");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars(2698, (-4));
      streamTokenizer2.pushBack();
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.sval = null;
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars(184, (-2));
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer4.pushBack();
      streamTokenizer5.pushBack();
      streamTokenizer3.wordChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer3.whitespaceChars((-1112785227), (-2));
      jSTerm1.add((Object) streamTokenizer4);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.parseNumbers();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
      assertEquals(10, jSSubstitution0.capacity());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.add((Object) null);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[5] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[0] = object0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(object0);
      jSSubstitution0.add(objectArray0[3]);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f~&ZO)#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) null);
      predicate0.and(predicate0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader1 = new StringReader("error");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars(2698, 804);
      streamTokenizer0.whitespaceChars(63, (-524));
      streamTokenizer2.sval = null;
      streamTokenizer3.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(false);
      streamTokenizer1.nval = 0.0;
      streamTokenizer4.pushBack();
      streamTokenizer5.whitespaceChars((-2), (-1447189484));
      streamTokenizer4.wordChars((-1687), (-1447189484));
      streamTokenizer4.whitespaceChars(3228, (-6254807));
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars(2698, (-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars(50, (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.sval = null;
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-3));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer5.pushBack();
      streamTokenizer5.sval = null;
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer5.whitespaceChars((-2), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer5.nextToken();
      streamTokenizer5.whitespaceChars((-4), (-3));
      streamTokenizer6.parseNumbers();
      streamTokenizer4.lowerCaseMode(true);
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer4.whitespaceChars((-4), (-2));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.ordinaryChars(0, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nval = (double) (-4);
      stringReader0.skip((-2));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer0.ttype = 1808;
      streamTokenizer5.quoteChar((-4));
      streamTokenizer5.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer5.wordChars((-4), 1808);
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer3.slashSlashComments(false);
      stringReader0.reset();
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      jSTerm0.add((Object) "not");
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      Object object1 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object2 = new Object();
      jSSubstitution0.add((Object) "not");
      jSSubstitution0.add(object2);
      Object object3 = new Object();
      Integer integer0 = new Integer((-2692));
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.add(objectArray0[2]);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.add(object3);
      jSSubstitution0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nXt");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.add((Object) null);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "nXt";
      objectArray0[3] = (Object) "nXt";
      Object object0 = new Object();
      objectArray0[0] = object0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(object0);
      jSSubstitution0.add(objectArray0[3]);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7379834485870498
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Kot");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.listIterator();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm2.print();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      jSPredicateForm5.removeAllElements();
      jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.clonePF();
      jSPredicateForm7.removeAllElements();
      jSPredicateForm6.clonePF();
      jSPredicateForm0.print();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.iterator();
      jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm8.toStr();
      jSPredicateForm1.print();
      jSPredicateForm6.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm5.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object object0 = jSPredicateForm0.clone();
      jSPredicateForm0.add(object0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      StringReader stringReader1 = new StringReader("ero");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars(62, (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.sval = null;
      stringReader1.skip((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-6254807), (-3));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer4.pushBack();
      streamTokenizer4.wordChars((-4), (-2));
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer5.whitespaceChars((-2), (-6254807));
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[7];
      streamTokenizer1.nval = (double) '*';
      streamTokenizer6.ttype = (int) 'N';
      charArray0[3] = '=';
      charArray0[6] = '$';
      streamTokenizer5.whitespaceChars((-4), (-4));
      streamTokenizer6.parseNumbers();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.add((Object) null);
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[5] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[0] = object0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(object0);
      jSSubstitution0.add(objectArray0[2]);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NL`[");
      stringReader0.reset();
      stringReader0.skip((-2645L));
      StringReader stringReader1 = new StringReader("?Kz");
      stringReader0.ready();
      stringReader0.skip((-2645L));
      StringReader stringReader2 = new StringReader("VdNs\"2uq18<;7X");
      stringReader2.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader2);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.cloneT();
      jSTerm1.listIterator(0);
      Integer integer0 = new Integer(0);
      jSTerm1.add((Object) integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSTerm1.sort(comparator0);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.makeVariable();
      Comparator<JSTerm> comparator1 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.call();
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.remove((-1066));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1066
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StringReader stringReader1 = new StringReader("0(u");
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars((-2), 2586);
      streamTokenizer0.whitespaceChars(50, (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.sval = null;
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-4), (-2));
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer4.pushBack();
      streamTokenizer5.pushBack();
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer5.whitespaceChars((-2), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer3.whitespaceChars((-1112785227), (-2));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.parseNumbers();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StringReader stringReader1 = new StringReader("0(u");
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars((-2), 2565);
      streamTokenizer1.whitespaceChars((-2), (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.sval = null;
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-4), (-2));
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.lowerCaseMode(true);
      streamTokenizer4.pushBack();
      streamTokenizer5.pushBack();
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer5.whitespaceChars((-2), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer3.whitespaceChars((-1112785227), (-2));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.parseNumbers();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
      assertEquals("[]", jSSubstitution0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer3.wordChars((-2774), 63);
      streamTokenizer5.whitespaceChars((-1450), 1187);
      streamTokenizer5.resetSyntax();
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2i{S%fyK@2Kx6");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSSubstitution0.removeAll(linkedList0);
      jSSubstitution0.add((Object) "~&ZDkO#");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(96);
      jSTerm0.add((Object) integer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "not";
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      Object object0 = new Object();
      Object object1 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object2 = new Object();
      jSSubstitution0.add((Object) "not");
      jSSubstitution0.add(object2);
      Object object3 = new Object();
      jSSubstitution0.add(objectArray0[2]);
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.add(object3);
      jSSubstitution0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f~&ZO)#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) null);
      Predicate<JSTerm> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.clonePF();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar(41);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.whitespaceChars(2057, (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.wordChars(2057, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-3), (-2915));
      streamTokenizer2.commentChar((-54650728));
      streamTokenizer0.slashSlashComments(false);
      stringReader0.reset();
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f~&ZO)#");
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "not";
      objectArray0[1] = (Object) "not";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) "not";
      objectArray0[6] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-842);
      Integer integer0 = new Integer((-842));
      jSTerm0.remove((Object) integer0);
      jSTerm0.add((Object) "H6ot");
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      int int1 = (-40);
      Integer integer1 = new Integer((-40));
      jSTerm0.add((Object) integer1);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      int int2 = 2656;
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.ordinaryChars(0, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer1.whitespaceChars(0, (-4));
      streamTokenizer2.quoteChar(2312);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.wordChars((-2), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.wordChars((-4), 41);
      streamTokenizer3.slashSlashComments(false);
      stringReader0.reset();
      streamTokenizer2.slashStarComments(false);
      stringReader0.close();
      streamTokenizer3.ttype = (-4);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer5.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.ordinaryChars(0, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-2));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nval = (double) (-4);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer0.ttype = (-4);
      streamTokenizer5.quoteChar((-4));
      streamTokenizer5.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer5.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.wordChars((-4), (-4));
      streamTokenizer2.commentChar(4774);
      streamTokenizer3.slashSlashComments(false);
      stringReader0.reset();
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer6.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
