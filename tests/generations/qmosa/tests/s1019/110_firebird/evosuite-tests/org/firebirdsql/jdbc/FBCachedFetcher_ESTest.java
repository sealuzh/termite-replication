/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 19:59:06 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.AccessControlContext;
import java.security.CodeSource;
import java.security.Permissions;
import java.security.Principal;
import java.security.ProtectionDomain;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscStmtHandle;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_tr_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBLocalTransaction;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.DummyCallableStatementMetaData;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.263519687867756
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[8];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharFieldArray0[1];
      fBLongVarCharFieldArray0[3] = fBLongVarCharFieldArray0[2];
      fBLongVarCharFieldArray0[4] = fBLongVarCharFieldArray0[3];
      fBLongVarCharFieldArray0[5] = fBLongVarCharFieldArray0[4];
      fBLongVarCharFieldArray0[7] = fBLongVarCharFieldArray0[6];
      linkedList0.toArray(fBLongVarCharFieldArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      fBCachedFetcher0.relative(112);
      fBCachedFetcher0.absolute((-1));
      fBCachedFetcher0.next();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7931228829356183
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate1.or(predicate4);
      predicate1.negate();
      predicate4.or(predicate5);
      predicate3.and(predicate1);
      predicate2.negate();
      predicate2.or(predicate3);
      linkedList0.removeIf(predicate2);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative(100);
      fBCachedFetcher0.updateRow((byte[][]) null);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0008978692206196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      fBCachedFetcher0.relative(2335);
      fBCachedFetcher0.isAfterLast();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1772240156511162
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.retainAll(linkedList0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList1.pollFirst();
      linkedList0.push((byte[][]) null);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet3 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet2);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isBeforeFirst();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.965129062410449
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.relative(241);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.first();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.isFirst();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, fBResultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7127556729859466
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate1.or(predicate4);
      predicate1.negate();
      predicate4.or(predicate5);
      predicate3.and(predicate1);
      predicate2.negate();
      predicate2.or(predicate3);
      linkedList0.removeIf(predicate2);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isLast();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][8];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte)72;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)72;
      byteArray2[1] = (byte) (-25);
      byteArray2[2] = (byte)72;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[11];
      byteArray4[0] = (byte) (-25);
      byteArray4[1] = (byte)72;
      byteArray4[2] = (byte) (-25);
      byteArray4[3] = (byte) (-25);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[2];
      byteArray6[0] = (byte) (-25);
      byteArray6[1] = (byte)72;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[0];
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[3];
      byteArray8[0] = (byte)72;
      byteArray8[1] = (byte) (-25);
      byteArray8[2] = (byte) (-25);
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.155876983332906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      linkedList0.add((byte[][]) null);
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_tr_handle_impl1.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl1.forgetResultSets();
      isc_tr_handle_impl isc_tr_handle_impl2 = new isc_tr_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl3 = new isc_tr_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      isc_tr_handle_impl1.getDbHandle();
      isc_tr_handle_impl isc_tr_handle_impl5 = new isc_tr_handle_impl();
      isc_tr_handle_impl4.forgetResultSets();
      isc_tr_handle_impl isc_tr_handle_impl6 = new isc_tr_handle_impl();
      isc_tr_handle_impl4.unregisterStatementFromTransaction((AbstractIscStmtHandle) null);
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBufferImp0, (IscDbHandle) null, (GDSHelper.GDSHelperErrorListener) null);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(3);
      fBCachedFetcher0.first();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4165686196102873
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.first();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6589572579482863
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      int int0 = 241;
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.relative(241);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher1.updateRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.331040925140854
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      fBCachedFetcher0.relative(2335);
      fBCachedFetcher0.absolute(359);
      fBCachedFetcher0.previous();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][5];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-50);
      linkedList0.add(byteArray0);
      byteArray1[1] = (byte)29;
      linkedList0.clear();
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte)1;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6891789831458497
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate1.or(predicate4);
      predicate1.negate();
      predicate4.or(predicate5);
      predicate3.and(predicate1);
      predicate2.negate();
      predicate2.or(predicate3);
      linkedList0.removeIf(predicate2);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl1));
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotNull(isc_tr_handle_impl2);
      assertTrue(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl0));
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_tr_handle_impl1.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl2));
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl isc_tr_handle_impl3 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl3.getState());
      assertNotNull(isc_tr_handle_impl3);
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl2));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      IscDbHandle iscDbHandle1 = isc_tr_handle_impl1.getDbHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNull(iscDbHandle1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl3));
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertNotNull(isc_tr_handle_impl4);
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[7] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[8] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = linkedList0.toArray(fBLongVarCharFieldArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(9, fBLongVarCharFieldArray1.length);
      assertEquals(9, fBLongVarCharFieldArray0.length);
      assertNotNull(fBLongVarCharFieldArray1);
      assertSame(fBLongVarCharFieldArray1, fBLongVarCharFieldArray0);
      assertSame(fBLongVarCharFieldArray0, fBLongVarCharFieldArray1);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      try { 
        fBCachedFetcher1.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      linkedList0.push((byte[][]) null);
      assertEquals(2, linkedList0.size());
      
      FBResultSet fBResultSet2 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(0, fBResultSet2.getRow());
      assertNull(fBResultSet2.getCursorName());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet2);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet2);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(0, fBResultSet2.getRow());
      assertNull(fBResultSet2.getCursorName());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean1 = fBCachedFetcher1.isEmpty();
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(0, fBResultSet2.getRow());
      assertNull(fBResultSet2.getCursorName());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(fBResultSet2, fBResultSet0);
      assertNotSame(fBResultSet2, fBResultSet1);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)82;
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte)41;
      byteArray1[6] = (byte) (-8);
      byteArray1[7] = (byte)79;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)82;
      byteArray2[1] = (byte) (-2);
      byteArray2[2] = (byte)80;
      byteArray2[3] = (byte)57;
      byteArray2[4] = (byte)5;
      byteArray2[5] = (byte)5;
      byteArray2[6] = (byte)41;
      byteArray2[7] = (byte)79;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)57;
      byteArray3[1] = (byte)82;
      byteArray3[2] = (byte)79;
      byteArray0[2] = byteArray3;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(3, byteArray0.length);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(linkedList1.contains(byteArray0));
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(linkedList1.contains(byteArray0));
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, int0);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(linkedList1.contains(byteArray0));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9546794440640467
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertEquals(0, fBResultSet2.getRow());
      assertFalse(fBResultSet2.isClosed());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet2);
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      
      FBResultSet fBResultSet3 = new FBResultSet(fBResultSet2.xsqlvars, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertEquals(0, fBResultSet2.getRow());
      assertFalse(fBResultSet2.isClosed());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertFalse(fBResultSet3.isClosed());
      assertEquals(1007, fBResultSet3.getConcurrency());
      assertEquals(0, fBResultSet3.getRow());
      assertNull(fBResultSet3.getCursorName());
      assertEquals(0, fBResultSet3.getFetchSize());
      assertEquals(1000, fBResultSet3.getFetchDirection());
      assertEquals(1003, fBResultSet3.getType());
      assertEquals(2, fBResultSet3.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet3);
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBResultSet3.equals((Object)fBResultSet1));
      assertFalse(fBResultSet3.equals((Object)fBResultSet0));
      assertFalse(fBResultSet3.equals((Object)fBResultSet2));
      
      FBResultSet fBResultSet4 = new FBResultSet(fBResultSet2.xsqlvars, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertEquals(0, fBResultSet2.getRow());
      assertFalse(fBResultSet2.isClosed());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet4.getType());
      assertEquals(0, fBResultSet4.getRow());
      assertNull(fBResultSet4.getCursorName());
      assertFalse(fBResultSet4.isClosed());
      assertEquals(1007, fBResultSet4.getConcurrency());
      assertEquals(1000, fBResultSet4.getFetchDirection());
      assertEquals(0, fBResultSet4.getFetchSize());
      assertEquals(2, fBResultSet4.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet4);
      assertFalse(fBResultSet0.equals((Object)fBResultSet3));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet2.equals((Object)fBResultSet3));
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBResultSet4.equals((Object)fBResultSet0));
      assertFalse(fBResultSet4.equals((Object)fBResultSet3));
      assertFalse(fBResultSet4.equals((Object)fBResultSet2));
      assertFalse(fBResultSet4.equals((Object)fBResultSet1));
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FBResultSet fBResultSet5 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet5.getRow());
      assertNull(fBResultSet5.getCursorName());
      assertEquals(2, fBResultSet5.getHoldability());
      assertEquals(1000, fBResultSet5.getFetchDirection());
      assertFalse(fBResultSet5.isClosed());
      assertEquals(1003, fBResultSet5.getType());
      assertEquals(1007, fBResultSet5.getConcurrency());
      assertEquals(0, fBResultSet5.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet5);
      assertFalse(fBResultSet5.equals((Object)fBResultSet0));
      assertFalse(fBResultSet5.equals((Object)fBResultSet3));
      assertFalse(fBResultSet5.equals((Object)fBResultSet4));
      assertFalse(fBResultSet5.equals((Object)fBResultSet2));
      assertFalse(fBResultSet5.equals((Object)fBResultSet1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet5);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet5.getRow());
      assertNull(fBResultSet5.getCursorName());
      assertEquals(2, fBResultSet5.getHoldability());
      assertEquals(1000, fBResultSet5.getFetchDirection());
      assertFalse(fBResultSet5.isClosed());
      assertEquals(1003, fBResultSet5.getType());
      assertEquals(1007, fBResultSet5.getConcurrency());
      assertEquals(0, fBResultSet5.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet5.equals((Object)fBResultSet0));
      assertFalse(fBResultSet5.equals((Object)fBResultSet3));
      assertFalse(fBResultSet5.equals((Object)fBResultSet4));
      assertFalse(fBResultSet5.equals((Object)fBResultSet2));
      assertFalse(fBResultSet5.equals((Object)fBResultSet1));
      
      byte[][] byteArray0 = new byte[8][5];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte) (-43);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-95);
      byteArray2[1] = (byte) (-95);
      byteArray2[2] = (byte) (-43);
      byteArray2[3] = (byte)24;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-43);
      byteArray3[2] = (byte)86;
      byteArray3[3] = (byte)24;
      byteArray3[4] = (byte) (-43);
      byteArray3[5] = (byte)24;
      byteArray3[6] = (byte)24;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte)24;
      byteArray4[1] = (byte) (-95);
      byteArray4[2] = (byte)86;
      byteArray4[3] = (byte) (-43);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[0];
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[9];
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray6));
      
      byteArray7[0] = (byte) (-14);
      byteArray7[1] = (byte) (-54);
      byteArray7[2] = (byte) (-43);
      byteArray7[3] = (byte)0;
      byteArray7[4] = (byte) (-95);
      byteArray7[5] = (byte) (-95);
      byteArray7[6] = (byte)0;
      byteArray7[7] = (byte) (-95);
      byteArray7[8] = (byte) (-43);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[7];
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray4));
      
      byteArray8[0] = (byte) (-43);
      byteArray8[1] = (byte) (-43);
      byteArray8[2] = (byte) (-43);
      byteArray8[3] = (byte)24;
      byteArray8[4] = (byte) (-43);
      byteArray8[5] = (byte)0;
      byteArray8[6] = (byte)18;
      byteArray0[7] = byteArray8;
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet5.getRow());
      assertNull(fBResultSet5.getCursorName());
      assertEquals(2, fBResultSet5.getHoldability());
      assertEquals(1000, fBResultSet5.getFetchDirection());
      assertFalse(fBResultSet5.isClosed());
      assertEquals(1003, fBResultSet5.getType());
      assertEquals(1007, fBResultSet5.getConcurrency());
      assertEquals(0, fBResultSet5.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(fBResultSet5.equals((Object)fBResultSet0));
      assertFalse(fBResultSet5.equals((Object)fBResultSet3));
      assertFalse(fBResultSet5.equals((Object)fBResultSet4));
      assertFalse(fBResultSet5.equals((Object)fBResultSet2));
      assertFalse(fBResultSet5.equals((Object)fBResultSet1));
      assertNotSame(fBResultSet5, fBResultSet0);
      assertNotSame(fBResultSet5, fBResultSet3);
      assertNotSame(fBResultSet5, fBResultSet4);
      assertNotSame(fBResultSet5, fBResultSet2);
      assertNotSame(fBResultSet5, fBResultSet1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet5.getRow());
      assertNull(fBResultSet5.getCursorName());
      assertEquals(2, fBResultSet5.getHoldability());
      assertEquals(1000, fBResultSet5.getFetchDirection());
      assertFalse(fBResultSet5.isClosed());
      assertEquals(1003, fBResultSet5.getType());
      assertEquals(1007, fBResultSet5.getConcurrency());
      assertEquals(0, fBResultSet5.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet5.equals((Object)fBResultSet0));
      assertFalse(fBResultSet5.equals((Object)fBResultSet3));
      assertFalse(fBResultSet5.equals((Object)fBResultSet4));
      assertFalse(fBResultSet5.equals((Object)fBResultSet2));
      assertFalse(fBResultSet5.equals((Object)fBResultSet1));
      assertNotSame(fBResultSet5, fBResultSet0);
      assertNotSame(fBResultSet5, fBResultSet3);
      assertNotSame(fBResultSet5, fBResultSet4);
      assertNotSame(fBResultSet5, fBResultSet2);
      assertNotSame(fBResultSet5, fBResultSet1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean2 = fBCachedFetcher0.last();
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      assertFalse(dummyCallableStatementMetaData0.canGetSelectableInformation());
      assertNotNull(dummyCallableStatementMetaData0);
      
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      assertNotNull(internalTransactionCoordinator0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7914765784434397
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = linkedList0.toArray(fBLongVarCharFieldArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(4, fBLongVarCharFieldArray0.length);
      assertEquals(4, fBLongVarCharFieldArray1.length);
      assertNotNull(fBLongVarCharFieldArray1);
      assertSame(fBLongVarCharFieldArray0, fBLongVarCharFieldArray1);
      assertSame(fBLongVarCharFieldArray1, fBLongVarCharFieldArray0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertNotNull(fBCachedFetcher1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.734399680379122
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[3][4];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte) (-120);
      byteArray1[7] = (byte)7;
      byteArray1[8] = (byte) (-124);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)15;
      byteArray2[1] = (byte) (-124);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)5;
      byteArray2[5] = (byte) (-124);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-117);
      byteArray3[1] = (byte)7;
      byteArray3[2] = (byte) (-124);
      byteArray3[3] = (byte) (-43);
      byteArray3[4] = (byte)7;
      byteArray3[5] = (byte) (-44);
      byteArray0[2] = byteArray3;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(3, byteArray0.length);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl1));
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl1.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotNull(isc_tr_handle_impl2);
      assertTrue(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl1));
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_tr_handle_impl isc_tr_handle_impl3 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl3.getState());
      assertNotNull(isc_tr_handle_impl3);
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl0));
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_tr_handle_impl1.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertNotNull(isc_tr_handle_impl4);
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle1 = isc_tr_handle_impl1.getDbHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNull(iscDbHandle1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl5 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl5.getState());
      assertNotNull(isc_tr_handle_impl5);
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl4));
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_tr_handle_impl isc_tr_handle_impl6 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotNull(isc_tr_handle_impl6);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl4));
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl0));
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_tr_handle_impl0.unregisterStatementFromTransaction((AbstractIscStmtHandle) null);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl5));
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl4));
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl6));
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl6);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl5);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl4);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl1);
      
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBufferImp0, (IscDbHandle) null, (GDSHelper.GDSHelperErrorListener) null);
      assertFalse(gDSHelper0.inTransaction());
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper0, 1, 2, (AbstractIscStmtHandle) null, fBResultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.isLast();
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1 == boolean0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[0][2];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(0, byteArray0.length);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      byte[] byteArray1 = new byte[4];
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[1] = (byte)0;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6745460275183657
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, linkedList2.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[7] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[8] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = linkedList0.toArray(fBLongVarCharFieldArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(9, fBLongVarCharFieldArray1.length);
      assertEquals(9, fBLongVarCharFieldArray0.length);
      assertNotNull(fBLongVarCharFieldArray1);
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList0, linkedList1);
      assertSame(fBLongVarCharFieldArray1, fBLongVarCharFieldArray0);
      assertSame(fBLongVarCharFieldArray0, fBLongVarCharFieldArray1);
      
      FBLongVarCharField[] fBLongVarCharFieldArray2 = new FBLongVarCharField[4];
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray1));
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray0));
      
      fBLongVarCharFieldArray2[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[3] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray3 = linkedList2.toArray(fBLongVarCharFieldArray2);
      assertEquals(0, linkedList2.size());
      assertEquals(4, fBLongVarCharFieldArray2.length);
      assertEquals(4, fBLongVarCharFieldArray3.length);
      assertNotNull(fBLongVarCharFieldArray3);
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray1));
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray0));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(fBLongVarCharFieldArray3.equals((Object)fBLongVarCharFieldArray1));
      assertFalse(fBLongVarCharFieldArray3.equals((Object)fBLongVarCharFieldArray0));
      assertNotSame(fBLongVarCharFieldArray2, fBLongVarCharFieldArray1);
      assertNotSame(fBLongVarCharFieldArray2, fBLongVarCharFieldArray0);
      assertSame(fBLongVarCharFieldArray2, fBLongVarCharFieldArray3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertSame(fBLongVarCharFieldArray3, fBLongVarCharFieldArray2);
      assertNotSame(fBLongVarCharFieldArray3, fBLongVarCharFieldArray1);
      assertNotSame(fBLongVarCharFieldArray3, fBLongVarCharFieldArray0);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean1 = fBCachedFetcher0.absolute((-1009));
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, linkedList2.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8809457317913751
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl1));
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotNull(isc_tr_handle_impl2);
      assertTrue(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl0));
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl isc_tr_handle_impl3 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl3.getState());
      assertNotNull(isc_tr_handle_impl3);
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl3.equals((Object)isc_tr_handle_impl1));
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertNotNull(isc_tr_handle_impl4);
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertTrue(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle1 = isc_tr_handle_impl1.getDbHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNull(iscDbHandle1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      isc_tr_handle_impl isc_tr_handle_impl5 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl5.getState());
      assertNotNull(isc_tr_handle_impl5);
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl4));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl1));
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      IscDbHandle iscDbHandle2 = isc_tr_handle_impl5.getDbHandle();
      assertEquals(0, isc_tr_handle_impl5.getState());
      assertNull(iscDbHandle2);
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl0));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl4));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl3));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl2));
      assertTrue(isc_tr_handle_impl5.equals((Object)isc_tr_handle_impl1));
      assertNotSame(isc_tr_handle_impl5, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl5, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl5, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl5, isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl5, isc_tr_handle_impl4);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      databaseParameterBufferImp0.removeArgument((-848));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBufferImp1));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.relative((-758));
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.395313380470596
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, linkedList0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotNull(fBCachedFetcher0);
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      byte[][] byteArray0 = new byte[2][4];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(2, byteArray0.length);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher1);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.first();
      assertEquals(2, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher0.isFirst();
      assertEquals(2, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean3);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher1.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      fBCachedFetcher0.setFetchSize(41);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(41, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(fBResultSet1, fBResultSet0);
      
      FBManagedConnection fBManagedConnection0 = null;
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5276897955392466
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, linkedList0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = fBCachedFetcher0.first();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      fBCachedFetcher0.close();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean2 = fBCachedFetcher0.isFirst();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean3 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSType gDSType0 = GDSType.getType((String) null);
      assertNull(gDSType0);
      
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6499276945068657
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(1, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2198);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "You cannot position to the row 0 with absolute() method.");
      assertNotNull(mockThread0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, (-22L), 3389L, timeUnit0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(scheduledFuture0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) scheduledFuture0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.negate();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotSame(predicate2, predicate1);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate3);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotSame(predicate2, predicate1);
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate4);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate2, predicate1);
      
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate5);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate2, predicate1);
      
      Predicate<Object> predicate6 = predicate2.negate();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate6);
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate7);
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate5, predicate7);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate7, predicate5);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      
      Predicate<Object> predicate8 = predicate2.and(predicate3);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate8);
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate3, predicate8);
      assertNotSame(predicate8, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      
      Predicate<Object> predicate9 = predicate5.negate();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate9);
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate3, predicate8);
      assertNotSame(predicate5, predicate7);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate9, predicate6);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate9);
      
      Predicate<Object> predicate10 = predicate9.or(predicate2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(predicate10);
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate8));
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate3, predicate8);
      assertNotSame(predicate5, predicate7);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate5, predicate10);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate9, predicate6);
      assertNotSame(predicate10, predicate7);
      assertNotSame(predicate10, predicate5);
      assertNotSame(predicate10, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate9);
      
      boolean boolean1 = linkedList0.removeIf(predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertTrue(boolean1);
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate10));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotSame(predicate3, predicate8);
      assertNotSame(predicate5, predicate7);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate5, predicate10);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate9, predicate6);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate9);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean3);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(fBResultSet1, fBResultSet0);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(fBResultSet1, fBResultSet0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(fBResultSet1, fBResultSet0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotNull(fBCachedFetcher0);
      
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)0;
      byte[][] byteArray2 = new byte[7][1];
      byteArray2[0] = byteArray0;
      byteArray2[1] = byteArray1;
      byteArray2[2] = byteArray1;
      byteArray2[3] = byteArray1;
      byte[] byteArray3 = new byte[0];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray2[4] = byteArray3;
      byteArray2[5] = byteArray1;
      byteArray2[6] = byteArray0;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7927361152364574
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList1.add((byte[][]) null);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean3 = fBCachedFetcher0.absolute(241);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean3);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean4);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean5 = fBCachedFetcher0.relative(241);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean5);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean6 = fBCachedFetcher0.next();
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean6);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean7 = fBCachedFetcher0.next();
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean7);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean8 = fBCachedFetcher0.previous();
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean8);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean4);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean9 = fBCachedFetcher0.absolute(37);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean9);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean6);
      assertFalse(boolean9 == boolean2);
      assertFalse(boolean9 == boolean8);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(2, fBResultSet1.getHoldability());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertEquals(0, int0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBResultSet1, fBResultSet0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet1.getRow());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      byte[][] byteArray0 = new byte[4][1];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)30;
      byteArray3[2] = (byte) (-45);
      byteArray3[3] = (byte) (-45);
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)1;
      byteArray3[6] = (byte)1;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte)0;
      byteArray0[3] = byteArray4;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotNull(fBCachedFetcher0);
      
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[][] byteArray2 = new byte[5][6];
      byteArray2[0] = byteArray1;
      byteArray2[1] = byteArray1;
      byteArray2[2] = byteArray0;
      byteArray2[3] = byteArray0;
      byteArray2[4] = byteArray0;
      boolean boolean0 = linkedList0.add(byteArray2);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byteArray2));
      assertEquals(5, byteArray2.length);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(byteArray2));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray2));
      assertNotNull(fBCachedFetcher1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher1.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9312425554774126
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      linkedList0.push((byte[][]) null);
      assertEquals(2, linkedList0.size());
      
      FBResultSet fBResultSet2 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet2);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet2);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher2.getFetchSize());
      assertEquals(0, fBCachedFetcher2.getRowNum());
      assertFalse(fBCachedFetcher2.isLast());
      assertFalse(fBCachedFetcher2.isEmpty());
      assertFalse(fBCachedFetcher2.isAfterLast());
      assertFalse(fBCachedFetcher2.isFirst());
      assertTrue(fBCachedFetcher2.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher2);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher1));
      
      boolean boolean1 = fBCachedFetcher2.absolute((-1147));
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher2.getFetchSize());
      assertEquals(0, fBCachedFetcher2.getRowNum());
      assertFalse(fBCachedFetcher2.isLast());
      assertFalse(fBCachedFetcher2.isEmpty());
      assertFalse(fBCachedFetcher2.isAfterLast());
      assertFalse(fBCachedFetcher2.isFirst());
      assertTrue(fBCachedFetcher2.isBeforeFirst());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(fBResultSet0, fBResultSet2);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher0);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher1);
      
      boolean boolean2 = fBCachedFetcher0.relative(1);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(fBResultSet0, fBResultSet2);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher2);
      
      boolean boolean3 = linkedList0.add((byte[][]) null);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      fBCachedFetcher2.insertRow((byte[][]) null);
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher2.getFetchSize());
      assertTrue(fBCachedFetcher2.isFirst());
      assertFalse(fBCachedFetcher2.isBeforeFirst());
      assertFalse(fBCachedFetcher2.isLast());
      assertFalse(fBCachedFetcher2.isEmpty());
      assertFalse(fBCachedFetcher2.isAfterLast());
      assertEquals(1, fBCachedFetcher2.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher1));
      assertNotSame(fBResultSet0, fBResultSet2);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher0);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher1);
      
      FBCachedFetcher fBCachedFetcher3 = new FBCachedFetcher(linkedList0, fBResultSet2);
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertFalse(fBCachedFetcher3.isLast());
      assertEquals(0, fBCachedFetcher3.getRowNum());
      assertFalse(fBCachedFetcher3.isFirst());
      assertFalse(fBCachedFetcher3.isAfterLast());
      assertTrue(fBCachedFetcher3.isBeforeFirst());
      assertFalse(fBCachedFetcher3.isEmpty());
      assertEquals(0, fBCachedFetcher3.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher3);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher3.equals((Object)fBCachedFetcher1));
      assertFalse(fBCachedFetcher3.equals((Object)fBCachedFetcher2));
      assertFalse(fBCachedFetcher3.equals((Object)fBCachedFetcher0));
      
      boolean boolean4 = fBCachedFetcher1.next();
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(1, fBCachedFetcher1.getRowNum());
      assertTrue(fBCachedFetcher1.isFirst());
      assertTrue(boolean4);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher3));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher2));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertNotSame(fBResultSet2, fBResultSet0);
      assertNotSame(fBResultSet2, fBResultSet1);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher2);
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean5);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher2));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher3));
      assertNotSame(fBResultSet0, fBResultSet2);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher2);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher3);
      
      fBCachedFetcher2.deleteRow();
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher2.getFetchSize());
      assertTrue(fBCachedFetcher2.isFirst());
      assertFalse(fBCachedFetcher2.isBeforeFirst());
      assertFalse(fBCachedFetcher2.isLast());
      assertFalse(fBCachedFetcher2.isEmpty());
      assertFalse(fBCachedFetcher2.isAfterLast());
      assertEquals(1, fBCachedFetcher2.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher3));
      assertFalse(fBCachedFetcher2.equals((Object)fBCachedFetcher1));
      assertNotSame(fBResultSet0, fBResultSet2);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher0);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher3);
      assertNotSame(fBCachedFetcher2, fBCachedFetcher1);
      
      fBCachedFetcher3.updateRow((byte[][]) null);
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertFalse(fBCachedFetcher3.isLast());
      assertEquals(0, fBCachedFetcher3.getRowNum());
      assertFalse(fBCachedFetcher3.isFirst());
      assertFalse(fBCachedFetcher3.isAfterLast());
      assertTrue(fBCachedFetcher3.isBeforeFirst());
      assertFalse(fBCachedFetcher3.isEmpty());
      assertEquals(0, fBCachedFetcher3.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher3.equals((Object)fBCachedFetcher1));
      assertFalse(fBCachedFetcher3.equals((Object)fBCachedFetcher2));
      assertFalse(fBCachedFetcher3.equals((Object)fBCachedFetcher0));
      assertNotSame(fBResultSet2, fBResultSet0);
      assertNotSame(fBResultSet2, fBResultSet1);
      assertNotSame(fBCachedFetcher3, fBCachedFetcher1);
      assertNotSame(fBCachedFetcher3, fBCachedFetcher2);
      assertNotSame(fBCachedFetcher3, fBCachedFetcher0);
      
      fBCachedFetcher1.afterLast();
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(3, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher3));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher2));
      assertNotSame(fBResultSet2, fBResultSet0);
      assertNotSame(fBResultSet2, fBResultSet1);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher2);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet0.equals((Object)fBResultSet2));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher2));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher3));
      assertNotSame(fBResultSet0, fBResultSet2);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher2);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher3);
      
      fBCachedFetcher1.updateRow((byte[][]) null);
      assertEquals(3, linkedList0.size());
      assertEquals(1007, fBResultSet2.getConcurrency());
      assertEquals(0, fBResultSet2.getFetchSize());
      assertFalse(fBResultSet2.isClosed());
      assertEquals(2, fBResultSet2.getHoldability());
      assertEquals(1000, fBResultSet2.getFetchDirection());
      assertEquals(1003, fBResultSet2.getType());
      assertNull(fBResultSet2.getCursorName());
      assertEquals(0, fBResultSet2.getRow());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(3, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet2.equals((Object)fBResultSet0));
      assertFalse(fBResultSet2.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher3));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher2));
      assertNotSame(fBResultSet2, fBResultSet0);
      assertNotSame(fBResultSet2, fBResultSet1);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher2);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher3.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.444441427591417
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet1);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = fBCachedFetcher0.isFirst();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertNotSame(fBResultSet1, fBResultSet0);
      
      boolean boolean2 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(1003, fBResultSet1.getType());
      assertNull(fBResultSet1.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(fBResultSet1, fBResultSet0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertTrue(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl1));
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = null;
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      GDSType gDSType0 = javaGDSImpl0.getType();
      assertEquals("PURE_JAVA", gDSType0.toString());
      assertNotNull(gDSType0);
      
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl(gDSType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotNull(fBCachedFetcher0);
      
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)0;
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      assertFalse(gDSHelper0.inTransaction());
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      doReturn((GDSHelper) null).when(fBManagedConnection0).getGDSHelper();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      assertEquals(0, linkedList1.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = linkedList2.add((byte[][]) null);
      assertEquals(1, linkedList2.size());
      assertTrue(boolean1);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      assertEquals(1, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[7] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[8] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = linkedList0.toArray(fBLongVarCharFieldArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(9, fBLongVarCharFieldArray1.length);
      assertEquals(9, fBLongVarCharFieldArray0.length);
      assertNotNull(fBLongVarCharFieldArray1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertSame(fBLongVarCharFieldArray1, fBLongVarCharFieldArray0);
      assertSame(fBLongVarCharFieldArray0, fBLongVarCharFieldArray1);
      
      FBLongVarCharField[] fBLongVarCharFieldArray2 = new FBLongVarCharField[4];
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray0));
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray1));
      
      fBLongVarCharFieldArray2[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[3] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray3 = linkedList2.toArray(fBLongVarCharFieldArray2);
      assertEquals(1, linkedList2.size());
      assertEquals(4, fBLongVarCharFieldArray2.length);
      assertEquals(4, fBLongVarCharFieldArray3.length);
      assertNotNull(fBLongVarCharFieldArray3);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray0));
      assertFalse(fBLongVarCharFieldArray2.equals((Object)fBLongVarCharFieldArray1));
      assertFalse(fBLongVarCharFieldArray3.equals((Object)fBLongVarCharFieldArray0));
      assertFalse(fBLongVarCharFieldArray3.equals((Object)fBLongVarCharFieldArray1));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(fBLongVarCharFieldArray2, fBLongVarCharFieldArray0);
      assertSame(fBLongVarCharFieldArray2, fBLongVarCharFieldArray3);
      assertNotSame(fBLongVarCharFieldArray2, fBLongVarCharFieldArray1);
      assertNotSame(fBLongVarCharFieldArray3, fBLongVarCharFieldArray0);
      assertNotSame(fBLongVarCharFieldArray3, fBLongVarCharFieldArray1);
      assertSame(fBLongVarCharFieldArray3, fBLongVarCharFieldArray2);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertEquals(0, linkedList1.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, linkedList2.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[] byteArray0 = new byte[4];
      fBCachedFetcher0.next();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isLast();
      byte[][] byteArray1 = new byte[6][8];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      GDSType.getType("V.2f5[/,YiF+~lMx.K");
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.158993559824386
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBResultSet fBResultSet3 = new FBResultSet(fBResultSet2.xsqlvars, linkedList0);
      FBResultSet fBResultSet4 = new FBResultSet(fBResultSet2.xsqlvars, linkedList0);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet5 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet5);
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow((byte[][]) null);
      System.setCurrentTimeMillis(0L);
  }
}
