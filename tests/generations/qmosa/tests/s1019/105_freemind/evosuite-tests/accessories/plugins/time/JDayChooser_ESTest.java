/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 21:13:35 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelListener;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import javax.help.BackAction;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.JHelp;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.BitmapImage;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemVariablePsuedo;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2914597721973706
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      menuSelectionManager1.isComponentPartOfCurrentMenu(jDayChooser_DecoratorButton1);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 20, 1937L, 19, 20, 'p', (MenuElement[]) null, menuSelectionManager1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(menuKeyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      menuKeyEvent0.paramString();
      jDayChooser0.setDay(1776);
      Color color0 = Color.lightGray;
      jDayChooser0.setMonth(3);
      jDayChooser0.initDecorations();
      assertEquals(30, jDayChooser0.getDay());
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.updateUI();
      jDayChooser1.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2690038228147524
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDayBordersVisible(false);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 40, 1937L, 19, 40, 'p', (MenuElement[]) null, menuSelectionManager1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(menuKeyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      menuKeyEvent0.paramString();
      jDayChooser0.setDay(1776);
      Color color0 = Color.lightGray;
      jDayChooser0.setMonth(3);
      jDayChooser0.initDecorations();
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getISO3Country());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.142548714684652
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.JAPAN;
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay((byte)14);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxDayCharacters(3);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-201326593), (byte)14, 1, 1, '>');
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager.defaultManager();
      jDayChooser0.setDay(1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.142525095520062
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      int int0 = 4;
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(4);
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "HighlightCenterAndZoom");
      try { 
        genericDOMImplementation0.createDocument("4", "selectedIcon", documentTypeImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The given node (type: 9, name: #document) was not created by the current document.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.236928995505782
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GridLayout gridLayout0 = new GridLayout();
      jDayChooser0.setLayout(gridLayout0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 400L, 70, 13, 'R');
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3, 0L, 70, 36, 'R', (MenuElement[]) null, menuSelectionManager1);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      menuKeyEvent0.paramString();
      jDayChooser0.setDay(1776);
      Color color0 = Color.lightGray;
      jDayChooser0.setMonth(2);
      jDayChooser0.initDecorations();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2640553044804586
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 25, 600000L, 27, (-757), '|', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_TTB;
      Object object0 = new Object();
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      JButton jButton0 = new JButton((Icon) null);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, (-757), "day");
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser_DecoratorButton1, (-2840), "day", 3);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      Locale.lookupTag(vector0, linkedBlockingQueue0);
      InputEvent.getModifiersExText(26);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1510396833261134
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxDayCharacters((-1));
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      CoreDocumentImpl coreDocumentImpl0 = null;
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "@AtHj(8WE4");
      try { 
        genericDOMImplementation0.createDocument("rolloverSelectedIcon", "c6/\"FawU;%[&Gn4Z", documentTypeImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The given node (type: 9, name: #document) was not created by the current document.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.124806616475451
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(711);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1634964842370508
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(0);
      jDayChooser0.setEnabled(true);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      InputEvent.getModifiersExText(970);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 1L, 12, 3224, 'R');
      MenuSelectionManager.defaultManager();
      PDFResources pDFResources0 = new PDFResources(484);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)73;
      BitmapImage bitmapImage0 = new BitmapImage("ISO-8859-1", 3224, 13, byteArray0, "ISO-8859-1");
      bitmapImage0.getICCStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, (PDFStream) null, 37, 4);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFPage0, "ISO-8859-1", "13", 37);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlowLayout flowLayout0 = new FlowLayout(4, 209, 168);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.US;
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setForeground(color0);
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GridLayout gridLayout0 = new GridLayout();
      jDayChooser0.setLayout(gridLayout0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 400L, 70, 13, 'R');
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager.defaultManager();
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.260442320054409
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      CardLayout cardLayout0 = new CardLayout(31, 3079);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = SwingConstants.BOTTOM;
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.initDecorations();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Date date0 = jDayChooser0.minSelectableDate;
      XmlDocument xmlDocument0 = new XmlDocument();
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      DefaultExtensionHandler defaultExtensionHandler1 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(xmlDocument0, defaultImageHandler0, defaultExtensionHandler1);
      ElemVariablePsuedo elemVariablePsuedo0 = new ElemVariablePsuedo();
      SVGGeneratorContext sVGGeneratorContext1 = SVGGeneratorContext.createDefault(xmlDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext1, false);
      sVGGeneratorContext1.setExtensionHandler(defaultExtensionHandler0);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGeneratorContext0, false);
      SVGGraphics2D sVGGraphics2D2 = new SVGGraphics2D(sVGGraphics2D0);
      Font font0 = sVGGraphics2D2.getFont();
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1677717028005006
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener0, containerListener1);
      ContainerListener containerListener3 = AWTEventMulticaster.add(containerListener2, containerListener2);
      ContainerListener containerListener4 = AWTEventMulticaster.add(containerListener3, containerListener2);
      AWTEventMulticaster.remove(containerListener3, containerListener4);
      jDayChooser0.removeContainerListener(containerListener2);
      int int0 = SwingConstants.BOTTOM;
      JYearChooser jYearChooser0 = new JYearChooser();
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.initDecorations();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-87);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2831151488375467
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.addPropertyChangeListener("accessories.plugins.time.JDayChooser$1", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1595), 550L, 38, 19, 'R');
      InputEvent.getModifiersExText((-862));
      jDayChooser0.keyPressed(keyEvent0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(19);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.255753459777506
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      ContainerListener containerListener2 = AWTEventMulticaster.add((ContainerListener) null, containerListener1);
      ContainerListener containerListener3 = AWTEventMulticaster.add((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove(containerListener3, containerListener2);
      ContainerListener containerListener4 = AWTEventMulticaster.remove(containerListener1, (ContainerListener) null);
      jDayChooser0.removeContainerListener(containerListener4);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setWeekOfYearVisible(true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3234), (-3234), (-420), (-3234), '4', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = Color.GREEN;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_TTB;
      Object object0 = new Object();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      ActionEvent actionEvent0 = new ActionEvent("West", 41, "West");
      ActionEvent actionEvent1 = null;
      try {
        actionEvent1 = new ActionEvent((Object) null, 30, "rosybrown", 41, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.322281065641793
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp((-322L));
      jDayChooser0.minSelectableDate = (Date) timestamp0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-344), 0L, (-344), (-344), 'x', (MenuElement[]) null, (MenuSelectionManager) null);
      menuKeyEvent0.consume();
      KeyEvent.getExtendedKeyCodeForChar((-733));
      jDayChooser0.transferFocusBackward();
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setWeekOfYearVisible(true);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Date date0 = jDayChooser0.minSelectableDate;
      XmlDocument xmlDocument0 = new XmlDocument();
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      DefaultExtensionHandler defaultExtensionHandler1 = new DefaultExtensionHandler();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(xmlDocument0, imageHandlerBase64Encoder0, defaultExtensionHandler0);
      ElemVariablePsuedo elemVariablePsuedo0 = new ElemVariablePsuedo();
      SVGGeneratorContext sVGGeneratorContext1 = SVGGeneratorContext.createDefault(xmlDocument0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext1, false);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGeneratorContext0, false);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      ActionEvent actionEvent0 = new ActionEvent(defaultImageHandler0, (byte)39, "ISO-8859-1");
      ActionEvent actionEvent1 = new ActionEvent(defaultExtensionHandler1, (byte)39, "13", 1789L, (byte)39);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.svggen.DefaultExtensionHandler cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.297969976918928
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinimumSize((Dimension) null);
      String string0 = JDayChooser.DAY_PROPERTY;
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getInputMap(0);
      jDayChooser0.getInputMap();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setYear(0);
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSlider jSlider0 = new JSlider(0);
      JYearChooser jYearChooser1 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser1);
      jDayChooser0.setMonth(48);
      jDayChooser0.initDecorations();
      jDayChooser0.updateUI();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "year";
      stringArray0[5] = "year";
      stringArray0[6] = "year";
      stringArray0[7] = "j^5T44KeSr`uZXv";
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.220741245590377
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.addPropertyChangeListener(":[gD*? <B5)\")!]9D", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2748), 19, 319, 19, '7');
      InputEvent.getModifiersExText(14);
      jDayChooser0.keyPressed(keyEvent0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(589);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3762399958879716
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.updateUI();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%;t&l");
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(false);
      Color color0 = Color.orange;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BsgdvaF");
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("RI");
      PDFResources pDFResources0 = new PDFResources((-1423));
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "RI", "RI", 0.0F);
      System.setCurrentTimeMillis((-1423));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1180);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0541253627192235
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1), 3156L, (-1460), (-1460), 'm');
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      Dimension dimension0 = metalSplitPaneUI0.getPreferredSize(jDayChooser0);
      Dimension dimension1 = metalSplitPaneUI0.getMinimumSize(jDayChooser0);
      dimension1.clone();
      dimension0.setSize(dimension1);
      dimension1.setSize(0, 300);
      jDayChooser0.setMaximumSize(dimension1);
      InputEvent.getModifiersExText(300);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1038, (-1542L), 0, (-355), 'A');
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager.defaultManager();
      jDayChooser0.setDay((-355));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.297969976918928
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      InputMap inputMap0 = new InputMap();
      jDayChooser0.getInputMap();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setYear(0);
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSlider jSlider0 = new JSlider(0);
      jDayChooser0.setMonth(48);
      jDayChooser0.initDecorations();
      jDayChooser0.updateUI();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PanelUI";
      stringArray0[1] = "day";
      stringArray0[2] = "PanelUI";
      stringArray0[3] = "year";
      stringArray0[5] = "year";
      stringArray0[6] = "year";
      stringArray0[7] = "j^5T44KeSr`uZXv";
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = null;
      try {
        color0 = new Color((-659), 48, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.scrollRectToVisible((Rectangle) null);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.272098495628138
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.setSundayForeground((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 1L, 12, 3224, 'R');
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4, 0L, 3224, 37, '3', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_TTB;
      Object object0 = new Object();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setMonth(4);
      jDayChooser0.initDecorations();
      jDayChooser0.updateUI();
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("Windows", (-981.637F), (-981.637F));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setMonth(14);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(694);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.229403417495215
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener0, containerListener1);
      AWTEventMulticaster.remove(containerListener2, containerListener2);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, (byte) (-95), 19, 3493, 'R');
      InputEvent.getModifiersExText(1528);
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((byte)43);
      assertEquals(28, jDayChooser1.getDay());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      MockDate mockDate0 = new MockDate(1, 12296, 18, 470, (-1));
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2083617002749687
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GridLayout gridLayout0 = new GridLayout();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 0, (-259), 'D');
      InputEvent.getModifiersExText(13);
      jDayChooser0.keyPressed(keyEvent0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDay(13);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.170041907787893
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getInputMap();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setYear(0);
      jDayChooser0.init();
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSlider jSlider0 = new JSlider(0);
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jSlider0, 0, 0, (-1770), 0, 8940, 8940, true, (-1770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid button value :-1770
         //
         verifyException("java.awt.event.MouseEvent", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHeight();
      jDayChooser0.getDaysInMonth();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JList<Calendar> jList0 = new JList<Calendar>(vector0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      TableCellRenderer tableCellRenderer0 = jTableHeader0.getDefaultRenderer();
      JCheckBox jCheckBox0 = new JCheckBox();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jCheckBox0);
      TableColumn tableColumn0 = new TableColumn(28, (-3817), tableCellRenderer0, defaultCellEditor0);
      defaultTableColumnModel0.removeColumn(tableColumn0);
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      jList0.addListSelectionListener(jTable0);
      jList0.removeSelectionInterval(28, 0);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0541253627192235
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%;tal");
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel((HelpSet) null);
      JHelp jHelp0 = new JHelp(defaultHelpModel0);
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      defaultHelpModel0.removeTextHelpModelListener(basicContentViewerUI0);
      KeyEvent keyEvent0 = new KeyEvent(jHelp0, 2790, 0L, (-370), 31, 'Q');
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager.defaultManager();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaximumSize();
      jDayChooser0.setDay(31);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayScript();
      locale0.getUnicodeLocaleKeys();
      Color color0 = Color.orange;
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2742689162175447
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      KeyEvent.getKeyText((-49));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BackAction backAction0 = new BackAction(calendar0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2403147641799923
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add((ContainerListener) null, containerListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster1, (ContainerListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.remove((ItemListener) aWTEventMulticaster2, (ItemListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((ItemListener) aWTEventMulticaster1, (ItemListener) null);
      jDayChooser0.removeContainerListener(aWTEventMulticaster2);
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.updateUI();
      jDayChooser0.getDayPanel();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("RI");
      PDFResources pDFResources0 = new PDFResources(1277);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(37);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 37);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      pDFDocument0.output(mockPrintStream0);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "RI", "ISO-8859-1", 0.0F);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.298924064842215
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 26, 26, (-1595), (-1595), 'V', menuElementArray0, menuSelectionManager0);
      KeyEvent.getKeyText((-49));
      menuKeyEvent0.paramString();
      jDayChooser0.keyTyped(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BackAction backAction0 = new BackAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 1604, 0L, 49, 517, 'V', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent1);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1287280798819306
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addMouseWheelListener((MouseWheelListener) null);
      jDayChooser0.setDay(0);
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser0, 0, 0, (-1602), (-1833), 228, 0, true);
      jDayChooser0.getToolTipLocation(mouseEvent0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 28, 0);
      mockGregorianCalendar0.getTimeZone();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.236928995505782
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.addPropertyChangeListener("day", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      jDayChooser0.getInsets();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 90, 1448L, 19, (-1595), 'R');
      InputEvent.getModifiersExText((-1595));
      jDayChooser0.keyPressed(keyEvent0);
      byte[] byteArray0 = new byte[7];
      jDayChooser0.setDecorationBordersVisible(true);
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)31;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(19);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.drawDays();
      assertEquals(19, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.054112235052666
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[2] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(0);
      jDayChooser0.addListeners(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.JAPAN;
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      byte byte0 = (byte)14;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2190));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      SystemColor systemColor0 = SystemColor.textText;
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3028458582493077
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusGained(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMenu jMenu0 = new JMenu("");
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser_DecoratorButton0, (-2168), false, jDayChooser_DecoratorButton0);
      jDayChooser0.focusLost(focusEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton2 = jDayChooser0.new DecoratorButton();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jMenu0;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("Z,eUg@G'", false);
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3484, (-2527L), 19, 209, '$', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
