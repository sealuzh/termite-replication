/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 19:27:39 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter(18);
      StringWriter stringWriter1 = stringWriter0.append('O');
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append('2');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier(">>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      simpleNode0.dump("=", stringWriter0);
      assertEquals("O2<VariableDeclaratorId>\n  <identifier>*rshft</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8001573041913385
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('O');
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter1.append('D');
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'D';
      charArray0[2] = 'O';
      charArray0[3] = 'D';
      charArray0[4] = 'O';
      charArray0[5] = 'D';
      stringWriter3.write(charArray0);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter4 = new StringWriter();
      stringWriter0.flush();
      simpleNode0.setIdentifier("iRQI?9=uu=5?t");
      StringReader stringReader0 = new StringReader(">=");
      StringWriter stringWriter5 = stringWriter0.append('A');
      StringWriter stringWriter6 = new StringWriter();
      char[] charArray1 = new char[14];
      charArray1[0] = 'u';
      stringWriter5.write(charArray1);
      stringWriter5.write(charArray1);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringWriter5.append('X');
      stringWriter0.flush();
      stringWriter4.flush();
      stringWriter3.append('A');
      simpleNode0.dump(">=", stringWriter6);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n  <identifier>iRQI?9=uu=5?t</identifier>\n</VariableDeclaratorId>\n", stringWriter6.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2213836861256668
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter(18);
      StringWriter stringWriter1 = stringWriter0.append('O');
      StringWriter stringWriter2 = stringWriter1.append('b');
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter4 = new StringWriter();
      StringReader stringReader0 = new StringReader(">=");
      StringWriter stringWriter5 = stringWriter0.append('y');
      StringWriter stringWriter6 = new StringWriter();
      char[] charArray0 = new char[1];
      stringWriter6.write(charArray0);
      charArray0[0] = 'y';
      stringWriter6.write(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringWriter1.append('y');
      stringWriter6.flush();
      stringWriter5.append('a');
      simpleNode0.dump(">=", stringWriter2);
      assertEquals("Obyya<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
      
      String string0 = simpleNode0.toString((String) null);
      assertEquals("nullVariableDeclaratorId : >=", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      simpleNode0.identifiers = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(102);
      String string0 = ">=";
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier(">=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2283766931186737
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(43);
      simpleNode0.setIdentifier("J+'u=n'bRvjlWEnMwXE");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      StringReader stringReader0 = new StringReader("J+'u=n'bRvjlWEnMwXE");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 57, (-1), 1);
      javaCharStream1.FillBuff();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream1);
      SystemInUtil.addInputLine(")");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "J+'u=n'bRvjlWEnMwXE");
      stringReader0.read(charBuffer0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager4.ReInit(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager1);
      JavaParserTokenManager javaParserTokenManager5 = new JavaParserTokenManager(javaCharStream1);
      simpleNode0.setIdentifier("}");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("]N1^`Di(=zw|6#", stringWriter0);
      assertEquals("<InclusiveOrExpression>\n  <identifier>J+'u=n'bRvjlWEnMwXE</identifier>\n</InclusiveOrExpression>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("Hd/)");
      assertEquals("Hd/)InclusiveOrExpression : J+'u=n'bRvjlWEnMwXE : }", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier(";");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("{", stringWriter0);
      assertEquals("<PackageDeclaration>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0337245080427404
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.mark(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      byteArrayInputStream0.reset();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.close();
      byteArrayInputStream0.skip((-803L));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream0.skip((byte)15);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      simpleNode0.dump("v+HU", stringWriter0);
      assertEquals("<PackageDeclaration>\n  <identifier>*le</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("PackageDeclaration : <=", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringReader stringReader0 = new StringReader("TypeParameter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(1140);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("<");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bn");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      simpleNode0.dump("*rshft", stringWriter1);
      assertEquals("<PackageDeclaration>\n  <identifier>*lt</identifier>\n</PackageDeclaration>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0783934585517456
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('O');
      simpleNode0.setIdentifier(">=");
      StringReader stringReader0 = new StringReader("c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 'O', 9);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.FillBuff();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">=");
      stringReader0.read(charBuffer0);
      javaParserTokenManager4.ReInit(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager4);
      JavaParserTokenManager javaParserTokenManager5 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager5.jjimageLen = (-4673);
      javaParserTokenManager5.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager5);
      Token.newToken((-4672));
      simpleNode0.setIdentifier("");
      StringBuffer stringBuffer0 = new StringBuffer();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("O<EnumBody>\n  <identifier>*ge</identifier>\n</EnumBody>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumBody : >= : ", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0783934585517456
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(43);
      simpleNode0.setIdentifier("=M6+xSpUl7'\"l7P[{8");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      byteArrayInputStream1.skip(2124L);
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(byteArrayInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream2);
      sequenceInputStream1.read(byteArray0);
      bufferedInputStream1.skip((-239L));
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream1.close();
      sequenceInputStream1.read(byteArray0);
      sequenceInputStream2.read();
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      sequenceInputStream3.read(byteArray0, 1070, 43);
      sequenceInputStream2.available();
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("=M6+xSpUl7'\"l7P[{8", stringWriter0);
      assertEquals("<InclusiveOrExpression>\n  <identifier>=M6+xSpUl7'\"l7P[{8</identifier>\n</InclusiveOrExpression>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("InclusiveOrExpression : =M6+xSpUl7'\"l7P[{8 : {", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("<<");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = stringWriter0.append('m');
      simpleNode0.dump("<<", stringWriter1);
      assertEquals("m<PackageDeclaration>\n  <identifier>*lshft</identifier>\n</PackageDeclaration>\n", stringWriter1.toString());
      assertEquals("m<PackageDeclaration>\n  <identifier>*lshft</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9429146801794972
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringReader stringReader0 = new StringReader("TypeParameter");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode0.jjtSetParent(simpleNode1);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      simpleNode0.toString();
      SimpleNode simpleNode2 = (SimpleNode)simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("d");
      simpleNode0.toString();
      stringReader0.skip(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter(1);
      simpleNode0.dump(":", stringWriter0);
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, 1);
      simpleNode0.jjtAddChild(simpleNode2, 1);
      simpleNode2.dump("PackageDeclaration : d", stringWriter0);
      SimpleNode simpleNode4 = (SimpleNode)simpleNode0.jjtGetParent();
      simpleNode4.parent = (Node) simpleNode0;
      SimpleNode simpleNode5 = new SimpleNode(1);
      simpleNode3.jjtGetParent();
      simpleNode0.identifiers = arrayList0;
      simpleNode1.jjtAddChild(simpleNode1, 24);
      StringReader stringReader1 = new StringReader(":");
      // Undeclared exception!
      simpleNode2.dump("d", stringWriter0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.157677035511023
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.mark(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byteArrayInputStream0.read();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream1.skip((-4106L));
      bufferedInputStream1.skip(0);
      simpleNode0.toString("4wmE2lUHgK`k");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.flush();
      stringWriter0.close();
      simpleNode0.setIdentifier(">");
      StringBuffer stringBuffer0 = new StringBuffer();
      simpleNode0.dump(">", stringWriter0);
      assertEquals("null<PackageDeclaration>\n  <identifier>*gt</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0853864655447525
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      SimpleNode simpleNode1 = new SimpleNode((-1083929126));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("+Z806Ovx'I*~");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cdj-ys*!r%!B0HP_ah");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.dump("cdj-ys*!r%!B0HP_ah", stringWriter0);
      assertEquals("<EnumBody>\n  <identifier>+Z806Ovx'I*~</identifier>\n  <identifier>*amp</identifier>\n</EnumBody>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumBody : +Z806Ovx'I*~ : &", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(118);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SystemInUtil.addInputLine("!L_JE'/A.@");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("&&");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("<PackageDeclaration>\n  <identifier>*amp</identifier>\n</PackageDeclaration>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-43));
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byteArrayInputStream0.skip((-43));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream1);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.skip(0L);
      byte[] byteArray1 = new byte[0];
      sequenceInputStream0.read(byteArray1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream2);
      JavaParser javaParser1 = new JavaParser(pushbackInputStream0);
      JavaParser javaParser2 = new JavaParser("*ge");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        simpleNode0.dump("*ge", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      JavaParser javaParser1 = new JavaParser(sequenceInputStream0);
      JavaParser javaParser2 = new JavaParser("Orlf");
      Node node0 = javaParser2.currNode;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "Orlf");
      StringWriter stringWriter1 = new StringWriter(1);
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtAddChild((Node) null, 1);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1495));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1495
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9806247574666507
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(57);
      simpleNode0.jjtSetParent(simpleNode1);
      SimpleNode simpleNode2 = new SimpleNode(102);
      simpleNode1.jjtAddChild(simpleNode2, 1);
      simpleNode2.dump("]KGRT}w;7NKn'@8g", stringWriter0);
      simpleNode0.jjtGetParent();
      SimpleNode simpleNode3 = new SimpleNode(47);
      simpleNode2.jjtGetParent();
      SimpleNode simpleNode4 = new SimpleNode(102);
      simpleNode4.jjtAddChild(simpleNode0, 102);
      simpleNode2.dump("}?*t' W|>", stringWriter0);
      simpleNode3.dump("}?*t' W|>", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.mark(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byteArrayInputStream0.skip((-803L));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream2.skip((byte)15);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream0.close();
      sequenceInputStream2.read(byteArray0);
      sequenceInputStream0.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream1);
      JavaParser javaParser1 = new JavaParser(bufferedInputStream0);
      JavaParser javaParser2 = new JavaParser("*Vb/J*M\"");
      JavaParser javaParser3 = new JavaParser(javaParser0.token_source);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[2] = ' ';
      charArray0[3] = '=';
      charArray0[4] = '2';
      char[] charArray1 = new char[0];
      StringBuffer stringBuffer0 = new StringBuffer();
      simpleNode0.jjtAddChild((Node) null, 700);
      assertEquals(701, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('O');
      simpleNode0.setIdentifier(">=");
      StringReader stringReader0 = new StringReader("c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 9);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.FillBuff();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager4);
      JavaParserTokenManager javaParserTokenManager5 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager5.jjimageLen = (-4700);
      javaParserTokenManager5.MoreLexicalActions();
      javaParserTokenManager5.getNextToken();
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager5);
      simpleNode0.dump("/|vH6{l6", stringWriter0);
      assertEquals("O<EnumBody>\n  <identifier>*ge</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Orlf");
      Node[] nodeArray0 = new Node[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild(nodeArray0[0], 1880);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      StringWriter stringWriter0 = new StringWriter(1880);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Orlf");
      StringWriter stringWriter3 = stringWriter2.append('%');
      stringWriter3.append('%');
      simpleNode0.jjtGetChild(1);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(1881, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.311020481113516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemInUtil.addInputLine("Py0&*~5(JScx!o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SystemInUtil.addInputLine("Py0&*~5(JScx!o");
      SimpleNode simpleNode0 = new SimpleNode(86);
      JavaParser javaParser0 = new JavaParser("Py0&*~5(JScx!o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1602);
      simpleNode0.jjtSetParent(simpleNode1);
      SimpleNode simpleNode2 = (SimpleNode)simpleNode0.parent;
      simpleNode0.jjtSetParent(simpleNode1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      String string0 = "^Y;wQ";
      arrayList0.add("^Y;wQ");
      simpleNode0.jjtSetParent(simpleNode2);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild(simpleNode2, 86);
      simpleNode0.jjtGetChild(86);
      simpleNode0.jjtAddChild(simpleNode2, 1602);
      arrayList0.add("<<");
      simpleNode1.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(2146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1475);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1475
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1695);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1695, 1695, 1695);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      simpleNode0.parser = javaParser0;
      simpleNode0.jjtAddChild((Node) null, 65);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-30));
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.mark((-30));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.close();
      bufferedInputStream0.available();
      byteArrayInputStream0.skip((-803L));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream0.skip((byte)15);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      sequenceInputStream0.close();
      sequenceInputStream0.read(byteArray0);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      sequenceInputStream1.close();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      sequenceInputStream4.read(byteArray0);
      sequenceInputStream4.available();
      sequenceInputStream1.read(byteArray0);
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      sequenceInputStream2.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        simpleNode0.toString("G]p");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|f");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 65, 65);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.jjmatchedKind = (-1);
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2508158349996463
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("*lt");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      stringWriter0.close();
      simpleNode0.dump("YHSPvn:>V6a", stringWriter0);
      assertEquals("<PackageDeclaration>\n  <identifier>=</identifier>\n  <identifier>*lt</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("E*N\"NpHb[R\"JO~#f#2J");
      assertEquals("E*N\"NpHb[R\"JO~#f#2JPackageDeclaration : = : *lt", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.mark(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byteArrayInputStream0.skip((-803L));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream2.skip((byte)15);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      sequenceInputStream3.close();
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream2.available();
      sequenceInputStream1.read(byteArray0);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      sequenceInputStream4.read(byteArray0, (-1), 45);
      sequenceInputStream4.available();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      JavaParser javaParser0 = new JavaParser("]losO_5i^/]`E/4(/C");
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringReader stringReader0 = new StringReader(">>");
      simpleNode0.jjtAddChild(simpleNode0, 10);
      simpleNode0.jjtAddChild(simpleNode0, 10);
      assertEquals(11, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2757));
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2757));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.442093355162183
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expression");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-117);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1933), (-1933));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParser0.StatementExpressionList();
      int int0 = 739;
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line -1933, column -1925.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}
