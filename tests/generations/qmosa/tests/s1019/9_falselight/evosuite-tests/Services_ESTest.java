/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 20:50:04 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://EqL0.d[7kChZo?pm:2539");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "M} kXemuhX_");
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("EqL0.d[7kChZo?pm", 2539);
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      services_HTTP_Result0.toString();
      assertEquals(12, services_HTTP_Result0.page_weight);
      
      services_SIMPLE_Result0.toString();
      services_HTTP_Result0.reset();
      services_SIMPLE_Result1.reset();
      services_HTTP_Result0.toString();
      services_SIMPLE_Result0.toString();
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result1.code);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 24);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-32);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3(" octets\n", (byte)24);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://=ulFBAPhc{7dd\\waA");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "=ulFBAPhc{7ddwaA");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("=ulFBAPhc{7ddwaA", (-1));
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 24);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-72);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, "");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Services.testPOP3("", 59);
      Services.testSMTP("c/]ko6/?7(#Q~^He4vR", (byte)24);
      System.setCurrentTimeMillis((-4139L));
      System.setCurrentTimeMillis((byte)24);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, 0);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("lI%DVm", (-1959));
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 455);
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      services_HTTP_Result0.reset();
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result2 = new Services.SIMPLE_Result();
      services_SIMPLE_Result2.reset();
      services_SIMPLE_Result0.reset();
      String string1 = services_SIMPLE_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(781L);
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP(".(;NcpFf&IdkORVny", 6);
      services_SIMPLE_Result0.reset();
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis(781L);
      System.setCurrentTimeMillis(2191L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis(781L);
      System.setCurrentTimeMillis(2380L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(29);
      System.setCurrentTimeMillis(29);
      System.setCurrentTimeMillis(29);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(29);
      System.setCurrentTimeMillis(2693L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(29);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2693L);
      System.setCurrentTimeMillis(2191L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(6L);
      System.setCurrentTimeMillis((-3546L));
      System.setCurrentTimeMillis(2380L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(176L);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 0);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("v!Qy=3ja ZcA}R", (-1));
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services services0 = new Services();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("hHUONIi3", (-213));
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-1447));
      System.setCurrentTimeMillis((-1447));
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3(";MN/TfxMAX6", (-1447));
      services_SIMPLE_Result0.toString();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-1447));
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-1447));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis(467L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(467L);
      System.setCurrentTimeMillis(73L);
      System.setCurrentTimeMillis(467L);
      System.setCurrentTimeMillis(3537L);
      System.setCurrentTimeMillis(1091L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", 2202);
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **.\n****", string0);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      String string1 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      assertEquals(0L, services_SIMPLE_Result1.time);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("_>2Fm5tbQPG3$s?", (-1854));
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.code);
  }
}
