/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 14:35:59 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " (", false, stringArray0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT \" (\" UNIQUE (, , , , , , )", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Bytes", ", ", ", ");
      assertEquals("Bytes", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "NULL_FLAG", "alter indexcan't register plugin");
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lkkujV6b\u0000Xgg_s?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("setParameterValueSet", defaultDBTable0, 526, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7=]'%~R2");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("()", defaultDBTable0, (-359113434), "Can't register plugin");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("7=]'%~R2", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = SQLUtil.removeComments("'7=]'%~R2'");
      assertEquals("'7=]'%~R2'", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("'d|3_[_;kqP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "<$wd[X");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) "42Y46");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("G04Kx6EKx.+#mv/?U&T", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("em92r-;", (String[]) null, "7=]'", "WW'kJw", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create tableg", stringArray1, " DEFAULT ", "drop materialized view", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.join("SFz", "ORGANIZATION", stringArray0, "", "ORGANIZATION", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", "01S00", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("u-U%", stringArray1, "CONSTRAINT getClob(Sring)CHECK  NOT NULL", "v&E^&g", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("execselece\"to");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("x|^2`2ibJ[\"f", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("UNIQUE (&yj#d,w }ef, , &yj#d,w }ef, &yj#d,w }ef, &yj#d,w }ef)", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("'E#wX8C2IJZhkl\"urn$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertselect into", dBSchema0);
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ya_f& ~QfV/V~U<ylk", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("select int");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("select intCONSTRAINT \"ya_f& ~QfV/V~U<ylk\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableexecvarchar");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'E#wX8C2IJZhkl\"urn$", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("'E#wX8C2IJZhkl\"urn$");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("'E#wX8C2IJZhkl\"urn$", stringBuilder1.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tablecreate materialized vew43y52.u", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("'E#wX8C2IJZhkl\"urn$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertselect into", dBSchema0);
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ya_f& ~QfV/V~U<ylk", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("insertselect into");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("insertselect intoCONSTRAINT \"ya_f& ~QfV/V~U<ylk\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("H34Jo{E~hrT=GMU", "H34Jo{E~hrT=GMU", (String[]) null, "g2RY[%", "delete", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("<$wd[X");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select &rto");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callupdatablebycursor");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(">");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select intoselect into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("SOME");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter indexselece\"to");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("exenuKte");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execvarchar");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("_n;l%A9kix1'U2bw;");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tablecreate materialized vew43y52.u");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Character character0 = Character.valueOf('w');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'w'", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.renderValue("\"2x\"GT");
      assertEquals("'\"2x\"GT'", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-2604), "pEY&$");
      StringBuilder stringBuilder0 = new StringBuilder(17);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pEY&$", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("PEY&$(0,0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-2604), "pEY&$");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pEY&$", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("PEY&$(0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-2604), "pEY&$");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pEY&$", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("pEY&$ PEY&$(0) NULL", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Ea(-d)?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("`41e9dw");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , )", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized view\" FOREIGN KEY (, , , , , , ) REFERENCES null(, , , , , , )", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("?jv;", stringArray0);
      assertEquals("?jv;.null, ?jv;.null, ?jv;.null, ?jv;.null, ?jv;.null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-1), byteArray0, (byte) (-21));
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = SQLUtil.normalize("\"Jri4+o|jB-8", false);
      assertEquals(" \"Jri4+o|jB-8\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = SQLUtil.normalize("Y9-/g&Zd<$L^ncrx4", true);
      assertEquals("Y9 - / g & Zd < $ L ^ ncrx4", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = SQLUtil.normalize("}a{or>.6pj7UmlhhB.", true);
      assertEquals("} a { or >.6pj7UmlhhB.", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = SQLUtil.normalize("`g,gIw`+", true);
      assertEquals("` g, gIw ` +", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize("5)XRClFxC**6@Mq!!", true);
      assertEquals("5) XRClFx  C * * 6 @ Mq ! !", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = SQLUtil.normalize("N;o/'Dm'[e`!r`_", true);
      assertEquals("N ; o / 'Dm' [ e ` ! r  ` _", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("Ea(?", false);
      assertEquals("Ea (?", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'E#wX8C2IJZhkl\"urn$");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container 'E#wX8C2IJZhkl\"urn$", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tablecreate materialized vew43y52.u", false, defaultDBTable0, "exenuKte");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"alter tablecreate materialized vew43y52.u\" ", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<$wd[X");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "3Q", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&yj#d,w }ef");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getName());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBSchema dBSchema0 = new DBSchema("5-u");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5-u", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("INOUT");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("INOUT", stringBuilder1.toString());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("xt_}b}pkn6");
      DBSchema dBSchema0 = new DBSchema("create materialized view`41e9dw[0rpj|+8bw", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence("R)N_>s", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("create materialized view`41e9dw[0rpj|+8bw.R)N_>s", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("deletehl");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("deletehl", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{ TMUJ (DCCwIy ");
      SQLUtil.addOptionalCondition("N;o/'Dm'[e`!r`_", stringBuilder0);
      assertEquals("{ TMUJ (DCCwIy  or N;o/'Dm'[e`!r`_", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SQLUtil.addOptionalCondition("Commit called with current xid", stringBuilder0);
      assertEquals("Commit called with current xid", stringBuilder0.toString());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{ TMUJ (DCCwIy ");
      SQLUtil.addRequiredCondition("select", stringBuilder0);
      assertEquals("{ TMUJ (DCCwIy  and select", stringBuilder0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addRequiredCondition("\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", stringBuilder0);
      assertEquals("\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", stringBuilder0.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "org.apache.derby.impl.io.JarStorageFactory", "org.apache.derby.iapi.sql.ParameterValueSet", stringArray0);
      assertEquals("org.apache.derby.impl.io.JarStorageFactory as org.apache.derby.iapi.sql.ParameterValueSet on null.null = org.apache.derby.iapi.sql.ParameterValueSet.null and null.null = org.apache.derby.iapi.sql.ParameterValueSet.null and null.null = org.apache.derby.iapi.sql.ParameterValueSet.null and null.null = org.apache.derby.iapi.sql.ParameterValueSet.null and null.null = org.apache.derby.iapi.sql.ParameterValueSet.null and null.null = org.apache.derby.iapi.sql.ParameterValueSet.null", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT G04Kx6EKx.+#mv/?U&T UNIQUE (, , , , , , )", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , ) REFERENCES null(, , , , , , )", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "c!oVA{I!", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT c!oVA{I! UNIQUE (, , , , , , )", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , )", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8775242811493906
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("executen;o/'dm'[e`!r`_");
      assertNull(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select] &rto");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique index");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session`41e9dw[0rpj|+8bw");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "c!oVA{I!";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, (-827), "deleteya_f& ~qfv/v~u<ylk");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("alter tableDELETEYA_F& ~QFV/V~U<YLK", stringBuilder0.toString());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-2604), "pEY&$");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pEY&$", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("CONSTRAINT c!oVA{I! UNIQUE (, , , , , , )");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("pEY&$ PEY&$(0) DEFAULT CONSTRAINT c!oVA{I! UNIQUE (, , , , , , ) NULL", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7=]'%~R2");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-359113434), "Can't register plugin");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(34, "TqQP)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("MKb_", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("MKb_, MKb_, MKb_", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4680602034990462
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("G04Kx6EKx.+#mv/?U&T", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execoq_%o");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3143738430069454
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<$wd[X");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "5-u", false, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop table");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("<$wd[X", defaultDBTable0.getName());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.3667110520552042
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<$wd[X");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop table");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("<$wd[X", defaultDBTable0.getName());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.9701157839869381
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(406, "");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Ea(?", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(550);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(49, rowOutputBinary0.size());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("E>(8O~d?Yft&7WT?", (DBTable) null, 1034, "(?a)yt>ha9w");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Ea(?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Ea(?
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT 5-u UNIQUE (, , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tablecreate materialized vew43y52.u", false, defaultDBTable0, "exenuKte");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK exenuKte", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-4607), "As)");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("AS)(2)", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.innerJoin("", stringArray0, "Kx^Ko4>}N=Rp?F*sh", "24N", stringArray0);
      assertEquals("Kx^Ko4>}N=Rp?F*sh as 24N on .null = 24N.null and .null = 24N.null and .null = 24N.null and .null = 24N.null and .null = 24N.null and .null = 24N.null and .null = 24N.null and .null = 24N.null and .null = 24N.null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Character character0 = new Character('X');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("selectselect &rto", (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("42Z9A", stringArray0, "I`,E%cmep'E", "selece\"", stringArray0);
      assertEquals("left join I`,E%cmep'E as selece\" on 42Z9A.null = selece\".null and 42Z9A.null = selece\".null and 42Z9A.null = selece\".null and 42Z9A.null = selece\".null and 42Z9A.null = selece\".null and 42Z9A.null = selece\".null and 42Z9A.null = selece\".null and 42Z9A.null = selece\".null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("MKb_", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement("TqQP)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("MKb_", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<$wd[X");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "3Q", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 3Q UNIQUE (, , , , )", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
