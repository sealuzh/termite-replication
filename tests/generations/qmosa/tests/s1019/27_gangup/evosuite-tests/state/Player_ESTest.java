/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 21:06:11 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.129136505599779
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(2026);
      player0.setX(2026);
      player0.setDead();
      Player player1 = new Player(559, "^z:=C", "^z:=C", (short)4919, (short)4919);
      player1.next = (Party) player0;
      player0.setConnected(true);
      player1.setJoinOK(player0, false);
      byte[] byteArray0 = player1.pack();
      player0.getIP();
      Player player2 = new Player((-21494), "", "0.0.0.0", (-1191));
      player2.setJoinOK(player0, false);
      player1.isJoinOK(player0, true);
      player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1280), 559);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player2.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-4370), "", (-4370));
      player0.setConnected(true);
      player0.setX((-4370));
      player0.gangStrength();
      System.setCurrentTimeMillis((short)4919);
      Player player1 = new Player(564);
      player0.boss = (Party) player1;
      player0.setY(0.0F);
      player0.gangStrength();
      player0.setJoinOK(player1, false);
      player0.getX();
      player0.gangStrength();
      int int0 = player0.type();
      assertEquals((-4370.0F), player0.getX(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4365024712299324
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-173), "w&atXmVx~fczFD", "]U.vG", 322, 322);
      Player player1 = new Player(3112, "/kprXjF4bn|(^*oE^", "]U.vG", (-173), 3112);
      player1.setConnected(false);
      player0.setJoinOK(player1, true);
      int int0 = Packable.PLAYER;
      player1.next = (Party) player0;
      player1.pack();
      player0.getIP();
      player1.setX(1222.23F);
      player1.isJoinOK(player1, true);
      player0.getZ();
      player0.setDead();
      Player player2 = new Player((short)4919);
      player1.setMoney(0.1F);
      player2.setConnected(false);
      player0.setZ(0.1F);
      player2.setDead(223L, true);
      player2.type();
      player0.type();
      player0.getZ();
      player2.pack();
      int int1 = player0.type();
      assertTrue(player0.isDead());
      assertEquals(5, int1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(0, ".#cVu{?Zv%m~!!U5>,2", "J}&W;*Id!bhy68-J{f", 4919, 10);
      Player player1 = new Player();
      player0.setMoney((short)4919);
      player0.isJoinOK(player1, true);
      player0.setJoinOK(player1, false);
      player0.remove(player1);
      Player player2 = new Player(0, "Pl^yer.unpack(): *** WARNING *** data is Vot oD proper type!", "ZsjI", Integer.MAX_VALUE);
      player2.getZ();
      player0.getMoney();
      player0.getStrength();
      player1.pack();
      player2.setX(1101.32F);
      player1.getName();
      player1.isJoinOK(player2, false);
      assertEquals(1101.32F, player2.getX(), 0.01F);
      assertEquals(0.0F, player1.getZ(), 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 5;
      Player player0 = new Player(5, "Pl^yer.unpack(): *** WARNING *** data is Vot oD proper type!", 0);
      boolean boolean0 = true;
      player0.setConnected(true);
      int int1 = 1318;
      String string0 = "KX4L";
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.322575046183876
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      player0.setZ((-1.0F));
      int int0 = 0;
      Player player1 = new Player((-1), "3b7\"e-v<G", 0);
      player1.setJoinOK(player0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player1.pack();
      player1.getIP();
      Player player2 = new Player(954, "0.0.0.0", 0);
      player2.setX(2206.4934F);
      Player player3 = new Player(0, "\".~qn`hv_H[TU*x\"+7", "", 1, 1);
      player0.isJoinOK(player3, true);
      player2.getZ();
      player3.next = (Party) player0;
      player3.setDead();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player2.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(747, (String) null, "module.ModuleBrowserDialog$ModuleFilter", 747, 0);
      int int0 = player0.gangStrength();
      assertEquals(0, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(747, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2090394390658616
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(2026);
      player0.setX(2026);
      player0.setDead();
      Player player1 = new Player(559, "^z:=C", "^z:=C", (short)4919, (short)4919);
      player1.next = (Party) player0;
      player0.setConnected(true);
      player1.setJoinOK(player0, false);
      player1.pack();
      player0.getIP();
      player0.setX(559);
      player1.isJoinOK(player0, true);
      player1.getZ();
      player0.setDead();
      player0.getIP();
      Player player2 = new Player((short)4919);
      player2.setConnected(true);
      System.setCurrentTimeMillis(1392409296344L);
      player1.isJoinOK(player0, false);
      long long0 = player0.getTimeOfDeath();
      assertTrue(player0.isDead());
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-654), "b;qeLL(}Y'#", "{LPTY^/K", 0, (-654));
      player0.setConnected(false);
      player0.setZ(10.0F);
      player0.toString();
      Player player1 = new Player((-654));
      player0.isJoinOK(player1, false);
      player1.setJoinOK(player0, false);
      player1.remove(player0);
      player0.getZ();
      float float0 = Player.MOVE_DISTANCE;
      player0.getStrength();
      player1.pack();
      player0.setX(0.2F);
      player0.getName();
      Player player2 = new Player(1914, "{LPTY^/K", 23656);
      boolean boolean0 = player0.isJoinOK(player2, true);
      assertEquals(0.2F, player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9131946191392957
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      player0.setZ((-1.0F));
      Player player1 = new Player((-1), "3b7\"e-v<G", 0);
      player1.setDead();
      player0.setJoinOK(player1, true);
      player1.isJoinOK(player0, true);
      player0.getZ();
      player0.setDead();
      player0.getIP();
      Player player2 = new Player((short)4919);
      player0.isJoinOK(player1, false);
      assertEquals(1392409281320L, player1.getTimeOfDeath());
      
      String string0 = player2.getName();
      assertEquals("Player4919", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      player0.getX();
      Party party0 = new Party((short)4919);
      player0.head = party0;
      Player player1 = new Player(1, (String) null, "state.Player", 1);
      player0.prev = (Party) player1;
      System.setCurrentTimeMillis(1L);
      player0.pack();
      player0.prev.add(player1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.add(player0.prev);
      player0.setY(1L);
      player0.getX();
      player0.getX();
      player1.setZ((short)4919);
      player1.getX();
      System.setCurrentTimeMillis((short)4919);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(404, (String) null, (String) null, 404, 404);
      player0.getTimeOfDeath();
      System.setCurrentTimeMillis((-1305L));
      Party party0 = player0.next;
      player0.add((Party) null);
      Player player1 = new Player(2417);
      player0.boss = (Party) player1;
      player1.setDead();
      player0.isJoinOK(player1, true);
      player0.getMoney();
      player1.getMoney();
      player1.getTimeOfDeath();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player1.pack();
      player0.getMoney();
      System.setCurrentTimeMillis((-1L));
      player1.getMoney();
      player1.type();
      assertEquals((-1305L), player1.getTimeOfDeath());
      
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.26315475997563
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(2026);
      player0.setX(2026);
      player0.setDead();
      Player player1 = new Player(559, "^z:=C", "^z:=C", (short)4919, (short)4919);
      player1.next = (Party) player0;
      Party party0 = new Party();
      player1.remove(party0);
      player1.setJoinOK(player0, false);
      player1.pack();
      player0.getIP();
      Player player2 = new Player((-946), (String) null, (-780));
      player1.setJoinOK(player2, true);
      player2.isJoinOK(player1, true);
      player1.pack();
      player1.getIP();
      player2.getName();
      player1.getX();
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3302170033301373
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(2026);
      player0.setX(2026);
      player0.setDead();
      Player player1 = new Player(559, "^z:=C", "^z:=C", (short)4919, (short)4919);
      player1.next = (Party) player0;
      player0.setConnected(true);
      player1.setZ((-292.9F));
      player1.setJoinOK(player0, false);
      player1.pack();
      player0.getIP();
      player0.setX(559);
      player1.isJoinOK(player0, true);
      player1.getZ();
      player0.setDead();
      player0.getIP();
      Player player2 = new Player((short)4919);
      player2.setY(0.1F);
      player2.setConnected(true);
      System.setCurrentTimeMillis(1392409296320L);
      player1.isJoinOK(player0, false);
      long long0 = player0.getTimeOfDeath();
      assertEquals(559.0F, player0.getX(), 0.01F);
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-1214L);
      System.setCurrentTimeMillis((-1214L));
      System.setCurrentTimeMillis((-1214L));
      Player player0 = new Player(4, (String) null, (String) null, 1);
      player0.getZ();
      player0.setDead();
      player0.getIP();
      Player player1 = new Player(4);
      int int0 = 1103;
      Player player2 = new Player(1103, (String) null, 23656);
      player1.setDead((-1L));
      player1.getSubparty();
      MockFile mockFile0 = new MockFile("V,cGL{zjM]*/cC", "V,cGL{zjM]*/cC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      String string0 = "";
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, "+*n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +*n
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(810, ":wpix{:", "gui.ModuleBrowserDialog$ModuleFilter", (-11749), (-11749));
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-39);
      byteArray1[6] = (byte) (-87);
      byteArray1[7] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      player0.unpack(dataInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      player0.getIP();
      player0.getZ();
      player0.setDead();
      player0.getIP();
      Player player1 = new Player(5);
      player0.getName();
      long long0 = player0.getTimeOfDeath();
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3831253810845707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((-1), "module.ModuleBrowserDialog$ModuleFilter", (-1));
      player0.setMoney((-1));
      player0.isConnected();
      player0.setY((-1));
      player0.getSubparty();
      player0.getMoney();
      player0.setY(0L);
      player0.setDead(0L);
      player0.pack();
      player0.setConnected(false);
      player0.setDead();
      player0.toString();
      player0.getX();
      player0.setDead(0L, false);
      Player player1 = new Player((-1), "module.ModuleBrowserDialog$ModuleFilter", (-4841));
      player1.setY((-1));
      player0.isJoinOK(player1, true);
      player0.getZ();
      player0.setY(0.0F);
      player0.setDead(0L, false);
      player0.setDead();
      player0.getX();
      player1.isConnected();
      player1.isJoinOK(player0, true);
      player1.setZ(0.0F);
      player1.setX(0.0F);
      player1.getX();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5211797582389175
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      player0.setY(528.81586F);
      player0.setDead((long) (short)4919);
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player((-1), (String) null, (-24822));
      player1.setConnected(true);
      player1.setDead();
      player1.toString();
      player1.getX();
      Player player2 = new Player((-4841), (String) null, (short)4919);
      player2.boss = (Party) player1;
      player0.setDead();
      player2.setY(5325.638F);
      player1.setX(0.2F);
      player1.isJoinOK(player0, false);
      Player player3 = new Player((-4841), " ", (String) null, (-5120));
      player1.setZ(0.0F);
      player3.unpack(byteArray0);
      player1.getY();
      player0.gangStrength();
      player3.type();
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.setY((-1));
      player0.getY();
      Player player1 = new Player((-1), "3b7\"e-v<G", 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-64), 0);
      byteArrayInputStream0.markSupported();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 4919, (int) (short)4919);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(5, ":S{Jvb\"yD", 3355);
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
      
      Player player2 = new Player(4919, ":S{Jvb\"yD", (-24822));
      Player player3 = new Player(4473, ":S{Jvb\"yD", 0);
      boolean boolean1 = player3.isJoinOK(player2, false);
      assertFalse(player3.isDead());
      assertFalse(boolean1 == boolean0);
      assertEquals("0.0.0.0", player3.getIP());
      assertEquals(1, player3.getStrength());
      assertTrue(player3.isConnected());
      assertEquals((-24822), player2.getPictureId());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((-173), "w&atXmVx~fzFED", "", 0, 0);
      player0.setConnected(false);
      player0.setZ(31.838425F);
      player0.toString();
      Player player1 = new Player((short)4919);
      player0.isJoinOK(player1, true);
      player0.setJoinOK(player1, false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, (byte)10);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (int) (byte) (-94), (int) (short)4919);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.206278279378793
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((-173), "w&atXmVx~fczFn", "]U.vG", 0, 0);
      player0.setConnected(false);
      player0.setZ(0.0F);
      player0.toString();
      Player player1 = new Player((short)4919);
      player0.isJoinOK(player1, true);
      player0.setJoinOK(player1, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      player1.remove(player0);
      player0.getZ();
      float float0 = Player.MOVE_DISTANCE;
      player0.getStrength();
      player1.pack();
      player1.setY(0.0F);
      player0.setX(0.0F);
      player1.getName();
      player0.isJoinOK(player1, true);
      player1.isJoinOK(player0, true);
      assertFalse(player0.isConnected());
      assertEquals(0.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(2582, "}+/h\"", 18175);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(810, ":wpix{:", "gui.ModuleBrowserDialog$ModuleFilter", (-11749), (-11749));
      player0.pack();
      player0.getPictureId();
      Player player1 = new Player((short)4919, "gui.ModuleBrowserDialog$ModuleFilter", "", (-937));
      player0.isJoinOK(player1, false);
      Player player2 = new Player(258, "", "goi|@hUl2|r", 3095, 2);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player1.unpack(dataInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-2951));
      Player player1 = new Player(744, "-m", (short)4919);
      player0.setJoinOK(player1, false);
      player1.getPictureId();
      player1.pack();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.CHINA;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("-m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: -m
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (-255));
      Locale locale0 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CANADA;
      locale1.getUnicodeLocaleKeys();
      locale0.getDisplayName(locale1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1, locale_FilteringMode1);
      player0.setConnected(false);
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6930121983106288
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      Player player1 = new Player((-1), "3b7\"e-v<G", 0);
      player1.setConnected(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-114);
      player1.unpack(byteArray0);
      player0.setJoinOK(player1, true);
      player0.setConnected(true);
      player0.setJoinOK(player1, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0, player1.getPictureId());
      assertTrue(boolean0);
      
      player0.setY(0.0F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.toString());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(1);
      Player player1 = new Player();
      player0.add(player1);
      assertEquals("Player-1", player1.toString());
      
      int int0 = player0.gangStrength();
      assertEquals(0, player0.getPictureId());
      assertEquals(2, int0);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-2951));
      Player player1 = new Player(744, "", 0);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals("Player-2951", player0.toString());
      
      Player player2 = new Player(2254, "=TI|fT!^FN !QH", (-1));
      assertEquals((-1), player2.getPictureId());
      
      Player player3 = new Player(744, "", 0);
      boolean boolean1 = player1.isJoinOK(player3, false);
      assertEquals("0.0.0.0", player3.getIP());
      assertEquals(1, player3.getStrength());
      assertTrue(player3.isConnected());
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertFalse(player3.isDead());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-708), "", "", (-708), (-708));
      player0.gangStrength();
      System.setCurrentTimeMillis((-4438L));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Player player0 = new Player(10806, ",_X", ",_X", (-1957), 723);
      int int0 = player0.gangStrength();
      assertEquals(723, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-1957), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis((-1214L));
      System.setCurrentTimeMillis((-1214L));
      Player player0 = new Player(5);
      Player player1 = new Player((short)4919, "", 497);
      player1.getName();
      System.setCurrentTimeMillis((-1890L));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-2951));
      Player player1 = new Player(744, "", 0);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      player1.getPictureId();
      player1.pack();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.CHINA;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9108636168082933
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.getY();
      Player player1 = new Player((-1), "3b7\"e-v<G", "3b7\"e-v<G", (short)4919, (short)4919);
      player1.boss = (Party) player0;
      player0.isJoinOK(player1, true);
      player1.setJoinOK(player0, false);
      player1.remove(player0);
      player0.getZ();
      player1.getMoney();
      player1.getStrength();
      player0.setX(0.0F);
      player0.getName();
      player1.isJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0.0F, player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale locale0 = new Locale("");
      linkedList0.add(locale0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList0, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      Player player0 = new Player(2, "%h`Pp2R)/<", 1);
      Player player1 = new Player(1, "yhfH'4IxXwL'hEs", "%h`Pp2R)/<", 1, 2);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(2, player1.getStrength());
      assertFalse(boolean0);
      assertTrue(player1.isConnected());
      assertEquals("yhfH'4IxXwL'hEs", player1.getIP());
      assertEquals(1, player0.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Player player0 = new Player((-15614), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-1957));
      player0.unpack(dataInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5211797582389175
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setZ(0);
      player0.setDead((long) 0);
      player0.setMoney((-3614.8574F));
      player0.setY(0.0F);
      player0.setZ(0.0F);
      player0.getSubparty();
      player0.setZ(0);
      player0.gangStrength();
      player0.getStrength();
      player0.getPictureId();
      player0.setX(0.0F);
      player0.setMoney(0);
      player0.setDead((long) 0, true);
      player0.setConnected(false);
      player0.setDead((long) 1);
      player0.setZ(0.0F);
      player0.setDead((long) 0);
      player0.setMoney((-1236.5001F));
      player0.getZ();
      player0.setZ(0.0F);
      player0.getPictureId();
      player0.isConnected();
      Player player1 = new Player(1, " ", " ", 0, 0);
      player0.setJoinOK(player1, true);
      player0.getTimeOfDeath();
      player0.getIP();
      player0.setDead((long) 0, false);
      player0.type();
      int int0 = player0.type();
      assertFalse(player0.isConnected());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(1318, "JxtZ D<*]NyVWQH5@(", "KX4L", (byte) (-1), 552);
      Player player1 = new Player(5);
      player1.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertTrue(player1.isConnected());
      assertEquals("JxtZ D<*]NyVWQH5@(", player0.getIP());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0, player1.getPictureId());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player5", player1.toString());
      assertEquals((-1), player0.getPictureId());
      assertEquals(552, player0.getStrength());
      assertEquals(1, player1.getStrength());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((-80), "x@FAhZ+En^)", "x@FAhZ+En^)", (-80));
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      assertEquals(1, player1.getStrength());
      assertEquals((-80), player0.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player-1", player1.toString());
      assertEquals(0, player1.getPictureId());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis((-1214L));
      Player player0 = new Player(0, "(z``", 2310);
      long long0 = player0.getTimeOfDeath();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(2310, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0L, long0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player((-1), "module.ModuleBrowserDialog$ModuleFilter", (-1));
      player0.setMoney((-1));
      player0.isConnected();
      player0.setY((-1));
      player0.getSubparty();
      player0.getMoney();
      player0.setMoney((-1.0F));
      player0.setY(0L);
      Player player1 = new Player((-1), "gui.ModuleBrowserDialog$ModuleFilter", (short)4919);
      player0.setConnected(true);
      player0.setJoinOK(player1, true);
      player1.isJoinOK(player0, true);
      float float0 = player0.getMoney();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L);
      Player player1 = new Player((short)4919, "gui.ModuleBrowserDialog$ModuleFilter", "]?NN>OYU8C,u:`3_q%e", (short)4919, (short)4919);
      player1.setDead();
      player0.remove(player1);
      assertEquals(1392409281320L, player1.getTimeOfDeath());
      
      player0.setConnected(true);
      boolean boolean0 = player0.isDead();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-2951));
      boolean boolean0 = player0.isDead();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals("Player-2951", player0.getName());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1175);
      String string0 = "/G";
      Player player0 = new Player((-1175), "/G", "/G", (-1175), 0);
      player0.getY();
      player0.getX();
      player0.id = 0;
      player0.setZ(0.0F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      player0.unpack(byteArray0);
      player0.getZ();
      player0.setDead();
      player0.getX();
      player0.setDead(1941L);
      String string1 = "M3n0*P6";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(3, "Player", 3);
      player0.setX(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      bufferedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      player0.getSubparty();
      player0.getZ();
      System.setCurrentTimeMillis(4919L);
      Player player1 = new Player((short)4919, "Player", "Player", 1557, 1557);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(3.0F, player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(0, "module.ModuleBrowserDialog$ModuleFilter", 4919);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(4919, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player();
      player0.getY();
      Player player1 = new Player((-1), "3b7\"e-v<G", 0);
      player1.reset(true);
      player1.setX(0.1F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player1.isJoinOK(player0, false);
      player0.getZ();
      player0.setDead();
      player0.getIP();
      Player player2 = new Player(4919);
      Player player3 = new Player();
      player3.setY((-1));
      player0.setConnected(false);
      System.setCurrentTimeMillis(1392409296320L);
      player3.isJoinOK(player2, true);
      long long0 = player0.getTimeOfDeath();
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player(3167, "P", "P", 0, 3167);
      player0.setMoney(0.0F);
      assertEquals(3167, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player((-1153), "y*0pr-)+XJ(:IOvL", "<", 3, 3);
      player0.reset(false);
      Player player1 = new Player((-152), "<", (-1153));
      player1.setJoinOK(player0, false);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player1.getStrength());
      assertEquals((-1153), player1.getPictureId());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals("y*0pr-)+XJ(:IOvL", player0.getIP());
      assertEquals(3, player0.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertFalse(boolean0);
      assertTrue(player1.isConnected());
  }
}
