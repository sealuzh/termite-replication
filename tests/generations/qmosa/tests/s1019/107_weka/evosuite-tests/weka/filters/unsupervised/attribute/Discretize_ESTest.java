/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 19:08:25 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.getAttributeIndices();
      discretize0.makeBinaryTipText();
      discretize0.attributeIndicesTipText();
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5155036049847972
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1vW7llS vL12^5";
      double[][] doubleArray0 = new double[16][1];
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(4);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("(-inf-0],(0-inf)", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unequal number of attributes!");
      Discretize discretize0 = new Discretize("Unequal number of attributes!");
      discretize0.setDesiredWeightOfInstancesPerInterval(1.0);
      Range range0 = new Range();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1994091956);
      Range.indicesToRangeList(intArray0);
      discretize0.m_DiscretizeCols = range0;
      discretize0.useBinNumbersTipText();
      System.setCurrentTimeMillis((-1L));
      discretize0.setBins((-492));
      discretize0.getFindNumBins();
      Random.setNextRandom(89);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      System.setCurrentTimeMillis(1L);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      System.setCurrentTimeMillis(1685L);
      int int0 = discretize0.getBins();
      assertEquals((-492), int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getMakeBinary();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      String string0 = "X$w_'{y\\sTM@/K(/Z";
      double double0 = 0.0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("X$w_'{ysTM@/K(/Z", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=x$w_'{ystm@/k(/z
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("\nClass name: ");
      discretize0.getAttributeIndices();
      discretize0.m_FindNumBins = true;
      discretize0.getBinRangesString(0);
      discretize0.getOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("Class name:", arrayList0, (-1840700267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1840700267
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "8qe;cA4[ZG";
      Discretize discretize0 = new Discretize("8qe;cA4[ZG");
      double[][] doubleArray0 = new double[1][1];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Unequal number of attributes!", arrayList0, 2060);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unequal number of attributes!");
      Discretize discretize0 = new Discretize("Unequal number of attributes!");
      discretize0.getCutPoints(125);
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.toString();
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-/B}MP'zHoIv*";
      stringArray0[1] = "-/B}MP'zHoIv*";
      stringArray0[2] = "Unequal number of attributes!";
      stringArray0[2] = "Lp";
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7985346891265666
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      double[][] doubleArray0 = new double[2][0];
      discretize0.toString();
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      range0.setRanges("sr&X{");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      discretize0.m_NumBins = 0;
      discretize0.getOptions();
      range0.setInvert(false);
      discretize0.useEqualFrequencyTipText();
      discretize0.globalInfo();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1349
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8816000070859373
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 976.812455898;
      discretize0.setOutputFormat();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sets the desired weight of instances per interval for equal-frequency binning.");
      discretize0.makeBinaryTipText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 976.812455898;
      doubleArray0[1] = 976.812455898;
      doubleArray0[2] = 976.812455898;
      doubleArray0[3] = 976.812455898;
      doubleArray0[4] = 976.812455898;
      doubleArray0[5] = 976.812455898;
      doubleArray0[6] = 976.812455898;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(976.812455898, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "+<";
      stringArray0[2] = "$svPC)NTry#";
      stringArray0[3] = "467,1505,2317,15,21,1,90,227";
      stringArray0[4] = "(-inf-";
      stringArray0[5] = "+cok.";
      stringArray0[6] = "\"position\" is nominal: ";
      stringArray0[7] = "pD/ZmL(tCMK";
      stringArray0[8] = "Fy*xI`^VbuQc+|S";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "8qe;cAO4F[4GM";
      Discretize discretize0 = new Discretize("8qe;cAO4F[4GM");
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("X].)?If");
      discretize0.m_UseBinNumbers = true;
      discretize0.toString();
      discretize0.globalInfo();
      discretize0.getUseBinNumbers();
      int int0 = 11;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "X].)?If";
      stringArray0[1] = "2.UVuGAfzR5#pJ>b@";
      stringArray0[3] = "weka.filters.unsupervised.attribute.Discretize";
      discretize0.binsTipText();
      stringArray0[4] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.204474713052522
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)21;
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = (double) (byte) (-26);
      doubleArray0[3] = (double) (byte)112;
      doubleArray0[4] = (double) (byte)21;
      doubleArray0[5] = (double) (byte) (-74);
      doubleArray0[6] = (double) (byte)112;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-54), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((byte)21);
      binarySparseInstance0.setMissing((int) (byte) (-54));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      
      Filter.runFilter(discretize0, (String[]) null);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.95906871129293
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("4:#Qqo5d");
      discretize0.setInvertSelection(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      discretize0.setUseEqualFrequency(true);
      discretize0.useBinNumbersTipText();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2060;
      doubleArray1[1] = (double) 2060;
      doubleArray1[2] = (double) 2060;
      doubleArray1[3] = (double) 2060;
      doubleArray1[4] = (double) 2060;
      doubleArray0[0] = doubleArray1;
      SystemInUtil.addInputLine("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-f/rcs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KE9oAbWo-nQp$2v1Thn");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      Discretize discretize1 = new Discretize("qRRNiJ D<@NY;\"V");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("9l8Z[!*+Nn-");
      int int0 = 125;
      discretize0.getCutPoints(125);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8232539857707217
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("9l8Z[!*+Nn-");
      discretize0.m_NumBins = (-2120300308);
      discretize0.getCutPoints(152);
      discretize0.setOutputFormat();
      Discretize discretize1 = new Discretize("9l8Z[!*+Nn-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9l8Z[!*+Nn-");
      double[][] doubleArray0 = new double[1][1];
      doubleArray0[0] = null;
      discretize1.setIgnoreClass(true);
      discretize0.getBinRangesString(152);
      discretize1.m_CutPoints = doubleArray0;
      discretize1.getOptions();
      discretize1.getFindNumBins();
      Filter.makeCopies(discretize1, 152);
      Discretize discretize2 = new Discretize("9l8Z[!*+Nn-");
      // Undeclared exception!
      try { 
        discretize2.findNumBins(79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(3810L);
      MockRandom mockRandom1 = new MockRandom(1L);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.nextFloat();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom3.nextGaussian();
      mockRandom1.nextDouble();
      mockRandom2.nextFloat();
      mockRandom2.nextBytes(byteArray0);
      mockRandom1.nextInt();
      mockRandom3.nextInt();
      mockRandom0.nextLong();
      mockRandom0.nextGaussian();
      mockRandom2.longs((long) 5, 3810L);
      mockRandom2.ints(0L);
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom4 = new MockRandom();
      mockRandom3.nextInt();
      mockRandom3.nextDouble();
      MockRandom mockRandom5 = new MockRandom();
      mockRandom5.longs(3810L);
      mockRandom4.nextGaussian();
      mockRandom3.nextDouble();
      mockRandom4.nextInt();
      mockRandom4.longs((long) 5);
      mockRandom5.nextLong();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom6.longs();
      MockRandom mockRandom7 = new MockRandom(0L);
      MockRandom mockRandom8 = new MockRandom();
      MockRandom mockRandom9 = new MockRandom(319L);
      Discretize discretize0 = new Discretize("fy&-Z\";`m`");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      Filter.makeCopies(discretize0, 2306);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1v7l}SvL11^5";
      double[][] doubleArray0 = new double[5][1];
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)88);
      MockRandom mockRandom1 = new MockRandom((byte)21);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.nextFloat();
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      mockRandom1.nextBytes(byteArray0);
      mockRandom1.nextInt();
      mockRandom0.ints(319L);
      mockRandom2.nextBytes(byteArray0);
      MockRandom mockRandom3 = new MockRandom((byte)88);
      mockRandom0.nextDouble();
      mockRandom1.nextInt();
      mockRandom1.longs(0L);
      mockRandom2.nextLong();
      mockRandom0.longs();
      MockRandom mockRandom4 = new MockRandom((byte)21);
      mockRandom0.ints();
      MockRandom mockRandom5 = new MockRandom((-1770L));
      Discretize discretize0 = new Discretize("dt8|{.");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)88);
      MockRandom mockRandom1 = new MockRandom((byte)21);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.nextFloat();
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      mockRandom1.nextBytes(byteArray0);
      mockRandom1.nextInt();
      mockRandom0.ints(319L);
      mockRandom2.nextBytes(byteArray0);
      MockRandom mockRandom3 = new MockRandom((byte)88);
      mockRandom0.nextDouble();
      mockRandom1.nextInt();
      mockRandom1.longs(0L);
      mockRandom2.nextLong();
      mockRandom0.longs();
      MockRandom mockRandom4 = new MockRandom((byte)21);
      mockRandom0.ints();
      MockRandom mockRandom5 = new MockRandom((-1770L));
      Discretize discretize0 = new Discretize("dt8|{.");
      Filter.makeCopy(discretize0);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.listOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Gi_c(=5QzN`##";
      stringArray0[1] = "first-last";
      stringArray0[2] = "dxpmCMOW2E|MNfKF%q";
      stringArray0[3] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[4] = "Y";
      stringArray0[5] = "-M";
      stringArray0[6] = "4%*15L%Rnni";
      stringArray0[7] = "weka.filters.unsupervised.attribute.Discretize";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)82;
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      Filter.runFilter(allFilter2, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, (String[]) null);
      Discretize discretize0 = new Discretize();
      AllFilter allFilter3 = new AllFilter();
      Filter.makeCopies(allFilter1, 2258);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getUseEqualFrequency();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      String string0 = "X$w_'{y\\sTM@/K(/Z";
      double double0 = 0.0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("X$w_'{ysTM@/K(/Z", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=x$w_'{ystm@/k(/z
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      Locale.getISOCountries();
      linkedList0.sort((Comparator<? super String>) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      String string0 = "X$w_'{y\\sTM@/K(/Z";
      discretize0.getUseBinNumbers();
      double double0 = 0.0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("X$w_'{ysTM@/K(/Z", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=x$w_'{ystm@/k(/z
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CANADA;
      Locale locale2 = Locale.FRENCH;
      Locale locale3 = Locale.CANADA;
      discretize0.getBins();
      Locale locale4 = Locale.JAPAN;
      Locale locale5 = Locale.CANADA_FRENCH;
      Locale locale6 = Locale.JAPANESE;
      locale6.getDisplayName(locale3);
      Set<String> set0 = locale4.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("-B <num>", (-2193));
      attribute0.addStringValue("-");
      Attribute attribute1 = new Attribute("integer");
      Discretize discretize0 = new Discretize("real");
      discretize0.getInvertSelection();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2060;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2060);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-499));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "8q;AO4F[GM";
      Discretize discretize0 = new Discretize("8q;AO4F[GM");
      double[][] doubleArray0 = new double[16][1];
      discretize0.m_CutPoints = doubleArray0;
      int int0 = (-2121918364);
      discretize0.setUseBinNumbers(false);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-2121918364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2121918364
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "+<";
      stringArray0[2] = "$svPC)NTry#";
      stringArray0[3] = "467,1505,2317,15,21,1,90,227";
      stringArray0[4] = "(-inf-";
      stringArray0[5] = "+cok.";
      stringArray0[6] = "\"position\" is nominal: ";
      stringArray0[7] = "pD/ZmL(tCMK";
      stringArray0[8] = "Fy*xI`^VbuQc+|S";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(3810L);
      MockRandom mockRandom1 = new MockRandom(1L);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.nextFloat();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom3.nextGaussian();
      mockRandom2.ints(1L);
      mockRandom1.nextDouble();
      mockRandom2.nextFloat();
      mockRandom2.nextBytes(byteArray0);
      mockRandom1.nextInt();
      mockRandom2.ints(1L, 5, 211);
      mockRandom3.nextInt();
      mockRandom0.nextLong();
      mockRandom2.longs(1L, 3810L);
      mockRandom2.ints(0L);
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom4 = new MockRandom();
      mockRandom3.nextDouble();
      MockRandom mockRandom5 = new MockRandom();
      mockRandom5.longs(3810L);
      mockRandom4.nextInt();
      mockRandom4.longs((long) 5);
      mockRandom5.nextLong();
      MockRandom mockRandom6 = new MockRandom();
      mockRandom6.longs();
      MockRandom mockRandom7 = new MockRandom();
      Discretize discretize0 = new Discretize("tC<oi!VO!d0AO+");
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[8];
      intArray0[0] = (-502);
      intArray0[1] = 66;
      intArray0[2] = (-1879048189);
      intArray0[3] = (-2093796554);
      intArray0[4] = (-190);
      intArray0[5] = 597;
      intArray0[6] = 743;
      intArray0[7] = 66;
      discretize0.setAttributeIndicesArray(intArray0);
      Filter.runFilter(discretize0, (String[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      String string0 = "X$w_'{y\\sTM@/K(/Z";
      double double0 = 0.0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("X$w_'{ysTM@/K(/Z", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=x$w_'{ystm@/k(/z
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte)112;
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte) (-26);
      byteArray1[3] = (byte) (-54);
      byteArray1[4] = (byte) (-26);
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte) (-74);
      byteArray1[7] = (byte)11;
      mockRandom0.nextBytes(byteArray1);
      MockRandom mockRandom1 = new MockRandom((byte)112);
      mockRandom1.nextDouble();
      mockRandom1.nextInt();
      mockRandom0.longs(0L);
      mockRandom1.nextLong();
      mockRandom1.longs();
      mockRandom1.ints();
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((byte)2);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      discretize0.getOptions();
      discretize0.isNewBatch();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      discretize0.getCapabilities();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      String string0 = "X$w_'{y\\sTM@/K(/Z";
      double double0 = 0.0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("X$w_'{ysTM@/K(/Z", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=x$w_'{ystm@/k(/z
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 2060;
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)82;
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      Filter.runFilter(allFilter2, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(true);
      Filter.runFilter(allFilter0, (String[]) null);
      Filter.runFilter(multiFilter0, (String[]) null);
      Discretize discretize0 = new Discretize();
      AllFilter allFilter3 = new AllFilter();
      Filter.makeCopies(allFilter3, (byte)82);
      discretize0.getBinRangesString((byte) (-78));
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("p}UI4DdeZ2tLvyIl");
      discretize0.setAttributeIndices("p}UI4DdeZ2tLvyIl");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1664.5732893196139);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("!r^#*tzrY", arrayList1, 2129);
      Discretize discretize0 = new Discretize("@data");
      discretize0.setFindNumBins(false);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.isFirstBatchDone();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      StringReader stringReader0 = new StringReader("");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // premature end of file, read Token[EOF], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)82;
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      Filter.runFilter(allFilter3, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(allFilter1, (String[]) null);
      Filter.runFilter(allFilter2, (String[]) null);
      Discretize discretize0 = new Discretize();
      AllFilter allFilter4 = new AllFilter();
      Filter.makeCopies(allFilter3, 1476);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((byte)82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[5] = (byte)91;
      discretize0.m_FindNumBins = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setMakeBinary(false);
      discretize0.findNumBinsTipText();
      discretize0.binsTipText();
      Random.setNextRandom((byte)0);
      discretize0.useBinNumbersTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      System.setCurrentTimeMillis((byte)91);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Discretize discretize0 = new Discretize("\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <filename>\n\tThe file containing first input instances.\n-o <filename>\n\tThe file first output instances will be written to.\n-r <filename>\n\tThe file containing second input instances.\n-s <filename>\n\tThe file second output instances will be written to.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n");
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("8964", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.nextBytes(byteArray0);
      mockRandom1.nextFloat();
      MockRandom mockRandom3 = new MockRandom();
      mockRandom3.nextGaussian();
      mockRandom1.nextGaussian();
      mockRandom1.nextDouble();
      mockRandom2.nextFloat();
      mockRandom2.nextBytes(byteArray0);
      mockRandom2.nextInt();
      mockRandom3.nextInt();
      mockRandom0.nextLong();
      mockRandom0.nextGaussian();
      mockRandom3.longs((long) 8);
      mockRandom3.ints();
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom4 = new MockRandom(9);
      mockRandom3.nextInt();
      mockRandom3.nextDouble();
      MockRandom mockRandom5 = new MockRandom();
      mockRandom5.longs(3842L);
      mockRandom3.nextDouble();
      mockRandom4.nextInt();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "-`u>_s ,ur=dCn pI'";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      double[][] doubleArray0 = new double[22][1];
      discretize0.m_CutPoints = doubleArray0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("-`u>_s ,ur=dCn pI'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=-`u>_s ,ur=dcn pi'
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)88);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom1 = new MockRandom((byte)21);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.nextFloat();
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)88;
      mockRandom1.nextBytes(byteArray0);
      mockRandom1.nextInt();
      mockRandom0.ints(319L);
      mockRandom2.nextBytes(byteArray0);
      MockRandom mockRandom3 = new MockRandom((byte)88);
      mockRandom0.nextDouble();
      mockRandom1.nextInt();
      mockRandom1.longs(0L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'b";
      stringArray0[1] = "I$oB&kaMDtn`dx ";
      stringArray0[2] = "help";
      stringArray0[3] = "[2s{wrN |%@ry|";
      stringArray0[4] = ".A7AD@";
      Discretize.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)82;
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      Filter.runFilter(allFilter3, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(allFilter1, (String[]) null);
      Filter.runFilter(allFilter2, (String[]) null);
      Discretize discretize0 = new Discretize();
      AllFilter allFilter4 = new AllFilter();
      Filter.makeCopies(allFilter4, (byte)82);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1879048189));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Discretize discretize0 = new Discretize("Expected comma in range, found: ");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Random.setNextRandom(122);
      Discretize discretize0 = new Discretize("_Xu2S-@vl$hpHSNg");
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W)Jbst}dR)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[2s{wrN |%@ry|");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[1] = (byte)120;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)120;
      Discretize discretize0 = new Discretize("z'=>a.N\"o");
      discretize0.setOptions((String[]) null);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "yuNg/";
      int int0 = (-2106185898);
      Discretize discretize0 = new Discretize("yuNg/");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2106185898));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 1026.2;
      doubleArray0[1] = 1026.2;
      doubleArray0[2] = 1026.2;
      doubleArray0[3] = 1026.2;
      doubleArray0[6] = 1026.2;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getDisplayName(locale1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode2);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Predicate<String> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate0.or(predicate2);
      linkedList0.removeIf(predicate3);
      linkedList0.stream();
      linkedList0.pollFirst();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
