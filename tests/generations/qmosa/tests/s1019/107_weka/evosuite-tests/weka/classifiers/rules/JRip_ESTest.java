/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 19:31:19 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GreedyStepwise;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("Should nKver happen!", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute2 = new Attribute("@attribute", 3);
      Attribute attribute3 = attribute1.copy("relational");
      JRip jRip0 = new JRip();
      Attribute.typeToString(15);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tThe maximum length of the subsequence.\n\t(default: 9)", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute2);
      Instances instances1 = new Instances(instances0, 2);
      arrayList0.removeAll(arrayList1);
      attribute1.enumerateValues();
      ClassOrder classOrder1 = new ClassOrder();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "relational", instances0, instances0);
      Attribute attribute4 = new Attribute("numeric");
      attribute4.setWeight(2.0404331832321407);
      classOrder1.setClassOrder(4);
      attribute4.setStringValue("string");
      instances1.add((Instance) sparseInstance0);
      instances0.remove((Object) attribute4);
      classOrder1.getCapabilities(instances1);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances1, (-3116.8064), (-721.149587488971));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0431147124262137
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jRip0.listOptions();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setOptions((String[]) null);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("", (-1502));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      double double0 = 1492.00978265195;
      IBk iBk0 = new IBk();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7646308653001805
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("Should nKver happen!", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute2 = new Attribute("@attribute", 3);
      Attribute attribute3 = attribute1.copy("relational");
      JRip jRip0 = new JRip();
      Attribute.typeToString(15);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tThe maximum length of the subsequence.\n\t(default: 9)", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute1);
      Instances instances1 = new Instances(instances0, 2);
      arrayList0.removeAll(arrayList1);
      attribute1.enumerateValues();
      ClassOrder classOrder1 = new ClassOrder();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "relational", instances0, instances0);
      Attribute attribute4 = new Attribute("numeric");
      attribute4.setWeight(3);
      classOrder1.setClassOrder(4);
      attribute4.setStringValue("string");
      instances1.add((Instance) sparseInstance0);
      instances0.remove((Object) attribute4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      jRip_NominalAntd0.splitData(instances1, 2, 2);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("Should never happen!", (-5));
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      attribute1.copy("numeric");
      Attribute attribute2 = attribute1.copy("relational");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      assertTrue(jRip0.getUsePruning());
      
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tThe maximum length of the subsequence.\n\t(default: 9)", arrayList0, 349);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(instances0, 2);
      attribute1.enumerateValues();
      ClassOrder classOrder1 = new ClassOrder();
      Attribute attribute3 = new Attribute("@end", (List<String>) null);
      attribute3.setWeight(1.0);
      attribute3.equalsMsg(arrayList1);
      classOrder1.setClassOrder(4);
      attribute3.setStringValue("string");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-P";
      stringArray0[1] = "numeric";
      stringArray0[2] = "%u";
      stringArray0[3] = "integer";
      stringArray0[4] = "integer";
      stringArray0[5] = "string";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[0];
      decisionTable0.m_decisionFeatures = intArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      decisionTable4.m_classPriorCounts = doubleArray0;
      decisionTable4.setCrossVal(5);
      DecisionTable decisionTable5 = new DecisionTable();
      double[] doubleArray1 = new double[5];
      Evaluation evaluation0 = decisionTable3.m_evaluation;
      decisionTable3.m_evaluation = null;
      doubleArray1[0] = (-0.08637306329317845);
      doubleArray1[1] = (double) 3;
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-721.149587488971));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7496393746041248
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oLXySM0\"\" x!");
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      jRip0.usePruningTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("Whether pruning is performed.", (-2755));
      Attribute.typeToString(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      Attribute.typeToString((-1165));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The minimum total weight of the instances in a rule.");
      attribute0.equals(jRip0);
      Attribute attribute1 = attribute0.copy("Seed used to initialise the random number generator.Random numbers are used for setting the initial weights of the connections betweem nodes, and also for shuffling the training data.");
      jRip0.setCheckErrorRate(false);
      attribute0.addStringValue(attribute1, 4);
      jRip0.getCheckErrorRate();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.seedTipText();
      jRip0.checkErrorRateTipText();
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("Last value of copy: ", 67);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      Attribute.typeToString(2);
      ClassOrder classOrder0 = new ClassOrder();
      attribute1.copy("numeric");
      Attribute attribute2 = attribute1.copy("relational");
      Attribute attribute3 = new Attribute("@end");
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("5o?KJ/|6:w'0", arrayList0, 2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder classOrder1 = new ClassOrder();
      instances0.add((Instance) sparseInstance0);
      attribute0.copy("relational");
      attribute2.setStringValue("integer");
      Attribute.typeToString(attribute1);
      arrayList0.add(attribute2);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 4;
      intArray0[2] = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 4;
      doubleArray0[6] = 1899.7399174284744;
      doubleArray0[5] = (double) 3;
      DenseInstance denseInstance0 = new DenseInstance((-994.47), doubleArray0);
      sparseInstance0.mergeInstance(denseInstance0);
      intArray0[3] = (-1158);
      intArray0[4] = 1;
      intArray0[5] = 2;
      DenseInstance denseInstance1 = new DenseInstance(0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oLXySM0\"\" x!");
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      jRip0.usePruningTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.log2 = (-1729.7894469113626);
      jRip0.setFolds((-685));
      Attribute attribute0 = new Attribute("Whether pruning is performed.", (-2755));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The minimum total weight of the instances in a rule.");
      attribute0.equals(jRip0);
      Attribute attribute1 = attribute0.copy("Seed used to initialise the random number generator.Random numbers are used for setting the initial weights of the connections betweem nodes, and also for shuffling the training data.");
      attribute0.addStringValue(attribute1, 4);
      jRip0.getCheckErrorRate();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.seedTipText();
      int int0 = jRip0.getFolds();
      assertEquals((-685), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("Should nKver happen!", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute2 = new Attribute("@attribute", 3);
      attribute1.copy("relational");
      JRip jRip0 = new JRip();
      Attribute.typeToString(15);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tThe maximum length of the subsequence.\n\t(default: 9)", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute1);
      Instances instances1 = new Instances(instances0, 2);
      arrayList0.removeAll(arrayList1);
      attribute1.enumerateValues();
      ClassOrder classOrder1 = new ClassOrder();
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "relational", instances0, instances0);
      Attribute attribute3 = new Attribute("numeric");
      attribute3.setWeight(3);
      classOrder1.setClassOrder(4);
      attribute3.setStringValue("string");
      instances1.add((Instance) sparseInstance0);
      instances0.remove((Object) attribute3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances1, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getOptions();
      jRip0.checkErrorRateTipText();
      int int0 = (-73);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-73));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-248));
      jRip0.getOptimizations();
      int int0 = jRip0.getOptimizations();
      assertEquals((-248), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("Last value of copy: ", 9);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      Attribute attribute1 = new Attribute("NEQ0", protectedProperties6);
      attribute1.copy("");
      JRip jRip0 = new JRip();
      StringReader stringReader0 = new StringReader("pu");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      int[] intArray0 = new int[0];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)", arrayList0, 5);
      BallNode.calcCentroidPivot((-1), (-2694), intArray0, instances0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[0];
      decisionTable0.m_decisionFeatures = intArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable5 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable4);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      decisionTable4.m_classPriorCounts = doubleArray0;
      DecisionTable decisionTable6 = new DecisionTable();
      double[] doubleArray1 = new double[5];
      Evaluation evaluation0 = decisionTable3.m_evaluation;
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      decisionTable0.printFeatures();
      doubleArray1[3] = (double) 4;
      decisionTable0.m_useIBk = true;
      doubleArray1[4] = (double) 3;
      decisionTable5.m_classPriors = doubleArray1;
      DecisionTable decisionTable7 = new DecisionTable();
      decisionTable7.m_evaluation = null;
      Instances instances1 = decisionTable7.m_theInstances;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "@relation";
      DecisionTable decisionTable8 = new DecisionTable();
      try { 
        jRip0.rulesetForOneClass(1, (Instances) null, (-856.6790484595), (-516.57873956482));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[0];
      decisionTable0.m_decisionFeatures = intArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable4);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      decisionTable4.m_classPriorCounts = doubleArray0;
      decisionTable4.setCrossVal(5);
      DecisionTable decisionTable6 = new DecisionTable();
      double[] doubleArray1 = new double[5];
      Evaluation evaluation0 = decisionTable3.m_evaluation;
      decisionTable3.m_evaluation = null;
      doubleArray1[0] = (-0.08637306329317845);
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      decisionTable0.printFeatures();
      doubleArray1[3] = (double) 4;
      decisionTable0.m_useIBk = true;
      doubleArray1[4] = (double) 3;
      decisionTable5.m_classPriors = doubleArray1;
      DecisionTable decisionTable7 = new DecisionTable();
      DecisionTable decisionTable8 = new DecisionTable();
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-7);
      Random.setNextRandom((-7));
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      jRip0.enumerateMeasures();
      jRip0.globalInfo();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = (double) (-7);
      jRip_NumericAntd0.accu = (double) (-7);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "B\"bcdm~9Le-m.";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ", linkedList0, 20);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = 1122.02;
      jRip_NumericAntd0.toString();
      ClassOrder classOrder0 = new ClassOrder();
      attribute0.copy("Hb;WNibnznpPg6&{Du");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[0];
      decisionTable0.m_decisionFeatures = intArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable5 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable4);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      decisionTable4.m_classPriorCounts = doubleArray0;
      decisionTable4.setCrossVal(5);
      DecisionTable decisionTable6 = new DecisionTable();
      double[] doubleArray1 = new double[5];
      Evaluation evaluation0 = decisionTable3.m_evaluation;
      decisionTable3.m_evaluation = null;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (double) 5;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 4;
      doubleArray2[7] = (double) 5;
      decisionTable2.m_classPriors = doubleArray2;
      doubleArray1[0] = (-0.08637306329317845);
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      decisionTable0.printFeatures();
      doubleArray1[3] = (double) 4;
      decisionTable0.m_useIBk = true;
      doubleArray1[4] = (double) 3;
      decisionTable5.m_classPriors = doubleArray1;
      DecisionTable decisionTable7 = new DecisionTable();
      DecisionTable decisionTable8 = new DecisionTable();
      try { 
        jRip0.rulesetForOneClass(5, (Instances) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties5);
      attribute0.copy("");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(3);
      jRip_NumericAntd0.value = (double) (-1904);
      jRip_NumericAntd0.covers(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0);
      Attribute attribute1 = new Attribute("", list0, protectedProperties1);
      Attribute attribute2 = new Attribute("@end", linkedList0, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      jRip_NominalAntd0.covers(sparseInstance0);
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = new SelectedTag(1, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      costSensitiveClassifier1.getCostMatrixSource();
      costSensitiveClassifier1.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier2.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".cost", arrayList0, 1);
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      costMatrix0.toMatlab();
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = (-61);
      BallNode.calcCentroidPivot(2, (-61), intArray0, instances0);
      BallNode.calcCentroidPivot(2, 1, intArray0, instances0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      Attribute attribute0 = new Attribute("", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      String string1 = jRip0.optimizationsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals("The number of optimization runs.", string1);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute(",", ",");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip_NumericAntd0.accu = 0.0;
      jRip_NumericAntd0.getAccu();
      assertEquals(0.0, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip0.optimizationsTipText();
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties6);
      protectedProperties6.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      jRip_NumericAntd0.value = (double) (-1904);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      Properties properties1 = new Properties();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties6);
      protectedProperties1.keySet();
      protectedProperties6.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      jRip_NumericAntd0.value = (double) (-1904);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      protectedProperties9.elements();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties3);
      assertEquals(0, protectedProperties11.size());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5791112001537937
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      CostMatrix costMatrix0 = new CostMatrix(1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      costSensitiveClassifier0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-2145));
      MockRandom mockRandom2 = new MockRandom((-753L));
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      
      JRip jRip2 = new JRip();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", (-1));
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(jRip2.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip2.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(3, jRip2.getFolds());
      assertTrue(boolean1 == boolean0);
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Last value of copy: ");
      Attribute attribute0 = new Attribute("Last value of copy: ", 7);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      properties1.clone();
      attribute0.addRelation((Instances) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 3;
      doubleArray0[3] = 0.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-3612.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance1);
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => Last value of copy: =", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance1);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute("=$qus$96O#,W0Q&~", 9);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute("string", protectedProperties1);
      protectedProperties5.keySet();
      protectedProperties9.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties9);
      protectedProperties10.elements();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(boolean0);
      
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("Should never happen!", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute2 = new Attribute("numeric", 2);
      Attribute attribute3 = attribute1.copy("relational");
      attribute3.setWeight((-1378.531433061522));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 350);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(instances0, 2);
      ClassOrder classOrder1 = new ClassOrder();
      arrayList0.add(attribute1);
      Attribute attribute4 = new Attribute("@end", (List<String>) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "string";
      stringArray0[1] = "@relation";
      stringArray0[2] = "y|(d";
      stringArray0[3] = "relational";
      stringArray0[4] = "@end";
      Filter.runFilter(classOrder0, stringArray0);
      attribute4.setWeight(0.7728853409957583);
      classOrder1.setClassOrder(4);
      attribute4.setStringValue("string");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 2, 2);
      Random.setNextRandom(9);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      StringReader stringReader0 = new StringReader("relational");
      // Undeclared exception!
      try { 
        jRip0.getMeasure(".bsi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .bsi not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("Last value of copy: ", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, 2);
      Attribute attribute2 = attribute1.copy("numeric");
      attribute1.copy("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute3 = new Attribute("", protectedProperties0);
      protectedProperties0.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      SparseInstance sparseInstance0 = new SparseInstance(6);
      jRip_NumericAntd0.covers(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      StringReader stringReader0 = new StringReader("relational");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopies(regressionByDiscretization0, 663);
      int int0 = jRip0.getFolds();
      assertFalse(jRip0.getDebug());
      assertEquals(3, int0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrixSource();
      costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      costSensitiveClassifier0.getCapabilities();
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = (-726);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      MockRandom mockRandom2 = new MockRandom(5159L);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean1 == boolean0);
      
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2278680974667573
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
      SelectedTag selectedTag1 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier6 = new CostSensitiveClassifier();
      costSensitiveClassifier3.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BHEq5*]Cgj16O5", arrayList0, 1);
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[7];
      intArray0[4] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("@relation", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (-45.0), 2);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "un");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JRip jRip0 = new JRip();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(linkedList0);
      Instances instances0 = new Instances("@end", arrayList1, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 4, 20.563401817772018);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrixSource();
      costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      costSensitiveClassifier0.getCapabilities();
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = (-726);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      MockRandom mockRandom2 = new MockRandom(5159L);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String string1 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string1);
      
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties5);
      Attribute attribute1 = attribute0.copy("");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      jRip_NumericAntd0.value = (double) (-1904);
      jRip_NumericAntd0.covers(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.covers(sparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      Attribute attribute0 = new Attribute("", protectedProperties7);
      Attribute attribute1 = attribute0.copy("");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd1.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0);
      Attribute attribute2 = new Attribute("!&l0 3AXgYho+`NfXkP", linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean1 == boolean0);
      
      double double0 = jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      int[] intArray0 = new int[0];
      decisionTable0.m_decisionFeatures = intArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances1 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable5 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable4);
      DecisionTable decisionTable6 = new DecisionTable();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      decisionTable0.printFeatures();
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 3;
      decisionTable5.m_classPriors = doubleArray0;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("mc-b9G<");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(2983);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      int[] intArray0 = new int[0];
      decisionTable1.m_decisionFeatures = intArray0;
      Instances instances0 = decisionTable1.m_dtInstances;
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable1.m_majority = (double) 2;
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      decisionTable5.m_useIBk = false;
      DecisionTable decisionTable7 = new DecisionTable();
      decisionTable5.setUseIBk(true);
      DecisionTable decisionTable8 = new DecisionTable();
      GreedyStepwise greedyStepwise0 = new GreedyStepwise();
      decisionTable5.setSearch(greedyStepwise0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>(4);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".arff", list0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(2, (Instances) null, 1, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "gives";
      stringArray0[1] = "RuwM|a?";
      stringArray0[2] = "t^@O4,8dv|y#yr{/kp.";
      stringArray0[3] = "Y/V8lySl!AM,EEMk";
      stringArray0[4] = "EekM8a3F@?b";
      stringArray0[5] = "The maximum relative radius allowed for a leaf node. Itis relative to the radius of the smallest ball enclosing all the data points (that were used to build the tree). This smallest ball would be the same as the root node's ball, if ContainChildBalls property is set to false (default).";
      stringArray0[6] = "";
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Last value of copy: ");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o0Sm4");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Last value of copy: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Last value of copy: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&+35BJmMAxk#>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1968");
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      Attribute attribute0 = new Attribute("", protectedProperties3);
      protectedProperties9.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      jRip_NumericAntd0.covers(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties5);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties9);
      StringReader stringReader0 = new StringReader("numeric");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, (-1904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("Should never happen!", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute2 = attribute1.copy("numeric");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      attribute2.equals(jRip_NominalAntd1);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      Attribute attribute3 = attribute1.copy("relational");
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute3);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ClassOrder classOrder1 = new ClassOrder();
      Attribute attribute4 = new Attribute("@end", (List<String>) null);
      attribute4.setWeight(1.0);
      classOrder1.setClassOrder(4);
      AbstractClassifier.makeCopies(jRip1, 1);
      attribute4.setStringValue("string");
      JRip.NominalAntd jRip_NominalAntd2 = jRip1.new NominalAntd(attribute1);
      assertEquals(Double.NaN, jRip_NominalAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd2.getMaxInfoGain(), 0.01);
      
      boolean boolean0 = jRip1.getDebug();
      assertFalse(boolean0);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      costSensitiveClassifier4.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-726);
      costSensitiveClassifier2.setClassifier(costSensitiveClassifier0);
      intArray0[2] = (-726);
      intArray0[3] = 1;
      intArray0[5] = 2;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-726), intArray0, (-726));
      MockRandom mockRandom2 = new MockRandom(1L);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      System.setCurrentTimeMillis((-334L));
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("", (-77));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(" = ", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " positive data out of ";
      stringArray0[1] = "r:#d}PIr,lz ";
      stringArray0[3] = " be installed/upgraded:\n\n";
      stringArray0[4] = "";
      stringArray0[5] = "sQ'`m+14TjR&0P7,f";
      stringArray0[6] = "";
      jRip_RipperRule0.getRevision();
      stringArray0[7] = "yP~*v0";
      stringArray0[8] = "";
      AbstractClassifier.runClassifier(bayesNet0, stringArray0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "B\"bcdm~9Le-m.";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ", linkedList0, 20);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      ClassOrder classOrder0 = new ClassOrder();
      attribute0.copy("Hb;WNibnznpPg6&{Du");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Last value of copy: ");
      Attribute attribute0 = new Attribute("Last value of copy: ", 9);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-99);
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "date";
      stringArray0[1] = "real";
      stringArray0[2] = "relational";
      MockRandom mockRandom0 = new MockRandom(1L);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = new Attribute("Last value of copy: ", 9);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, (-1158));
      ClassOrder classOrder0 = new ClassOrder();
      attribute1.copy("numeric");
      Attribute attribute2 = attribute1.copy("relational");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-Y", arrayList0, 0);
      JRip jRip1 = new JRip();
      try { 
        jRip0.rulesetForOneClass(1, instances0, 1, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
      SelectedTag selectedTag1 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      SelectedTag selectedTag2 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      JRip jRip0 = new JRip();
      costMatrix0.initialize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oqve%~f;$.3$h";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "oqve%~f;$.3$h";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".cost";
      stringArray0[4] = ".cost";
      stringArray0[4] = "oqve%~f;$.3$h";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4687044989586093
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oLXySM0\"\" x!");
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(613);
      jRip0.minNoTipText();
      jRip0.usePruningTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jRip0.checkErrorRateTipText();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("Y", (-2755));
      attribute0.equals(jRip0);
      jRip_RipperRule0.toString(attribute0);
      jRip0.getCheckErrorRate();
      jRip_RipperRule0.hasAntds();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[4];
      jRip0.setFolds(0);
      intArray0[0] = 1;
      jRip_RipperRule0.size();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getSplitPoint();
      jRip0.foldsTipText();
      jRip0.checkErrorRateTipText();
      jRip_RipperRule0.hasAntds();
      jRip0.optimizationsTipText();
      assertEquals(613, jRip0.getOptimizations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
      SelectedTag selectedTag1 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier6 = new CostSensitiveClassifier();
      costSensitiveClassifier3.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BHEq5*]Cgj16O5", arrayList0, 1);
      int[] intArray0 = new int[7];
      intArray0[4] = 1;
      intArray0[1] = 625;
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("DI9\"`^}^c?#JXKLE!?c");
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 2;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(1, 2, intArray0, instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 625, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale locale0 = Locale.CHINA;
      arrayList0.add(locale0);
      arrayList0.addAll((Collection<? extends Locale>) list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CHINA;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.CHINA;
      Locale locale4 = Locale.GERMANY;
      locale3.clone();
      arrayList0.add(locale3);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) null, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      arrayList1.stream();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode3);
      Locale.lookup(linkedList2, arrayList2);
      Locale locale5 = Locale.ITALY;
      Locale locale6 = Locale.ENGLISH;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("I", linkedList0, protectedProperties4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrixSource();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier6 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier3.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-615));
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      costSensitiveClassifier0.setCostMatrix(costMatrix1);
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      protectedProperties0.propertyNames();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Attribute attribute0 = new Attribute("-HF", protectedProperties0);
      protectedProperties1.keySet();
      protectedProperties8.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties12);
      Properties properties1 = new Properties();
      String string0 = jRip0.minNoTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.lookup(linkedList0, list1);
      arrayList0.add((Locale) null);
      jRip0.setSeed((-2070L));
      arrayList0.addAll((Collection<? extends Locale>) list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.CHINA;
      Locale locale3 = Locale.GERMANY;
      locale2.clone();
      arrayList0.add(locale2);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) null, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      arrayList1.stream();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode3);
      Locale.lookup(linkedList2, arrayList2);
      Locale locale4 = Locale.ITALY;
      Locale locale5 = Locale.ENGLISH;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-2070L), jRip0.getSeed());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("KTU),lg'DZx", protectedProperties1);
      protectedProperties0.values();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ClassOrder classOrder0 = new ClassOrder();
      protectedProperties1.getOrDefault(classOrder0, jRip0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      StringReader stringReader0 = new StringReader("One rule added: has positive? ");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null, (-1904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      jRip0.setMinNo(1);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      costSensitiveClassifier4.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2881.0);
      doubleArray0[1] = (-2881.0);
      doubleArray0[2] = (-2881.0);
      doubleArray0[3] = (-2881.0);
      doubleArray0[4] = (-2881.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2881.0), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      Attribute attribute0 = new Attribute("v%4z2aVZjdd!", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties((Properties) null);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      protectedProperties1.propertyNames();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      Attribute attribute0 = new Attribute("(#cqXN`K.Yzfy^", protectedProperties2);
      protectedProperties2.values();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      SparseInstance sparseInstance0 = new SparseInstance(70);
      jRip_NumericAntd0.covers(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      StringReader stringReader0 = new StringReader("tCkv#kM]w?S0-ux");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      try { 
        principalComponents1.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0956099123914855
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      M5P m5P0 = new M5P();
      m5P0.getTechnicalInformation();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopies(m5P0, 2488);
      jRip0.getSeed();
      jRip0.getMinNo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule0.size();
      Attribute attribute0 = new Attribute("W(%2_++X[5cO", 2);
      jRip_RipperRule0.toString(attribute0);
      jRip0.listOptions();
      jRip0.setCheckErrorRate(true);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getRevision();
      jRip_RipperRule0.getConsequent();
      jRip0.getOptimizations();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      Instances instances0 = null;
      MultiFilter multiFilter0 = new MultiFilter();
      try { 
        Filter.useFilter((Instances) null, multiFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip jRip0 = new JRip();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(linkedList0);
      Instances instances0 = new Instances("@end", arrayList1, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.equalsMsg((Object) null);
      jRip_NumericAntd0.splitData(instances0, 2, 3);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 0, 64.0);
      jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrixSource();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier6 = new CostSensitiveClassifier();
      costSensitiveClassifier3.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0, intArray0, 24);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[7];
      intArray1[4] = 1;
      costSensitiveClassifier1.setCostMatrix(costMatrix0);
      intArray1[1] = 625;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 2;
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o0EKo");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-x[!F");
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m64}QoBFMB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m_InstList.length-node.m_End+1: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eR(< w_x9");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m64}QoBFMB");
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("wt!q%]h :");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wt!q%]h : not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_dtInstances;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      jRip_RipperRule0.covers(binarySparseInstance0);
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      Instances instances1 = decisionTable6.m_dtInstances;
      DecisionTable decisionTable7 = new DecisionTable();
      decisionTable7.setCrossVal(2);
      DecisionTable decisionTable8 = new DecisionTable();
      Instances instances2 = decisionTable0.m_theInstances;
      IBk iBk0 = new IBk();
      AbstractClassifier.runClassifier(decisionTable1, (String[]) null);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip2.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale locale0 = Locale.CHINA;
      arrayList0.add(locale0);
      arrayList0.addAll((Collection<? extends Locale>) list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CHINA;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.CHINA;
      Locale locale4 = Locale.GERMANY;
      locale3.clone();
      arrayList0.add(locale3);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) null, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      arrayList1.stream();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode3);
      Locale.lookup(linkedList2, arrayList2);
      Locale locale5 = Locale.ITALY;
      Locale locale6 = Locale.ENGLISH;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-52));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Last value of ro:y:S";
      stringArray0[1] = "Last value of ro:y:S";
      stringArray0[2] = "Last value of ro:y:S";
      stringArray0[3] = "Last value of ro:y:S";
      stringArray0[4] = "Last value of ro:y:S";
      stringArray0[5] = "";
      stringArray0[6] = "Last value of ro:y:S";
      stringArray0[7] = "Last value of ro:y:S";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Last value of ro:y:S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Last value of ro:y:S not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrixSource();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier6 = new CostSensitiveClassifier();
      costSensitiveClassifier3.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[7];
      intArray1[4] = 1;
      costSensitiveClassifier1.setCostMatrix(costMatrix0);
      intArray1[1] = 625;
      intArray1[2] = 1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") and ");
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 2;
      String string0 = jRip0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Last value of copy: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o0EKo");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Last value of copy: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Last value of copy: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-x[!F");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setOptimizations(50);
      SparseInstance sparseInstance0 = new SparseInstance(50);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertEquals(50, jRip0.getOptimizations());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      AbstractClassifier.makeCopies(jRip0, 0);
      jRip0.enumerateMeasures();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip_RipperRule0.setConsequent((-347.7055812590535));
      String[] stringArray0 = new String[7];
      stringArray0[1] = "115-123";
      stringArray0[1] = "115-123";
      stringArray0[2] = "115-123";
      IBk iBk0 = new IBk(68);
      ClassOrder classOrder0 = new ClassOrder();
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        classOrder0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.ITALY;
      Locale locale2 = Locale.FRENCH;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      IBk iBk0 = new IBk((-74));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1;
      doubleArray0[8] = (double) 1;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 2;
      doubleArray1[6] = (double) 1;
      Attribute attribute0 = new Attribute("o");
      jRip_RipperRule0.toString(attribute0);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      Utils.SMALL = 0.0;
      Attribute attribute0 = new Attribute(",3!\">%+Gq4mL");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Attribute attribute0 = new Attribute("=$qus$96O#,W0Q&~", 9);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("+", protectedProperties12);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties9);
      protectedProperties13.keySet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      protectedProperties11.values();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties6);
      protectedProperties3.remove((Object) properties0, (Object) properties0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties0);
      protectedProperties6.elements();
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties14);
      boolean boolean1 = jRip0.getDebug();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean1 == boolean0);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrixSource();
      SelectedTag selectedTag0 = new SelectedTag(2, costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier4 = new CostSensitiveClassifier();
      costSensitiveClassifier4.setClassifier(costSensitiveClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostSensitiveClassifier costSensitiveClassifier5 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier6 = new CostSensitiveClassifier();
      costSensitiveClassifier3.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int[] intArray1 = new int[7];
      intArray1[4] = 1;
      costSensitiveClassifier1.setCostMatrix(costMatrix0);
      intArray1[1] = 625;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 2;
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }
}
