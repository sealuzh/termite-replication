/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 19:10:49 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8045273445031005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedList0);
      locale1.getDisplayScript();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.ITALY;
      linkedList1.remove((Object) locale2);
      linkedList1.containsAll(linkedList0);
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Vector<String> vector1 = new Vector<String>();
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      Vector<Locale> vector3 = new Vector<Locale>();
      vector3.removeAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector2, (Collection<Locale>) vector3, locale_FilteringMode1);
      Locale locale3 = Locale.CHINA;
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Vector<String> vector4 = new Vector<String>();
      ImprovedFile improvedFile0 = new ImprovedFile(".");
      String[] stringArray0 = Locale.getISOLanguages();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Vector<Object> vector5 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector5;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, "Mr<Gx.jar", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "Qe-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^WfDQt";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      String string0 = "4`9Aqke&";
      ImprovedFile improvedFile1 = null;
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner1.setIncludes(stringArray0);
      archiveScanner1.addDefaultExcludes();
      Vector<String> vector0 = new Vector<String>();
      archiveScanner1.filesExcluded = vector0;
      System.setCurrentTimeMillis((byte) (-8));
      // Undeclared exception!
      try { 
        archiveScanner1.processFile("4`9Aqke&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(int0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4y9AqkZr";
      stringArray0[1] = "4y9AqkZr";
      archiveScanner0.setBasedir("4y9AqkZr");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      vector0.clear();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector1 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "4y9AqkZr", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = (Integer) int0;
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(int0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4y9AqkZr";
      stringArray0[1] = "4y9AqkZr";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      vector0.clear();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector1 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "4y9AqkZr", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sWfDX'QYodt";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip(859L);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      sequenceInputStream2.available();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream4);
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      sequenceInputStream6.read(byteArray0);
      sequenceInputStream1.markSupported();
      sequenceInputStream3.markSupported();
      sequenceInputStream3.read(byteArray0);
      sequenceInputStream3.read();
      sequenceInputStream0.read();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "sWfDX'QYodt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pO5";
      archiveScanner0.setIncludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip(878L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector1;
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration4);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream4.skip(878L);
      sequenceInputStream5.markSupported();
      sequenceInputStream2.read();
      sequenceInputStream5.markSupported();
      sequenceInputStream1.read();
      int int0 = ArchiveScanner.DIRECTORY;
      sequenceInputStream2.read();
      int int1 = ArchiveScanner.ARCHIVE;
      sequenceInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream4);
      int int2 = ArchiveScanner.FILE;
      int int3 = ArchiveScanner.FILE;
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processArchive((File) null, "pO5");
      assertEquals(0, ArchiveScanner.FILE);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer2;
      integerArray1[2] = integer2;
      integerArray1[3] = integer2;
      integerArray1[4] = integer4;
      integerArray1[5] = (Integer) int0;
      integerArray1[6] = integer5;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[0] = "4`9Aqke&";
      stringArray0[1] = "4`9Aqke&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      System.setCurrentTimeMillis(int0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("The event type code, 0N9;3GP{\"3.bak.jar.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W{^s{=y.\"RBq zgQ7U");
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-180997141));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test(object0);
      vector0.removeIf(predicate4);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      vector0.add(object1);
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      Object object6 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object7 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W{^s{=y.\"RBq zgQ7U";
      stringArray0[1] = "W{^s{=y.\"RBq zgQ7U";
      stringArray0[2] = "W{^s{=y.\"RBq zgQ7U";
      Predicate.isEqual((Object) predicate2);
      stringArray0[3] = "W{^s{=y.\"RBq zgQ7U";
      stringArray0[4] = "W{^s{=y.\"RBq zgQ7U";
      stringArray0[5] = "W{^s{=y.\"RBq zgQ7U";
      stringArray0[6] = "W{^s{=y.\"RBq zgQ7U";
      archiveScanner0.setIncludes(stringArray0);
      Vector<SequenceInputStream> vector3 = new Vector<SequenceInputStream>();
      vector3.retainAll(vector1);
      archiveScanner0.dirsNotIncluded = vector3;
      try { 
        archiveScanner0.processDirectory(improvedFile0, "v{zkbZ?*Sx}PeX", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/W{^s{=y.\"RBq zgQ7U
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      linkedList2.add(".jar");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) linkedList2, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.containsAll(linkedList1);
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Vector<String> vector1 = new Vector<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList5, locale_FilteringMode2);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      Vector<Locale> vector3 = new Vector<Locale>();
      vector3.removeAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector2, (Collection<Locale>) vector3, locale_FilteringMode3);
      Locale locale2 = Locale.CHINA;
      LinkedList<String> linkedList6 = new LinkedList<String>();
      Vector<String> vector4 = new Vector<String>();
      ImprovedFile improvedFile0 = new ImprovedFile(".");
      String[] stringArray0 = Locale.getISOLanguages();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Vector<Object> vector5 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector5;
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      vector5.addElement(locale3);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, "Mr<GxE.jlr", false);
      assertFalse(improvedFile0.equals((Object)improvedFile1));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-11));
      Integer integer1 = new Integer(4652);
      Integer integer2 = new Integer((-11));
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?`9}?>k1%";
      stringArray0[1] = "?`9}?>k1%";
      archiveScanner0.haveSlowResults = true;
      archiveScanner0.myTempdir = null;
      stringArray0[2] = "?`9}?>k1%";
      stringArray0[3] = "?`9}?>k1%";
      stringArray0[4] = "?`9}?>k1%";
      stringArray0[5] = "?`9}?>k1%";
      stringArray0[6] = "?`9}?>k1%";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.addDefaultExcludes();
      stringArray0[7] = "?`9}?>k1%";
      vector0.add("?`9}?>k1%");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      vector0.add(":$8`@^6]Fb:Z.jar");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "?`9}?>k1%", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pO5";
      archiveScanner0.setIncludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration4);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream2.read();
      sequenceInputStream5.mark(33);
      sequenceInputStream1.read();
      sequenceInputStream5.read(byteArray0);
      sequenceInputStream3.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      bufferedInputStream0.read(byteArray0);
      sequenceInputStream0.close();
      vector0.add((InputStream) bufferedInputStream0);
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream3.read();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("d{Qh'me");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(4652);
      Integer integer5 = new Integer(47);
      vector0.toArray(integerArray0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4`92qk6&";
      stringArray0[1] = "4`92qk6&";
      stringArray0[2] = "4`92qk6&";
      stringArray0[3] = ".ear";
      stringArray0[4] = "4`92qk6&";
      stringArray0[5] = "4`92qk6&";
      stringArray0[6] = "4`92qk6&";
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      stringArray0[7] = "4`92qk6&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processDirectory((File) null, "4`92qk6&", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "4`92qk6&", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W{^s{=yy.\"Rynq zgQ7U");
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-180997141));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Object object1 = new Object();
      predicate1.test(object1);
      vector0.removeIf(predicate3);
      vector0.add((Object) predicate1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      vector0.add(object2);
      Object object5 = new Object();
      Object object6 = new Object();
      vector0.add((Object) "W{^s{=yy.\"Rynq zgQ7U");
      Vector<Object> vector1 = new Vector<Object>();
      Object object7 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object8 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W{^s{=yy.\"Rynq zgQ7U";
      stringArray0[1] = "W{^s{=yy.\"Rynq zgQ7U";
      stringArray0[2] = "W{^s{=yy.\"Rynq zgQ7U";
      stringArray0[3] = "W{^s{=yy.\"Rynq zgQ7U";
      stringArray0[4] = "W{^s{=yy.\"Rynq zgQ7U";
      stringArray0[5] = "W{^s{=yy.\"Rynq zgQ7U";
      stringArray0[6] = "W{^s{=yy.\"Rynq zgQ7U";
      archiveScanner0.setIncludes(stringArray0);
      Vector<SequenceInputStream> vector3 = new Vector<SequenceInputStream>();
      vector3.retainAll(vector1);
      archiveScanner0.dirsNotIncluded = vector3;
      archiveScanner0.processDirectory(improvedFile0, "I!{zkbZ`*SPzuer", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      linkedList2.add(".jar");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) linkedList2, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      locale1.getDisplayScript(locale2);
      linkedList3.containsAll(linkedList1);
      locale1.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList5, locale_FilteringMode2);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      Vector<Locale> vector2 = new Vector<Locale>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector1, (Collection<Locale>) vector2, locale_FilteringMode3);
      Locale locale3 = Locale.CHINESE;
      LinkedList<String> linkedList6 = new LinkedList<String>();
      Vector<String> vector3 = new Vector<String>();
      ImprovedFile improvedFile0 = new ImprovedFile(".jar");
      String[] stringArray0 = Locale.getISOLanguages();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector4;
      Locale locale4 = Locale.TRADITIONAL_CHINESE;
      Locale.lookup(linkedList0, linkedList4);
      vector4.addElement(locale4);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile1, "", true);
      assertFalse(improvedFile1.isHidden());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer2;
      integerArray1[2] = integer2;
      integerArray1[3] = integer2;
      integerArray1[4] = integer4;
      integerArray1[5] = (Integer) int0;
      vector0.add((Object) integer2);
      integerArray1[6] = integer5;
      vector0.toArray(integerArray1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4`9Aqke&");
      stringArray0[0] = "4`9Aqke&";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4`9Aqke&");
      stringArray0[1] = "4`9Aqke&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setExcludes(stringArray0);
      System.setCurrentTimeMillis(int0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("4`9Aqke&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.removeAllElements();
      vector1.sort((Comparator<? super Object>) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4`92qk6&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      vector1.add(object0);
      Object object1 = new Object();
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.filesExcluded = vector2;
      Object object2 = new Object();
      Locale locale0 = new Locale("The file, ");
      locale0.getDisplayScript();
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayScript(locale1);
      locale0.getUnicodeLocaleKeys();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner1.filesExcluded = archiveScanner0.filesExcluded;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "4`92qk6&";
      stringArray1[1] = "4`92qk6&";
      archiveScanner1.dirsNotIncluded = archiveScanner0.filesExcluded;
      stringArray1[2] = "The file, ";
      archiveScanner0.setIncludes(stringArray1);
      archiveScanner1.setExcludes(stringArray0);
      archiveScanner0.processFile("4`92qk6&");
      assertFalse(archiveScanner0.equals((Object)archiveScanner1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^WfD'Qdt";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip((byte) (-8));
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      sequenceInputStream3.skip(1L);
      sequenceInputStream2.available();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream4);
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      sequenceInputStream6.read(byteArray0);
      sequenceInputStream1.markSupported();
      sequenceInputStream3.markSupported();
      sequenceInputStream3.read(byteArray0);
      sequenceInputStream3.read();
      sequenceInputStream0.read();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "^WfD'Qdt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer2;
      integerArray1[2] = (Integer) int0;
      integerArray1[3] = integer2;
      integerArray1[4] = integer4;
      integerArray1[5] = (Integer) int0;
      integerArray1[6] = integer5;
      vector0.toArray(integerArray1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      stringArray0[0] = "4`9Aqke&";
      stringArray0[1] = "4`9Aqke&";
      archiveScanner0.setIncludes(stringArray0);
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      vector2.retainAll(archiveScanner0.dirsNotIncluded);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "ktX(`\"n=/DKp<Uk", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pO5";
      archiveScanner0.setIncludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-75);
      sequenceInputStream1.read(byteArray0, (int) (byte) (-125), 14);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      byte[] byteArray1 = new byte[1];
      sequenceInputStream4.markSupported();
      sequenceInputStream2.read();
      sequenceInputStream4.markSupported();
      sequenceInputStream1.read();
      sequenceInputStream4.read(byteArray1);
      sequenceInputStream2.read();
      sequenceInputStream2.read(byteArray1);
      sequenceInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream2);
      sequenceInputStream0.read(byteArray1);
      sequenceInputStream1.read();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "pO5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer2;
      integerArray1[2] = integer2;
      integerArray1[3] = integer2;
      integerArray1[4] = integer4;
      integerArray1[5] = (Integer) int0;
      integerArray1[6] = integer5;
      vector0.toArray(integerArray1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector1;
      stringArray0[0] = "4`9Aqke&";
      stringArray0[1] = "4`9Aqke&";
      archiveScanner0.setIncludes(stringArray0);
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      vector2.retainAll(archiveScanner0.dirsNotIncluded);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "ktX(`\"n=/DKp<Uk", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(int0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4y9AqkZr";
      stringArray0[1] = "4y9AqkZr";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector1 = new Vector<Integer>();
      System.setCurrentTimeMillis(int0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("680]%b!6&+ao5+hH:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer((int) integer3);
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4`9Aqke&";
      stringArray0[1] = "4`9Aqke&";
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      System.setCurrentTimeMillis(int0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "com.lts.application.fatal.startup.runtimeException.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.removeAllElements();
      vector1.sort((Comparator<? super Object>) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4`92qk6&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      vector1.add(object0);
      Object object1 = new Object();
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.filesExcluded = vector2;
      Object object2 = new Object();
      Locale locale0 = new Locale("The file, ");
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayScript(locale1);
      locale0.getUnicodeLocaleKeys();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Object object3 = new Object();
      Object object4 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile((String) null, "d");
      Vector<Object> vector3 = new Vector<Object>();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "Could not create directory, ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sWfDX'QYodt";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.read();
      sequenceInputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      sequenceInputStream1.skip(3518L);
      Enumeration<SequenceInputStream> enumeration2 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      sequenceInputStream1.available();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream4);
      sequenceInputStream2.read();
      sequenceInputStream4.read(byteArray0);
      sequenceInputStream4.markSupported();
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      sequenceInputStream6.read(byteArray0);
      sequenceInputStream1.read();
      sequenceInputStream4.read();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "sWfDX'QYodt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sWfDX'QYodt";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      byte[] byteArray1 = new byte[1];
      sequenceInputStream4.available();
      sequenceInputStream1.read();
      sequenceInputStream4.read(byteArray1);
      sequenceInputStream2.markSupported();
      sequenceInputStream2.markSupported();
      sequenceInputStream0.read(byteArray1);
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      archiveScanner0.processFile("sWfDX'QYodt");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8444861747056995
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.clear();
      Object object0 = new Object();
      vector0.add(object0);
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      vector1.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "iticyUm]j5.jar");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("iticyUm]j5.jar", "B", improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      improvedFile0.createTempDir();
      DirectoryScanner.match("iticyUm]j5.jar", "com.lts.pest.tree.IdTreeNode.jar");
      ArchiveScanner archiveScanner2 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner2.scandir(improvedFile0, "SNw{OG,@vp |W", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = (-11);
      Integer integer0 = new Integer((-11));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(4652);
      Integer integer5 = new Integer((-11));
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?`9}?>k1%";
      stringArray0[1] = "?`9}?>k1%";
      stringArray0[2] = "?`9}?>k1%";
      stringArray0[3] = ".ear";
      stringArray0[4] = "?`9}?>k1%";
      stringArray0[5] = "?`9}?>k1%";
      stringArray0[6] = "?`9}?>k1%";
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      stringArray0[7] = "?`9}?>k1%";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("2Z{'v)^]PX~l8-{}KIu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pO5";
      archiveScanner0.setIncludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration4);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream2.read();
      sequenceInputStream5.mark(33);
      sequenceInputStream1.read();
      sequenceInputStream5.read(byteArray0);
      sequenceInputStream3.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      bufferedInputStream0.read(byteArray0);
      sequenceInputStream0.close();
      vector0.add((InputStream) bufferedInputStream0);
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream3.read();
      archiveScanner0.setExcludes(stringArray0);
      System.setCurrentTimeMillis((-1));
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("pO5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 57;
      Integer integer0 = new Integer(57);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer2;
      integerArray1[2] = integer2;
      integerArray1[3] = (Integer) int0;
      integerArray0[3] = integer4;
      integerArray1[5] = (Integer) int0;
      integerArray1[6] = integer5;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4`9qke";
      stringArray0[1] = "4`9qke";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("4`9qke");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 47;
      Integer integer0 = new Integer(47);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(4652);
      Integer integer5 = new Integer(47);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4`92qk6&";
      stringArray0[1] = "4`92qk6&";
      stringArray0[2] = "4`92qk6&";
      stringArray0[3] = ".ear";
      stringArray0[4] = "4`92qk6&";
      stringArray0[5] = "4`92qk6&";
      stringArray0[6] = "4`92qk6&";
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      stringArray0[7] = "4`92qk6&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setExcludes(stringArray0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "child, ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pO5";
      archiveScanner0.setIncludes(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector1;
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration4);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream2.read();
      sequenceInputStream5.read(byteArray0);
      sequenceInputStream3.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      sequenceInputStream2.markSupported();
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration5);
      sequenceInputStream6.read(byteArray0);
      sequenceInputStream1.read();
      sequenceInputStream6.read();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, ", does not exist and could not be created.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("67`]?:$?=>14J", "67`]?:$?=>14J");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "JL]2]A&<KO+Q.T!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JL]2]A&<KO+Q.T!";
      stringArray0[1] = "";
      stringArray0[2] = "*^;0/.q";
      stringArray0[3] = "67`]?:$?=>14J";
      stringArray0[4] = "JL]2]A&<KO+Q.T!";
      stringArray0[5] = "67`]?:$?=>14J";
      archiveScanner0.setExcludes(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ImprovedFile improvedFile2 = new ImprovedFile("67`]?:$?=>14J16aLHRP^u3U>flZ.jar.jar");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      improvedFile0.setExecutable(true, false);
      MockFile.createTempFile("67`]?:$?=>14J16aLHRP^u3U>flZ.jar.jar", "||<6e?O8");
      improvedFile1.toURI();
      improvedFile1.createTempDir();
      improvedFile1.setReadOnly();
      archiveScanner0.isArchive(improvedFile2);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 73;
      Integer integer0 = new Integer(73);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integer0);
      integerArray0[1] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = (Integer) int0;
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[11];
      integerArray1[0] = integer5;
      integerArray0[5] = integer2;
      integerArray0[1] = integer2;
      integerArray1[2] = integer4;
      integerArray1[5] = (Integer) int0;
      integerArray1[6] = integer1;
      Vector<String> vector0 = new Vector<String>();
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      Vector<String> vector2 = new Vector<String>();
      Locale.getISOLanguages();
      ImprovedFile improvedFile0 = new ImprovedFile("\")t@#xcK4$=");
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "\")t@#xcK4$=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("67`]?:$?=>14J", "67`]?:$?=>14J");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.clear();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2599, (byte) (-28));
      vector0.add((Object) byteArrayInputStream0);
      Stream<Object> stream0 = vector0.stream();
      Object object1 = new Object();
      vector0.add((Object) stream0);
      Object object2 = new Object();
      Object object3 = new Object();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      vector0.add((Object) sequenceInputStream0);
      improvedFile1.getAbsolutePath();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sWfDX'QYodt";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      byte[] byteArray1 = new byte[1];
      sequenceInputStream4.available();
      sequenceInputStream1.read();
      sequenceInputStream4.read(byteArray1);
      sequenceInputStream2.markSupported();
      sequenceInputStream2.markSupported();
      sequenceInputStream0.read(byteArray1);
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      System.setCurrentTimeMillis(0L);
      ImprovedFile improvedFile0 = new ImprovedFile("sWfDX'QYodt");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, ".ear", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/sWfDX'QYodt
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sWfDX'QYodt";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-59);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      sequenceInputStream1.skip(859L);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      byte[] byteArray1 = new byte[1];
      sequenceInputStream4.available();
      sequenceInputStream1.read();
      sequenceInputStream4.read(byteArray1);
      sequenceInputStream2.markSupported();
      sequenceInputStream2.markSupported();
      sequenceInputStream0.read(byteArray1);
      sequenceInputStream2.read();
      sequenceInputStream2.read();
      System.setCurrentTimeMillis(0L);
      ImprovedFile improvedFile0 = new ImprovedFile("sWfDX'QYodt");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, ".ear", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/sWfDX'QYodt
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2, locale_FilteringMode0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      linkedList1.addAll((Collection<? extends Locale.LanguageRange>) vector1);
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      linkedList3.add(locale0);
      Vector<Locale.LanguageRange> vector2 = new Vector<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) vector2, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList3);
      linkedList3.removeAll(linkedList2);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Vector<Locale.LanguageRange> vector3 = new Vector<Locale.LanguageRange>();
      vector3.listIterator();
      Locale.filter((List<Locale.LanguageRange>) vector3, (Collection<Locale>) list1, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) vector2, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList5, (Collection<Locale>) list2, locale_FilteringMode1);
      Locale locale2 = Locale.GERMAN;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      ImprovedFile improvedFile0 = new ImprovedFile("O.");
      Locale.getISOLanguages();
      improvedFile0.createTempDir();
      linkedList3.spliterator();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";:gn?bN0%12EN{'g`{E");
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) "7,9?pKWb");
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector2 = new Vector<Object>(vector0);
      vector1.add(object5);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector3 = new Vector<Object>();
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile(", is neither a directory nor ", "tempdir0.jar");
      File file0 = ImprovedFile.buildName(", is neither a directory nor ", 200L, (String) null, mockFile0);
      File file1 = MockFile.createTempFile(", is neither a directory nor ", ", is neither a directory nor ", file0);
      file1.deleteOnExit();
      ImprovedFile improvedFile0 = new ImprovedFile(file1);
      ImprovedFile improvedFile1 = improvedFile0.tempBackup();
      improvedFile1.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      int int0 = archiveScanner0.toFileType(improvedFile1);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W{^s{=y.\"RBq zgQ7U");
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-180997141));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.or(predicate3);
      predicate1.test(object0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate5.or(predicate0);
      predicate5.and(predicate4);
      vector0.removeIf(predicate3);
      Object object1 = new Object();
      Object object2 = new Object();
      vector0.add(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.iterator();
      Object object5 = new Object();
      vector0.add(object5);
      Object object6 = new Object();
      Vector<Object> vector2 = new Vector<Object>(vector0);
      vector1.add((Object) predicate3);
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";:gn?bN0%12EN{'g`{E");
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      vector0.add((Object) ";:gn?bN0%12EN{'g`{E");
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector1 = new Vector<Object>(vector0);
      Object object6 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      vector0.remove(object9);
      Object object10 = new Object();
      Object object11 = new Object();
      vector1.add(object11);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.haveSlowResults = true;
      Vector<Object> vector3 = new Vector<Object>();
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";:gn?bN0%12EN{'g`{E");
      improvedFile0.createTempDir();
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.clear();
      Object object1 = new Object();
      vector0.add(object1);
      vector0.stream();
      Object object2 = new Object();
      vector0.add(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      vector0.add((Object) null);
      improvedFile0.getAbsolutePath();
      vector0.add((Object) "com.lts.pest.tree.IdTreeNode");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";:gn?bN0%12EN{'g`{E");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, ".zip");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, ;:gn?bN0%12EN{'g`{E
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "ar0B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
