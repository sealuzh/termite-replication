/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 20:29:24 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      SystemInUtil.addInputLine("not");
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.iterator();
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      SystemInUtil.addInputLine("not");
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.iterator();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.compose((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      function1.compose((Function<? super JSTerm, ?>) function2);
      UnaryOperator.identity();
      Function<Integer, Integer> function3 = function2.compose((Function<? super Integer, ?>) function1);
      SystemInUtil.addInputLine("not");
      UnaryOperator.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function4).apply(any());
      Function<Integer, String> function5 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      Function<Integer, String> function6 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      function5.apply((Integer) null);
      function1.compose((Function<? super Object, ?>) function2);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2147483645);
      unaryOperator0.apply(integer0);
      function2.andThen((Function<? super Integer, ?>) function7);
      Function<Object, Integer> function8 = function1.andThen((Function<? super Integer, ? extends Integer>) function3);
      Function<Object, Integer> function9 = function2.andThen((Function<? super Integer, ? extends Integer>) function8);
      Function.identity();
      Function<Object, Integer> function10 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function10);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9285988229508346
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h'eSE8vchM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-1), (-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.commentChar((-1));
      streamTokenizer0.sval = null;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.quoteChar((-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.resetSyntax();
      jSTerm0.makeVariable();
      streamTokenizer0.whitespaceChars((-1), (-1));
      streamTokenizer2.resetSyntax();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-3), (-1080459969));
      System.setCurrentTimeMillis((-1));
      streamTokenizer0.lowerCaseMode(true);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
      assertEquals(1, jSSubstitution1.size());
      
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertEquals(2, jSPredicateForm2.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QV}}y)(glhu @yK}");
      SystemInUtil.addInputLine("QV}}y)(glhu @yK}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate1.and(predicate0);
      Predicate<Object> predicate6 = predicate5.or(predicate3);
      Integer integer0 = new Integer(0);
      predicate1.test(integer0);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate2);
      predicate5.or(predicate7);
      Predicate<Object> predicate9 = predicate5.or(predicate6);
      predicate0.and(predicate1);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      predicate11.negate();
      predicate2.negate();
      predicate11.or(predicate5);
      predicate0.negate();
      predicate4.negate();
      predicate4.or(predicate5);
      predicate2.or(predicate10);
      predicate6.negate();
      predicate4.negate();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.interrogation = 28;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      String string0 = "2.0";
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("2.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) "*3af-KycByjFy.L#ph");
      JSTerm jSTerm2 = new JSTerm();
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'V';
      charArray0[2] = 'x';
      charArray0[3] = '8';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      jSTerm2.add((Object) stringReader1);
      charBuffer0.duplicate();
      stringReader0.read(charBuffer0);
      long long0 = 512L;
      System.setCurrentTimeMillis(512L);
      // Undeclared exception!
      try { 
        jSTerm2.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3646123915234463
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("5HI3,z");
      StringReader stringReader0 = new StringReader("5HI3,z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-1135);
      streamTokenizer0.whitespaceChars((-2), (-1135));
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      stringReader0.skip((-2));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.slashStarComments(true);
      stringReader0.mark(43);
      stringReader0.reset();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(43, (-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(43);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer0.ordinaryChars((-1432583002), (-1135));
      streamTokenizer1.commentChar(1630);
      streamTokenizer1.commentChar(1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.13243989994744
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h'eSE8vchM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-1), (-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.commentChar((-1));
      streamTokenizer0.sval = null;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.quoteChar((-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.resetSyntax();
      streamTokenizer0.whitespaceChars((-1), 3528);
      streamTokenizer2.resetSyntax();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      streamTokenizer0.slashSlashComments(true);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution2 = jSPredicateForm2.matches(jSPredicateForm1, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm2));
      
      JSPredicateForm jSPredicateForm4 = jSTerm0.clonePF();
      assertNotSame(jSPredicateForm4, jSPredicateForm1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7651334011390136
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h'eSE8vchM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-1), (-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.commentChar((-1));
      streamTokenizer0.sval = null;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.quoteChar((-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.resetSyntax();
      streamTokenizer0.whitespaceChars((-1), (-1));
      streamTokenizer2.resetSyntax();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      streamTokenizer0.slashSlashComments(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
      assertEquals(9, stringBuffer0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9285988229508346
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlaninoXDmain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      stringReader0.skip(32);
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.commentChar(32);
      streamTokenizer0.sval = null;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.commentChar(32);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar(32);
      streamTokenizer1.quoteChar(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.ttype = 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.resetSyntax();
      streamTokenizer0.whitespaceChars(32, 3528);
      streamTokenizer2.resetSyntax();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StringReader stringReader1 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.addAll((Collection) jSSubstitution0);
      System.setCurrentTimeMillis(517L);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(1504L);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(1595L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.478006498651262
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-548), (-548));
      stringReader0.markSupported();
      stringReader0.skip(32);
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(43, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(43);
      streamTokenizer0.sval = null;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.commentChar(43);
      streamTokenizer1.commentChar(32);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      streamTokenizer1.quoteChar((-1185));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer1.slashSlashComments(false);
      stringReader0.skip((-4));
      streamTokenizer2.ordinaryChars((-1776), (-1185));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bI,B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(]Pzu@'!wPHo8|6.>s");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#+X0#aEvZ]lb&_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7651334011390136
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlahioXDmaJn: errr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      stringReader0.skip(32);
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(32, 32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar(32);
      streamTokenizer0.sval = null;
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      jSTerm0.addElement(jSTerm0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.commentChar(32);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar(32);
      streamTokenizer1.quoteChar(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer1.ttype = 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer2.resetSyntax();
      streamTokenizer0.whitespaceChars(32, 32);
      streamTokenizer2.resetSyntax();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      Object object0 = new Object();
      jSPredicateForm1.print();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.greaterT = 380;
      JSJshopVars.rightPar = 1980;
      JSJshopVars.verticalL = 511;
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.flagLevel = 29;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSPredicateForm0.addElement((Object) null);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSJshopVars.verticalL = 380;
      JSJshopVars.whiteSpace = 380;
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3215460452773433
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.addAll(0, (Collection) jSPredicateForm0);
      jSPredicateForm1.removeElement(stringReader0);
      jSTerm0.isEmpty();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm2.print();
      jSTerm0.equals(jSPredicateForm3);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm3.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.setSize(63);
      jSSubstitution0.trimToSize();
      System.setCurrentTimeMillis(1L);
      jSPredicateForm2.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm4.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSPredicateForm0.addElement("nor");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSJshopVars.lessT = 91;
      Integer integer0 = new Integer(103);
      jSPredicateForm0.addElement(integer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      SystemInUtil.addInputLine("nor");
      SystemInUtil.addInputLine("failed");
      SystemInUtil.addInputLine("aACGBdB:81");
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9696988451654924
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      Object[] objectArray0 = new Object[2];
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm2.remove((Object) jSPredicateForm5);
      jSPredicateForm4.equals(jSPredicateForm0);
      jSPredicateForm1.removeAll(jSPredicateForm4);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm6.clonePF();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm7.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm7.add((Object) null);
      jSPredicateForm4.removeElement(jSPredicateForm8);
      jSPredicateForm6.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm7.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.remove((Object) streamTokenizer0);
      jSSubstitution0.add((Object) "5~bI,zB");
      jSSubstitution0.parallelStream();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.compose((Function<? super Object, ?>) function1);
      function1.apply(unaryOperator0);
      function1.compose((Function<? super JSTerm, ?>) function2);
      UnaryOperator.identity();
      Function<Integer, Integer> function3 = function2.compose((Function<? super Integer, ?>) function1);
      SystemInUtil.addInputLine("not");
      jSTerm0.lastElement();
      jSTerm0.add((Object) "not");
      UnaryOperator.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function5 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      Function<Integer, String> function6 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      function1.compose((Function<? super Object, ?>) function2);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Integer, ?>) function7);
      Function<Object, Integer> function8 = function1.andThen((Function<? super Integer, ? extends Integer>) function3);
      Function<Object, Integer> function9 = function2.andThen((Function<? super Integer, ? extends Integer>) function8);
      Function.identity();
      Function<Object, Integer> function10 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      function10.andThen((Function<? super Integer, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function10);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bat_(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "5bat_(");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = function1.compose((Function<? super Object, ?>) function2);
      function3.apply(streamTokenizer0);
      UnaryOperator.identity();
      Function<Integer, Integer> function4 = function1.compose((Function<? super Integer, ?>) function2);
      SystemInUtil.addInputLine("wa+3n;j%]riu");
      UnaryOperator.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Integer, String> function6 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      Function<Integer, String> function7 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function6);
      function7.apply((Integer) null);
      Function<Object, Integer> function8 = function2.compose((Function<? super Object, ?>) function1);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function7);
      Integer integer0 = new Integer(2147483645);
      unaryOperator0.apply((Integer) (-2));
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, Object> function9 = unaryOperator2.compose((Function<? super Integer, ?>) function8);
      function3.andThen((Function<? super Integer, ?>) function9);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      function2.andThen((Function<? super Integer, ? extends Integer>) unaryOperator3);
      function1.andThen((Function<? super Integer, ? extends Integer>) function4);
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator4.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bat_(");
      StringReader stringReader1 = new StringReader("3`CbWOCD%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.equals(jSTerm0);
      jSTerm1.addElement("5bat_(");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.clone();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.add((Object) "3`CbWOCD%");
      jSTerm0.iterator();
      jSTerm3.equals(jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.listIterator(1699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9051066634117592
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bzat_(");
      StringReader stringReader1 = new StringReader("5bzat_(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) "gulhu");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.addElement("5bzat_(");
      jSTerm2.standardizerTerm();
      streamTokenizer0.eolIsSignificant(true);
      jSTerm2.clone();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.iterator();
      jSTerm3.equals(jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm3.listIterator(1699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object[] objectArray1 = new Object[15];
      Object object0 = new Object();
      JSJshopVars.rightBrac = 2;
      objectArray1[7] = (Object) comparator0;
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray1[0] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      jSPredicateForm0.add((Object) comparator1);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$718100271 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QV}}y)(3lhu @yK}");
      SystemInUtil.addInputLine("QV}}y)(3lhu @yK}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("QV}}y)(3lhu @yK}");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      SystemInUtil.addInputLine("planinoxdmain:");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSPredicateForm0.addElement("QV}}y)(3lhu @yK}");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bat_(");
      StringReader stringReader1 = new StringReader("3`CbWOCD%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) "gulhu");
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.equals(jSTerm0);
      jSTerm1.addElement("5bat_(");
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm2.clone();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.add((Object) "3`CbWOCD%");
      jSTerm2.iterator();
      jSTerm4.equals(jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm3.listIterator(1699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Pzu\"'d!wko8|6.>s");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(YX~Z1DX(1ShTM");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      streamTokenizer0.commentChar(40);
      streamTokenizer1.pushBack();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.sval = null;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.wordChars(40, 40);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.sval = null;
      streamTokenizer1.wordChars(40, (-4));
      streamTokenizer0.ordinaryChars(40, (-4));
      streamTokenizer0.ttype = 40;
      streamTokenizer1.commentChar(40);
      streamTokenizer1.ordinaryChar(40);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars(40, 40);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.quoteChar(40);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars(40, 40);
      streamTokenizer1.slashSlashComments(true);
      stringReader0.skip(40);
      streamTokenizer0.ordinaryChars(40, 40);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemInUtil.addInputLine("5bat_(");
      SystemInUtil.addInputLine("qv}}y)(glhu @yk}");
      SystemInUtil.addInputLine("qv}}y)(glhu @yk}");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("wA+n%]riU");
      SystemInUtil.addInputLine("a0?mGoZr1#q5Q");
      SystemInUtil.addInputLine("8.0");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemInUtil.addInputLine("5bat_(");
      SystemInUtil.addInputLine("failed");
      SystemInUtil.addInputLine("glhu");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("wA+3n;J%]riU");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "wA+3n;J%]riU");
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SystemInUtil.addInputLine(")");
      SystemInUtil.addInputLine("< ");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("< ");
      SystemInUtil.addInputLine("G2=WWJu^p{Q?B");
      SystemInUtil.addInputLine("< ");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#+X0#aEvZ]lb&_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      stringReader0.close();
      streamTokenizer0.wordChars((-4), (-4));
      SystemInUtil.addInputLine(";");
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      SystemInUtil.addInputLine("(#+X0#aEvZ]lb&_");
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bi,zb");
      StringReader stringReader1 = new StringReader("2.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("5~bi,zb");
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply(jSTerm2);
      UnaryOperator.identity();
      Integer integer0 = new Integer((-3));
      Function<Integer, Object> function1 = unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator1);
      Integer integer1 = new Integer((-2));
      function0.apply(integer1);
      unaryOperator1.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function3.compose((Function<? super Object, ?>) unaryOperator3);
      function3.apply(streamTokenizer1);
      function3.andThen((Function<? super Integer, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super String, ?>) function3);
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "not");
      String string0 = "plningdomai:";
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#+X0#aEvZ]lb&_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      stringReader0.close();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      SystemInUtil.addInputLine("(#+X0#aEvZ]lb&_");
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate0);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Integer> predicate4 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate5 = predicate4.and(predicate3);
      predicate5.and(predicate0);
      Predicate<Integer> predicate6 = predicate5.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate3);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate4);
      predicate10.negate();
      predicate9.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate2.negate();
      jSTerm0.standarizerPredicateForm();
      predicate7.and(predicate0);
      predicate9.and(predicate12);
      predicate3.negate();
      predicate12.test(predicate0);
      predicate8.test("nor");
      Predicate<Object> predicate13 = predicate12.or(predicate11);
      Predicate<Object> predicate14 = predicate13.negate();
      assertFalse(predicate14.equals((Object)predicate8));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("5~bi,zb");
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator1);
      SystemInUtil.addInputLine("pzu");
      Integer integer0 = new Integer((-3));
      function0.apply(integer0);
      Function<Integer, Object> function1 = unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator1);
      Integer integer1 = new Integer((-2));
      function0.apply(integer1);
      unaryOperator1.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function3.compose((Function<? super Object, ?>) unaryOperator3);
      function3.andThen((Function<? super Integer, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super String, ?>) function3);
      jSTerm0.iterator();
      CharBuffer.allocate('u');
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object[] objectArray1 = new Object[15];
      Object object0 = new Object();
      objectArray1[7] = (Object) comparator0;
      jSPredicateForm0.add(objectArray0[0]);
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray1[0] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = (-24);
      Integer integer0 = new Integer(1631);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("/arx9f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bat_(");
      StringReader stringReader1 = new StringReader("3`CbWOCD%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) "gulhu");
      jSTerm1.add((Object) jSTerm0);
      SystemInUtil.addInputLine("5bat_(");
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.equals(jSTerm0);
      jSTerm1.addElement("5bat_(");
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm2.clone();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.add((Object) "3`CbWOCD%");
      jSTerm2.iterator();
      jSTerm4.equals(jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm3.listIterator(1699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(443);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#+X0#aEvZ]lb&_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-1102), 3601);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bi,zb");
      StringReader stringReader1 = new StringReader("2.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("5~bi,zb");
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm1 = (JSTerm)unaryOperator3.apply(jSTerm0);
      UnaryOperator.identity();
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer('u');
      Integer integer2 = new Integer((-4));
      function0.apply(integer2);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      function2.compose((Function<? super Object, ?>) unaryOperator3);
      function2.apply(streamTokenizer1);
      function2.andThen((Function<? super Integer, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super String, ?>) function2);
      jSTerm0.replaceAll(unaryOperator0);
      CharBuffer.allocate('u');
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[13];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      jSTerm0.add((Object) null);
      JSJshopVars.slash = 37;
      objectArray0[2] = (Object) jSTerm0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[5] = (Object) null;
      jSPredicateForm0.toArray(objectArray0);
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bi,zb");
      StringReader stringReader1 = new StringReader("2.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("5~bi,zb");
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply(jSTerm1);
      UnaryOperator.identity();
      Integer integer0 = new Integer((-3));
      function0.apply(integer0);
      Function<Integer, Object> function1 = unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator1);
      Integer integer1 = new Integer((-4));
      function0.apply(integer1);
      unaryOperator1.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function3.compose((Function<? super Object, ?>) unaryOperator3);
      function3.apply(streamTokenizer1);
      function3.andThen((Function<? super Integer, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super String, ?>) function3);
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.iterator();
      CharBuffer.allocate('u');
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SystemInUtil.addInputLine("QV}}y)(glhu @yK}");
      StringReader stringReader0 = new StringReader("QV}}y)(glhu @yK}");
      stringReader0.reset();
      SystemInUtil.addInputLine("QV}}y)(glhu @yK}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.compose((Function<? super Object, ?>) function1);
      Function<Object, Integer> function3 = function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, Object> function4 = unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator1);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      SystemInUtil.addInputLine("qky");
      Function.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) function3);
      unaryOperator3.andThen((Function<? super String, ?>) function1);
      JSTerm jSTerm1 = new JSTerm();
      Function<Object, Integer> function6 = unaryOperator4.compose((Function<? super Object, ? extends Integer>) function3);
      function5.compose((Function<? super Object, ?>) function6);
      Function<Object, Integer> function7 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      function7.apply(function4);
      function7.andThen((Function<? super Integer, ? extends Integer>) function3);
      unaryOperator3.andThen((Function<? super String, ?>) function2);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm1.iterator();
      CharBuffer.allocate(160);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis((-2382));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4188);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[24];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[5] = (Object) null;
      Object[] objectArray1 = new Object[15];
      Object object0 = new Object();
      objectArray1[7] = (Object) comparator0;
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray1[0] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      Object object1 = new Object();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object[] objectArray1 = new Object[15];
      Object object0 = new Object();
      objectArray1[7] = (Object) comparator0;
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray0[3] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      Object object1 = new Object();
      jSPredicateForm0.print();
      assertEquals("[]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "6w6>!9OMr`c-}d";
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      Reader reader0 = null;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      String string1 = "|";
      StringReader stringReader1 = new StringReader("pkrvy5u1y");
      StringReader stringReader2 = new StringReader("pkrvy5u1y");
      String string2 = null;
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSJshopVars.leftBrac = 3;
      jSPredicateForm0.addAll((Collection) jSPredicateForm1);
      jSPredicateForm0.iterator();
      jSPredicateForm1.add(0, (Object) jSPredicateForm0);
      jSPredicateForm0.removeAll(jSPredicateForm1);
      jSPredicateForm0.equals((JSPredicateForm) null);
      jSPredicateForm0.isEmpty();
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = function1.compose((Function<? super Object, ?>) function1);
      Function<Object, Integer> function3 = function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, Object> function4 = unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator1);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      SystemInUtil.addInputLine("qky");
      Function.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) function3);
      Function<String, Object> function6 = unaryOperator3.andThen((Function<? super String, ?>) function1);
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, Integer> function7 = unaryOperator4.compose((Function<? super Object, ? extends Integer>) function3);
      jSTerm0.add((Object) function6);
      function5.compose((Function<? super Object, ?>) function7);
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function7);
      function8.apply(function4);
      function8.andThen((Function<? super Integer, ? extends Integer>) function3);
      unaryOperator3.andThen((Function<? super String, ?>) function2);
      jSTerm0.iterator();
      CharBuffer.allocate(160);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$53/1343779324 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      jSPredicateForm0.toArray(objectArray0);
      Object[] objectArray1 = new Object[12];
      Object object0 = new Object();
      objectArray1[7] = (Object) comparator0;
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray1[0] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      Object object1 = new Object();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "pkrvy5u21y");
      jSPredicateForm0.toStr();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.negate();
      predicate1.test("ygL!}E*kHEp8@");
      Predicate<String> predicate3 = predicate1.and(predicate2);
      Predicate<String> predicate4 = predicate2.negate();
      predicate4.test("ygL!}E*kHEp8@");
      predicate2.negate();
      predicate4.negate();
      Predicate<String> predicate5 = predicate0.negate();
      Predicate.isEqual((Object) predicate1);
      predicate5.test("u@\"aV7M 6A0gr");
      predicate5.test("ygL!}E*kHEp8@");
      Predicate<String> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) "Expecting elements ofthelst");
      predicate1.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate8);
      predicate9.or(predicate8);
      predicate8.negate();
      Predicate<Object> predicate10 = predicate7.negate();
      predicate10.test(predicate6);
      predicate6.or(predicate10);
      predicate6.test("ygL!}E*kHEp8@");
      predicate0.test("_oNUDV]/Ti-lJtPi");
      predicate7.negate();
      predicate0.negate();
      predicate8.negate();
      predicate8.negate();
      predicate9.negate();
      Predicate<Object> predicate11 = predicate8.negate();
      assertNotSame(predicate8, predicate11);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5bat_(");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      Integer integer0 = new Integer((-52));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      Integer integer1 = new Integer((-3));
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Integer, Integer> function1 = unaryOperator2.compose((Function<? super Integer, ? extends Integer>) function0);
      function1.apply(integer0);
      // Undeclared exception!
      try { 
        unaryOperator2.andThen((Function<? super Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object[] objectArray1 = new Object[15];
      Object object0 = new Object();
      objectArray1[7] = (Object) comparator0;
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray1[0] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      Object object1 = new Object();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#+X0#aEvZ]lbu_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      SystemInUtil.addInputLine("(#+X0#aEvZ]lbu_");
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("A~ ,/$(=)WRt;");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "(Pru@'!wPk\\o|6c>s";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Pru@'!wPko|6c>s");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(#+X0#aEvZ]lb&_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      SystemInUtil.addInputLine("(#+X0#aEvZ]lb&_");
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object[] objectArray1 = new Object[15];
      Object object0 = new Object();
      objectArray1[7] = (Object) comparator0;
      objectArray1[7] = (Object) (-319352257);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray1[0] = (Object) (-319352257);
      objectArray1[0] = (Object) null;
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SystemInUtil.addInputLine("5bat_(");
      SystemInUtil.addInputLine("qv}}y)(glhu @yk}");
      SystemInUtil.addInputLine("qv}}y)(glhu @yk}");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("wA+n%]riU");
      SystemInUtil.addInputLine("a0?mGoZr1#q5Q");
      SystemInUtil.addInputLine("8.0");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }
}
