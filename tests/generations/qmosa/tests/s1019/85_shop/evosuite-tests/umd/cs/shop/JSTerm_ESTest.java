/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 21:12:34 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7526528377305026
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcIP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSSubstitution1.add((Object) spliterator0);
      jSTerm2.firstElement();
      jSSubstitution0.add((Object) "T), VKGGQZ-+zcIP&");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.isGround();
      jSTerm1.isEmpty();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm5 = jSTerm2.call();
      jSTerm0.isGround();
      jSTerm5.isGround();
      jSTerm3.isGround();
      jSTerm3.equals(jSTerm3);
      jSTerm5.isGround();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm5.call();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      StringReader stringReader0 = new StringReader("T), VKGGQZ-+zcIP&");
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2692404415462466
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSJshopVars.semicolon = (-343);
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      System.setCurrentTimeMillis((-343));
      System.setCurrentTimeMillis((-343));
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.553185718936006
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.isVariable();
      jSSubstitution4.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution6.add((Object) jSSubstitution1);
      jSTerm0.matches(jSTerm0, jSSubstitution6);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.550646211689392
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("wtdrd");
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("wtdrd");
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isFunction();
      System.setCurrentTimeMillis((-2369L));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      jSTerm0.print();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3241678886489705
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGpQZ-+zcIP&");
      JSJshopVars.astherisk = 1485;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeFunction();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftPar = 1;
      jSTerm1.iterator();
      JSJshopVars.coma = 43;
      jSTerm0.trimToSize();
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.254395885378094
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ":7");
      jSTerm0.call();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSSubstitution2.add((Object) spliterator0);
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.listIterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.cloneS();
      jSSubstitution4.trimToSize();
      jSSubstitution2.add((Object) "2[;TI{");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution2.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution1.add(object0);
      jSSubstitution2.clear();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution4);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.748289628477111
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.remove((Object) jSSubstitution5);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(tqK");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.q");
      Function<String, Object> function0 = unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Integer, ? extends String>) function1);
      unaryOperator2.apply("");
      Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator3.andThen((Function<? super String, ? extends Integer>) function4);
      function3.andThen((Function<? super String, ? extends Integer>) function5);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function6);
      Function<String, String> function7 = unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator2);
      Function<Object, String> function8 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<String, Object> function9 = unaryOperator0.compose((Function<? super String, ?>) function7);
      function0.andThen((Function<? super Object, ? extends String>) function8);
      Function.identity();
      Function.identity();
      function7.apply("Zs1");
      unaryOperator2.apply("");
      function9.apply("");
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.580906009824722
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      jSSubstitution1.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSSubstitution2.iterator();
      jSSubstitution0.addElements(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution6.addElement(jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.removeAll(jSSubstitution5);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.244950896533686
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("wtdrd");
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("wtdrd");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      jSTerm0.makeEval(true);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate5.or(predicate0);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      Predicate.isEqual((Object) predicate4);
      Predicate<Integer> predicate11 = predicate9.or(predicate4);
      Predicate<Object> predicate12 = predicate10.and(predicate6);
      Predicate.isEqual((Object) predicate7);
      predicate12.negate();
      jSTerm0.isEval();
      predicate4.negate();
      Predicate<Integer> predicate13 = predicate9.and(predicate6);
      Predicate<Integer> predicate14 = predicate11.negate();
      Predicate.isEqual((Object) predicate8);
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate<Integer> predicate16 = predicate13.and(predicate10);
      predicate16.and(predicate15);
      System.setCurrentTimeMillis((-2369L));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.688315151174241
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcIP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSSubstitution1.add((Object) spliterator0);
      jSTerm2.firstElement();
      jSSubstitution0.add((Object) "T), VKGGQZ-+zcIP&");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.cloneS();
      jSSubstitution3.trimToSize();
      jSSubstitution1.add((Object) "2[;TI{");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.add((Object) "T), VKGGQZ-+zcIP&");
      jSSubstitution1.clear();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm0.toStr();
      assertEquals("[T), VKGGQZ-+zcIP&, [T), VKGGQZ-+zcIP&]]", jSTerm0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      Integer integer0 = new Integer(1753);
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer1 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer1);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      Predicate.isEqual((Object) predicate1);
      predicate5.negate();
      predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate2);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.636371922814591
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcIP&");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSSubstitution1.add((Object) spliterator0);
      jSTerm2.firstElement();
      jSSubstitution0.add((Object) "T), VKGGQZ-+zcIP&");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.trimToSize();
      jSSubstitution1.add((Object) "2[;TI{");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution6);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSTerm jSTerm3 = jSTerm1.call();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution7);
      StringReader stringReader0 = new StringReader("2[;TI{");
      jSTerm3.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer0);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      predicate4.negate();
      Predicate<Integer> predicate7 = predicate5.negate();
      predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate2);
      stringReader0.ready();
      Predicate<Integer> predicate8 = predicate3.or(predicate7);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate9);
      predicate4.and(predicate1);
      predicate7.and(predicate0);
      predicate6.negate();
      predicate8.and(predicate1);
      predicate4.and(predicate10);
      System.setCurrentTimeMillis((-1028L));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 84;
      Integer integer0 = new Integer(84);
      Function.identity();
      UnaryOperator.identity();
      Integer integer1 = new Integer(84);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(84);
      Integer integer2 = new Integer(84);
      jSTerm0.addElement(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1122339548481994
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(" Expected (");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.spliterator();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution6);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals("[word, [word]]", jSTerm0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.690507387779419
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) "x{ha*\"v?7Dxi");
      jSTerm0.call();
      jSTerm2.removeAll(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.clear();
      StringReader stringReader0 = new StringReader("x{ha*\"v?7Dxi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.trimToSize();
      jSTerm2.equals(jSTerm0);
      jSTerm0.isGround();
      System.setCurrentTimeMillis(795L);
      jSTerm2.equals(jSTerm1);
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm2.removeElementAt(46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(tqK");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.q");
      Function<String, Object> function0 = unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Integer, ? extends String>) function1);
      unaryOperator2.apply("");
      Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator3.andThen((Function<? super String, ? extends Integer>) function4);
      function3.andThen((Function<? super String, ? extends Integer>) function5);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function6);
      Function<String, String> function7 = unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function3);
      Function<String, Object> function9 = unaryOperator4.compose((Function<? super String, ?>) function7);
      function0.andThen((Function<? super Object, ? extends String>) function8);
      Function.identity();
      function0.apply("");
      Function.identity();
      function7.apply("Zs1");
      unaryOperator2.apply("");
      function9.apply("");
      Function.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      Integer integer0 = new Integer(1753);
      jSTerm0.add((Object) integer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer1 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer1);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate2);
      stringReader0.ready();
      predicate3.or(predicate8);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = predicate6.and(predicate10);
      Predicate<Integer> predicate12 = predicate4.and(predicate1);
      Predicate<Object> predicate13 = predicate6.negate();
      predicate7.negate();
      predicate9.test((Object) null);
      Predicate.isEqual((Object) predicate1);
      predicate9.and(predicate13);
      Predicate.isEqual((Object) predicate6);
      predicate6.test(predicate7);
      predicate0.and(predicate11);
      predicate12.negate();
      predicate0.and(predicate9);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("name");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "name");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "name");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer0);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate10 = Predicate.isEqual((Object) predicate2);
      stringReader0.ready();
      predicate3.or(predicate8);
      Predicate<Object> predicate11 = predicate2.negate();
      Predicate<Object> predicate12 = predicate6.and(predicate11);
      Predicate<Integer> predicate13 = predicate4.and(predicate1);
      Predicate<Object> predicate14 = predicate6.negate();
      predicate7.negate();
      predicate9.and(predicate14);
      predicate12.negate();
      Predicate<Object> predicate15 = predicate1.negate();
      Predicate<Object> predicate16 = predicate9.and(predicate15);
      predicate16.test(predicate15);
      predicate10.and(predicate4);
      predicate0.negate();
      predicate13.and(predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer0);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate10 = Predicate.isEqual((Object) predicate2);
      stringReader0.ready();
      predicate3.or(predicate8);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate6.and(predicate11);
      Predicate<Integer> predicate12 = predicate4.and(predicate1);
      Predicate<Object> predicate13 = predicate6.negate();
      predicate7.negate();
      predicate9.and(predicate13);
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate15 = predicate9.and(predicate14);
      predicate15.test(predicate14);
      predicate10.and(predicate4);
      predicate0.negate();
      predicate12.and(predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6905146798466686
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcIP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSSubstitution1.add((Object) spliterator0);
      jSTerm2.firstElement();
      jSSubstitution0.add((Object) "T), VKGGQZ-+zcIP&");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.cloneS();
      jSSubstitution3.trimToSize();
      jSSubstitution1.add((Object) "2[;TI{");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.add((Object) "T), VKGGQZ-+zcIP&");
      jSSubstitution1.clear();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm0.isGround();
      jSTerm3.cloneT();
      assertEquals("[T), VKGGQZ-+zcIP&, [T), VKGGQZ-+zcIP&]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6537557468058677
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader("JSTerm");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader1.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Object object0 = jSTerm0.clone();
      jSSubstitution0.add(object0);
      streamTokenizer0.sval = "";
      streamTokenizer0.whitespaceChars(99, (-2));
      streamTokenizer0.parseNumbers();
      stringReader1.read();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.431848439223888
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(55);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addAll((Collection) jSSubstitution0);
      jSSubstitution1.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution1);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1561L));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(tq\"");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function<String, String> function1 = Function.identity();
      function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Function<String, String> function2 = function1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      Function.identity();
      Function<String, Object> function3 = unaryOperator0.compose((Function<? super String, ?>) function2);
      int int0 = (-3308);
      Integer integer0 = new Integer((-3308));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("5.0");
      jSTerm0.addElement(function3);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$54/1732127383 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4495431885992103
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.add((Object) jSTerm0);
      assertEquals("[not, [not]]", jSTerm1.toString());
      
      jSTerm0.isGround();
      jSTerm1.print();
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.787807085379299
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcIP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addElement(jSTerm2);
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSSubstitution2.add((Object) spliterator0);
      jSTerm3.firstElement();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution4 = jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.trimToSize();
      jSSubstitution4.add((Object) spliterator0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution3.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) "2[;TI{");
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution7.clear();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution9);
      jSTerm1.call();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      Integer integer0 = new Integer(1753);
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer1 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Integer> predicate4 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.and(predicate2);
      predicate4.test(integer1);
      Predicate<Object> predicate7 = predicate3.or(predicate3);
      Predicate.isEqual((Object) predicate2);
      Predicate<Integer> predicate8 = predicate6.negate();
      Predicate<Integer> predicate9 = predicate8.negate();
      stringReader1.ready();
      Predicate<Object> predicate10 = predicate3.negate();
      predicate7.and(predicate10);
      Predicate<Object> predicate11 = predicate1.negate();
      Predicate<Integer> predicate12 = predicate5.and(predicate11);
      predicate7.negate();
      predicate9.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) predicate7);
      predicate0.and(predicate11);
      predicate12.negate();
      predicate0.and(predicate11);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("j3^I79/+jPk6^");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "j3^I79/+jPk6^");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate.isEqual((Object) integer0);
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "j3^I79/+jPk6^");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer0);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate10 = predicate4.negate();
      stringReader0.ready();
      predicate3.or(predicate8);
      predicate2.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      predicate4.and(predicate1);
      Predicate<Object> predicate12 = predicate6.negate();
      predicate7.negate();
      predicate9.and(predicate12);
      predicate11.negate();
      Predicate<Object> predicate13 = predicate1.negate();
      Predicate<Object> predicate14 = predicate9.and(predicate13);
      predicate14.test(predicate13);
      predicate10.and(predicate4);
      predicate7.negate();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "wtord";
      jSTerm0.addElement("wtord");
      jSTerm0.add((Object) "wtord");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("c7cprst");
      Integer integer0 = new Integer(1753);
      jSTerm0.add((Object) integer0);
      StringReader stringReader1 = new StringReader("c7cprst");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      Integer integer1 = new Integer(2287);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer2 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Integer> predicate4 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      streamTokenizer0.ttype = 1753;
      predicate5.and(predicate2);
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Integer> predicate8 = predicate5.negate();
      Predicate<Integer> predicate9 = predicate8.negate();
      stringReader1.ready();
      Integer integer3 = new Integer(1753);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) integer3);
      Predicate<Integer> predicate11 = predicate5.and(predicate10);
      predicate7.negate();
      Predicate<Integer> predicate12 = predicate9.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) predicate7);
      predicate12.and(predicate5);
      predicate11.negate();
      predicate5.and(predicate12);
      System.setCurrentTimeMillis(1753);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.727165473933309
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeVariable();
      Integer integer0 = new Integer((-2));
      jSTerm1.clone();
      JSTerm jSTerm2 = jSTerm0.call();
      boolean boolean1 = jSTerm1.equals(jSTerm2);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jSTerm2.equals(jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isFunction());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4788379289287468
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.add((Object) "T), VKGGQZ-+zcP&");
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.clear();
      jSTerm2.equals(jSTerm3);
      System.setCurrentTimeMillis(1L);
      jSTerm3.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("wtdrd");
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      jSTerm0.add((Object) integer1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oE16_{o:{6xEQ&l)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm0);
      assertTrue(jSTerm0.isFunction());
      
      jSSubstitution2.add((Object) "oE16_{o:{6xEQ&l)");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.standarizerSubs();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      jSTerm0.addElement((Object) null);
      jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2355868124807694
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1876));
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.324942207779863
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "To), VKGGQZ-+zcP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      jSTerm0.add((Object) "To), VKGGQZ-+zcP&");
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.removeAll(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.clear();
      jSTerm2.trimToSize();
      jSTerm2.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4069145052641097
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oE16_{o:{6xEQ&l)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm0);
      assertTrue(jSTerm0.isFunction());
      
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSSubstitution5.standarizerSubs();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSTerm0.matches(jSTerm0, jSSubstitution6);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4755567021056906
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oE16_{o:{6xEQ&l)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution6.clone();
      jSSubstitution6.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution7 = jSTerm0.matches(jSTerm1, jSSubstitution6);
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9594045983154569
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "0.0");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isFunction();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis((-2));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%a$kbW88,N", 2, 2);
      stringReader0.read(charBuffer0);
      streamTokenizer0.wordChars(2, 2175);
      stringReader0.skip((-4));
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.725223219672416
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      predicate3.negate();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate3);
      predicate6.or(predicate5);
      predicate2.or(predicate4);
      predicate2.test("word");
      Predicate<Integer> predicate7 = predicate6.negate();
      Predicate<Integer> predicate8 = predicate7.or(predicate3);
      jSTerm1.setSize(797);
      Predicate.isEqual((Object) null);
      Predicate<Integer> predicate9 = predicate7.negate();
      predicate7.or(predicate0);
      Predicate<Object> predicate10 = predicate4.and(predicate0);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      predicate8.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate13 = predicate1.negate();
      predicate12.and(predicate13);
      predicate9.and(predicate12);
      jSTerm1.trimToSize();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm2.call();
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4377836215525712
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VKGGQZ-+zcP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      Integer integer0 = new Integer(208);
      jSTerm0.add((Object) "T), VKGGQZ-+zcP&");
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.removeAll(jSTerm0);
      jSTerm2.standarizerPredicateForm();
      JSJshopVars.exclamation = 208;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.clear();
      jSTerm2.trimToSize();
      StringReader stringReader0 = new StringReader("T), VKGGQZ-+zcP&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-152), 988);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars(128, (-5996));
      System.setCurrentTimeMillis(1737L);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8341683311778008
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-739), (-477));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.clear();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6232858469804143
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(84);
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator.identity();
      Integer integer1 = new Integer(730);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      unaryOperator1.andThen((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<String, Object> function1 = unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function1);
      Integer integer2 = new Integer(1);
      jSTerm0.addElement(unaryOperator0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("5.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm1.cloneT();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm3.isGround();
      assertEquals(1, jSTerm0.size());
      
      jSTerm2.isGround();
      jSTerm4.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm4.isVariable());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.511345813092651
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("yoD");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate7 = predicate6.or(predicate4);
      Predicate<Object> predicate8 = predicate2.or(predicate0);
      predicate2.test("yoD");
      Predicate<Integer> predicate9 = predicate6.negate();
      predicate9.or(predicate3);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate.isEqual((Object) null);
      predicate8.or(predicate3);
      Predicate<Integer> predicate11 = predicate7.negate();
      Predicate<Integer> predicate12 = predicate9.or(predicate0);
      Predicate<Object> predicate13 = predicate0.and(predicate0);
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate14.negate();
      predicate12.negate();
      predicate15.negate();
      predicate10.negate();
      predicate13.and(predicate8);
      Predicate.isEqual((Object) predicate0);
      predicate11.negate();
      Predicate<Object> predicate16 = predicate1.negate();
      predicate15.and(predicate16);
      predicate11.and(predicate15);
      jSTerm1.trimToSize();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2930821353869817
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oE16_{o:{6xEQ&l)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm0);
      assertFalse(jSTerm0.isConstant());
      
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution0.assignFailure();
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSSubstitution5.standarizerSubs();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      jSTerm0.matches(jSTerm0, jSSubstitution6);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.79723476314038
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm0.addElement(jSSubstitution2);
      jSSubstitution1.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSSubstitution2.iterator();
      jSSubstitution0.addElements(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution6.addElement(jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution5);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.69208484551288
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.interrogation = 35;
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm0.addElement(jSSubstitution2);
      jSSubstitution1.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSSubstitution0.addElements(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution6.addElement(jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution10);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm0.toStr();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("FB%\"9GX-DUK~35efK");
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      Integer integer0 = new Integer(1753);
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer1 = new Integer((-2117));
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) "FB%\"9GX-DUK~35efK");
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Integer> predicate5 = predicate4.and(predicate1);
      predicate3.test(integer1);
      Predicate<Object> predicate6 = predicate2.or(predicate2);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate9);
      stringReader0.ready();
      predicate3.or(predicate8);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = predicate6.and(predicate10);
      predicate4.and(predicate1);
      predicate6.negate();
      predicate7.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) predicate6);
      predicate6.test(predicate7);
      predicate0.and(predicate11);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 1529;
      JSJshopVars.rightBrac = 2328;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      long long0 = (-53L);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("ord");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      predicate3.negate();
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate3);
      Predicate<Integer> predicate7 = predicate6.or(predicate5);
      predicate2.or(predicate4);
      predicate2.test("ord");
      Predicate<Integer> predicate8 = predicate6.negate();
      Predicate<Integer> predicate9 = predicate8.or(predicate3);
      predicate5.negate();
      Predicate.isEqual((Object) null);
      Predicate<Integer> predicate10 = predicate7.negate();
      predicate8.or(predicate0);
      Predicate<Object> predicate11 = predicate1.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      predicate9.negate();
      predicate12.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate13 = predicate1.negate();
      predicate12.and(predicate13);
      predicate10.and(predicate12);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9003203935372497
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader("JSTerm");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader1.skip((-4));
      streamTokenizer0.sval = "";
      streamTokenizer0.parseNumbers();
      stringReader1.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm0.addElement(jSSubstitution2);
      jSSubstitution1.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSSubstitution0.addElements(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution6.addElement(jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      assertEquals("[word, []]", jSTerm0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(84);
      Function.identity();
      UnaryOperator.identity();
      Integer integer1 = new Integer(692);
      Integer integer2 = new Integer(84);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("b");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(692);
      streamTokenizer0.commentChar(692);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.79723476314038
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm0.addElement(jSSubstitution2);
      jSSubstitution1.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution2.iterator();
      jSSubstitution0.addElements(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.assignFailure();
      jSSubstitution5.addElement(jSSubstitution2);
      jSSubstitution5.retainAll(jSSubstitution1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.168599339177026
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(2019);
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Integer integer1 = new Integer(2019);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      Integer integer2 = new Integer(2019);
      jSSubstitution0.add((Object) integer2);
      Integer integer3 = new Integer(2019);
      jSSubstitution0.add((Object) integer3);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4420445176552605
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution2);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution0.addElements(jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution6.addElement(jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution1);
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution6.instance(jSTerm0);
      jSSubstitution3.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution6.add((Object) jSTerm1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution0.containsAll(jSSubstitution3);
      jSSubstitution2.add((Object) jSSubstitution7);
      jSSubstitution7.clear();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.matches(jSTerm1);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("%a$kbW88,N");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("%a$kbW88,N");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, String> function2 = Function.identity();
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      UnaryOperator.identity();
      Function<String, Object> function4 = unaryOperator2.compose((Function<? super String, ?>) function3);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      function4.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<String, Object> function5 = unaryOperator3.andThen((Function<? super String, ?>) function2);
      function5.apply("%a$kbW88,N");
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) function2);
      Integer integer0 = new Integer((-1789));
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.quoteChar(125);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      int int0 = stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar((-3));
      streamTokenizer1.wordChars(37, 70);
      jSTerm0.cloneT();
      Integer integer0 = new Integer(97);
      Integer integer1 = new Integer(43);
      assertFalse(integer1.equals((Object)int0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar((-3));
      streamTokenizer1.wordChars(37, 70);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(90, 97);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.commentChar(46);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.ttype = 2256;
      streamTokenizer2.ordinaryChars(2256, 90);
      streamTokenizer2.quoteChar(45);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(3, stringBuffer0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.allocate(37);
      stringReader0.read(charBuffer0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ttype = 37;
      streamTokenizer1.quoteChar((-3));
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isEval());
      assertEquals("[%a]", jSTerm0.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(84);
      Function.identity();
      UnaryOperator.identity();
      Integer integer1 = new Integer(692);
      Integer integer2 = new Integer(84);
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 1;
      Integer integer3 = new Integer(1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STD@OeW;]D4qjP");
      stringReader0.mark(2589);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2304.405127067472;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator3.apply("BrmuRbNe)z");
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator4);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'H';
      charArray0[2] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aAlXLP%");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("6H5;iC8U0Yp.b^$R|");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("6H5;iC8U0Yp.b^$R|");
      Function<String, String> function0 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator2);
      Function<String, String> function1 = Function.identity();
      function0.andThen((Function<? super String, ? extends String>) unaryOperator4);
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4863125658959901
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar((-3));
      streamTokenizer1.wordChars(37, 70);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars(90, (-3));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.commentChar(90);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = 70;
      streamTokenizer1.ordinaryChars(90, 90);
      streamTokenizer0.quoteChar(45);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator3.apply("BrmuRbNe)z");
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator4);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.quoteChar(125);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.allocate(37);
      stringReader0.read(charBuffer0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ttype = 37;
      streamTokenizer1.quoteChar((-3));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals("[%a]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8626679928875178
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8484077433331505
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      streamTokenizer0.quoteChar(710);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChar(1);
      streamTokenizer1.wordChars(37, 70);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      JSTerm jSTerm1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.153509212657306
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T), VGGQZ-+zcP&");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      jSTerm0.add((Object) "T), VGGQZ-+zcP&");
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.removeAll(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.clear();
      jSTerm2.trimToSize();
      jSTerm2.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(tqK");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.q");
      Function<String, Object> function0 = unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("");
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function4);
      Function<String, String> function5 = unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      Function<String, Object> function7 = unaryOperator4.compose((Function<? super String, ?>) function5);
      function0.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      function0.apply("");
      Function.identity();
      function5.apply("Zs1");
      unaryOperator2.apply("");
      function7.apply("");
      Function.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      StringReader stringReader1 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(4027L);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("20x&z5n-q`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-3), 43);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'h';
      charArray0[2] = 'C';
      charArray0[3] = 'u';
      charArray0[4] = '@';
      charArray0[5] = 'Y';
      charArray0[6] = 'h';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 74, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.2931300021708616
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STD@OeW;]D4qjP");
      stringReader0.mark(2589);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2279.5230687435323;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      System.setCurrentTimeMillis(2589);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9594045983154569
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar((-3));
      streamTokenizer1.wordChars(37, (-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(90, 97);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer0.commentChar(46);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.ttype = 2256;
      streamTokenizer2.ordinaryChars(2256, 90);
      streamTokenizer2.quoteChar(45);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("[%a]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.addElement("8mU$l");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.leftPar = (-3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(37, 87);
      streamTokenizer1.ttype = 37;
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator3.apply("BrmuRbNe)z");
      UnaryOperator.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      jSSubstitution0.clone();
      jSSubstitution0.add((Object) unaryOperator0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wtdrd");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate5.or(predicate0);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      predicate4.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate9 = predicate6.or(predicate5);
      Predicate.isEqual((Object) predicate4);
      Predicate<Integer> predicate10 = predicate8.or(predicate4);
      Predicate<Object> predicate11 = predicate9.and(predicate6);
      predicate11.negate();
      predicate0.test("wtdrd");
      predicate4.negate();
      Predicate<Integer> predicate12 = predicate8.and(predicate6);
      Predicate<Integer> predicate13 = predicate10.negate();
      predicate6.test(predicate9);
      Predicate.isEqual((Object) predicate7);
      Predicate<Integer> predicate14 = predicate13.negate();
      Predicate<Integer> predicate15 = predicate12.and(predicate9);
      predicate15.and(predicate14);
      System.setCurrentTimeMillis((-2369L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.4069145052641097
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oE16_{o:{6xEQ&l)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSSubstitution5.standarizerSubs();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSTerm0.matches(jSTerm1, jSSubstitution6);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function4 = Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator2.andThen((Function<? super String, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      Function<String, Object> function6 = unaryOperator0.compose((Function<? super String, ?>) function4);
      Function<String, Object> function7 = unaryOperator0.compose((Function<? super String, ?>) function3);
      function7.andThen((Function<? super Object, ? extends String>) function5);
      Function.identity();
      function7.apply("5.0");
      Function<String, String> function8 = Function.identity();
      function8.apply("5.0");
      unaryOperator3.apply("Zs1");
      function6.apply("5.0");
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function0);
      StringReader stringReader0 = new StringReader("5.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("%a$kbW88,N");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((String) null);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator2.compose((Function<? super Object, ?>) function1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator.identity();
      Function<String, String> function2 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator1.apply("BrmuRbNe)z");
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(unaryOperator0);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("BrmuRbNe)z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(125);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [BrmuRbNe], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.4755567021056906
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oE16_{o:{6xEQ&l)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution1.iterator();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.addElement(jSSubstitution3);
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution6.clone();
      jSSubstitution6.add((Object) jSSubstitution1);
      jSTerm0.matches(jSTerm1, jSSubstitution6);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.listIterator();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution2.add((Object) "kb-|Ay#l9r|8h;");
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.remove((Object) jSSubstitution5);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution1.containsAll(jSSubstitution4);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("word");
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm0.addElement(jSSubstitution2);
      jSSubstitution1.spliterator();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSSubstitution0.addElements(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.assignFailure();
      jSSubstitution6.addElement(jSSubstitution2);
      jSSubstitution6.retainAll(jSSubstitution1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution10.add((Object) jSSubstitution9);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5495218212450121
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator3.apply("BrmuRbNe)z");
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator4);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.quoteChar(125);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("%a$kbW88,N");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((String) null);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<String, String> function3 = Function.identity();
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      function5.apply(function3);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function4);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function4);
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      function3.apply(" Term expected");
      Function<String, String> function6 = function3.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function7 = function6.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function8 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function7);
      Function.identity();
      Function<String, String> function9 = function6.andThen((Function<? super String, ? extends String>) function8);
      function2.compose((Function<? super String, ?>) function9);
      Function.identity();
      function6.apply(" Expected (");
      Function.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) function6);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function5);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wtdrd");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate5.or(predicate0);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      Predicate.isEqual((Object) predicate4);
      Predicate<Integer> predicate11 = predicate9.or(predicate4);
      Predicate<Object> predicate12 = predicate10.and(predicate6);
      Predicate.isEqual((Object) predicate7);
      predicate12.negate();
      predicate0.test("wtdrd");
      predicate4.negate();
      Predicate<Integer> predicate13 = predicate9.and(predicate6);
      Predicate<Integer> predicate14 = predicate11.negate();
      predicate6.test(predicate10);
      Predicate.isEqual((Object) predicate8);
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate<Integer> predicate16 = predicate13.and(predicate10);
      predicate16.and(predicate15);
      System.setCurrentTimeMillis((-2369L));
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator3.apply("BrmuRbNe)z");
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator4);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.quoteChar(125);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-4);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.wordChars(37, 70);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.wordChars(37, (-1435562886));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer0.whitespaceChars((-3), (-1439144109));
      streamTokenizer0.ttype = 70;
      streamTokenizer2.ordinaryChars((-3), (-3));
      streamTokenizer2.quoteChar(45);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip(37);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSJshopVars.verticalL = (-1327);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isConstant();
      System.setCurrentTimeMillis((-1327));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.618361979741048
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isVariable();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4648231071394098
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator1.apply("5.0");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply((Object) null);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-125));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.2064759208601339
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$ZbW88,N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      CharBuffer.allocate(37);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftPar = (-3);
      streamTokenizer0.quoteChar(710);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar(1);
      streamTokenizer1.wordChars(37, 70);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(90, 97);
      streamTokenizer2.ordinaryChars(2256, (-2));
      streamTokenizer2.pushBack();
      streamTokenizer2.quoteChar(45);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
