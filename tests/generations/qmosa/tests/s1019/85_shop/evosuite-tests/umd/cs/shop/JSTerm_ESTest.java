/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 14:56:40 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(50);
      jSSubstitution0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-13L));
      StringReader stringReader0 = new StringReader("(J,mtd)j7=s-G/7Z8Q\" ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1336));
      StringReader stringReader1 = new StringReader("99");
      stringReader1.skip((-1336));
      streamTokenizer0.ordinaryChar(1396);
      streamTokenizer0.ordinaryChars(1396, (-3));
      streamTokenizer0.ordinaryChar((-1336));
      streamTokenizer0.slashStarComments(true);
      StringReader stringReader2 = new StringReader("EE/_=[:");
      stringReader2.ready();
      stringReader2.markSupported();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2143092895824052
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm0.matches(jSTerm1);
      StringReader stringReader0 = new StringReader("DEjp");
      jSTerm1.removeElement("word");
      StringReader stringReader1 = new StringReader("SX]gr<$");
      StringReader stringReader2 = new StringReader(",+J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      stringReader1.close();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(2|n$WiD@^@-L%Mq`");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-1527L));
      streamTokenizer0.whitespaceChars((-1980), (-1980));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      stringReader0.ready();
      stringReader0.markSupported();
      streamTokenizer0.wordChars(41, 74);
      stringReader0.ready();
      stringReader0.ready();
      stringReader0.ready();
      streamTokenizer0.wordChars(74, 41);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = null;
      stringReader0.markSupported();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.316755030306057
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("'^H(z3c+AR");
      jSTerm0.addElement("'^H(z3c+AR");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) stringReader0);
      jSTerm1.matches(jSTerm0);
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.equals(jSTerm3);
      jSTerm3.containsAll(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-13L));
      String string0 = "(Jmtd)j7=s-G/7Z8Q\" ";
      StringReader stringReader0 = new StringReader("(Jmtd)j7=s-G/7Z8Q\" ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = (-1336);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChar((-1336));
      streamTokenizer0.wordChars((-1336), 124);
      StringReader stringReader1 = new StringReader("Uc#,");
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      StringReader stringReader1 = new StringReader("?M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3449266181586426
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm4.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9686932085049351
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) null);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2868726303980165
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      StringReader stringReader1 = new StringReader("%H(z3Jn+AR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertEquals("[%H]", jSTerm0.toString());
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2808639349714985
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm2.containsAll(jSTerm3);
      jSTerm0.isGround();
      jSTerm1.cloneT();
      JSEvaluate.numericValue(jSTerm0);
      int int0 = 2;
      jSTerm2.subList(2, 2);
      jSTerm2.equals(jSTerm1);
      jSTerm1.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1192809219098505
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) "call");
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2546036339902322
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution2.removeElements(jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSSubstitution1.containsAll(jSPredicateForm0);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution4.add((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      jSSubstitution4.addAll((Collection) jSSubstitution1);
      jSSubstitution4.sort(comparator0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.475810916272473
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm0.equals(jSTerm3);
      jSTerm3.toStr();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      System.setCurrentTimeMillis(1718L);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.setSize(2493);
      // Undeclared exception!
      try { 
        jSTerm6.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(2|n$WiD@^@-L%Mq`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(Tr");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      stringReader0.markSupported();
      streamTokenizer0.ttype = 91;
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(83, 83);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.quoteChar(83);
      streamTokenizer0.ordinaryChars(3696, 83);
      streamTokenizer0.quoteChar(4075);
      streamTokenizer0.wordChars(4075, 4075);
      streamTokenizer0.quoteChar(58);
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(true);
      UnaryOperator.identity();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.839789586841252
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      Integer integer0 = new Integer(47);
      jSTerm0.add((Object) "word");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2666227005771913
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm1.call();
      jSSubstitution0.add((Object) "word");
      jSSubstitution0.retainAll(jSTerm2);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm3.print();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.152948480022801
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm5);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm3);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Integer> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Integer> predicate6 = predicate5.and(predicate3);
      Predicate<Integer> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate3);
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      predicate4.negate();
      predicate7.or(predicate5);
      Predicate<Integer> predicate10 = predicate7.and(predicate8);
      predicate10.or(predicate8);
      Predicate<Object> predicate11 = predicate2.negate();
      Predicate<Object> predicate12 = predicate1.or(predicate8);
      Predicate<Object> predicate13 = predicate4.or(predicate9);
      Predicate<Object> predicate14 = predicate11.negate();
      predicate8.negate();
      predicate10.or(predicate1);
      predicate14.or(predicate9);
      predicate10.and(predicate12);
      predicate13.or(predicate11);
      predicate14.negate();
      assertEquals("[word, [word]]", jSTerm0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      jSTerm0.add((Object) "word");
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4095350267156563
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm5.isFunction());
      
      JSJshopVars.plus = (-31);
      JSTerm jSTerm6 = jSTerm1.call();
      JSEvaluate.numericValue(jSTerm3);
      assertTrue(jSTerm3.isFunction());
      
      jSTerm6.equals(jSTerm2);
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertTrue(boolean0);
      assertNotSame(jSTerm2, jSTerm3);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm6);
      assertTrue(jSSubstitution1.fail());
      
      StringBuffer stringBuffer0 = jSTerm6.toStr();
      assertTrue(jSTerm1.equals((Object)jSTerm5));
      assertTrue(jSTerm6.equals((Object)jSTerm3));
      assertEquals(14, stringBuffer0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      Integer integer0 = new Integer(47);
      jSTerm0.add((Object) "word");
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate3);
      predicate0.and(predicate4);
      predicate0.or(predicate2);
      Predicate<Integer> predicate5 = predicate0.negate();
      Predicate<Integer> predicate6 = predicate5.or(predicate2);
      Predicate<Integer> predicate7 = predicate6.negate();
      Predicate<Integer> predicate8 = predicate5.or(predicate7);
      predicate0.and(predicate8);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) "word");
      Predicate<Object> predicate10 = predicate2.or(predicate9);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate1);
      predicate3.and(predicate12);
      jSTerm1.removeIf(predicate7);
      System.setCurrentTimeMillis(47);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9384650060354542
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "word";
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) null);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9992537896453402
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution2.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.isVariable();
      jSSubstitution4.sort(comparator0);
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2769118619200004
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      jSTerm0.makeVariable();
      Integer integer0 = new Integer((-2));
      Object object0 = jSTerm1.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.equals(jSTerm2);
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3693415518666576
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm2.containsAll(jSTerm3);
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.isGround();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSEvaluate.numericValue(jSTerm0);
      jSTerm2.subList(2, 2);
      jSTerm2.equals(jSTerm1);
      jSTerm2.call();
      jSTerm5.matches(jSTerm3);
      jSTerm4.cloneT();
      jSTerm2.equals(jSTerm3);
      jSTerm0.isGround();
      jSTerm1.isGround();
      boolean boolean0 = jSTerm3.equals(jSTerm2);
      assertEquals("[word, [word]]", jSTerm1.toString());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      int int0 = 47;
      Integer integer0 = new Integer(47);
      jSTerm0.add((Object) "word");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.440009553835843
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm6.isGround();
      JSEvaluate.numericValue(jSTerm3);
      jSTerm6.equals(jSTerm2);
      jSTerm2.makeVariable();
      jSTerm1.equals(jSTerm2);
      jSTerm0.matches(jSTerm6);
      jSTerm2.toStr();
      jSTerm1.standardizerTerm();
      jSTerm5.call();
      jSTerm3.matches(jSTerm1);
      assertEquals("[word, [word]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.254544664871008
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm0.call();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSTerm2.matches(jSTerm6, jSSubstitution0);
      jSTerm1.matches(jSTerm5, jSSubstitution0);
      jSTerm2.call();
      JSTerm jSTerm7 = jSTerm3.standardizerTerm();
      assertEquals("[word, [word]]", jSTerm0.toString());
      assertFalse(jSTerm7.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.754105330999288
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-1876);
      Integer integer0 = new Integer((-1876));
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5487720214483023
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) "word");
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution1.removeElements(jSSubstitution2);
      Integer integer0 = new Integer((-1087542567));
      jSSubstitution2.add((Object) integer0);
      jSTerm3.makeVariable();
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm0, jSSubstitution2);
      jSSubstitution2.add((Object) "word");
      jSSubstitution3.addAll((Collection) jSTerm1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSSubstitution2.sort(comparator0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.iterator();
      jSTerm5.matches(jSTerm2, jSSubstitution2);
      jSTerm3.print();
      assertTrue(jSTerm3.isVariable());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "0.0");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isFunction();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis((-2));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      StringReader stringReader1 = new StringReader("%H(z3Jn+AR");
      stringReader1.read();
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.mark(3);
      stringReader0.skip(1563L);
      stringReader1.mark(1098);
      streamTokenizer0.slashSlashComments(true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertEquals("[%H]", jSTerm0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8143075196071252
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "%%%";
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2206072645530175
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader("S(Tr");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader1.skip((-4));
      stringReader1.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9056849185434557
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("word");
      stringReader0.markSupported();
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Integer> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate3 = predicate2.and(predicate0);
      Predicate<Integer> predicate4 = predicate2.and(predicate3);
      Predicate<Integer> predicate5 = predicate3.or(predicate2);
      Predicate<Integer> predicate6 = predicate5.negate();
      predicate4.and(predicate2);
      Predicate<Integer> predicate7 = predicate6.or(predicate2);
      Predicate<Object> predicate8 = predicate0.negate();
      predicate6.negate();
      predicate4.negate();
      predicate0.negate();
      predicate2.negate();
      predicate8.test(predicate6);
      predicate0.negate();
      predicate7.negate();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Integer> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate8.or(predicate0);
      jSSubstitution0.add((Object) jSTerm0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate8.and(predicate0);
      jSSubstitution1.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.remove((Object) predicate10);
      predicate11.negate();
      assertEquals("[word, [word]]", jSTerm1.toString());
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(2030);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.783073469038219
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "`ACd";
      jSTerm0.addElement("`ACd");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.add((Object) "`ACd");
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.272753534261912
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm1.isGround();
      jSTerm1.makeFunction();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) "word";
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.firstElement();
      jSSubstitution2.add((Object) "word");
      jSTerm2.makeVariable();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm2.call();
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm2);
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution3);
      assertEquals("[word]", jSTerm0.toString());
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4329283961043036
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.containsAll(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      JSJshopVars.greaterT = 1535;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isVariable();
      jSTerm2.call();
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9770061729088613
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[0];
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution2.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.makeVariable();
      jSSubstitution3.add((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.addAll((Collection) jSSubstitution1);
      jSTerm0.isGround();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(2030);
      jSTerm0.add((Object) integer0);
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader("S(Tr");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader1.skip((-4));
      streamTokenizer0.sval = "";
      stringReader1.read();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9652370493802307
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "0.0");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.ensureCapacity((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(Tr");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.quoteChar(83);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars(83, 83);
      streamTokenizer0.quoteChar(83);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(Tr");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      stringReader0.markSupported();
      streamTokenizer0.wordChars(39, 83);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(83, 83);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.quoteChar(83);
      streamTokenizer0.quoteChar(4075);
      streamTokenizer0.wordChars(4075, 4075);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1137685880716477
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.toArray(objectArray0);
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution2.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution4.add((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      jSSubstitution4.addAll((Collection) jSSubstitution1);
      jSSubstitution4.sort(comparator0);
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2849294772709685
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("]qS~:#isRu.H<P`?5u");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSTerm2.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm1.call();
      jSSubstitution0.add((Object) "]qS~:#isRu.H<P`?5u");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm4, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      int int0 = 1794;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ".";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(57);
      StringReader stringReader1 = new StringReader(".");
      streamTokenizer0.nval = (double) 57;
      streamTokenizer0.slashStarComments(true);
      StringReader stringReader2 = new StringReader(",+J");
      streamTokenizer0.ordinaryChar((-2));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(57);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[0.0]", jSTerm1.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("%a ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(127);
      Integer integer1 = new Integer(94);
      Predicate.isEqual((Object) integer1);
      System.setCurrentTimeMillis(127);
      System.setCurrentTimeMillis(1853L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      StringReader stringReader1 = new StringReader("%H(z3Jn+AR");
      stringReader1.read();
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.markSupported();
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.mark(3);
      stringReader0.skip(1563L);
      stringReader1.skip(0L);
      stringReader1.mark(1098);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      stringReader1.close();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      StringReader stringReader1 = new StringReader("%H(z3Jn+AR");
      stringReader1.read();
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.markSupported();
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.mark(3);
      stringReader0.skip(1563L);
      stringReader1.mark(1098);
      streamTokenizer0.slashSlashComments(true);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("{>55%!b]-dvZX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8397895868412522
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.isGround();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("word");
      jSTerm0.isConstant();
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate1.and(predicate2);
      Predicate<Integer> predicate4 = predicate2.or(predicate1);
      Predicate<Integer> predicate5 = predicate4.negate();
      Predicate<Integer> predicate6 = predicate3.and(predicate1);
      Predicate<Object> predicate7 = predicate0.negate();
      predicate1.negate();
      predicate7.test(predicate5);
      Predicate<Object> predicate8 = predicate0.negate();
      predicate3.and(predicate0);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate7.or(predicate0);
      Predicate<Object> predicate12 = predicate8.negate();
      Predicate<Integer> predicate13 = predicate10.or(predicate12);
      Predicate<Integer> predicate14 = predicate6.and(predicate4);
      predicate2.or(predicate12);
      predicate0.and(predicate8);
      Predicate<Object> predicate15 = predicate11.negate();
      predicate15.or(predicate12);
      Predicate<Object> predicate16 = predicate11.or(predicate7);
      predicate15.negate();
      Predicate<Object> predicate17 = predicate16.negate();
      predicate14.or(predicate17);
      Predicate<Object> predicate18 = predicate7.negate();
      Predicate<Object> predicate19 = predicate18.or(predicate12);
      predicate13.and(predicate19);
      predicate8.negate();
      assertEquals("[word]", jSTerm0.toString());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'x';
      charArray0[2] = '\"';
      charArray0[3] = '=';
      charArray0[4] = 'y';
      StringReader stringReader0 = new StringReader("v:d^+sa");
      int int0 = 1442;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1442, 1442);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4548671092662881
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      StringReader stringReader1 = new StringReader("%H(z3Jn+AR");
      stringReader1.read();
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.markSupported();
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.mark(3);
      stringReader0.skip(1563L);
      stringReader1.skip(0L);
      stringReader1.mark(1098);
      streamTokenizer0.slashSlashComments(true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.allocate('W');
      charBuffer0.asReadOnlyBuffer();
      stringReader0.read(charBuffer0);
      stringReader0.mark(2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertEquals("[%H]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = 0;
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader(")s{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.isFunction();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")s{";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm1;
      Object object0 = jSTerm0.clone();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) streamTokenizer0;
      objectArray0[6] = (Object) stringReader0;
      objectArray0[7] = (Object) streamTokenizer0;
      objectArray0[8] = (Object) jSTerm1;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ".";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 44;
      streamTokenizer0.ordinaryChar(44);
      streamTokenizer0.nval = (double) 44;
      streamTokenizer0.slashStarComments(true);
      StringReader stringReader1 = new StringReader(",+J");
      streamTokenizer0.ordinaryChar((-2));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9652370493802307
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(35);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertEquals("[%a]", jSTerm0.toString());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.385688906713622
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      System.setCurrentTimeMillis(1718L);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm1.iterator();
      jSTerm2.stream();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm6.equals(jSTerm2);
      jSTerm1.equals(jSTerm2);
      jSTerm0.matches(jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm4, jSSubstitution2);
      JSTerm jSTerm7 = jSTerm5.call();
      StringReader stringReader0 = new StringReader(" ) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm7.parseList(streamTokenizer0);
      assertEquals("[word, [word]]", jSTerm1.toString());
      assertTrue(jSTerm1.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      StringReader stringReader1 = new StringReader("%H(z3Jn+AR");
      stringReader1.read();
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.markSupported();
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.mark(3);
      stringReader0.skip(1563L);
      stringReader1.skip(0L);
      stringReader1.mark(1098);
      streamTokenizer0.slashSlashComments(true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.allocate('W');
      charBuffer0.asReadOnlyBuffer();
      stringReader0.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
      assertEquals("[%H]", jSTerm0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("mgcUm$E0UJ2)K3?^M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.removeAll(jSTerm0);
      stringReader0.ready();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("z3jn");
      String string0 = "word";
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2406842919533958
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader("S(Tr");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader1.skip((-4));
      streamTokenizer0.sval = "";
      stringReader1.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.apostrophe = (-2);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2414028533795145
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      JSJshopVars.greaterT = (-1446826876);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.forEach(consumer0);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSTerm jSTerm6 = jSTerm5.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm7 = jSTerm2.call();
      JSEvaluate.numericValue(jSTerm4);
      jSTerm7.equals(jSTerm3);
      jSTerm7.retainAll(jSTerm3);
      jSTerm2.equals(jSTerm3);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm7);
      jSSubstitution2.removeElements(jSSubstitution0);
      jSSubstitution2.add((Object) null);
      jSTerm2.makeVariable();
      jSTerm5.matches(jSTerm6, jSSubstitution2);
      jSTerm3.contains(jSTerm1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm7.matches(jSTerm3);
      jSTerm0.matches(jSTerm2);
      System.setCurrentTimeMillis(1L);
      jSTerm6.call();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution2.addElements(jSSubstitution0);
      StringReader stringReader0 = new StringReader("d\";D &nc5[o]jR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "word");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = null;
      jSSubstitution1.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add(objectArray0[1]);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSTerm0);
      jSSubstitution2.removeElements(jSSubstitution0);
      jSSubstitution3.add((Object) "word");
      jSTerm0.makeVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      jSSubstitution3.add((Object) "word");
      jSSubstitution0.addAll((Collection) jSSubstitution1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.2410187561980965
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      assertEquals("[word]", jSTerm0.toString());
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm0.makeVariable();
      JSJshopVars.minus = 60;
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm6.equals(jSTerm2);
      jSTerm1.equals(jSTerm2);
      jSTerm0.matches(jSTerm6);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm1.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("'^H(z3c+AR");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'^H(z3c+AR");
      StringReader stringReader1 = new StringReader("'^H(z3c+AR");
      stringReader1.markSupported();
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      Predicate<Integer> predicate3 = predicate1.and(predicate2);
      predicate3.or(predicate1);
      Predicate.isEqual((Object) "'^H(z3c+AR");
      Predicate<Integer> predicate4 = predicate2.and(predicate1);
      predicate0.negate();
      predicate4.negate();
      predicate0.negate();
      predicate1.and(predicate0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = ".";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 44;
      streamTokenizer0.ordinaryChar(44);
      StringReader stringReader1 = new StringReader(".");
      streamTokenizer0.nval = (double) 44;
      streamTokenizer0.slashStarComments(true);
      stringReader0.close();
      StringReader stringReader2 = new StringReader(",+J");
      streamTokenizer0.ordinaryChar((-2));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      stringReader2.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z3");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      long long0 = new Integer((-4));
      stringReader0.markSupported();
      streamTokenizer0.ttype = 91;
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars(122, 122);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.quoteChar(122);
      streamTokenizer0.ordinaryChars(3696, 122);
      streamTokenizer0.quoteChar(4075);
      streamTokenizer0.wordChars(4075, 4075);
      streamTokenizer0.quoteChar(58);
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[0];
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution2.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.addAll((Collection) jSSubstitution3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-4), 91);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.quoteChar(119);
      streamTokenizer0.ordinaryChars((-4), 91);
      streamTokenizer0.quoteChar(63);
      streamTokenizer0.wordChars((-4), 2689);
      streamTokenizer0.quoteChar(96);
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(false);
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.makeVariable();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate0);
      // Undeclared exception!
      try { 
        jSTerm1.remove((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6893115399571634
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      System.setCurrentTimeMillis((-13L));
      StringReader stringReader0 = new StringReader("(J,mtd)j7=s-G/7Z8Q\" ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1336));
      streamTokenizer0.wordChars((-1336), 124);
      StringReader stringReader1 = new StringReader("99");
      stringReader1.skip((-1336));
      streamTokenizer0.ordinaryChar(1396);
      streamTokenizer0.ordinaryChars(1396, (-3));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("1n#P-1=8k9?2-A");
      streamTokenizer0.ordinaryChar(821);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StringReader stringReader3 = new StringReader("(J,mtd)j7=s-G/7Z8Q\" ");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      stringReader2.close();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^H(3c+AR");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-4), 91);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.quoteChar(119);
      streamTokenizer0.ordinaryChars((-4), 91);
      streamTokenizer0.quoteChar(63);
      streamTokenizer0.wordChars((-4), 2689);
      streamTokenizer0.quoteChar(96);
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(false);
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
