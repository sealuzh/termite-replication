/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 19:28:15 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5491704028685245
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = (-32782L);
      Range range0 = Range.of((-32782L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      Range.of(range_CoordinateSystem0, (-32782L), (-2837L));
      range0.equals((Object) null);
      long long1 = 1874L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1874L, (-32782L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.872351258803177
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = (-1170L);
      Range range0 = Range.of((-1170L));
      long long1 = 9223372032559808513L;
      Range range1 = Range.of(9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372032559808513L, 9223372032559808513L);
      range1.equals(range2);
      range2.isSubRangeOf(range0);
      range0.spliterator();
      range0.intersects(range2);
      Range range3 = Range.of((-353L));
      range1.isSubRangeOf(range3);
      Range range4 = Range.of(9223372032559808513L);
      range4.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder((-1170L), (-1170L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1170L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.37860442452051
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of((-2147483648L));
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range1);
      Long long0 = new Long((-2147483648L));
      Long long1 = new Long((-1005L));
      Long.max(1667L, 255L);
      range1.spliterator();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.677320803893347
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-32782L);
      Range range0 = Range.of((-32782L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32782L), (-2837L));
      Range range1 = Range.of((-32782L), (-2837L));
      range1.equals(range0);
      range1.spliterator();
      String string0 = "WgaPG!EH]v1+jv|";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("WgaPG!EH]v1+jv|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.WgaPG!EH]v1+jv|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8625494207403994
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-1170L));
      Range range1 = Range.of(1279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(1279L, 2432L);
      range1.equals(range2);
      Range.of(2432L, 2432L);
      Range range3 = range0.intersection(range1);
      range3.toString();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2432L, 1279L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6301175310187896
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range1 = Range.of((-32768L), 715L);
      Object object0 = new Object();
      Range range2 = Range.of((-1471L), 715L);
      range0.equals(range2);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.of(2147483647L);
      boolean boolean0 = range2.equals(range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2178641456080896
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.ofLength(0L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(0L, (-2302L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5876325927682124
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Comparators.values();
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-32768L);
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854775808L), (-32768L));
      Range.of((-32768L));
      range1.equals(range_CoordinateSystem0);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7579776005659613
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Comparators.values();
      Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-32768L));
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Long long0 = new Long((-1539L));
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(2147483647L);
      range1.intersection(range3);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.868852204163584
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.spliterator();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range1 = Range.of((-2004L));
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(32767L);
      range_Builder1.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-1392L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6654714599891633
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1056L);
      Range range1 = Range.of((-1L), 127L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long(1500L);
      range1.equals(long0);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Long long1 = new Long(1500L);
      Long long2 = new Long(1056L);
      Long long3 = new Long(367L);
      Long long4 = new Long((-765L));
      Long.getLong("org.jcvi.jillion.internal.core.util.JillionUtil", long4);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range1.equals(range_CoordinateSystem0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6819953997938804
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
      
      Range range1 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Range range2 = Range.of((-9223372036854775808L), (-1471L));
      range1.equals(range0);
      Long long1 = new Long(4294967295L);
      Long.max((-2147483648L), (-9223372036854775808L));
      Long.getLong("a<}}Np6j #M", long1);
      Object object1 = new Object();
      Object object2 = new Object();
      Long.getLong("a<}}Np6j #M", 825L);
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
      
      Range range3 = range0.intersection(range1);
      assertSame(range1, range3);
      assertNotSame(range1, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.9313739973237416
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775093L);
      Long long0 = new Long(4294967295L);
      long long1 = range0.getBegin();
      assertEquals(4294967295L, long1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      range0.equals(range_CoordinateSystem0);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854765827L), 714L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of((-9223372036854765827L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range range2 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775093L);
      range2.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range range3 = range_Builder1.build();
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2582631367284582
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775093L);
      Long long0 = new Long(4294967295L);
      range0.getBegin();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Long long1 = new Long((-1593L));
      Long long2 = new Long(4294967295L);
      Long.divideUnsigned(9223372036854775093L, 507L);
      Long.max(507L, 9223372036854774528L);
      Long.getLong("hJpkTl(`/=j&JK<<", long1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object4));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.128308331361872
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 127L);
      range0.startsBefore(range0);
      range0.equals((Object) null);
      Range range1 = range0.intersection(range0);
      Object object0 = new Object();
      Long long0 = new Long(255L);
      range0.spliterator();
      range0.intersects(range1);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      range0.intersects(range1);
      Range range2 = Range.of(255L);
      Range range3 = Range.of((-1014L), 32753L);
      Range range4 = range2.intersection(range3);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range range5 = range4.intersection(range1);
      assertFalse(range4.isEmpty());
      assertSame(range4, range2);
      assertTrue(range5.isEmpty());
      
      range0.complementFrom(list0);
      assertTrue(list0.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3540755133711526
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.getLong("*@+?sSF9kVyQRyz*", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-128L));
      Long long1 = new Long((-2353L));
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483666L, (-2353L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.9060225829334803
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.of((-2312L), (-66L));
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-2312L), (-66L));
      Object object0 = new Object();
      long long0 = (-1471L);
      Range range2 = Range.of((-66L), 114L);
      Object object1 = new Object();
      range0.equals(object1);
      long long1 = 2147483642L;
      Long long2 = new Long(2147483642L);
      range2.equals(object1);
      Range range3 = Range.of(4241L);
      range1.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774254L, (-2312L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2312 would make range [9223372036854774254 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6456195655071975
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(1279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1279L, 1279L);
      range1.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.spliterator();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.of(1L, 1507L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-2004L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8973875287084656
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      range1.intersects(range0);
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range2);
      range2.complement(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(range1);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(185L);
      Long.getLong("$umbr =f entries must be >=0", long0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(185L);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L);
      Range range3 = range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder(range3);
      range3.intersection(range2);
      Range range4 = range_Builder4.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775807L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.148045354467306
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-120L), (-120L));
      Range.of((-120L));
      range0.isSubRangeOf(range0);
      long long0 = 4294967267L;
      Range range1 = Range.ofLength(4294967267L);
      List<Range> list0 = range1.split(4294966412L);
      range0.complementFrom(list0);
      range1.intersects(range0);
      Object object0 = new Object();
      long long1 = 4294967295L;
      Range.of((-1L), 3015L);
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("5+M;[v;&B73", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 5+M;[v;&B73 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.34071383503231
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      Long long0 = new Long((-1593L));
      Long long1 = new Long(878L);
      Long.max(878L, 9223372036854773621L);
      // Undeclared exception!
      try { 
        Range.parseRange("J}r'>eg/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse J}r'>eg/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.653539939700496
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.intersects(range1);
      range1.intersects(range0);
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range2);
      range2.complement(range1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 1848L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.775792308900126
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(2147483639L, 2147483639L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483639L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      Long long0 = new Long(2147483639L);
      Long long1 = new Long(191L);
      Long long2 = Long.valueOf(2440L);
      Long.getLong("", long2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long3 = new Long(2440L);
      range2.equals(long3);
      // Undeclared exception!
      try { 
        Range.of(2440L, 2183L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8084894574324655
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = 2147483666L;
      Range range0 = Range.of(2147483666L, 2147483666L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      Range range2 = Range.of((-2838L), (-2838L));
      range2.equals(range0);
      range1.equals(range0);
      Range range3 = Range.ofLength(2147483666L);
      range1.spliterator();
      Object object0 = new Object();
      range3.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483666L, (-4169L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5634424690564077
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-577L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-577L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.936896458409905
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range0 = Range.of(range_CoordinateSystem0, 715L, 715L);
      Range range1 = Range.of((-802L));
      Range range2 = range1.intersection(range0);
      range2.getLength();
      range0.equals(range1);
      Range.of(range_CoordinateSystem0, 715L, 886L);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("wa3Jq[4\"E34");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.wa3Jq[4\"E34
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6554226041139093
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.equals(range1);
      long long0 = (-1340L);
      Range range2 = Range.of((-1340L));
      range2.endsBefore(range1);
      Range range3 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range3.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7727347673405753
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      range0.startsBefore(range1);
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range2);
      range2.complement(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(range1);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(185L);
      Long.max(1943L, 9223372036854775796L);
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache", long0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range2.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.expandEnd(1224L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774586 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7504115834355556
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Long long0 = new Long(883L);
      Long long1 = new Long(9223372036854773621L);
      Long long2 = new Long((-9223372036854775808L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      boolean boolean0 = range0.equals(object10);
      assertFalse(boolean0);
      
      Range range1 = Range.of(29932L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.77072256481756
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(1795L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(1795L);
      Range range2 = Range.ofLength(1795L);
      Range.of((-254L));
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6985688464548008
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2837L), 65535L);
      Range.of(65535L);
      Range.of(125L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-32757L), 9223372036854775552L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.933315698254013
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(2147483639L, 2147483639L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483639L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      Range range3 = Range.of(2147483639L, 2147483639L);
      Long long0 = new Long((-1539L));
      range3.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range4 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range4);
      long long1 = (-2147483648L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6068811360555295
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 1L;
      Range range0 = Range.of(1L, 9223372036854775807L);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5463357492690304
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
      
      Long long0 = Long.valueOf((-1301L));
      Long.toUnsignedString(1946L);
      Long.getLong("{9T`{>RZ*", long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(3493L);
      Range range1 = Range.of((-869L), 0L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4797722755532523
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-66L));
      range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Long long0 = new Long(4294967295L);
      Long.getLong("", long0);
      Object object0 = new Object();
      Long long1 = new Long(4294967295L);
      Long long2 = new Long(9223372036854742325L);
      Long long3 = new Long(9223372036854742325L);
      Long.getLong((String) null, long1);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range1 = Range.ofLength(9223372036854742325L);
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6397485395545286
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-22770L), (-22770L));
      Range range0 = Range.of((-22770L), (-229L));
      range0.equals((Object) null);
      String string0 = "";
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.ofLength((-22770L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5424223610523544
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range2 = range1.intersection(range0);
      long long0 = range2.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6224513843043833
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 2147483647L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(878L);
      Long long2 = new Long(255L);
      Long long3 = new Long(255L);
      range0.equals(long3);
      Long long4 = new Long(2147483647L);
      range0.equals(long3);
      Range.Builder range_Builder0 = new Range.Builder(1512L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(2010L);
      range0.intersection(range1);
      Range range2 = range_Builder1.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.941788094046141
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Long long0 = new Long((-2593L));
      Long long1 = new Long((-2593L));
      Long.getLong("", long0);
      Object object2 = new Object();
      Range range1 = Range.of((-87L), 32767L);
      range0.complement(range1);
      Object object3 = new Object();
      range0.split(9223372036854775552L);
      Object object4 = new Object();
      Object object5 = new Object();
      Long long2 = new Long(878L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.60740864608813
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2187L, 2187L);
      Range.Builder range_Builder0 = new Range.Builder(2187L, 2187L);
      range_Builder0.expandEnd(2187L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = Range.of(910L);
      range0.equals(range1);
      Range.of(910L, 2187L);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 910L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.038405752242105
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 2147483647 ]/SB", string0);
      
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.isEmpty();
      range2.complement(range0);
      range0.spliterator();
      range0.intersects(range1);
      range2.startsBefore(range1);
      range1.endsBefore(range0);
      boolean boolean1 = range2.startsBefore(range1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(2147483647L);
      Range.Comparators.values();
      Range range3 = Range.parseRange("[ 0 .. 2147483647 ]/SB");
      String string1 = range3.toString();
      assertEquals("[ 0 .. 2147483647 ]/0B", string1);
      
      Object object0 = new Object();
      Range range4 = range_Builder0.build();
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.695701601785692
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.of(range_CoordinateSystem0, 4294967295L, 9223372032559807799L);
      Range range0 = Range.of((-1L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1324L), 1405L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2172L), (-2172L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2811341984422833
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1L, 1L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.760626744700966
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L, 127L);
      Object object0 = new Object();
      range1.equals(object0);
      boolean boolean0 = range1.intersects(range0);
      Range range2 = range0.intersection(range1);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 127L, 127L);
      List<Range> list0 = range3.complement(range2);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range3));
      
      Object object1 = new Object();
      Object object2 = new Object();
      Range range4 = Range.of(102L, 883L);
      range4.equals(range3);
      Long long0 = new Long(255L);
      Long long1 = new Long(127L);
      Long long2 = new Long(255L);
      Long long3 = new Long((-2147483648L));
      Long.getLong("Z", long3);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range3.equals(object6);
      long long4 = range3.getLength();
      assertEquals(1L, long4);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6472612474739132
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Long.getLong("rT4U6!9[Ley", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(1L, 3841L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.equals(range1);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.158737221591811
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2837L), 2147483647L);
      Range range2 = Range.of((-2838L), (-2838L));
      range1.equals(range0);
      Range range3 = Range.ofLength(3660L);
      range1.spliterator();
      range2.intersects(range1);
      Object object0 = new Object();
      range2.equals(object0);
      range3.complement(range2);
      range1.intersects(range0);
      Range.of(185L);
      range0.intersection(range1);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7384561212718466
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2147483639L, 2147483639L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483639L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      Object object0 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(395L, 164L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.827358683373372
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(127L, 3409L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(127L);
      Range range1 = Range.of((-9223372036854775808L));
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.8953265676497155
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-32773L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(2918832L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder((-32773L), 1L);
      Range range2 = range_Builder0.build();
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.77171838605881
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.spliterator();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range range1 = Range.of((-2004L), 0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.55880741255195
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2700L);
      Long long0 = new Long(2700L);
      Long.getLong("*@+?sSF9kVyQRyz*", long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.7787119220322625
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals(range0);
      range0.intersects(range0);
      Range range1 = range0.intersection(range0);
      range0.isSubRangeOf(range1);
      range1.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(range0);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(185L);
      Long.getLong("$umbr =f entries must be >=0", long0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object8));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.927328500081579
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range1 = Range.of((-802L));
      Range range2 = range1.intersection(range0);
      range2.getLength();
      range0.equals(range1);
      Range.of(range_CoordinateSystem0, (-32768L), 886L);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("wa3Jq[4\"E34");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.wa3Jq[4\"E34
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.440240400837233
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1973L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.77487747586321
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(1L, 1L);
      range1.spliterator();
      range0.iterator();
      range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 38L);
      List<Range> list0 = range1.complement(range2);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1925L, 218L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9366106757181774
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-15L), 900L);
      Range range1 = Range.of(2397L);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      range2.isSubRangeOf(range1);
      range2.spliterator();
      range0.startsBefore(range1);
      range1.getLength();
      range0.asRange();
      long long0 = 9223372036854774678L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854774678L, (-2222L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2222 would make range [9223372036854774678 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2897896319019697
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1034L, 9223372036854775807L);
      range0.spliterator();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2191L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2192 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9245817495797874
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 715L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range1 = Range.of(range_CoordinateSystem0, 715L, 715L);
      Range range2 = Range.of((-802L));
      Range range3 = range2.intersection(range1);
      range3.getLength();
      range1.intersects(range2);
      Range range4 = Range.of(range_CoordinateSystem0, 715L, 886L);
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 2147483647L;
      range4.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2147483647L, (-802L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5113211531010675
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 878L, 2147483647L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(878L);
      Long long2 = new Long(252L);
      Long long3 = new Long(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(252L, 309L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.of(4294967295L);
      range_Builder1.build();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6421630125215594
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long0 = (-4216L);
      Range range1 = Range.of((-4216L));
      range0.startsBefore(range1);
      Range range2 = range0.intersection(range1);
      Range range3 = null;
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.995746128777239
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-32768L));
      range0.isSubRangeOf(range1);
      range1.spliterator();
      range0.intersects(range1);
      long long0 = 2147483647L;
      Range range2 = Range.of(2147483647L);
      range1.complement(range2);
      long long1 = (-128L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-128L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.799996128904858
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      range0.equals(range1);
      Range.ofLength(818L);
      Range.of((-254L));
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1484L;
      Range.of(range_CoordinateSystem0, 1484L, 1484L);
      // Undeclared exception!
      try { 
        Range.ofLength((-254L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7604087938855044
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(2147483666L, 2147483666L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-2838L), (-2838L));
      range1.equals(range0);
      range0.equals(range0);
      Range.ofLength(2147483666L);
      range0.spliterator();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483666L, (-1005L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.835938444606631
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(916L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-85L));
      range1.startsBefore(range0);
      range0.intersection(range1);
      range0.isSubRangeOf(range1);
      range1.spliterator();
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.0238498866080805
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 900L, 900L);
      Range range1 = Range.of((-1177L), (-1177L));
      range0.intersects(range1);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(1L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem1, 869L, 878L);
      Range range4 = range1.intersection(range3);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6759440194602497
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5131L), (-5131L));
      Range range1 = Range.of((-280L));
      range1.intersects(range0);
      Range.of((-5131L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1215L, (-1931L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3816788003114024
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range1 = Range.of((-32768L), 715L);
      Range range2 = Range.of((-1471L), 715L);
      range0.equals(range2);
      Long long1 = new Long(2147483647L);
      range1.equals(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 2147483666L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.084232564474564
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      Range range1 = Range.of(254L, 4294967295L);
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of(0L);
      range2.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1815L), 1665L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(0L, 254L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = range_Builder1.contractBegin((-599L));
      range_Builder4.build();
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-920L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 1L;
      long long1 = 30098L;
      Range range0 = Range.of(1L, 30098L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.200141660232378
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(32753L, 715L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(2147483666L, 2147483666L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2147483666L);
      Long long1 = new Long((-1471L));
      Long long2 = new Long(2147483666L);
      Long long3 = new Long(665L);
      Long.getLong("yVN=w<]C1S1jWF", long1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(long2);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.966360649031928
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object0 = new Object();
      Range.of((-947L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 6210L, 6210L);
      range1.intersection(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5636206178039984
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Range range0 = Range.of((-128L), 9223372036854773621L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.764021556374783
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range0.equals(range1);
      boolean boolean1 = range0.startsBefore(range1);
      Range range2 = range0.intersection(range1);
      boolean boolean2 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean3 = range2.equals(range1);
      //  // Unstable assertion: assertTrue(boolean3 == boolean0);
      
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(185L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range2.equals(object6);
      range0.asRange();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.479561946889406
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1L, 30098L);
      assertFalse(range0.isEmpty());
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1392673346824425
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(9223372036854775789L);
      Long long0 = new Long((-1170L));
      Long long1 = new Long(304L);
      Long long2 = new Long((-1170L));
      Long long3 = new Long((-1170L));
      Long long4 = new Long(304L);
      Long long5 = new Long(2277L);
      Long.getLong("6", long1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object7);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.454515672840071
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.of(9223372036854773621L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32753L, 32753L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.346872352108096
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854773621L, 9223372036854773621L);
      long long0 = new Long(9223372036854773621L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 32746L, 32746L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 370L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.8218688001163343
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long.max((-128L), (-1898L));
      Long long0 = new Long((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range1 = Range.of((-9223372036854775808L), (-128L));
      Range range2 = Range.ofLength(65535L);
      assertFalse(range2.isEmpty());
      
      Range range3 = range1.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.881232477572056
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-85L));
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      range0.isSubRangeOf(range2);
      range2.spliterator();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = null;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Zero Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.8036117620275953
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(2187L, 2187L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(127L);
      range0.startsBefore(range1);
      range1.isSubRangeOf(range0);
      long long0 = 897L;
      Range.Builder range_Builder1 = new Range.Builder(897L);
      Range range2 = range_Builder0.build();
      Range range3 = Range.of(127L);
      Range range4 = range0.intersection(range2);
      range4.isSubRangeOf(range1);
      range3.spliterator();
      range3.intersects(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 127L, (-2226L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3839432765047848
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(9223372036854773621L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 32753L, 32753L);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=4.01422662134706
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      boolean boolean0 = range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 2147483647 ]/SB", string0);
      
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
      
      range2.complement(range0);
      range0.spliterator();
      range0.intersects(range1);
      range2.startsBefore(range1);
      boolean boolean2 = range1.endsBefore(range0);
      boolean boolean3 = range2.startsBefore(range1);
      assertFalse(boolean3 == boolean2);
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Comparators.values();
      Range range3 = Range.parseRange("[ 0 .. 2147483647 ]/SB");
      List<Range> list0 = range0.complement(range3);
      assertEquals(0, list0.size());
      
      List<Range> list1 = range3.complement(range2);
      assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=4.110597811055367
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 2147483647 ]/SB", string0);
      
      range0.startsBefore(range1);
      Range range2 = Range.parseRange("[ 0 .. 2147483647 ]/SB", range_CoordinateSystem0);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = new LinkedList<Range>();
      range0.spliterator();
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1);
      
      range2.startsBefore(range1);
      range1.endsBefore(range0);
      range2.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Comparators.values();
      Range range3 = Range.parseRange("[ 0 .. 2147483647 ]/SB");
      List<Range> list1 = range0.complement(range3);
      assertEquals(0, list1.size());
      
      List<Range> list2 = range3.complement(range2);
      assertTrue(list2.contains(range0));
      assertEquals(1, list2.size());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.5567980425478405
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(2140L);
      Range range1 = Range.of(2140L, 2140L);
      range0.split(2140L);
      range1.intersects(range0);
      range1.getLength();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(6431L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.9109225944946244
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Long.getLong("*@+?sSF9kVyQRyz*", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long1 = new Long((-128L));
      Range range1 = Range.of((-1793L));
      range0.intersects(range1);
      Range range2 = Range.of((-5630L));
      range1.complement(range2);
      long long2 = 9223372036854773308L;
      Range.Builder range_Builder0 = new Range.Builder((-595L), 9223372036854773308L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.7995173276181293
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-32773L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 2918832L;
      Range range1 = Range.ofLength(2918832L);
      range0.startsBefore(range1);
      range0.getLength();
      Range range2 = range0.asRange();
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(294L, 294L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("y*h/Yt", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse y*h/Yt into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5088885492147015
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 868L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 868L, 65535L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.spliterator();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(7908L, 755L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.9280164453776782
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-2147483647L));
      range0.startsBefore(range1);
      Range range2 = range0.intersection(range1);
      range2.isSubRangeOf(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.spliterator();
      range0.intersects(range2);
      Range.of(2805L);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4906928945069873
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(2147483639L, 2147483639L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(2147483639L);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 255L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483639L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.714446816355662
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      range0.startsBefore(range1);
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.isSubRangeOf(range2);
      range2.complement(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(range1);
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(425L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.4296652990247067
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = (-2838L);
      Range range0 = Range.of(25L, 878L);
      range0.equals((Object) null);
      Long long1 = new Long((-2838L));
      range0.equals(long1);
      // Undeclared exception!
      try { 
        Range.ofLength((-869L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.489569844069141
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(0L, 0L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.spliterator();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long(0L);
      Object object10 = new Object();
      Object object11 = new Object();
      range0.equals(object11);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=4.052325460186596
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2L), 4294967295L);
      Range range2 = Range.of(0L, 4294967295L);
      range1.isSubRangeOf(range2);
      range0.complement(range2);
      range0.startsBefore(range1);
      range0.intersection(range2);
      Range range3 = Range.ofLength(2740L);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2740L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.8906068162123923
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Range range1 = Range.of((-128L));
      range0.endsBefore(range1);
      range1.startsBefore(range0);
      range1.intersection(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(9223372036854773621L);
      range3.intersects(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.625090560109395
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(2192L, 2192L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-9223372036854775808L));
      Range range1 = Range.of(886L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-780L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.398114275760626
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 4294967295L;
      long long2 = 1848L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1848L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.7586794776798165
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.equals(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range.of((-254L));
      range1.equals(range0);
      Range range3 = Range.of((-254L));
      range2.intersection(range3);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3600468880408587
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      range0.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.5348299077703023
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.of((-2147483648L));
      Long.max((-128L), (-1898L));
      Long long0 = new Long((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object8 = new Object();
      range0.equals(object8);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147482770L, 4294967295L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.601630292480258
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      Range.of((-32768L));
      long long1 = (-2837L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-2837L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2837L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.7210340503093393
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2706L);
      Range range0 = Range.of(range_CoordinateSystem0, 802L, 802L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1123L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.5291167131929524
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 85L, 878L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 887L);
      boolean boolean0 = range1.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 85L, 85L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range range3 = range0.intersection(range1);
      //  // Unstable assertion: assertSame(range3, range0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.472762427337047
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 878L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.expandBegin(878L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2172L), (-2172L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=4.064805089092583
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-15L), 900L);
      Range range1 = Range.of(2397L);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.isSubRangeOf(range1);
      range2.spliterator();
      boolean boolean1 = range1.intersects(range2);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 900L, 2397L);
      boolean boolean2 = range2.intersects(range0);
      assertTrue(boolean2 == boolean0);
      
      range0.endsBefore(range1);
      List<Range> list0 = range3.split(900L);
      assertFalse(list0.contains(range3));
      assertEquals(2, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder(900L);
      range2.intersection(range0);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Object object0 = new Object();
      Range range4 = range_Builder1.build();
      assertTrue(range2.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7385088418715062
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = 2147483666L;
      Range range0 = Range.of(2147483666L, 2147483666L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(2147483666L, 2147483666L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 12L, 2147483666L);
      range0.complement(range1);
      range1.asRange();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3608526203126803
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 878L, 878L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder(878L);
      Range range2 = range0.intersection(range0);
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.9846147884586616
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(2147483638L);
      long long0 = (-1943L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1943L), (-1943L));
      range0.intersects(range1);
      Range range2 = Range.of(33483L);
      range0.complement(range2);
      long long1 = (-1179L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(712L, (-1179L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.7877370815685905
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range1 = Range.of((-802L));
      Range range2 = range1.intersection(range0);
      range2.getLength();
      long long0 = 886L;
      Range.of(range_CoordinateSystem0, 715L, 886L);
      String string0 = "wa3Jq[4\"E34";
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("wa3Jq[4\"E34");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.wa3Jq[4\"E34
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.456545149572329
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854773621L, 9223372036854773621L);
      long long0 = new Long(9223372036854773621L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 32753L, 32753L);
      List<Range> list0 = range0.split(32753L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.9753912014626382
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1L, 30098L);
      List<Range> list0 = range0.split(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 12L, 4294967295L);
      range1.complementFrom(list0);
      range0.complement(range0);
      range0.asRange();
      Range.of(range_CoordinateSystem0, 12L, 12L);
      Range.of(12L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 3851L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.9358451794503266
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(1L, 30098L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 12L, 4294967295L);
      List<Range> list0 = range0.complement(range0);
      range0.asRange();
      Range.of(range_CoordinateSystem0, 12L, 12L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 370L, 4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.4895647900795224
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.of(9223372036854773621L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 474L, 878L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.409131151676564
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range1 = Range.of((-32768L), 715L);
      range0.equals(range0);
      Long long1 = new Long(2147483647L);
      range1.equals(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 2147483666L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.2438848869708714
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.of((-32768L));
      Long long0 = new Long(4294967296L);
      Long.getLong("", long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long1 = new Long(255L);
      Long.max(254L, 254L);
      Long long2 = new Long(254L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.9993949579722496
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1153L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.993018799159822
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-1170L));
      Range range1 = Range.of(1279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1279L, 1279L);
      boolean boolean0 = range0.isEmpty();
      boolean boolean1 = range2.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      range0.spliterator();
      boolean boolean2 = range0.intersects(range2);
      assertFalse(boolean2);
      
      Range range3 = Range.of(1279L);
      List<Range> list0 = range3.complement(range1);
      assertNotSame(range3, range2);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder((-1170L), (-1170L));
      Range.of(range_CoordinateSystem0, (-1170L), 1279L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range4 = range_Builder1.build();
      Range range5 = range4.intersection(range0);
      assertFalse(range5.isEmpty());
      assertSame(range5, range0);
      
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775514L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, (-1170L), 1279L);
      assertFalse(range6.isEmpty());
      assertNotSame(range6, range0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3929977424091597
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(65535L);
      Range.of(65535L);
      // Undeclared exception!
      try { 
        range0.split((-2676L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.5413516668606317
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem1, (-303L), 0L);
      range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=4.075286961749388
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-1170L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1170L), 1017L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      Range range2 = Range.of(9987L);
      range2.complement(range0);
      assertNotSame(range0, range1);
      
      Range.Builder range_Builder0 = new Range.Builder((-668L), 33483L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = new Range.Builder(800L, 1314L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem1, 3663L, 9223372036854775807L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range range4 = Range.of(9988L);
      Range range5 = range_Builder5.build();
      Range.Builder range_Builder6 = new Range.Builder(range4);
      Range.of(range_CoordinateSystem1, 255L, 3663L);
      Range range6 = range3.intersection(range5);
      assertFalse(range6.isEmpty());
      
      Range range7 = range_Builder5.build();
      assertSame(range7, range5);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.9452267722388887
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(1L, 30098L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 12L, 4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = new Range.Builder(30098L);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      
      Range range4 = range_Builder1.build();
      Range range5 = range_Builder2.build();
      assertSame(range5, range4);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.7072661352806167
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(2187L, 2187L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-1L));
      Range range1 = Range.of(873L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.Caches
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.6580116314195426
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.getLong("*@+?sSF9kVyQRyz*", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-128L));
      Object object2 = new Object();
      Object object3 = new Object();
      range0.spliterator();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range1 = Range.of((-128L), 1422L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.743042819139247
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Comparators.values();
      Range range0 = Range.of(range_CoordinateSystem0, 85L, 2216L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2700L), (-2700L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.616064649508423
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(2192L, 2192L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-9223372036854775808L));
      Range range1 = Range.of(886L);
      range1.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-780L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.9410904368408923
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-1170L));
      Range range1 = range0.intersection(range0);
      range1.toString();
      range0.complement(range0);
      range0.asRange();
      Range range2 = Range.of(1463L);
      range1.intersection(range2);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1341526202605965
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1925863485716692
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.of((-1449L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1449L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.1168514374210643
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      Long long0 = new Long(863L);
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(863L);
      Range range0 = range_Builder0.build();
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.getLong("*@+?sSF9kVyQRyz*", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-128L));
      Long.max((-128L), (-128L));
      Long long1 = new Long(2500L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-127L), long2);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(3019L);
      Range.Builder range_Builder1 = range_Builder0.shift(2674L);
      range_Builder1.expandBegin(2674L);
      range_Builder1.shift(2674L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("QLv>[gqB\"z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.QLv>[gqB\"z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-753L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.852285695350056
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 715L);
      Range range1 = Range.of((-32768L), 715L);
      Range range2 = Range.of(715L);
      range2.startsBefore(range0);
      Range range3 = Range.of((-32768L), (-32768L));
      range1.intersection(range3);
      range1.isSubRangeOf(range2);
      range2.spliterator();
      Range range4 = Range.of(715L);
      // Undeclared exception!
      try { 
        range4.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.7687743109144867
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = 2147483639L;
      Range range0 = Range.of(2147483639L, 2147483639L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483639L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      Long long1 = new Long(2147483639L);
      long long2 = 191L;
      Long long3 = new Long(191L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 191L, (-2147483649L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.277514926855928
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2918832L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 2918832L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.243693405686912
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1728L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.3268894305625394
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 878L, 9223372036854773621L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 9223372036854773621L, 9223372036854773621L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(9223372034707292143L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitLength must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitLength must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2837L), (-3281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.3876344284752276
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1198L), (-1076L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.265057547677182
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-3708L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.923022731456323
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 12L);
      range0.isSubRangeOf(range1);
      range0.complement(range0);
      range0.startsBefore(range1);
      Range range2 = range0.intersection(range1);
      range0.isSubRangeOf(range2);
      range0.complement(range2);
      range0.spliterator();
      range2.intersects(range1);
      range2.startsBefore(range0);
      range2.endsBefore(range0);
      range0.startsBefore(range2);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.contractEnd(1269L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.8202143251640925
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(2187L, 2187L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 127L;
      Range range1 = Range.ofLength(127L);
      range0.startsBefore(range1);
      range1.isSubRangeOf(range0);
      long long1 = 897L;
      Range.Builder range_Builder1 = new Range.Builder(897L);
      Range range2 = range_Builder0.build();
      Range range3 = Range.of(127L);
      Range range4 = range0.intersection(range2);
      range4.isSubRangeOf(range1);
      range3.spliterator();
      range3.intersects(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(897L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.of((-128L));
      Long.getLong("*@+?sSF9kVyQRyz*", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-128L));
      Long.max((-128L), (-128L));
      Long long1 = new Long(2500L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2500L, 167L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.694916528720684
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-66L), 32767L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-66L));
      Range range0 = Range.ofLength(3841L);
      range0.spliterator();
      range_Builder0.shift(3841L);
      range_Builder1.contractBegin(32767L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(1L);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-344L));
      range_Builder3.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder3.copy();
      Range.Comparators.values();
      Range.Builder range_Builder5 = new Range.Builder(32767L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.1651294905433627
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.getLong("*@+?sSF9kVyQRyz*", (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-128L));
      Long.max((-128L), (-128L));
      Long long1 = new Long(2500L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean0 = range0.equals("*@+?sSF9kVyQRyz*");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.493939909378852
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(878L, 878L);
      long long0 = range0.getBegin();
      assertEquals(878L, long0);
      
      Object object0 = new Object();
      Long long1 = new Long((-267L));
      Long long2 = new Long(878L);
      Long.getLong("", long2);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range1 = Range.of(2028L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(878L, 878L);
      Object object8 = new Object();
      boolean boolean0 = range2.equals(object8);
      assertFalse(boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.6879954794509753
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(1279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1279L, 1279L);
      range0.equals(range1);
      Range range2 = Range.of(1279L);
      range2.complement(range0);
      Range.of(1279L, 32767L);
      range2.equals("L|:8J% '\"*:NwM");
      String string0 = "WgaPG!EH]v1+jv|";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.919131707018038
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(1279L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1279L, 1279L);
      range0.equals(range1);
      Range range2 = Range.of(1279L);
      range2.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1170L), (-1170L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(2147483654L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.82314931330028
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(1279L);
      range0.equals(range0);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder((-2838L), 1279L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1279L, 1279L);
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = range_Builder2.contractBegin((-653L));
      Range range2 = range_Builder5.build();
      Range.Builder range_Builder6 = new Range.Builder(range1);
      Range.Builder range_Builder7 = new Range.Builder(9223372034707292161L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Long long0 = new Long(255L);
      Long long1 = Long.valueOf((-802L));
      Long.getLong("", long1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long2 = new Long(9223372036854775807L);
      Object object5 = new Object();
      Range range0 = Range.of(255L, 2183L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.ofLength(30098L);
      Long long0 = new Long(30098L);
      Long.getLong("D8c6bi9N>:", long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.60694845395635
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of((-15L), 900L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of((-15L), (-15L));
      long long0 = new Long(900L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      String string0 = "t`~BR5.WEUT5$n)N";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("t`~BR5.WEUT5$n)N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.t`~BR5.WEUT5$n)N
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
