/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 15:15:15 GMT 2020
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5097053381245642
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("UjwAJFe*?+d");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer2.slashes();
      xPathLexer1.leftBracket();
      xPathLexer2.equals();
      xPathLexer2.colon();
      xPathLexer0.doubleColon();
      xPathLexer2.mod();
      xPathLexer2.leftBracket();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("UjwAJFe*?+d");
      xPathLexer3.nextToken();
      xPathLexer3.rightParen();
      xPathLexer0.colon();
      xPathLexer1.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer2.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer3.star();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer2.at();
      xPathLexer2.comma();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      assertNull(xPathLexer4.getXPath());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.418182010378338
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath("mj5x/={R");
      xPathLexer0.and();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("mj", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("5", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("x/", token7.getTokenText());
      assertEquals(12, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("=", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("mj5x/={R");
      Token token10 = xPathLexer2.leftBracket();
      assertEquals("m", token10.getTokenText());
      
      Token token11 = xPathLexer2.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer2.doubleColon();
      assertEquals("/=", token13.getTokenText());
      
      xPathLexer2.doubleColon();
      Token token14 = xPathLexer2.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.operatorName();
      xPathLexer0.dots();
      Token token15 = xPathLexer0.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer0.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer2.minus();
      assertEquals(6, token17.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.462572599862125
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(".", token4.getTokenText());
      
      xPathLexer0.setXPath("mj5x/={R");
      xPathLexer0.and();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("mj", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("5", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.nextToken();
      assertEquals(21, token9.getTokenType());
      assertEquals("=", token9.getTokenText());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      assertEquals("{", token10.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("mj5x/={R");
      Token token11 = xPathLexer2.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer2.doubleColon();
      Token token13 = xPathLexer2.doubleColon();
      assertEquals("={", token13.getTokenText());
      
      xPathLexer2.doubleColon();
      Token token14 = xPathLexer0.star();
      assertEquals(20, token14.getTokenType());
      
      xPathLexer1.operatorName();
      Token token15 = xPathLexer0.dots();
      assertEquals(13, token15.getTokenType());
      
      Token token16 = xPathLexer0.at();
      assertEquals(16, token16.getTokenType());
      
      Token token17 = xPathLexer0.plus();
      assertEquals(5, token17.getTokenType());
      
      Token token18 = xPathLexer2.minus();
      assertEquals(6, token18.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8163533343689644
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertEquals(27, token2.getTokenType());
      assertNotNull(token2);
      assertEquals("werken", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.not();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      xPathLexer0.setXPath("0I:)");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(":", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("<!2-9!S~[{2");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(")", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer1.literal();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<!2-9!S~[{2");
      Token token10 = xPathLexer3.leftBracket();
      assertEquals("<", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer4.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("0I:)");
      Token token15 = xPathLexer5.minus();
      assertEquals(6, token15.getTokenType());
      assertEquals("0", token15.getTokenText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6389461495298525
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.minus();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer2.leftBracket();
      Token token5 = xPathLexer2.equals();
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(":3", token7.getTokenText());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("9Ws26[");
      xPathLexer4.div();
      Token token11 = xPathLexer4.nextToken();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer2.leftParen();
      Token token12 = xPathLexer4.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("W", token12.getTokenText());
      
      Token token13 = xPathLexer1.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer1.dots();
      assertEquals(13, token15.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4413985882449727
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("#7fTekT~&jQ*Wc");
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer1.mod();
      xPathLexer0.leftBracket();
      xPathLexer1.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer1.doubleColon();
      xPathLexer0.star();
      xPathLexer1.operatorName();
      xPathLexer1.div();
      xPathLexer1.nextToken();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6945513251334128
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.setXPath("mj5x/={R");
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.star();
      xPathLexer2.operatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer2.leftParen();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1401890274823732
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer0.nextToken();
      xPathLexer1.and();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.minus();
      xPathLexer1.consume();
      xPathLexer3.div();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.operatorName();
      xPathLexer1.dollar();
      xPathLexer3.colon();
      xPathLexer2.consume((-2982));
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        xPathLexer2.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3463591374015977
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer1.doubleColon();
      xPathLexer2.mod();
      xPathLexer2.leftBracket();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer4.doubleColon();
      xPathLexer3.star();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      xPathLexer5.leftParen();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.749486688646416
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.weHen.saxAath.Token");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.setXPath("0I:)");
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("0", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("*AizTdSm~bY5c");
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("*", token5.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("AizTdSm", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("I", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("5+Q[SO");
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer1.doubleColon();
      assertEquals("~b", token9.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.weHen.saxAath.Token");
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer1.at();
      assertEquals("c", token13.getTokenText());
      assertEquals(16, token13.getTokenType());
      
      xPathLexer1.or();
      Token token14 = xPathLexer4.rightParen();
      assertEquals(2, token14.getTokenType());
      
      Token token15 = xPathLexer1.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.577944645269763
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.setXPath("0I:)");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("<!2-9!S~[{2");
      xPathLexer0.mod();
      xPathLexer1.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer1.doubleColon();
      xPathLexer0.star();
      xPathLexer1.operatorName();
      xPathLexer1.div();
      xPathLexer1.nextToken();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6274943208631534
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) ()", string0);
      
      Token token1 = xPathLexer0.colon();
      assertEquals("T", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setXPath("[ (17) ()");
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("<!2-9!S~[{2");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(")", token4.getTokenText());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("<", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("[ (17) ()");
      xPathLexer4.relationalOperator();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(23, token7.getTokenType());
      assertEquals("!", token7.getTokenText());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token9 = xPathLexer3.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer3.rightParen();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer4.div();
      Token token12 = xPathLexer1.nextToken();
      assertEquals("2", token12.getTokenText());
      assertEquals(30, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("<!2-9!S~[{2");
      Token token13 = xPathLexer6.slashes();
      assertEquals(11, token13.getTokenType());
      assertEquals("<", token13.getTokenText());
      
      xPathLexer4.mod();
      Token token14 = xPathLexer6.minus();
      assertEquals(6, token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("vV0ySO44&2Wt>}6ZU");
      Token token15 = xPathLexer2.rightParen();
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6023214931835095
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wk~V1#t!sL77wuRzh");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("~V", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("1", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer1.colon();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.star();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("!", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("D*8{aQ$]C}$");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer(";HH-R%'");
      Token token7 = xPathLexer5.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals(";", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals("sL77wuRzh", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.relationalOperator();
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer7.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer7.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer3.doubleColon();
      assertEquals("*8", token12.getTokenText());
      
      Token token13 = xPathLexer2.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer6.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer4.star();
      assertEquals(20, token15.getTokenType());
      
      xPathLexer1.operatorName();
      Token token16 = xPathLexer0.dots();
      assertEquals(13, token16.getTokenType());
      
      Token token17 = xPathLexer1.at();
      assertEquals(16, token17.getTokenType());
      
      Token token18 = xPathLexer7.comma();
      assertEquals(32, token18.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5787964836140735
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("m]j5F0x/ ={RJ");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.minus();
      assertEquals("m", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("]", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("0", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.doubleColon();
      Token token10 = xPathLexer4.doubleColon();
      assertEquals("co", token10.getTokenText());
      
      Token token11 = xPathLexer3.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals("/ ", token12.getTokenText());
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer3.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer2.operatorName();
      Token token14 = xPathLexer4.dots();
      assertEquals("m.", token14.getTokenText());
      assertEquals(14, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer5.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer5.comma();
      assertEquals(32, token16.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2319366315105666
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer0.equals();
      assertEquals("w", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer1.doubleColon();
      xPathLexer0.mod();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("r", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("ke", token7.getTokenText());
      
      xPathLexer1.doubleColon();
      xPathLexer1.doubleColon();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.dots();
      assertEquals(14, token10.getTokenType());
      assertEquals("n.", token10.getTokenText());
      
      Token token11 = xPathLexer0.at();
      assertEquals("s", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      xPathLexer1.plus();
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4925116122517084
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.comma();
      assertEquals("H", token2.getTokenText());
      
      xPathLexer0.setXPath("Z=");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("d", token1.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("=", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token9 = xPathLexer1.plus();
      Token token10 = xPathLexer3.pipe();
      assertEquals(17, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.setPreviousToken(token9);
      assertEquals(5, token9.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      xPathLexer3.nextToken();
      xPathLexer0.nextToken();
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      
      xPathLexer3.mod();
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6088705252652233
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Yk", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("L1aqh", token4.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("@");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer4.identifier();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer5.nextToken();
      xPathLexer0.rightParen();
      Token token8 = xPathLexer5.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer1.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer1.rightParen();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals("}", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer5.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("@", token12.getTokenText());
      
      Token token13 = xPathLexer5.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer4.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer0.rightParen();
      assertEquals(2, token15.getTokenType());
      assertEquals("#", token15.getTokenText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.55719219297787
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wk~V1#t!sL77wuRzh");
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.setXPath("Wk~V1#t!sL77wuRzh");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("(Nx95OVN.'7+v+6 ");
      xPathLexer1.or();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer2.and();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("$|w,R\"");
      xPathLexer4.plus();
      xPathLexer2.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.setPreviousToken(token1);
      xPathLexer0.leftParen();
      xPathLexer4.nextToken();
      xPathLexer5.nextToken();
      xPathLexer1.slashes();
      xPathLexer5.mod();
      Token token2 = xPathLexer2.minus();
      assertFalse(token2.equals((Object)token0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5543295336377652
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      Token token0 = xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer3.doubleColon();
      xPathLexer0.star();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer1.comma();
      xPathLexer4.plus();
      xPathLexer1.rightBracket();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer4.minus();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3783705630169965
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer0.at();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("z", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dH3RuL;N#zC");
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer2.or();
      xPathLexer1.doubleColon();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer2.nextToken();
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer2.mod();
      Token token9 = xPathLexer3.minus();
      assertEquals(6, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0796200854648779
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-3477));
      // Undeclared exception!
      try { 
        xPathLexer1.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6814601250278483
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.setXPath("0I:)");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.rightParen();
      xPathLexer1.dollar();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer(">Ybbu2~0G)fMJ^_");
      xPathLexer3.or();
      xPathLexer3.nextToken();
      xPathLexer1.rightParen();
      xPathLexer2.colon();
      xPathLexer3.notEquals();
      xPathLexer3.doubleColon();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.notEquals();
      xPathLexer4.doubleColon();
      xPathLexer0.star();
      xPathLexer4.operatorName();
      xPathLexer2.dots();
      xPathLexer2.at();
      xPathLexer1.notEquals();
      xPathLexer1.rightParen();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4995490405959355
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.setXPath("mj5x/={R");
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.setXPath("lH-'QuNZCx@kH(lB");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.mod();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4236004579735368
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("RuL", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("UjwAJFe*?+d");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer2.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(";N#zC", token4.getTokenText());
      
      xPathLexer2.rightParen();
      Token token5 = xPathLexer2.identifier();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer("dH3RuL;N#zC");
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(";N", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("U", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer("b/3\"!#D f#SOE.=f]");
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("j", token8.getTokenText());
      
      Token token9 = xPathLexer1.at();
      assertEquals("w", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer7.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer7.plus();
      xPathLexer7.rightBracket();
      Token token11 = xPathLexer1.rightBracket();
      assertEquals("A", token11.getTokenText());
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4987922655741286
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.comma();
      xPathLexer3.star();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.leftParen();
      xPathLexer0.nextToken();
      xPathLexer2.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.LA(13);
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-135));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3463591374015977
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer2.mod();
      xPathLexer2.leftBracket();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer4.doubleColon();
      xPathLexer3.star();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      xPathLexer5.leftParen();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.43468789477105
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer0.not();
      xPathLexer1.setXPath("`E`MH- /,yLX");
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setXPath(".");
      xPathLexer1.colon();
      xPathLexer1.or();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.rightParen();
      xPathLexer2.dollar();
      xPathLexer1.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      xPathLexer6.colon();
      xPathLexer5.notEquals();
      xPathLexer3.doubleColon();
      xPathLexer2.doubleColon();
      xPathLexer1.doubleColon();
      xPathLexer5.star();
      xPathLexer4.not();
      xPathLexer2.operatorName();
      xPathLexer1.dots();
      xPathLexer1.at();
      xPathLexer2.plus();
      xPathLexer2.literal();
      Token token0 = xPathLexer4.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7442265665396923
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.number();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("k", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("w", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      Token token5 = xPathLexer0.star();
      assertEquals("Y", token5.getTokenText());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      Token token7 = xPathLexer0.colon();
      assertEquals("L", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("68S-Uu)q%/]QqU6FG");
      xPathLexer2.number();
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token10 = xPathLexer1.not();
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token11 = xPathLexer3.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("Y", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer0.doubleColon();
      assertEquals("1a", token12.getTokenText());
      assertEquals(19, token12.getTokenType());
      
      xPathLexer2.star();
      xPathLexer3.operatorName();
      Token token13 = xPathLexer1.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer5.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer0.star();
      assertEquals(20, token15.getTokenType());
      
      Token token16 = xPathLexer4.number();
      assertEquals(30, token16.getTokenType());
      
      xPathLexer1.operatorName();
      Token token17 = xPathLexer2.equals();
      assertEquals("U", token17.getTokenText());
      assertEquals(21, token17.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3337183281967655
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wk~V1#t!sL77wuRzh");
      xPathLexer0.number();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("~V", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer2.mod();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("5+Q[SO");
      xPathLexer3.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer1.doubleColon();
      Token token6 = xPathLexer0.star();
      assertEquals("L", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.and();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("w", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer4.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("fFEO-n+ < JO2D'");
      Token token10 = xPathLexer6.doubleColon();
      assertEquals("fF", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer7.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6148543594159905
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.pipe();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("T", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer1.slashes();
      xPathLexer2.leftBracket();
      Token token5 = xPathLexer2.equals();
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(":3", token7.getTokenText());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("9Ws26[");
      xPathLexer4.div();
      Token token11 = xPathLexer4.nextToken();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer2.leftParen();
      Token token12 = xPathLexer4.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer1.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer1.dots();
      assertEquals(13, token15.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4084274884595518
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (V)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("uWP", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("VuWP*GM?2# 8+xta");
      Token token2 = xPathLexer0.colon();
      assertEquals("*", token2.getTokenText());
      
      xPathLexer1.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer1.rightParen();
      Token token3 = xPathLexer2.dollar();
      assertEquals("V", token3.getTokenText());
      
      Token token4 = xPathLexer2.identifier();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer5.doubleColon();
      xPathLexer0.doubleColon();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("?2", token7.getTokenText());
      
      xPathLexer3.star();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer3.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals("*", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer5.slashes();
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("[ (17) (V)");
      xPathLexer6.mod();
      Token token11 = xPathLexer3.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer6.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("[", token12.getTokenText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5554725311399835
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.setXPath("m]j5F0x/ ={RJ");
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.operatorName();
      Token token1 = xPathLexer2.dots();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7504555954924903
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.colon();
      xPathLexer0.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.star();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      assertFalse(xPathLexer5.equals((Object)xPathLexer2));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6903001228110464
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("T1J:3i?.6;r{b$");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer2.dollar();
      xPathLexer5.comma();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer2.nextToken();
      xPathLexer6.colon();
      xPathLexer6.notEquals();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.literal();
      xPathLexer4.doubleColon();
      xPathLexer0.star();
      xPathLexer3.operatorName();
      xPathLexer2.dots();
      xPathLexer0.at();
      xPathLexer3.notEquals();
      xPathLexer5.minus();
      Token token1 = xPathLexer3.rightParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6906202945082431
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("m", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("mj5x/={R");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.minus();
      assertEquals("m", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("j", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals("/", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("={", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer3.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer3.doubleColon();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer2.operatorName();
      xPathLexer1.dots();
      xPathLexer0.at();
      xPathLexer3.relationalOperator();
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer1.minus();
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer3.rightParen();
      assertEquals(2, token16.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.481831008818711
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.pipe();
      assertEquals("3", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("UjwAJFe*?+d");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token1 = xPathLexer2.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("U", token2.getTokenText());
      
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer2.rightParen();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer2.notEquals();
      Token token6 = xPathLexer3.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("*?", token7.getTokenText());
      
      xPathLexer2.rightParen();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("dH3RuL;N#zC");
      Token token9 = xPathLexer4.star();
      assertEquals("d", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer3.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("N", token11.getTokenText());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer4.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.rightParen();
      assertEquals("#", token14.getTokenText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0350243114755613
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (V)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token2 = xPathLexer1.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("uW", token4.getTokenText());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer2.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer3.operatorName();
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer("[ (17) (V)");
      Token token7 = xPathLexer4.nextToken();
      assertEquals("[", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.leftParen();
      assertEquals(1, token8.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5652405224578483
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer2.at();
      xPathLexer1.rightParen();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.colon();
      xPathLexer0.doubleColon();
      xPathLexer3.mod();
      xPathLexer0.leftBracket();
      xPathLexer4.relationalOperator();
      xPathLexer5.mod();
      xPathLexer4.doubleColon();
      xPathLexer4.doubleColon();
      xPathLexer2.dollar();
      xPathLexer4.operatorName();
      xPathLexer2.div();
      xPathLexer0.nextToken();
      xPathLexer5.leftParen();
      xPathLexer3.or();
      Token token0 = xPathLexer5.or();
      assertNull(token0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9118478870235155
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wk~V1#t!sL77wuRzh");
      XPathLexer xPathLexer1 = new XPathLexer("l5[pJ>0l=ijjD");
      XPathLexer xPathLexer2 = new XPathLexer("Wk~V1#t!sL77wuRzh");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer2.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("W", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("l5", token2.getTokenText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4711512421052413
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.minus();
      assertEquals("", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("T", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals("1", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("J", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(":", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("3", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("T1J:3i?.6;r{b$");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("@");
      Token token6 = xPathLexer6.dollar();
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer5.identifier();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.rightParen();
      Token token9 = xPathLexer6.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer8.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token11 = xPathLexer0.rightParen();
      assertEquals(".", token11.getTokenText());
      
      Token token12 = xPathLexer3.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("T", token12.getTokenText());
      
      Token token13 = xPathLexer8.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer6.operatorName();
      Token token14 = xPathLexer6.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer8.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer0.comma();
      assertEquals(32, token16.getTokenType());
      assertEquals("6", token16.getTokenText());
      
      Token token17 = xPathLexer2.leftParen();
      assertEquals(1, token17.getTokenType());
      
      Token token18 = xPathLexer6.dollar();
      assertEquals(26, token18.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9839790542509916
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.literal();
      assertEquals(27, token1.getTokenType());
      assertEquals("werken", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.not();
      assertEquals("p", token3.getTokenText());
      
      xPathLexer0.setXPath("0I:)");
      Token token4 = xPathLexer0.star();
      assertEquals("0", token4.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      Token token5 = xPathLexer0.colon();
      assertEquals("c", token5.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer1.rightParen();
      assertEquals("c", token7.getTokenText());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("o", token8.getTokenText());
      
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
      assertEquals("m.werken.saxpath.Token", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token10 = xPathLexer2.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer2.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("*?d");
      xPathLexer3.doubleColon();
      xPathLexer2.doubleColon();
      Token token13 = xPathLexer0.doubleColon();
      assertEquals("om", token13.getTokenText());
      
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
      
      xPathLexer3.operatorName();
      Token token15 = xPathLexer3.dots();
      assertEquals(13, token15.getTokenType());
      assertEquals("d", token15.getTokenText());
      
      Token token16 = xPathLexer0.not();
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6634312231797932
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("C", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dH3RuL;N#zC");
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer3.doubleColon();
      Token token8 = xPathLexer3.doubleColon();
      assertEquals("3R", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer3.operatorName();
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals("u", token12.getTokenText());
      
      Token token13 = xPathLexer1.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer3.dollar();
      assertEquals(26, token14.getTokenType());
      assertEquals("L", token14.getTokenText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6196487683032348
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.minus();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (17) (T)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.colon();
      Token token2 = xPathLexer0.dots();
      assertEquals("J", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("3", token4.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer1.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals("i", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("?", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer3.plus();
      assertEquals("c", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token8);
      assertEquals(18, token8.getTokenType());
      assertEquals(";", token8.getTokenText());
      
      xPathLexer4.leftParen();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("r", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer2.literal();
      assertNull(token11);
      
      xPathLexer1.slashes();
      Token token12 = xPathLexer4.leftParen();
      assertEquals(1, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token13 = xPathLexer5.rightBracket();
      assertEquals(4, token13.getTokenType());
      assertEquals("c", token13.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("[ (17) (T)");
      Token token14 = xPathLexer1.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer7.rightParen();
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.740621922334047
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.mod();
      Token token3 = xPathLexer0.minus();
      assertEquals("Y", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("w", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals("{", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.colon();
      assertEquals("#", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("P9", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer0.doubleColon();
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token12 = xPathLexer3.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer3.at();
      assertEquals(16, token13.getTokenType());
      
      xPathLexer2.or();
      Token token14 = xPathLexer2.rightParen();
      assertEquals(2, token14.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7362112774654694
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNotNull(token2);
      assertEquals(27, token2.getTokenType());
      assertEquals("werken", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.not();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      xPathLexer0.setXPath("0I:)");
      Token token5 = xPathLexer0.star();
      assertEquals("0", token5.getTokenText());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("<!2-9!S~[{2");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer2.dollar();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("<", token8.getTokenText());
      assertEquals(7, token8.getTokenType());
      
      xPathLexer2.rightParen();
      Token token9 = xPathLexer1.colon();
      assertEquals("!", token9.getTokenText());
      
      Token token10 = xPathLexer2.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer2.doubleColon();
      Token token11 = xPathLexer1.rightParen();
      assertEquals("2", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("-9", token12.getTokenText());
      
      Token token13 = xPathLexer3.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer2.operatorName();
      Token token14 = xPathLexer1.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer2.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer0.comma();
      assertEquals(32, token16.getTokenType());
      
      xPathLexer1.leftParen();
      Token token17 = xPathLexer0.dollar();
      assertEquals(26, token17.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5004459141096942
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("T", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("?", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(".6", token5.getTokenText());
      assertEquals(31, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(";r", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer3.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("$", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer3.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer4.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.732159822772699
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.Token", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("75");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer4.dollar();
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer3.nextToken();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer4.rightParen();
      Token token8 = xPathLexer3.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer5.notEquals();
      xPathLexer2.doubleColon();
      Token token9 = xPathLexer5.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token10 = xPathLexer4.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer5.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer6.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer4.comma();
      assertEquals(32, token13.getTokenType());
      
      xPathLexer6.leftParen();
      Token token14 = xPathLexer1.dollar();
      assertEquals(26, token14.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.652357063214014
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      Token token0 = xPathLexer0.pipe();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("m]j5F0x/ ={RJ");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (26) (o)", string0);
      
      xPathLexer0.literal();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.dollar();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer0.doubleColon();
      Token token12 = xPathLexer2.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      Token token13 = xPathLexer2.dots();
      assertEquals(13, token13.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.688584997287183
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      assertEquals((-1), token1.getTokenType());
      assertEquals("{L1aqh?}#P9;l", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("a", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("h", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer(",3\"/AaV");
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer2.doubleColon();
      assertEquals("w{", token7.getTokenText());
      
      Token token8 = xPathLexer3.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals(",", token8.getTokenText());
      
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer3.notEquals();
      assertEquals("3\"", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals("}", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer3.plus();
      assertEquals("/", token15.getTokenText());
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer0.rightBracket();
      assertEquals("P", token16.getTokenText());
      assertEquals(4, token16.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.472185752215299
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("w{", token3.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.equals();
      assertEquals("1", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("a", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("?", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("5+Q[SO");
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("5+", token7.getTokenText());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("}", token9.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token10 = xPathLexer1.nextToken();
      assertEquals("SO", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.556655900168794
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.plus();
      xPathLexer0.comma();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token1);
      xPathLexer4.leftParen();
      xPathLexer0.nextToken();
      xPathLexer2.literal();
      xPathLexer1.slashes();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("[ (17) ()");
      xPathLexer8.identifier();
      xPathLexer1.comma();
      // Undeclared exception!
      try { 
        xPathLexer7.LA(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5052305664668342
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("{L1aqh?}#P9;l", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("8/>>j<*S55:ov]+AK|");
      Token token7 = xPathLexer2.colon();
      assertEquals("Y", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer2.mod();
      Token token8 = xPathLexer2.leftBracket();
      assertEquals("k", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.doubleColon();
      Token token9 = xPathLexer3.doubleColon();
      assertEquals("8/", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("}Op0-G)sQdSl");
      Token token10 = xPathLexer5.star();
      assertEquals("}", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      xPathLexer4.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer("}Op0-G)sQdSl");
      xPathLexer2.div();
      Token token11 = xPathLexer5.nextToken();
      assertEquals("Op0-G", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      xPathLexer6.leftParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token12 = xPathLexer4.whitespace();
      assertEquals((-2), token12.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7841691794742576
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.slashes();
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertEquals(27, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.not();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("t", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("h.Token", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer2.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer2.operatorName();
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer2.plus();
      Token token13 = xPathLexer1.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5085213546571756
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lra^#");
      Token token0 = xPathLexer0.pipe();
      assertEquals("l", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.comma();
      assertEquals("#", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath("lra^#");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("#", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      Token token6 = xPathLexer3.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer4 = new XPathLexer("lra^#");
      Token token7 = xPathLexer4.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("lr", token7.getTokenText());
      
      xPathLexer0.setXPath("lra^#");
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("lra^#");
      Token token9 = xPathLexer5.dots();
      assertEquals("l", token9.getTokenText());
      
      Token token10 = xPathLexer4.rightParen();
      assertEquals("a", token10.getTokenText());
      
      Token token11 = xPathLexer2.plus();
      assertEquals(5, token11.getTokenType());
      
      xPathLexer1.dots();
      xPathLexer4.div();
      Token token12 = xPathLexer4.nextToken();
      assertEquals("^#", token12.getTokenText());
      
      xPathLexer3.slashes();
      xPathLexer1.mod();
      Token token13 = xPathLexer3.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer3.rightParen();
      assertEquals(2, token14.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.435046434877163
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s&4bBV=si@Rv");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("s&", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("bBV", token2.getTokenText());
      
      xPathLexer0.consume(8);
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(12, int0);
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0591628762594756
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.rightParen();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer4.identifier();
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      xPathLexer3.relationalOperator();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(2, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer4.colon();
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token4 = xPathLexer6.notEquals();
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.doubleColon();
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer4.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token6 = xPathLexer8.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token7 = xPathLexer9.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer2.operatorName();
      Token token8 = xPathLexer3.dots();
      assertEquals(13, token8.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6545616261179887
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("e", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.doubleColon();
      xPathLexer0.mod();
      xPathLexer1.leftBracket();
      Token token8 = xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer1.setPreviousToken(token2);
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token8);
      assertEquals(19, token8.getTokenType());
      assertEquals("rk", token8.getTokenText());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals("e", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("n.saxpath.Token", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Np*(uWz!K");
      xPathLexer3.nextToken();
      Token token12 = xPathLexer3.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer3.dollar();
      assertEquals(26, token13.getTokenType());
      assertEquals("(", token13.getTokenText());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5833230299610173
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer1.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer1.doubleColon();
      xPathLexer0.mod();
      xPathLexer1.leftBracket();
      xPathLexer1.relationalOperator();
      xPathLexer1.mod();
      xPathLexer1.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer1.star();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.598605177997306
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "lra^#";
      XPathLexer xPathLexer0 = new XPathLexer("lra^#");
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.consume((-2161));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5256567948603716
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.pipe();
      assertEquals("J", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      Token token3 = xPathLexer0.not();
      assertEquals("i", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(31, token5.getTokenType());
      assertEquals(".6", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(";r", token7.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("CssF*`g<&TP");
      Token token9 = xPathLexer4.doubleColon();
      assertEquals("Cs", token9.getTokenText());
      
      Token token10 = xPathLexer4.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer4.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("*", token11.getTokenText());
      
      Token token12 = xPathLexer4.nextToken();
      assertEquals("`g<&TP", token12.getTokenText());
      
      Token token13 = xPathLexer0.leftParen();
      assertEquals("$", token13.getTokenText());
      
      xPathLexer0.or();
      xPathLexer4.nextToken();
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      xPathLexer3.equals();
      Token token15 = xPathLexer2.whitespace();
      assertEquals((-2), token15.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6156734753604904
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("nUu]M8K\"8g");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer2.slashes();
      xPathLexer2.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer2.doubleColon();
      xPathLexer1.mod();
      xPathLexer1.leftBracket();
      xPathLexer2.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer0.nextToken();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer4.or();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8019472930761515
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      token1.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (c)", string0);
      
      token1.toString();
      String string1 = token1.toString();
      assertEquals("[ (30) ()", string1);
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) ()");
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token4.getTokenText());
      assertNotNull(token4);
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals(" ", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (30) ()");
      Token token6 = xPathLexer1.leftBracket();
      assertEquals("(", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (30) ()");
      Token token8 = xPathLexer5.dots();
      assertEquals("[", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer4.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer4.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer4.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0951879555599753
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.consume((-1347));
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.doubleColon();
      xPathLexer1.literal();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lra^#");
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.consume((-2161));
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5604775143441905
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("d", token0.getTokenText());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(32, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals(";", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("N", token4.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("C", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("dH3RuL;N#zC");
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("dH3RuL;N#zC");
      Token token8 = xPathLexer3.doubleColon();
      assertEquals("dH", token8.getTokenText());
      
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer3.leftParen();
      assertEquals(1, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer1.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer1.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer1.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7987173807116914
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPaghLexer");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (21) (c)", string0);
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      Token token7 = xPathLexer1.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer2.setXPath("@'~A6_^n<s(us.&m");
      xPathLexer2.operatorName();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.consume((-1196));
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer2.plus();
      assertEquals("@", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token12 = xPathLexer3.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer3.div();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer4.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token14 = xPathLexer1.not();
      assertEquals(23, token14.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals((-1160), int0);
      
      Token token15 = xPathLexer3.number();
      assertEquals(30, token15.getTokenType());
      
      Token token16 = xPathLexer3.identifier();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6310341376725743
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpat.Token");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath("`*F9");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("com.werken.saxpat.Token");
      Token token3 = xPathLexer0.star();
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpat.Token", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.setXPath("Y$(uOtO4");
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("Y", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("u", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("0I:)");
      xPathLexer0.doubleColon();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("0I", token8.getTokenText());
      
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer1.operatorName();
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("O", token11.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("2;/_{(O5)");
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer2.plus();
      assertEquals("2", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4692481522940293
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (V)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("uWP", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("VuWP*GM?2# 8+xta");
      xPathLexer0.colon();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("VuWP*GM?2# 8+xta");
      Token token2 = xPathLexer1.rightParen();
      assertEquals("V", token2.getTokenText());
      
      xPathLexer1.minus();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.colon();
      assertEquals("M", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer("uuYk5->0: 3");
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("G", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals("?2", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.doubleColon();
      Token token11 = xPathLexer6.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer5.star();
      assertEquals(20, token12.getTokenType());
      
      xPathLexer2.operatorName();
      Token token13 = xPathLexer4.dots();
      assertEquals("u", token13.getTokenText());
      
      Token token14 = xPathLexer4.at();
      assertEquals("u", token14.getTokenText());
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer4.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer6.minus();
      assertEquals(6, token16.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4713698425477368
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer1.nextToken();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer0.leftParen();
      Token token9 = xPathLexer1.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftParen();
      assertEquals("o", token10.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
      
      xPathLexer1.isIdentifierChar('8');
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token13 = xPathLexer2.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer2.getXPath();
      Token token14 = xPathLexer0.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8133554045006157
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.div();
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume((-2589));
      String string0 = "{evAg0B";
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.consume((-2589));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.87662907941632
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Yk", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("L", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("1", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.literal();
      Token token7 = xPathLexer3.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer1.setXPath("Ykw{L1aqh?}#P9;l");
      Token token8 = xPathLexer1.notEquals();
      assertEquals("Yk", token8.getTokenText());
      
      xPathLexer1.dots();
      xPathLexer3.rightParen();
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("{", token9.getTokenText());
      
      xPathLexer2.dots();
      xPathLexer2.div();
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.rightParen();
      assertEquals("?", token14.getTokenText());
      assertEquals(2, token14.getTokenType());
      
      Token token15 = xPathLexer3.comma();
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer0.dots();
      assertEquals(13, token16.getTokenType());
      assertEquals("}", token16.getTokenText());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5610061306591276
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.minus();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("T", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals("1", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("08FT]R[^I");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals(":3", token3.getTokenText());
      
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("i", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token5 = xPathLexer3.colon();
      assertEquals("", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      xPathLexer3.doubleColon();
      xPathLexer3.mod();
      Token token6 = xPathLexer3.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("8F", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      xPathLexer1.star();
      Token token8 = xPathLexer3.star();
      assertEquals(":", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token9 = xPathLexer4.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer1.div();
      Token token10 = xPathLexer3.nextToken();
      assertEquals("3", token10.getTokenText());
      assertEquals(30, token10.getTokenType());
      
      xPathLexer4.div();
      Token token11 = xPathLexer4.nextToken();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals("]", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
      
      xPathLexer2.mod();
      Token token13 = xPathLexer1.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer3.rightParen();
      assertEquals("i", token14.getTokenText());
      assertEquals(2, token14.getTokenType());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6137710457888654
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("o", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.plus();
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(".", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("werken.saxpath.Token", token5.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(",3\"/AaV");
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals(",", token8.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer2.doubleColon();
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer2.doubleColon();
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer2.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("a", token11.getTokenText());
      
      xPathLexer3.operatorName();
      Token token12 = xPathLexer1.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer1.at();
      assertEquals(16, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token14 = xPathLexer4.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer1.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6541959037856724
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("dH3RuL;N#zC");
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.consume((-2982));
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8580062396672252
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lra^#");
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-2161));
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.setXPath("lra^#");
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.consume((-2161));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5737020281347673
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals("c", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("m", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(".", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("w", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.doubleColon();
      xPathLexer1.isIdentifierChar('^');
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      xPathLexer1.dots();
      xPathLexer1.currentPosition();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("rk", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.8481778814451509
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer2.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(")", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer2.rightParen();
      assertEquals(2, token4.getTokenType());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0201935692345188
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s,#$X7taZVO/'i");
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("s,#$X7taZVO/'i");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.156101271930868
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      xPathLexer1.literal();
      xPathLexer0.slashes();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6632331224255381
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      token1.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("'POc+|'aM%b#`d&t");
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.512426633558565
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      token1.toString();
      xPathLexer0.identifierOrOperatorName();
      token1.toString();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      token1.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (21) (o)", string0);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.2484648882686018
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      token1.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (23) (c)");
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      Token token2 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7684117672695285
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("e", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("rken.saxpath.Token", token5.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer(",3\"/AaV");
      Token token7 = xPathLexer2.dollar();
      assertEquals(",", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("3\"", token9.getTokenText());
      
      xPathLexer1.star();
      Token token10 = xPathLexer2.notEquals();
      assertEquals("/A", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("7(r\"KJ");
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("7", token11.getTokenText());
      
      Token token12 = xPathLexer3.star();
      assertEquals("(", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      xPathLexer2.at();
      Token token13 = xPathLexer3.comma();
      assertEquals(32, token13.getTokenType());
      assertEquals("r", token13.getTokenText());
      
      xPathLexer2.plus();
      Token token14 = xPathLexer3.rightBracket();
      assertEquals("\"", token14.getTokenText());
      
      Token token15 = xPathLexer2.rightBracket();
      assertEquals(4, token15.getTokenType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1094));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0068778244524432
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.consume((-1));
      xPathLexer0.setXPath("y:[n=VM0Yx");
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("y", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(":", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.311501987370586
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer2.leftBracket();
      xPathLexer2.equals();
      xPathLexer0.colon();
      xPathLexer1.doubleColon();
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.consume((-2589));
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3562810155707323
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("K(Fha}9mxlj1\raa");
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar('A');
      xPathLexer0.isIdentifierChar('A');
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      xPathLexer1.getXPath();
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4479217290926139
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("e", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("r", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertEquals("en.saxpath.To", token7.getTokenText());
      assertEquals(27, token7.getTokenType());
      
      Token token8 = xPathLexer1.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("en", token10.getTokenText());
      
      xPathLexer1.isIdentifierChar('v');
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("", token11.getTokenText());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6593009956183022
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      Token token1 = xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      String string0 = token1.toString();
      assertEquals("[ (23) (.)", string0);
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.setPreviousToken(token1);
      xPathLexer1.whitespace();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer2.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer1.dots();
      token0.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertNull(token4);
      
      String string1 = token0.toString();
      assertEquals("[ (32) (c)", string1);
      
      xPathLexer1.literal();
      XPathLexer xPathLexer4 = new XPathLexer("[ (32) (c)");
      Token token5 = xPathLexer4.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (32) (c)");
      xPathLexer1.doubleColon();
      xPathLexer4.doubleColon();
      Token token6 = xPathLexer4.rightParen();
      assertEquals("2", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("[ (32) (c)");
      Token token7 = xPathLexer6.pipe();
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer6.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals(" (", token8.getTokenText());
      
      Token token9 = xPathLexer3.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.operatorName();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("0*;R");
      Token token12 = xPathLexer7.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer8.dollar();
      assertEquals("0", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ur");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.6762963216830316
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",phg0Of/&Yzm_NI(A");
      Token token0 = xPathLexer0.pipe();
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.equals();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(",phg0Of/&Yzm_NI(A");
      xPathLexer1.literal();
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.or();
      xPathLexer1.star();
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3703393941862025
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.mod();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) ())", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('|');
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.comma();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      xPathLexer0.mod();
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4000061553126733
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("d", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.pipe();
      assertEquals("3", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("RuL", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(";", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer1.equals();
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("(@Z3%qDw!v~Kh2OdH");
      Token token8 = xPathLexer5.notEquals();
      assertEquals("(@", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer1.doubleColon();
      xPathLexer5.doubleColon();
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.dots();
      assertEquals("z", token9.getTokenText());
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer5.nextToken();
      assertEquals("%qDw!v~Kh2OdH", token11.getTokenText());
      
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("%", token12.getTokenText());
      
      Token token13 = xPathLexer2.rightParen();
      assertEquals(2, token13.getTokenType());
      
      boolean boolean0 = xPathLexer4.isIdentifierStartChar('G');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3291277575571674
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.not();
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.identifier();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.div();
      assertNull(token2);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.6980110198441136
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.consume((-1501));
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6859767170451903
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.setXPath("Ykw{L1aqh?}#P9;l");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.leftParen();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer2.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("Y", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer3.doubleColon();
      xPathLexer2.setPreviousToken(token7);
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token8 = xPathLexer5.leftParen();
      assertEquals("Y", token8.getTokenText());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("kw", token9.getTokenText());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("{", token11.getTokenText());
      
      char char0 = xPathLexer5.LA(13);
      assertEquals('9', char0);
      
      Token token12 = xPathLexer2.rightBracket();
      assertEquals("L", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.269639374604125
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "VuWP\\*GM?2# 8+xta";
      XPathLexer xPathLexer0 = new XPathLexer("VuWP*GM?2# 8+xta");
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      String string1 = "mj5x/={R";
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.654251218851616
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.operatorName();
      xPathLexer2.dots();
      xPathLexer2.dots();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9019105764725523
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",phg0Of/&Yzm_NI(A");
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.star();
      assertEquals("h", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("Yz", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(",phg0Of/&Yzm_NI(A");
      Token token6 = xPathLexer1.at();
      assertEquals(",", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("DAo5BQ?>Hdc=AXk5C'.");
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("D", token7.getTokenText());
      
      Token token8 = xPathLexer2.leftParen();
      assertEquals("A", token8.getTokenText());
      
      xPathLexer2.operatorName();
      Token token9 = xPathLexer2.leftBracket();
      assertEquals("o", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      xPathLexer2.mod();
      Token token10 = xPathLexer1.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("p", token10.getTokenText());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals("A", token11.getTokenText());
      
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("DAo5BQ?>Hdc=AXk5C'.");
      xPathLexer1.operatorName();
      Token token14 = xPathLexer2.dots();
      assertEquals("?", token14.getTokenText());
      
      Token token15 = xPathLexer1.at();
      assertEquals(16, token15.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.319637988682031
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.892974522748253
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",phg0Of/&Yzm_NI(A");
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      String string0 = xPathLexer0.getXPath();
      assertEquals(",phg0Of/&Yzm_NI(A", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7224753879206267
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals("c", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("w", token6.getTokenText());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("e", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.whitespace();
      xPathLexer0.div();
      xPathLexer1.setPreviousToken(token2);
      assertEquals(16, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token10);
      assertEquals((-2), token10.getTokenType());
      
      Token token12 = xPathLexer0.leftParen();
      assertEquals("r", token12.getTokenText());
      assertEquals(1, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals("ken.saxpath.Token", token13.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("Np*(uWz!K");
      Token token14 = xPathLexer3.nextToken();
      assertEquals(15, token14.getTokenType());
      
      Token token15 = xPathLexer3.slashes();
      assertEquals("*", token15.getTokenText());
      
      char char0 = xPathLexer1.LA(1);
      assertEquals('\uFFFF', char0);
      
      Token token16 = xPathLexer3.dollar();
      assertEquals("(", token16.getTokenText());
      assertEquals(26, token16.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5579127359392124
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("w", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.relationalOperator();
      xPathLexer1.literal();
      Token token7 = xPathLexer2.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer2.setXPath("com.werken.saxpath.Token");
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer2.dots();
      assertEquals("c", token9.getTokenText());
      
      xPathLexer5.rightParen();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer4.dots();
      xPathLexer2.div();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token11 = xPathLexer6.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token11.getTokenText());
      
      Token token12 = xPathLexer6.slashes();
      assertEquals(11, token12.getTokenType());
      
      xPathLexer0.mod();
      Token token13 = xPathLexer2.minus();
      assertEquals("o", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer7.rightParen();
      assertEquals(2, token14.getTokenType());
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5526503145787707
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Yk", token1.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("#", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.nextToken();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("P", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("9", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token8 = xPathLexer2.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals(";l", token9.getTokenText());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("7(r\"KJ");
      Token token12 = xPathLexer1.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer3.comma();
      assertEquals(32, token14.getTokenType());
      assertEquals("Y", token14.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer5.plus();
      assertEquals(5, token15.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("7(r\"KJ");
      xPathLexer6.rightBracket();
      Token token16 = xPathLexer4.rightBracket();
      assertEquals(4, token16.getTokenType());
      assertEquals("7", token16.getTokenText());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.725664197301807
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.consume((-2982));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.2480298540815755
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpat.Token");
      Token token0 = xPathLexer0.comma();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpat.Token");
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("[ (32) (c)");
      xPathLexer0.plus();
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer5 = new XPathLexer(",x\"z5O7,!gt*-@~");
      xPathLexer5.leftParen();
      xPathLexer3.nextToken();
      xPathLexer0.literal();
      xPathLexer4.slashes();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.7824681627834336
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AA+qgd3$yAt%ruKv");
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.consume((-1271));
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3414007934381669
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals("c", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("o", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("m", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("w", token6.getTokenText());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("e", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.consume(2743);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token10 = xPathLexer3.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer3.star();
      assertEquals(20, token12.getTokenType());
      
      xPathLexer3.minus();
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer3.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7895758899910945
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      token0.toString();
      token1.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (c)", string0);
      
      token1.toString();
      String string1 = token1.toString();
      assertEquals("[ (30) ()", string1);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.literal();
      assertNotNull(token4);
      assertEquals(27, token4.getTokenType());
      assertEquals("werken", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals("s", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) ()");
      Token token6 = xPathLexer1.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("axpath.Token", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("a", token8.getTokenText());
      
      Token token9 = xPathLexer1.at();
      assertEquals("[", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("(", token11.getTokenText());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      assertEquals("30", token12.getTokenText());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.179922731779209
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("r", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("k", token4.getTokenText());
      
      xPathLexer0.consume(0);
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.colon();
      assertEquals(".", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("sa", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("co", token8.getTokenText());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals("m", token9.getTokenText());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals("a", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      assertEquals("th", token13.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token14 = xPathLexer3.dots();
      assertEquals("c", token14.getTokenText());
      
      Token token15 = xPathLexer3.at();
      assertEquals(16, token15.getTokenType());
      assertEquals("o", token15.getTokenText());
      
      Token token16 = xPathLexer3.comma();
      assertEquals("m", token16.getTokenText());
      
      Token token17 = xPathLexer1.plus();
      assertEquals(5, token17.getTokenType());
      
      Token token18 = xPathLexer3.rightBracket();
      assertEquals(".", token18.getTokenText());
      
      Token token19 = xPathLexer2.dots();
      assertEquals(13, token19.getTokenType());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.6806617236749393
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2082));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5619094543244156
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lra^#");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("#", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.setXPath("lra^#");
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("lra", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.plus();
      assertEquals("^", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer("lra^#");
      xPathLexer4.doubleColon();
      xPathLexer0.setXPath("lra^#");
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("lra^#");
      xPathLexer5.dots();
      xPathLexer4.rightParen();
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer4.div();
      Token token11 = xPathLexer4.nextToken();
      assertEquals("^#", token11.getTokenText());
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer3.slashes();
      assertEquals(11, token12.getTokenType());
      
      xPathLexer1.mod();
      Token token13 = xPathLexer3.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer3.rightParen();
      assertEquals(2, token14.getTokenType());
      
      Token token15 = xPathLexer4.at();
      assertEquals(16, token15.getTokenType());
      assertEquals("^", token15.getTokenText());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ykw{L1aqh?}#P9;l");
      xPathLexer0.or();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5118735649673571
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("J", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(":", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.rightParen();
      assertEquals("3", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("i", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer3.plus();
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(".", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token5);
      assertEquals(18, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      Token token8 = xPathLexer4.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer2.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer1.slashes();
      assertEquals("c", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals(";", token13.getTokenText());
      assertEquals(20, token13.getTokenType());
      
      xPathLexer2.operatorName();
      Token token14 = xPathLexer4.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer1.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer1.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer1.minus();
      assertEquals(6, token17.getTokenType());
      assertEquals(".", token17.getTokenText());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4741505662114445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.plus();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.div();
      token0.toString();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      String string0 = token0.toString();
      assertEquals("[ (5) ())", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer0.plus();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.460393151753728
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (c)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.and();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("er", token7.getTokenText());
      
      Token token8 = xPathLexer1.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer1.operatorName();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("k", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("e", token10.getTokenText());
      
      xPathLexer1.comma();
      Token token11 = xPathLexer1.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer0.dollar();
      assertEquals("n", token12.getTokenText());
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.439689859480467
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals("c", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("o", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("m", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(".", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("w", token6.getTokenText());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("e", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.doubleColon();
      xPathLexer1.doubleColon();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("rk", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("e", token9.getTokenText());
      
      xPathLexer0.minus();
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(".", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6141241114768647
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("d", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("UjwAJFe*?+d");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer2.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(";N#zC", token4.getTokenText());
      
      xPathLexer2.rightParen();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("dH3RuL;N#zC");
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals(";N", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("CssF*`g<&TP");
      xPathLexer3.doubleColon();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer5.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("C", token8.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer2.leftParen();
      xPathLexer1.or();
      Token token9 = xPathLexer4.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("dH3RuL", token9.getTokenText());
      
      Token token10 = xPathLexer3.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer1.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("U", token11.getTokenText());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6724068009317974
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("o", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer1.leftBracket();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.colon();
      assertEquals("e", token4.getTokenText());
      
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer5 = new XPathLexer("8)(qHEv");
      Token token6 = xPathLexer5.notEquals();
      assertEquals("8)", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.Token");
      Token token7 = xPathLexer4.doubleColon();
      assertEquals("co", token7.getTokenText());
      
      Token token8 = xPathLexer3.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals("r", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer4.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("m.werken.saxpath.Token", token10.getTokenText());
      
      Token token11 = xPathLexer4.leftParen();
      assertEquals(1, token11.getTokenType());
      
      xPathLexer3.or();
      xPathLexer0.nextToken();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer6.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("c", token13.getTokenText());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7730363048778623
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.113429497826824
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("T", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("J", token3.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("08FT]R[^I");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(":3", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token5 = xPathLexer0.equals();
      assertEquals("i", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("T1J:3i?.6;r{b$");
      Token token6 = xPathLexer3.colon();
      assertEquals("", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer3.doubleColon();
      xPathLexer3.mod();
      Token token7 = xPathLexer3.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("J", token7.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer2.doubleColon();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("8F", token8.getTokenText());
      
      xPathLexer1.star();
      Token token9 = xPathLexer3.star();
      assertEquals(20, token9.getTokenType());
      assertEquals(":", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("08FT]R[^I");
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      assertEquals("?", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("=UZ3~>Sk)K");
      Token token11 = xPathLexer3.identifier();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer7.comma();
      assertEquals("=", token12.getTokenText());
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5909638115396196
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("d", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.at();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("R", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(";N", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.nextToken();
      assertNotSame(token6, token3);
      
      XPathLexer xPathLexer2 = new XPathLexer("@");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer2.rightParen();
      assertEquals("@", token7.getTokenText());
      
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("zC", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer4.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer2.rightParen();
      Token token11 = xPathLexer2.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer3.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer3.rightParen();
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer2.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer0.operatorName();
      Token token14 = xPathLexer4.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer2.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer4.notEquals();
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer0.minus();
      assertEquals(6, token17.getTokenType());
      
      Token token18 = xPathLexer0.rightParen();
      assertEquals(2, token18.getTokenType());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.4564325227571342
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wk~V1#t!sL77wuRzh");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("W", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("~V", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer0.equals();
      assertEquals("1", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer1.colon();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("#t", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("5+Q[SO");
      xPathLexer3.relationalOperator();
      Token token6 = xPathLexer3.doubleColon();
      assertEquals("5+", token6.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer3.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("Q", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("!", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals("s", token9.getTokenText());
      
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.pipe();
      assertEquals(17, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.star();
      assertEquals(20, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer0.dots();
      assertEquals("L", token13.getTokenText());
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer7.at();
      assertEquals(16, token14.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token15 = xPathLexer2.rightBracket();
      assertEquals(4, token15.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3686482904077721
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("H", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token3 = xPathLexer0.comma();
      assertEquals(";", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("N", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.literal();
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.star();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer0.div();
      Token token10 = xPathLexer1.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer1.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5106171222971736
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.dollar();
      assertEquals(".", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("e", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.colon();
      Token token7 = xPathLexer0.slashes();
      assertEquals("k", token7.getTokenText());
      
      Token token8 = xPathLexer0.literal();
      assertEquals("n.saxpath.Tok", token8.getTokenText());
      
      Token token9 = xPathLexer1.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("n", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer1.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer0.colon();
      assertEquals(18, token15.getTokenType());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.5785967733977304
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.identifier();
      xPathLexer1.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer2.colon();
      xPathLexer3.star();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.500138026365427
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.relationalOperator();
      xPathLexer2.slashes();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer1.leftParen();
      xPathLexer1.slashes();
      xPathLexer1.not();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.458311329683084
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.minus();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4738487488667236
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dH3RuL;N#zC");
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.at();
      Token token0 = xPathLexer0.pipe();
      assertEquals("R", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("uL", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.not();
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("z", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("dH3RuL;N#zC");
      Token token5 = xPathLexer1.dollar();
      assertEquals("d", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer3.notEquals();
      xPathLexer3.doubleColon();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("H3", token8.getTokenText());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("R", token9.getTokenText());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals("uL", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer4.at();
      Token token12 = xPathLexer2.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer5.plus();
      assertEquals(5, token13.getTokenType());
      
      xPathLexer1.rightBracket();
      Token token14 = xPathLexer3.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer0.minus();
      assertEquals(6, token15.getTokenType());
      assertEquals("C", token15.getTokenText());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.706319627608524
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
  }
}
