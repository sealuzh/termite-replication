/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:52:04 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.sval = "not";
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-16));
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.quoteChar((-197));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(c8s] /}%Ls5v`o4u<");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "nss");
      jSTerm0.toStr();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator<JSTerm> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm2 = unaryOperator1.apply(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      Function.identity();
      jSTerm2.add((Object) jSTerm3);
      jSTerm1.clone();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      UnaryOperator.identity();
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      unaryOperator1.apply(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "nss");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = unaryOperator0.apply(jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator<JSTerm> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(jSTerm1);
      jSTerm1.clone();
      jSTerm0.equals(jSPredicateForm0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.reset();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.sval = "(";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0302713880420784
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.removeAll(jSTerm0);
      jSPredicateForm1.toStr();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm1);
      jSTerm0.clonePF();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Dc8s]#0}%v?u=");
      stringReader0.ready();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("(Dc8s]#0}%v?u=");
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = ':';
      charArray0[4] = '|';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      stringReader1.read(charArray0);
      stringReader1.ready();
      stringReader0.read();
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.ready();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Dc8s]#0}%v?u=");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Dc8s]#0}%v?u=");
      stringReader0.ready();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("(Dc8s]#0}%v?u=");
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      charArray0[3] = ':';
      charArray0[4] = '|';
      charArray0[6] = ' ';
      charArray0[7] = 'J';
      stringReader1.read(charArray0);
      stringReader1.ready();
      stringReader0.read();
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(false);
      stringReader0.ready();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Dc8s]#0}%v?u=");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6988681341182348
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      assertEquals(1, jSTerm1.size());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = '`';
      charArray0[6] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.read(charArray0);
      jSPredicateForm0.add((Object) "9.0");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      stringReader0.reset();
      System.setCurrentTimeMillis((-1));
      jSTerm1.clonePF();
      System.setCurrentTimeMillis(1358L);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.removeElement(jSTerm2);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.13243989994744
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aR*sh]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(1);
      jSSubstitution3.add((Object) integer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      jSSubstitution2.assignFailure();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution8.add((Object) null);
      jSSubstitution9.retainAll(jSSubstitution6);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution5.removeAll(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution9);
      assertFalse(jSSubstitution16.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution17.forEach(consumer0);
      jSTerm0.applySubstitutionPF(jSSubstitution17);
      jSTerm0.applySubstitutionPF(jSSubstitution4);
      JSSubstitution jSSubstitution18 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution18);
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) "not");
      charBuffer0.append('6');
      CharBuffer charBuffer3 = charBuffer0.put('6');
      CharBuffer charBuffer4 = charBuffer3.slice();
      charBuffer4.put('`');
      charBuffer0.duplicate();
      charBuffer4.duplicate();
      charBuffer2.append('`');
      charBuffer4.rewind();
      charBuffer2.rewind();
      charBuffer0.clear();
      charBuffer2.append((CharSequence) "not");
      charBuffer0.compact();
      CharBuffer.allocate(0);
      charBuffer2.charAt(1);
      charBuffer1.flip();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-1), (-1));
      streamTokenizer0.wordChars((-1), 776);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars((-1), 776);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars(776, 776);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 576;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.spliterator();
      jSTerm0.setSize(576);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.478006498651262
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aqh]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(1);
      jSSubstitution3.add((Object) integer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSSubstitution2.assignFailure();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution4.add((Object) null);
      jSSubstitution9.retainAll(jSSubstitution6);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution5.removeAll(jSSubstitution0);
      streamTokenizer0.commentChar(1);
      streamTokenizer0.slashSlashComments(false);
      stringReader0.ready();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.147482301072779
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("avqh]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Integer integer0 = new Integer(1);
      jSSubstitution1.add((Object) integer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution3.add((Object) null);
      jSSubstitution8.retainAll(jSSubstitution5);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution4.removeAll(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      Object object0 = new Object();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution14.forEach(consumer0);
      jSSubstitution14.add(object0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution14);
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSPredicateForm jSPredicateForm4 = jSTerm0.applySubstitutionPF(jSSubstitution13);
      assertNotSame(jSPredicateForm4, jSPredicateForm3);
      
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm2));
      assertEquals("(%%%%%% )", stringBuffer0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.142477296067774
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(576);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSSubstitution5.assignFailure();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      System.setCurrentTimeMillis(901L);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution12);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm1);
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      jSPredicateForm2.clone();
      jSTerm0.isEmpty();
      jSPredicateForm1.print();
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm2));
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("jsutil>>stringtokenizer is returning %%%");
      jSPredicateForm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      int int0 = 93;
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1174464549682916
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aqh]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(1);
      jSSubstitution3.add((Object) integer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      jSSubstitution2.assignFailure();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution4.add((Object) null);
      jSSubstitution9.retainAll(jSSubstitution6);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution5.removeAll(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = jSTerm0.matches(jSPredicateForm0, jSSubstitution9);
      assertFalse(jSSubstitution16.fail());
      
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution17.forEach(consumer0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution17);
      jSTerm0.applySubstitutionPF(jSSubstitution6);
      JSSubstitution jSSubstitution18 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution15);
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nss");
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0547779606981393
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9M.um,A>_GG(',");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution3);
      jSSubstitution3.addAll((Collection) jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution2.listIterator();
      jSSubstitution4.addAll((Collection) jSTerm1);
      jSSubstitution4.removeElement((Object) null);
      jSSubstitution4.add((Object) "9M.um,A>_GG(',");
      jSSubstitution4.clear();
      jSSubstitution0.trimToSize();
      jSSubstitution4.add((Object) jSSubstitution1);
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSSubstitution3.trimToSize();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      jSSubstitution7.assignFailure();
      jSSubstitution3.add((Object) "9M.um,A>_GG(',");
      jSTerm1.equals(listIterator0);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution3);
      jSSubstitution6.iterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      assertFalse(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9M.um,A>_GG(',");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution3);
      jSSubstitution0.add((Object) jSSubstitution4);
      jSSubstitution4.removeAllElements();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution4.listIterator();
      jSSubstitution5.removeAll(jSTerm0);
      jSSubstitution0.assignFailure();
      jSSubstitution5.removeElement((Object) null);
      jSSubstitution5.add((Object) "9M.um,A>_GG(',");
      jSSubstitution5.clear();
      jSSubstitution5.add((Object) jSSubstitution1);
      jSSubstitution3.trimToSize();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution1.add((Object) streamTokenizer0);
      jSSubstitution2.assignFailure();
      jSTerm1.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) listIterator0);
      jSSubstitution1.removeAll(jSTerm0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.clone();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution9.iterator();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.leftBrac = 44;
      jSPredicateForm0.addElement(comparator0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$744822679 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "nss");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.interrogation = 91;
      jSPredicateForm0.addElement(jSTerm1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StringReader stringReader1 = new StringReader("9.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      jSTerm0.ensureCapacity((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.quoteChar((-1241));
      jSTerm0.ensureCapacity((-1241));
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      System.setCurrentTimeMillis(274L);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      jSTerm1.removeElement(jSTerm2);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      jSTerm0.add((Object) "not");
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) "not");
      charBuffer0.codePoints();
      CharBuffer charBuffer3 = charBuffer0.append('6');
      charBuffer0.put('6');
      CharBuffer charBuffer4 = charBuffer3.slice();
      charBuffer4.put('`');
      charBuffer0.duplicate();
      CharBuffer charBuffer5 = charBuffer4.duplicate();
      charBuffer2.get();
      charBuffer4.rewind();
      charBuffer2.rewind();
      charBuffer5.clear();
      charBuffer2.append((CharSequence) "not");
      charBuffer0.compact();
      charBuffer2.slice();
      CharBuffer.allocate(0);
      charBuffer2.charAt(1);
      charBuffer1.flip();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.clone();
      jSPredicateForm0.setSize(2694);
      jSPredicateForm0.ensureCapacity(0);
      System.setCurrentTimeMillis((-2936L));
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(576);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'v';
      charArray0[2] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer1 = CharBuffer.allocate('#');
      charBuffer1.put('v');
      charBuffer1.flip();
      stringReader0.read(charBuffer0);
      stringReader0.read(charArray0);
      Integer integer0 = new Integer((-364880652));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h6zl");
      StringReader stringReader1 = new StringReader("9.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      jSTerm0.firstElement();
      jSTerm0.add((Object) "u3UtJszJ");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '#';
      charArray0[8] = 'd';
      char[] charArray1 = new char[5];
      charArray1[2] = 'y';
      charArray1[3] = 'd';
      CharBuffer.allocate(597);
      charArray0[6] = '=';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement("not");
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(576);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.ensureCapacity(576);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSSubstitution3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'S';
      charArray0[2] = 'W';
      charArray0[3] = 'A';
      charArray0[4] = 'G';
      charArray0[5] = 'S';
      CharBuffer.wrap(charArray0);
      stringReader0.read(charArray0);
      jSTerm0.add((Object) "9.");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-267));
      JSJshopVars.rightBrac = 93;
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(801L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1984L));
      jSPredicateForm0.addElement("call ");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(801L);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(2872);
      JSJshopVars.slash = (-1879791106);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-267));
      JSJshopVars.rightBrac = 93;
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(801L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1984L));
      jSPredicateForm0.addElement("call ");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(801L);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9M.um,A>_GG(',");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution3);
      jSSubstitution0.add((Object) jSSubstitution4);
      jSSubstitution4.removeAllElements();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution4.listIterator();
      jSSubstitution0.assignFailure();
      jSSubstitution5.removeElement((Object) null);
      jSSubstitution5.add((Object) "9M.um,A>_GG(',");
      jSSubstitution5.clear();
      jSSubstitution5.add((Object) jSSubstitution1);
      jSSubstitution3.trimToSize();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution1.add((Object) streamTokenizer0);
      jSSubstitution2.assignFailure();
      jSSubstitution0.add((Object) listIterator0);
      jSSubstitution1.removeAll(jSTerm0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.clone();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution9.iterator();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "(+-+,>8s]909%5SJy<";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.nextToken();
      streamTokenizer0.sval = "UI^b6";
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-1), (-1));
      streamTokenizer0.wordChars((-1), 776);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars(1, 776);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "not";
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars(776, 776);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3694L));
      System.setCurrentTimeMillis((-3694L));
      System.setCurrentTimeMillis((-3694L));
      System.setCurrentTimeMillis(2333L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-3694L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-3694L));
      System.setCurrentTimeMillis(2333L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(2075L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2747364480052235
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jss");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = 'y';
      charArray0[1] = 't';
      charArray0[4] = 'y';
      jSTerm0.add((Object) "jss");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.remove((Object) jSPredicateForm1);
      jSPredicateForm2.removeAllElements();
      jSPredicateForm2.containsAll(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      JSSubstitution jSSubstitution1 = jSPredicateForm3.matches(jSPredicateForm1);
      jSPredicateForm2.setSize(10);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.standarizerPredicateForm();
      jSSubstitution1.add((Object) jSPredicateForm1);
      JSPredicateForm jSPredicateForm5 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm5.addAll((Collection) jSPredicateForm0);
      jSPredicateForm5.trimToSize();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm4, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) "not");
      charBuffer0.clear();
      charBuffer0.codePoints();
      CharBuffer charBuffer3 = charBuffer0.append('D');
      charBuffer3.codePoints();
      CharBuffer charBuffer4 = charBuffer0.put('D');
      charBuffer1.mark();
      charBuffer3.get(0);
      CharBuffer charBuffer5 = charBuffer4.slice();
      CharBuffer charBuffer6 = CharBuffer.allocate('D');
      CharBuffer charBuffer7 = charBuffer5.put('`');
      CharBuffer.allocate('D');
      CharBuffer charBuffer8 = CharBuffer.allocate('`');
      charBuffer2.get();
      CharBuffer charBuffer9 = CharBuffer.allocate('`');
      charBuffer9.chars();
      charBuffer6.flip();
      CharBuffer.allocate('D');
      charBuffer7.flip();
      CharBuffer.allocate('`');
      charBuffer8.mark();
      CharBuffer.allocate('`');
      CharBuffer.allocate(0);
      CharBuffer.allocate(8);
      charBuffer2.charAt(1);
      charBuffer1.flip();
      jSTerm0.add((Object) "not");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(c8s] /}%LZws5v`o4u<");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      stringReader0.markSupported();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(0, (-26796121));
      streamTokenizer0.ordinaryChars(61, 0);
      streamTokenizer0.quoteChar((-26796121));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-26796121), (-470));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.sval = "not";
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-198));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.wordChars((-739), (-739));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.commentChar(99);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer0.quoteChar(39);
      streamTokenizer0.ordinaryChars((-736), (-739));
      jSTerm0.add((Object) "not");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1316L));
      System.setCurrentTimeMillis((-3453L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(85);
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis((-940L));
      System.setCurrentTimeMillis((-813L));
      System.setCurrentTimeMillis((-813L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-807L));
      System.setCurrentTimeMillis((-508L));
      System.setCurrentTimeMillis((-508L));
      System.setCurrentTimeMillis(2212L);
      System.setCurrentTimeMillis((-940L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) "not");
      charBuffer0.mark();
      charBuffer0.codePoints();
      CharBuffer charBuffer3 = charBuffer0.append('D');
      charBuffer3.codePoints();
      CharBuffer charBuffer4 = charBuffer0.put('D');
      charBuffer3.mark();
      CharBuffer charBuffer5 = charBuffer4.slice();
      charBuffer5.put('`');
      charBuffer0.duplicate();
      charBuffer5.duplicate();
      charBuffer2.get();
      charBuffer0.put("not");
      charBuffer2.codePoints();
      charBuffer3.flip();
      charBuffer0.clear();
      charBuffer2.append((CharSequence) "not");
      charBuffer0.compact();
      charBuffer0.codePoints();
      charBuffer2.slice();
      CharBuffer.allocate(0);
      charBuffer2.charAt(1);
      charBuffer1.flip();
      jSTerm0.add((Object) "not");
      System.setCurrentTimeMillis((-928L));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9893921626120288
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "nss");
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super JSTerm, ?>) unaryOperator0);
      unaryOperator2.apply(unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer0 = new Integer(39);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      Integer integer1 = new Integer(39);
      unaryOperator5.apply(integer1);
      unaryOperator5.apply(integer0);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator7.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator6.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator4.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator4.compose((Function<? super Object, ? extends String>) function1);
      function3.andThen((Function<? super String, ?>) unaryOperator6);
      unaryOperator7.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator4.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator5.andThen((Function<? super Integer, ? extends String>) function4);
      jSTerm0.clonePF();
      Function.identity();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) "not");
      charBuffer0.clear();
      charBuffer0.codePoints();
      CharBuffer charBuffer3 = charBuffer0.append('D');
      charBuffer3.codePoints();
      CharBuffer charBuffer4 = charBuffer0.put('D');
      charBuffer1.mark();
      charBuffer3.get(0);
      CharBuffer charBuffer5 = charBuffer4.slice();
      CharBuffer charBuffer6 = CharBuffer.allocate('D');
      CharBuffer charBuffer7 = charBuffer5.put('`');
      CharBuffer.allocate('D');
      CharBuffer charBuffer8 = charBuffer5.duplicate();
      charBuffer2.get();
      charBuffer3.chars();
      charBuffer6.flip();
      charBuffer5.subSequence(0, 0);
      charBuffer7.flip();
      CharBuffer.allocate('`');
      charBuffer8.mark();
      CharBuffer.allocate('`');
      CharBuffer.allocate(0);
      CharBuffer.allocate(8);
      charBuffer2.charAt(1);
      charBuffer1.flip();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChar((-1));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      streamTokenizer0.sval = "not";
      objectArray0[3] = (Object) streamTokenizer0;
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "not";
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), 872);
      stringReader0.skip((-1));
      streamTokenizer0.ttype = (int) '{';
      streamTokenizer0.resetSyntax();
      objectArray0[1] = (Object) '{';
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars(123, 123);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.nextToken();
      streamTokenizer0.sval = "UI^b6";
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-1994666487), (-1994666487));
      streamTokenizer0.wordChars((-1), 776);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars(1, 776);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "not";
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars(776, (-4));
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-267));
      JSJshopVars.rightBrac = 93;
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(801L);
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-1984L));
      jSPredicateForm0.addElement("CT>C{0bB./jY$mT'IT:");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(801L);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(120);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis((-357L));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(120);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-357L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-357L));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1984L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(801L);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1051L));
      System.setCurrentTimeMillis((-2249L));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(1492L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(801L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1984L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(801L);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 93;
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-1), 776);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars(0, 0);
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars(776, (-4));
      streamTokenizer0.sval = "not";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      StringReader stringReader1 = new StringReader("not");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-3), 10);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.wordChars((-4), 776);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.commentChar((-1719395605));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars(776, (-18643764));
      jSTerm0.add((Object) streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1458L);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-4042L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-93L));
      System.setCurrentTimeMillis(3010L);
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis((-940L));
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-93L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-93L));
      System.setCurrentTimeMillis(1132L);
      System.setCurrentTimeMillis(93);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("noQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm0);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-357), 766);
      streamTokenizer0.sval = "noQ";
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "noQ";
      streamTokenizer0.ordinaryChars(766, 0);
      streamTokenizer0.sval = "noQ";
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-1446541840), (-357));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm0.add((Object) "noQ");
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis((-2926L));
      System.setCurrentTimeMillis((-4042L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-93L));
      System.setCurrentTimeMillis(3010L);
      System.setCurrentTimeMillis((-275));
      System.setCurrentTimeMillis((-940L));
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(1453L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(c8s] /}%LZs5v`o4u<");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2641, (-1113351536));
      streamTokenizer0.slashSlashComments(true);
      stringReader0.close();
      stringReader0.markSupported();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.quoteChar(168);
      streamTokenizer1.ordinaryChar(168);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.slashSlashComments(false);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(120);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(120);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-267));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1492L);
      System.setCurrentTimeMillis(801L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1984L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(801L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1051L));
      System.setCurrentTimeMillis((-2249L));
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer1 = charBuffer0.append((CharSequence) "not");
      charBuffer0.clear();
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = charBuffer0.append('D');
      charBuffer2.codePoints();
      CharBuffer charBuffer3 = charBuffer0.put('D');
      charBuffer2.mark();
      charBuffer2.get(0);
      CharBuffer charBuffer4 = charBuffer3.slice();
      CharBuffer.wrap(charArray0);
      charBuffer4.put('`');
      charBuffer0.duplicate();
      CharBuffer charBuffer5 = charBuffer4.duplicate();
      charBuffer1.get();
      charBuffer0.put("not");
      charBuffer1.codePoints();
      charBuffer2.clear();
      charBuffer4.subSequence(0, 0);
      charBuffer0.clear();
      charBuffer1.append((CharSequence) "not");
      charBuffer5.mark();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) "not");
      charBuffer0.mark();
      charBuffer0.codePoints();
      CharBuffer charBuffer3 = charBuffer0.append('D');
      charBuffer3.codePoints();
      charBuffer0.put('D');
      charBuffer3.mark();
      CharBuffer charBuffer4 = charBuffer3.slice();
      charBuffer4.put('`');
      charBuffer0.duplicate();
      charBuffer4.duplicate();
      charBuffer2.get();
      charBuffer0.put("not");
      charBuffer2.codePoints();
      charBuffer4.rewind();
      charBuffer2.rewind();
      charBuffer0.clear();
      charBuffer2.append((CharSequence) "not");
      charBuffer0.compact();
      charBuffer2.slice();
      CharBuffer.allocate(0);
      charBuffer2.charAt(1);
      charBuffer1.flip();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("nss");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("({F}fGX,u0r8+wbCH~");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis((-3453L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis(1026L);
      System.setCurrentTimeMillis((-940L));
      System.setCurrentTimeMillis((-813L));
      System.setCurrentTimeMillis((-813L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-807L));
      System.setCurrentTimeMillis((-508L));
      System.setCurrentTimeMillis((-508L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-940L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
