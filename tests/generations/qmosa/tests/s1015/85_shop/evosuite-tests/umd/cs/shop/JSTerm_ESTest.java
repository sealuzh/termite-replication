/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 07:03:00 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      jSTerm0.add((Object) unaryOperator1);
      jSTerm0.addElement(function0);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator3);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/1954061977 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.w<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer3.parseNumbers();
      stringReader0.ready();
      streamTokenizer3.whitespaceChars((-867), (-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer4.pushBack();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer2.nval = 0.0;
      streamTokenizer4.parseNumbers();
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer3.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.7<)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChar(33);
      streamTokenizer0.ordinaryChars(33, 33);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.548934357129456
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(.w<)4");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.nextToken();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("(.w<)4");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.nval = 0.0;
      stringReader2.skip((-2));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.pushBack();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(. w< nil )", stringBuffer0.toString());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertEquals("[., [w<], [nil]]", jSTerm3.toString());
      assertEquals("[., [w<], [nil]]", jSTerm1.toString());
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8801177849050186
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.isGround();
      JSJshopVars.equalT = 2225;
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis((-964L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.minus = 16;
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.colon = 2225;
      System.setCurrentTimeMillis((-982L));
      System.setCurrentTimeMillis(2225);
      StringReader stringReader0 = new StringReader("AJ>mv}5flM+2K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.162997098280668
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer(124);
      Integer integer1 = new Integer(46);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Integer integer2 = new Integer(46);
      unaryOperator3.apply(integer2);
      jSTerm0.makeEval(true);
      Integer integer3 = new Integer(124);
      unaryOperator3.apply(integer3);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer(124);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator5);
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator0);
      Integer integer5 = new Integer(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) unaryOperator4);
      unaryOperator4.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(27L);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 927;
      JSJshopVars.percent = 927;
      jSTerm0.makeEval(true);
      JSJshopVars.coma = (-105);
      JSJshopVars.slash = (-105);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.332543210029658
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 1304;
      jSTerm0.add((Object) "call");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.lessT = (-30);
      JSTerm jSTerm2 = (JSTerm)unaryOperator0.apply(jSTerm1);
      jSTerm0.add((Object) jSTerm2);
      jSTerm0.isGround();
      JSJshopVars.apostrophe = (-30);
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      System.setCurrentTimeMillis(1499L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSSubstitution0.forEach((Consumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3525746772121234
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(A:w;949");
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(3508);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.apply(jSSubstitution1);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      function1.apply(jSTerm3);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) function2);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      function3.apply(jSTerm2);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator1.apply((Object) null);
      Integer integer0 = new Integer((-764));
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.setSize(3508);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5441310817026408
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      char[] charArray0 = new char[5];
      stringReader3.markSupported();
      charArray0[1] = '^';
      stringReader3.read(charArray0);
      charArray0[3] = '>';
      charArray0[4] = ' ';
      char[] charArray1 = new char[16];
      charArray1[0] = '^';
      charArray1[1] = ' ';
      charArray1[2] = ' ';
      charArray1[3] = '.';
      charArray1[4] = ' ';
      stringReader1.read(charArray1);
      stringReader1.read(charArray0);
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader5 = new StringReader("Gum");
      stringReader3.mark(5);
      stringReader5.read(charArray0);
      stringReader5.skip(29);
      stringReader5.ready();
      stringReader5.ready();
      stringReader2.ready();
      stringReader5.read();
      stringReader5.skip((-930L));
      stringReader5.mark(29);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader3);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3882884914639884
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "i;H\"a/STM?E<iG^.h[");
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(37);
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.cloneT();
      JSJshopVars.flagLevel = 37;
      jSSubstitution1.add((Object) "i;H\"a/STM?E<iG^.h[");
      StringReader stringReader0 = new StringReader("i;H\"a/STM?E<iG^.h[");
      jSSubstitution1.spliterator();
      StringReader stringReader1 = new StringReader("( ");
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'e';
      charArray0[2] = 'Y';
      charArray0[3] = 'd';
      charArray0[4] = 'Y';
      stringReader0.read(charArray0);
      long long0 = (-937L);
      stringReader0.skip(37);
      stringReader0.mark(5);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) "( ");
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7179634924100866
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cal");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      Integer integer0 = new Integer(1080);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer1 = new Integer(46);
      UnaryOperator.identity();
      Integer integer2 = new Integer(1080);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer3 = new Integer(1080);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.apply(integer1);
      jSTerm0.add((Object) null);
      unaryOperator2.apply(jSTerm0);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      jSTerm1.print();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertFalse(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3837752741848135
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(37);
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      jSTerm0.applySubstitutionT(jSSubstitution1);
      Integer integer0 = new Integer(37);
      UnaryOperator.identity();
      Integer integer1 = new Integer(37);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(37);
      Integer integer4 = new Integer(704);
      UnaryOperator.identity();
      Integer integer5 = new Integer(37);
      UnaryOperator.identity();
      Integer integer6 = new Integer(2432);
      JSTerm jSTerm2 = new JSTerm();
      Integer integer7 = new Integer((-2636));
      Integer integer8 = new Integer(38);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.toStr();
      assertEquals("[i;H\"a/STM?E<iG^.h[, [i;H\"a/STM?E<iG^.h[]]", jSTerm0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      jSTerm0.add((Object) unaryOperator2);
      jSTerm0.add((Object) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator3.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function1);
      Object object0 = unaryOperator0.apply(jSTerm0);
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/1446347144 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("%");
      StringReader stringReader5 = new StringReader(">m");
      stringReader5.mark(29);
      stringReader5.skip(0L);
      StringReader stringReader6 = new StringReader("XkcI8?1LHBI~");
      stringReader2.reset();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Fn>gOO-cA");
      jSTerm0.add((Object) stringReader6);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2392953605981414
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("rM 25rCL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.sort((Comparator) null);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wSOM[=^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      JSJshopVars.rightBrac = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.536062315080832
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.isGround();
      JSJshopVars.equalT = 2225;
      System.setCurrentTimeMillis((-964L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.colon = 2225;
      System.setCurrentTimeMillis((-982L));
      jSTerm0.isVariable();
      System.setCurrentTimeMillis(2225);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      jSTerm0.addElement(unaryOperator0);
      Function<Object, String> function4 = unaryOperator2.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator2.compose((Function<? super Object, ? extends String>) function4);
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator4.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function7 = unaryOperator4.compose((Function<? super Object, ? extends String>) function5);
      function3.apply(" TerD epec&e");
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function<Integer, Object> function8 = unaryOperator1.compose((Function<? super Integer, ?>) function7);
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function7);
      function1.apply(function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator5.apply(function6);
      Integer integer0 = new Integer(609);
      jSTerm0.add((Object) function3);
      jSTerm0.setSize(609);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$47/281749211 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.920839019711484
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.print();
      jSTerm2.equals(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.641823149655963
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ttype = (-1928);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.stream();
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.whiteSpace = 4122;
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      jSSubstitution2.add((Object) "Fn>gOO-cA");
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution5);
      JSJshopVars.rightPar = (-1928);
      JSJshopVars.exclamation = 4122;
      System.setCurrentTimeMillis(1L);
      jSTerm2.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41310641185356
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeElements(jSSubstitution1);
      jSSubstitution0.cloneS();
      jSSubstitution0.removeElements(jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.add((Object) "Fn>gOO-cA");
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis((-1));
      jSTerm0.isEval();
      jSTerm1.cloneT();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertTrue(jSTerm0.isVariable());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.75454320257361
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "T:vDv-");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(37);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.flagLevel = 37;
      jSSubstitution1.add((Object) "T:vDv-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertFalse(jSTerm1.isEval());
      
      jSTerm1.call();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution3));
      
      jSSubstitution4.setSize(37);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis(1447L);
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution3);
      JSJshopVars.minus = 37;
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      System.setCurrentTimeMillis(37);
      jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm1.matches(jSTerm2);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5688603433446962
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSSubstitution, ?>) function0);
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("%GX?wj%$~yMxBPAJ2");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0L;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3882884914639884
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      jSTerm0.add((Object) unaryOperator1);
      StringReader stringReader0 = new StringReader("W(`m^? Z~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.clear();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isFunction());
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer1);
      boolean boolean0 = jSTerm6.equals(jSTerm1);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(61);
      Integer integer1 = new Integer(61);
      Integer integer2 = new Integer(61);
      unaryOperator0.apply(integer1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer3 = new Integer((-3));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer(61);
      Integer integer5 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer6 = new Integer(61);
      SystemInUtil.addInputLine("vdc");
      Integer integer7 = new Integer((-2342));
      Integer integer8 = new Integer((-385));
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(503);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer((-713));
      UnaryOperator.identity();
      Integer integer3 = new Integer(503);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer((-1656));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer5 = new Integer(834);
      Integer integer6 = new Integer(43);
      Integer integer7 = new Integer(189);
      UnaryOperator.identity();
      Integer integer8 = new Integer(96);
      SystemInUtil.addInputLine("vdc");
      Integer integer9 = new Integer((-1610743646));
      JSTerm jSTerm0 = new JSTerm();
      Integer integer10 = new Integer((-1656));
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.018408935837768
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.w<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.pushBack();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer3.parseNumbers();
      stringReader0.ready();
      streamTokenizer3.whitespaceChars((-867), (-4));
      streamTokenizer1.slashStarComments(true);
      Integer integer0 = new Integer(33);
      Integer integer1 = new Integer((-4));
      UnaryOperator.identity();
      Integer integer2 = new Integer(65);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Integer integer3 = new Integer((-867));
      jSTerm0.add((Object) integer3);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1610874239));
      Integer integer2 = unaryOperator1.apply(integer1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer3 = new Integer((-3));
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(integer2);
      jSTerm0.add((Object) integer0);
      UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      Integer integer4 = new Integer((-2));
      jSTerm0.add((Object) integer4);
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7269264344903847
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.setSize(693);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution2.add(object0);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm4, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/1446347144 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.719047366378858
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3955);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      SystemInUtil.addInputLine("g>z");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.isEmpty();
      JSTerm jSTerm4 = jSTerm2.call();
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      
      System.setCurrentTimeMillis((-1184L));
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm5.isGround();
      JSTerm jSTerm6 = jSTerm3.call();
      assertFalse(jSTerm6.isFunction());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSTerm3.matches(jSTerm5, jSSubstitution3);
      assertFalse(jSSubstitution5.fail());
      assertNotSame(jSSubstitution3, jSSubstitution5);
      
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm5.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm8 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm9 = jSTerm8.call();
      jSTerm9.isGround();
      jSTerm5.applySubstitutionT(jSSubstitution1);
      boolean boolean0 = jSTerm5.isGround();
      assertFalse(jSTerm5.isVariable());
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 3955;
      jSTerm0.setSize(3955);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution1);
      jSSubstitution3.cloneS();
      jSSubstitution3.removeElements(jSSubstitution2);
      jSTerm0.setSize(123);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5878861544337055
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(37);
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.cloneT();
      JSJshopVars.flagLevel = 37;
      jSSubstitution1.add((Object) "i;H\"a/STM?E<iG^.h[");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.add((Object) "i;H\"a/STM?E<iG^.h[");
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSJshopVars.rightBrac = 37;
      SystemInUtil.addInputLine("8.0");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution4.addAll(37, (Collection) jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 37
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.681398187671395
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(37);
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.cloneT();
      JSJshopVars.flagLevel = 37;
      jSSubstitution1.add((Object) "i;H\"a/STM?E<iG^.h[");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSJshopVars.rightBrac = 37;
      SystemInUtil.addInputLine("8.0");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSSubstitution4.addAll(37, (Collection) jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 37
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.7<)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      JSJshopVars.greaterT = (-4);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashSlashComments(false);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("(~:w949");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.ordinaryChars(16, (-4));
      streamTokenizer1.quoteChar(3649);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(16);
      streamTokenizer2.nval = 0.0;
      streamTokenizer1.parseNumbers();
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nval = 0.0;
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.parseNumbers();
      streamTokenizer8.lowerCaseMode(false);
      streamTokenizer2.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.733285471041455
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cal");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      jSSubstitution0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(unaryOperator1);
      jSTerm2.add((Object) unaryOperator2);
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm1.size());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      assertTrue(jSTerm5.isConstant());
      assertEquals("[Predicateform.print(]", jSTerm3.toString());
      
      boolean boolean1 = jSTerm4.equals(jSTerm3);
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTerm4, jSTerm3);
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.712864703134745
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      int int0 = 37;
      jSSubstitution1.setSize(37);
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.makeVariable();
      jSTerm2.cloneT();
      JSJshopVars.flagLevel = 37;
      jSSubstitution1.add((Object) "i;H\"a/STM?E<iG^.h[");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      SystemInUtil.addInputLine("i;H\"a/STM?E<iG^.h[");
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSJshopVars.rightBrac = 37;
      SystemInUtil.addInputLine("8.0");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSSubstitution4.addAll(37, (Collection) jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 37
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.apply(jSTerm0);
      jSTerm0.add((Object) unaryOperator1);
      jSTerm0.setSize(1447);
      jSTerm0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7422767290484256
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(">{p?Wgh Dz+/");
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(.w<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader1 = new StringReader(")sJ7");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-2386));
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '3';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.slashSlashComments(true);
      StringReader stringReader2 = new StringReader(")sJ7");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer0.resetSyntax();
      stringReader2.ready();
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      streamTokenizer5.pushBack();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer5);
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5441310817026408
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      char[] charArray0 = new char[5];
      stringReader3.markSupported();
      charArray0[1] = '^';
      stringReader3.read(charArray0);
      charArray0[3] = '>';
      charArray0[4] = '.';
      char[] charArray1 = new char[17];
      charArray1[0] = '^';
      charArray1[1] = '.';
      charArray1[2] = '.';
      charArray1[3] = '.';
      charArray1[4] = '.';
      stringReader1.read(charArray1);
      stringReader1.read(charArray0);
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader5 = new StringReader("Gum");
      stringReader3.mark(5);
      stringReader5.read(charArray0);
      stringReader5.skip(29);
      stringReader5.ready();
      stringReader5.ready();
      stringReader2.ready();
      stringReader5.read();
      stringReader5.skip((-930L));
      stringReader5.mark(29);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader3);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(">{p?gh Dz+/");
      SystemInUtil.addInputLine(">{p?gh Dz+/");
      StringReader stringReader1 = new StringReader(". ");
      SystemInUtil.addInputLine(". ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.sval = ". ";
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-4), (-4));
      SystemInUtil.addInputLine(". ");
      SystemInUtil.addInputLine(";a`");
      stringReader0.skip((-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7884298452593717
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "call");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.listIterator();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isEmpty();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isFunction());
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      JSTerm jSTerm4 = jSTerm1.call();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm5 = jSTerm0.cloneT();
      jSTerm5.listIterator();
      JSTerm jSTerm6 = jSTerm5.standardizerTerm();
      boolean boolean2 = jSTerm5.isGround();
      assertTrue(boolean2 == boolean1);
      
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1019L));
      jSTerm1.isFunction();
      jSTerm6.standardizerTerm();
      assertTrue(jSTerm5.isFunction());
      assertTrue(jSTerm6.isFunction());
      
      JSTerm jSTerm7 = jSTerm4.standardizerTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertNotSame(jSTerm4, jSTerm7);
      assertFalse(jSTerm7.isEval());
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3955);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function3 = unaryOperator1.andThen((Function<? super Object, ?>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply(function3);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function4 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      unaryOperator2.apply(unaryOperator1);
      jSTerm0.add((Object) function4);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function4);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function5);
      jSTerm0.add((Object) unaryOperator0);
      UnaryOperator<JSSubstitution> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      UnaryOperator.identity();
      jSTerm0.add((Object) unaryOperator3);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/1446347144 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = function3.andThen((Function<? super String, ? extends Integer>) function5);
      Function<Object, String> function7 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function7);
      function3.compose((Function<? super String, ?>) unaryOperator1);
      function2.apply("w");
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      function6.compose((Function<? super String, ?>) function3);
      Function<Object, String> function9 = unaryOperator2.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      function8.apply("RY]D?X7B8#W)'CafHh/");
      function9.andThen((Function<? super String, ? extends Integer>) function6);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function10);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("%");
      StringReader stringReader5 = new StringReader(">m");
      stringReader5.mark(29);
      stringReader5.skip(0L);
      StringReader stringReader6 = new StringReader("XkcI8?1LHBI~");
      StringReader stringReader7 = new StringReader("XkcI8?1LHBI~");
      stringReader7.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader6);
      streamTokenizer0.whitespaceChars((-867), (-867));
      StringReader stringReader8 = new StringReader("k");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader8);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.pushBack();
      StringReader stringReader9 = new StringReader(">8");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader9);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader3);
      streamTokenizer2.parseNumbers();
      streamTokenizer1.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6253429250193925
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSSubstitution, ?>) function0);
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      Function<Object, JSTerm> function1 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function2 = unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super JSTerm, ? extends Integer>) function3);
      JSJshopVars.apostrophe = (-2174);
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertFalse(boolean0);
      
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm5, jSTerm3);
      
      JSTerm jSTerm6 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm6.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm6);
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.232026424989612
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(.w<)4");
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      SystemInUtil.addInputLine("xvI?");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.stream();
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer0 = new Integer((-713));
      Integer integer1 = new Integer((-713));
      Integer integer2 = new Integer((-3));
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Integer integer3 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer4 = new Integer((-1155));
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) unaryOperator1);
      Integer integer5 = new Integer((-713));
      Integer integer6 = new Integer((-3548));
      UnaryOperator.identity();
      Integer integer7 = new Integer((-1520));
      UnaryOperator.identity();
      Integer integer8 = new Integer((-1155));
      JSTerm jSTerm0 = new JSTerm();
      Integer integer9 = new Integer(3387);
      Integer integer10 = new Integer((-3548));
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) unaryOperator0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(16, stringBuffer0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.820049746700607
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(.w<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) "(.w<)4");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.makeVariable();
      jSSubstitution0.clear();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm3.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2n:`@8z~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(816, 0);
      streamTokenizer1.ordinaryChars(0, (-1608));
      streamTokenizer1.whitespaceChars(1197, 127);
      streamTokenizer2.quoteChar(1197);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(413);
      streamTokenizer3.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer4.parseNumbers();
      streamTokenizer1.commentChar((-4));
      stringReader0.ready();
      streamTokenizer4.quoteChar(2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer6);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      JSTerm jSTerm1 = (JSTerm)unaryOperator0.apply(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "Al~}nPpqA");
      jSTerm1.makeVariable();
      jSSubstitution0.clear();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(">{p?gh Dz+/");
      SystemInUtil.addInputLine(">{p?gh Dz+/");
      SystemInUtil.addInputLine(">{p?gh Dz+/");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), 32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer2.nval = 3108.78;
      streamTokenizer2.wordChars((-4), (-4));
      char[] charArray0 = new char[6];
      charArray0[3] = '3';
      streamTokenizer2.resetSyntax();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3171305909712787
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.dot = 124;
      jSTerm1.removeAllElements();
      JSJshopVars.leftPar = 124;
      JSTerm jSTerm2 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.27135488297627
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ttype = (-1928);
      streamTokenizer0.quoteChar((-1928));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(32, 50);
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.quoteChar(1622);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      stringReader0.read(charArray0);
      streamTokenizer1.slashSlashComments(true);
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      jSTerm0.isGround();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2309140779373315
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(.w<)4");
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      SystemInUtil.addInputLine("xvI?");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.stream();
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.718215518488187
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3955);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.isEmpty();
      JSTerm jSTerm4 = jSTerm2.call();
      assertEquals(1, jSTerm4.capacity());
      assertFalse(jSTerm4.isEval());
      
      System.setCurrentTimeMillis((-1184L));
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm5.isGround();
      jSTerm3.call();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSTerm3.matches(jSTerm5, jSSubstitution3);
      assertNotSame(jSSubstitution3, jSSubstitution5);
      assertFalse(jSSubstitution5.fail());
      
      JSTerm jSTerm6 = jSTerm3.call();
      assertFalse(jSTerm6.isFunction());
      
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm7 = jSTerm5.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm5);
      assertFalse(jSTerm7.isVariable());
      
      JSTerm jSTerm8 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm9 = jSTerm8.call();
      boolean boolean0 = jSTerm9.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7211920755823433
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.w<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.pushBack();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer3.parseNumbers();
      stringReader0.ready();
      streamTokenizer3.whitespaceChars((-867), (-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer4.pushBack();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer2.nval = 0.0;
      streamTokenizer4.parseNumbers();
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer3.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer4.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertEquals("[>, [w<]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.7<)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChar((-1310));
      streamTokenizer0.ordinaryChars((-1310), (-1310));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      stringReader0.read();
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8602694272780225
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer(124);
      Integer integer1 = new Integer(46);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Integer integer2 = new Integer(124);
      unaryOperator3.apply(integer2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer3 = new Integer(124);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator5);
      Integer integer4 = new Integer(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) unaryOperator4);
      unaryOperator4.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      StringReader stringReader0 = new StringReader("?<)T~K<F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-713));
      Integer integer1 = new Integer((-713));
      Integer integer2 = new Integer(40);
      UnaryOperator.identity();
      Integer integer3 = new Integer((-713));
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer((-713));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer5 = new Integer((-713));
      Integer integer6 = new Integer(40);
      Integer integer7 = new Integer(2);
      UnaryOperator.identity();
      Integer integer8 = new Integer(96);
      SystemInUtil.addInputLine("vdc");
      Integer integer9 = new Integer(632);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer10 = new Integer((-713));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      StringReader stringReader2 = new StringReader("Fn>gOO-cA");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("Fn>gOO-cA");
      StringReader stringReader5 = new StringReader(">m");
      stringReader5.skip((-937L));
      stringReader5.mark(29);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.add((Object) stringReader3);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.semicolon = 9;
      boolean boolean1 = jSTerm1.isVariable();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(:w;149");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.commentChar((-3));
      streamTokenizer1.ordinaryChars((-3), (-4));
      streamTokenizer0.wordChars((-4), (-1611651207));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-3));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-1611651207));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = (-3811);
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A:w;949");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.ordinaryChars(16, (-4));
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(16);
      streamTokenizer2.nval = 0.0;
      streamTokenizer1.parseNumbers();
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.whitespaceChars(16, 3956);
      streamTokenizer1.resetSyntax();
      streamTokenizer3.parseNumbers();
      streamTokenizer3.ordinaryChar(1);
      streamTokenizer3.nval = 0.0;
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars(517, 92);
      streamTokenizer5.slashStarComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(421);
      Integer integer1 = new Integer(39);
      Integer integer2 = new Integer((-576));
      unaryOperator0.apply(integer2);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer3 = new Integer(61);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) unaryOperator1);
      Integer integer4 = new Integer(61);
      Integer integer5 = new Integer(421);
      unaryOperator2.apply(integer5);
      UnaryOperator.identity();
      Integer integer6 = new Integer(58);
      StringReader stringReader0 = new StringReader("?N& m4F<[Jljx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) integer1);
      jSTerm0.print();
      assertEquals("[?N, 39]", jSTerm0.toString());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      StringReader stringReader2 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      char[] charArray0 = new char[5];
      stringReader3.markSupported();
      charArray0[1] = '^';
      stringReader3.read(charArray0);
      charArray0[3] = '>';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      charArray1[0] = '^';
      charArray1[1] = '.';
      charArray1[2] = '.';
      charArray1[4] = '.';
      stringReader1.read(charArray1);
      stringReader1.read(charArray0);
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader5 = new StringReader("Gum");
      stringReader3.mark(5);
      stringReader5.read(charArray0);
      stringReader5.skip(29);
      stringReader5.ready();
      stringReader5.ready();
      stringReader5.ready();
      stringReader5.read();
      stringReader5.skip((-930L));
      stringReader5.mark(29);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(:w;149");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-4), (-1611651207));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.quoteChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.ordinaryChars((-3), (-4));
      streamTokenizer3.wordChars((-4), (-1611651207));
      streamTokenizer1.commentChar((-4));
      streamTokenizer3.whitespaceChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer3.whitespaceChars(1241, (-4));
      streamTokenizer0.quoteChar(431);
      streamTokenizer3.commentChar(1542);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.whitespaceChars((-4), 1542);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-713));
      Integer integer1 = new Integer((-713));
      Integer integer2 = new Integer((-3));
      UnaryOperator.identity();
      Integer integer3 = new Integer((-713));
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer((-713));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer5 = new Integer(61);
      Integer integer6 = new Integer(61);
      Integer integer7 = new Integer(61);
      UnaryOperator.identity();
      Integer integer8 = new Integer(96);
      SystemInUtil.addInputLine("vdc");
      Integer integer9 = new Integer((-2069));
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("vdc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.7<)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      stringReader0.reset();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChar((-1310));
      stringReader0.close();
      streamTokenizer0.ordinaryChars((-1310), (-1310));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fn>gOO-cA");
      StringReader stringReader1 = new StringReader("Fn>gOO-cA");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("Fn>gOO-cA");
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("call");
      StringReader stringReader5 = new StringReader(">m");
      stringReader5.mark(45);
      long long0 = 0L;
      stringReader5.skip(0L);
      StringReader stringReader6 = new StringReader("%%,0%5D$FCn4F`Kfm");
      stringReader2.reset();
      int int0 = 534;
      JSTerm jSTerm0 = new JSTerm();
      int int1 = 40;
      jSTerm0.setSize(40);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(:w;149");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1611651207));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-3), (-4));
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'H';
      charArray0[2] = '@';
      charArray0[3] = 'E';
      charArray0[4] = 'T';
      charArray0[5] = 'M';
      charArray0[6] = '[';
      charArray0[7] = 'v';
      charArray0[8] = 'Q';
      stringReader0.read(charArray0);
      streamTokenizer0.wordChars((-4), (-1611651207));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.quoteChar((-2));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-1611651207));
      streamTokenizer0.ordinaryChars((-4), (-4));
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w(`m?");
      StringReader stringReader1 = new StringReader("w(`m?");
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader3 = new StringReader("w(`m?");
      char[] charArray0 = new char[5];
      stringReader3.markSupported();
      charArray0[1] = '^';
      stringReader3.read(charArray0);
      charArray0[3] = '`';
      charArray0[4] = '.';
      char[] charArray1 = new char[17];
      charArray1[0] = '^';
      charArray1[1] = '.';
      charArray1[2] = '.';
      charArray1[3] = '9';
      charArray1[4] = '.';
      stringReader1.read(charArray1);
      stringReader1.read(charArray0);
      stringReader3.ready();
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("'!.cn|O:TG}]8T}eU");
      StringReader stringReader5 = new StringReader("Gum");
      stringReader3.mark(5);
      stringReader5.read(charArray0);
      stringReader5.skip(29);
      stringReader5.ready();
      stringReader5.ready();
      stringReader2.ready();
      stringReader5.read();
      stringReader5.skip((-930L));
      stringReader5.mark(29);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader3);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      boolean boolean0 = jSTerm1.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0512005747025386
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("qq)+)\"KE'(Lsb!=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.whitespaceChars(124, 42);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(124);
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars(99, (-2));
      streamTokenizer3.wordChars((-2467), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer2.commentChar((-2467));
      streamTokenizer0.ordinaryChars(42, (-4));
      stringReader0.ready();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer4);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(61);
      Integer integer1 = new Integer(61);
      Integer integer2 = new Integer(61);
      unaryOperator0.apply(integer1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer3 = new Integer((-3));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer(45);
      Integer integer5 = new Integer(45);
      UnaryOperator.identity();
      Integer integer6 = new Integer(61);
      SystemInUtil.addInputLine("vdc");
      Integer integer7 = new Integer((-2347));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSJshopVars.greaterT = (-2);
      SystemInUtil.addInputLine(";l!t*oeY!bHnsLz");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3972);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm0.isConstant();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution4 = jSSubstitution1.cloneS();
      jSSubstitution3.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis((-258L));
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      System.setCurrentTimeMillis(3972);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 3972, 3972);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(:w;149");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.commentChar((-3));
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.wordChars((-4), (-1611651207));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.commentChar((-3));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = 1;
      streamTokenizer0.parseNumbers();
      streamTokenizer0.quoteChar(1);
      streamTokenizer0.commentChar(1);
      streamTokenizer0.ordinaryChars(1, (-1611651207));
      streamTokenizer0.ordinaryChars(1, 1);
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(K^;19");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      function2.compose((Function<? super Integer, ?>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function.identity();
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = function6.andThen((Function<? super String, ? extends Integer>) function7);
      function5.apply(function4);
      Function<Object, String> function9 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      function4.compose((Function<? super String, ?>) function5);
      Function.identity();
      Function<String, String> function10 = Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, Integer> function11 = function8.compose((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function12 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function13 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      function10.andThen((Function<? super String, ?>) function13);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function14 = unaryOperator3.compose((Function<? super Object, ? extends String>) function12);
      function9.apply(function10);
      function6.andThen((Function<? super String, ? extends Integer>) function11);
      function9.apply(function11);
      function14.andThen((Function<? super String, ? extends Integer>) function11);
      UnaryOperator.identity();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(.7<)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      JSJshopVars.greaterT = (-2);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      SystemInUtil.addInputLine("(.7<)");
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChar(33);
      streamTokenizer0.ordinaryChars(33, 33);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 3961;
      jSTerm0.setSize(3961);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSSubstitution3.listIterator();
      jSSubstitution3.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.cloneS();
      jSSubstitution3.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 3961;
      jSTerm0.setSize(3961);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSSubstitution3.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.cloneS();
      jSSubstitution3.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-713));
      Integer integer1 = new Integer((-713));
      Integer integer2 = new Integer(40);
      UnaryOperator.identity();
      Integer integer3 = new Integer((-713));
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer4 = new Integer((-713));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer5 = new Integer((-713));
      Integer integer6 = new Integer((-1610743646));
      Integer integer7 = new Integer(2);
      UnaryOperator.identity();
      Integer integer8 = new Integer(96);
      SystemInUtil.addInputLine("vdc");
      Integer integer9 = new Integer(632);
      Integer integer10 = new Integer((-1610743646));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SystemInUtil.addInputLine(">oO$9\u0000-X{");
      SystemInUtil.addInputLine("}J0Zf$f7`YH;*>");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
